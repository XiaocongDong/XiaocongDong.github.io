{"pages":[{"title":"about","text":"姓名：董小聪来自：广东省职业：软件工程师理想：成为一个Engineer","link":"/about/index.html"}],"posts":[{"title":"详解ECMAScript2019/ES10新属性","text":"每年都有一些新的属性进入ECMA262标准，今年发布的ECMAScript2019/ES10同样也有很多新的特性，本文将会挑选一些普通开发者会用到的新属性进行深入的解读。 Array.prototype.flat() The flat() method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth. – MDN 简单来说flat这个函数就是按照一定的深度depth将一个深层次嵌套的数组拍扁, 例子: 1const nestedArr = [1, 2, [3, 4, [5, 6, [7, [8], 9]]], 10]2console.log(nestedArr.flat())3// [1, 2, 3, 4, [5, 6, [7, [8], 9]], 10]4console.log(nestedArr.flat(2))5// [1, 2, 3, 4, 5, 6, [7, [8], 9], 10]6console.log(nestedArr.flat(3))7// [1, 2, 3, 4, 5, 6, 7, [8], 9, 10]8console.log(nestedArr.flat(4))9// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]10console.log(nestedArr.flat(Infinity))11// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 由上面的例子可以看出flat会按照指定的深度depth将一个数组扁平化，如果需要将数组完全拍扁变成一维数组，则指定depth为无限大，即是Infinity，相反如果不指定深度，其默认值是1。 Array.prototype.flatMap() The flatMap() method first maps each element using a mapping function, then flattens the result into a new array. It is identical to a map() followed by a flat() of depth 1, but flatMap() is often quite useful, as merging both into one method is slightly more efficient. – MDN 简单来说flatMap等于一个数组先调用完map函数再调用flat函数将其扁平化，扁平化的深度固定为1，先通过一个简单的例子感受一下: 1const myArr = [1, 2, 3]2myArr3 .map(n =&gt; [n * n]) // [[1], [4], [9]]4 .flat() // [1, 4, 9]56// 用flatMap可以一步到位7myArr.flatMap(n =&gt; [n * n]) // [1, 4, 9] 从上面的例子来看flatMap如果只是将flat和map做了一个简单的组合好像可有可无，其实不然，flatMap有个强大的功能是可以在map的时候添加和删除元素，这个无论是map还是filter都没有这个功能。 要想删除某一个元素只需要在mapper函数里面返回一个空的数组[], 而增加元素只需在mapper函数里面返回一个长度大于1的数组，具体可以看下面的例子： 1// 假如我们想要删除掉原数组里面所有的负数，同时将单数转换为一个复数和12const a = [5, 4, -3, 20, 17, -33, -4, 18]3// |\\ \\ x | | \\ x x |4// [4,1, 4, 20, 16,1, 18]5a.flatMap(n =&gt;6 (n &lt; 0) ? []: // 删除负数7 (n % 2 == 0) ? [n] : // 保留复数8 [n - 1, 1] // 单数变为一个复数和19)10// [4, 1, 4, 20, 20, 16, 1, 18] Object.fromEntries() The Object.fromEntries() method transforms a list of key-value pairs into an object. – MDN fromEntries方法将一个iterable对象返回的一系列键值对(key-value pairs)转换为一个object。先看一个简单的例子理解一下: 1// key-value pairs数组2const entriesArr = [['k1', 1], ['k2', 2]]3console.log(Object.fromEntries(entriesArr)4// {k1: 1, k2: 2}56const entriesMap = new Map([7 ['k1', 1],8 ['k2', 2]9]) // {\"k1\" =&gt; 1, \"k2\" =&gt; 2}10console.log(Object.fromEntries(entriesMap))11// {k1: 1, k2: 2} 再来看一个自定义的iterable对象例子深入理解一下: 1const iteratorObj = {2 [Symbol.iterator]: function () {3 const entries = [['k1', 1], ['k2', 2]]4 let cursor = 056 return {7 next() {8 const done = entries.length === cursor9 10 return {11 value: done ? undefined : entries[cursor++],12 done13 }14 }15 }16 }17}18Object.fromEntries(iteratorObj) // {k1: 1, k2: 2} 这个方法有一个用途就是对object的key进行filter，举个例子: 1const studentMap = {2 student1: {grade: 80},3 student2: {grade: 50},4 student3: {grade: 100}5}6const goodStudentMap = Object.fromEntries(7 Object8 .entries(studentMap)9 .filter(([_, meta]) =&gt; meta.grade &gt;= 60)10)11console.log(goodStudentMap)12// {student1: {grade: 80}, student3: {grade: 100}} String.prototype.trimStart这个方法很简单，就是返回一个将原字符串开头的空格字符去掉的新的字符串，例子: 1const greeting = ' Hello world! '2console.log(greeting.trimStart())3// 'Hello world! ' 这个方法还有一个别名函数，叫做trimLeft，它们具有一样的功能。 String.prototype.trimEnd这个方法和trimStart类似，只不过是将原字符串结尾的空格字符去掉，例子: 1const greeting = ' Hello world! '2console.log(greeting.trimEnd())3// ' Hello world!' 这个方法也有一个别名函数，叫做trimRight, 它们也具有一样的功能。 Symbol.prototype.description The read-only description property is a string returning the optional description of Symbol objects. – MDN ECMAScript2019给Symbol对象添加了一个可选的description属性，这个属性是个只读属性，看看例子: 1console.log(Symbol('desc').description)2// desc3console.log(Symbol.for('desc').description)4// desc56// 一些内置的Symbol也有这个属性7console.log(Symbol.iterator.description)8// Symbol.iterator910// 如果初始化时没有带description，这个属性会返回一个undefined，因为这样才说这个属性是可选的11console.log(Symbol().description)12// undefined1314// 这个属性是只读的，不能被设置15Symbol.iterator.description = 'mess it'16console.log(Symbol.iterator.description)17// Symbol.iterator 这个新的属性只要是为了方便开发者调试，不能通过比较两个Symbol对象的description来确定这两个Symbol是不是同一个Symbol: 1var s1 = Symbol(\"desc\")2var s2 = Symbol(\"desc\")3console.log(s1.description === s2.description)4// true5console.log(s1 === s2)6// false try catch optional bindingECMAScript2019之后，你写try…catch时如果没必要时可以不用声明error： 1// ECMAScript2019之前，你一定要在catch里面声明error，否则会报错2try {3 ...4} catch (error) {56}7// 可是有时候，你确实用不到这个error对象，于是你会写这样的代码8try {9 ...10} catch (_) {11 ...12}1314// ECMAScript2019后，你可以直接这样写了15try {16 ...17} catch {18 ...19} 虽然这个新属性可以让你省略掉error，可是我觉得开发者应该避免使用这个属性，因为在我看来所有的错误都应该被处理，至少应该被console.error出来，否则可能会有一些潜在的bug，举个例子： 1let testJSONObj2try {3 testJSONObj = JSON.prase(testStr)4} catch {5 testJSONObj = {}6}7console.log(testJSONObj) 以上代码中无论testStr是不是一个合法的JSON字符串，testJSONObj永远都是一个空对象，因为JSON.parse函数名写错了，而你又忽略了错误处理，所以你永远不会知道这个typo。 稳定的排序 Array.sortECMAScript2019后Array.sort一定是个稳定的排序。什么是稳定排序？所谓的稳定排序就是：假如没排序之前有两个相同数值的元素a[i]和a[j]，而且i在j前面，即i &lt; j，经过排序后元素a[i]依然排在a[j]元素的前面，也就是说稳定的排序不会改变原来数组里面相同数值的元素的先后关系。看个例子： 1var users = [2 {name: 'Sean', rating: 14},3 {name: 'Ken', rating: 14},4 {name: 'Jeremy', rating: 13}5]6users.sort((a, b) =&gt; a.rating - b.rating)7// 非稳定的排序结果可能是8// [9// {name: 'Jeremy', rating: 13}, 10// {name: 'Ken', rating: 14}, 11// {name: 'Sean', rating: 14}12// ]13// 虽然Sean和Ken具有同样的rating，可是非稳定的排序不能保证他们两个的顺序在排序后保持不变1415// ECMAScript2019后，Array.sort将是一个稳定的排序，也就是说它可以保证Sean和Ken两个人的顺序在排序后不变16// [17// {name: 'Jeremy', rating: 13}, 18// {name: 'Sean', rating: 14}, 19// {name: 'Ken', rating: 14}20// ] 改进Function.prototype.toString()ECMAScript2019之前，调用function的toString方法会将方法体里面的空格字符省略掉，例如: 1function hello() {2 console.log('hello word')3}45console.log(hello.toString())6//'function hello() {\\nconsole.log('hello word')\\n}' ECMAScript2019之后，要求一定要返回函数源代码（保留空格字符）或者一个标准的占位符例如native code，所以ECMAScript2019之后，以上的输出会变为： 1console.log(hello.toString())2//\"function hello() {3// console.log('hello word')4//}\"","link":"/2019/12/05/ECMAScript2019-ES10%E6%96%B0%E5%B1%9E%E6%80%A7/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"ECMAScript","slug":"ECMAScript","link":"/tags/ECMAScript/"},{"name":"2019","slug":"2019","link":"/tags/2019/"}],"categories":[{"name":"JavaScript","slug":"JavaScript","link":"/categories/JavaScript/"}]}