{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/gopherjs.png","path":"images/gopherjs.png","modified":1,"renderable":0},{"_id":"source/images/wechat_qr.jpg","path":"images/wechat_qr.jpg","modified":1,"renderable":0},{"_id":"source/gallery/thumbnails/css-in-js.png","path":"gallery/thumbnails/css-in-js.png","modified":1,"renderable":0},{"_id":"source/gallery/thumbnails/gatsby.jpg","path":"gallery/thumbnails/gatsby.jpg","modified":1,"renderable":0},{"_id":"source/gallery/thumbnails/react-hook.jpg","path":"gallery/thumbnails/react-hook.jpg","modified":1,"renderable":0},{"_id":"source/gallery/thumbnails/simple-js.jpg","path":"gallery/thumbnails/simple-js.jpg","modified":1,"renderable":0},{"_id":"source/gallery/thumbnails/simple-js.png","path":"gallery/thumbnails/simple-js.png","modified":1,"renderable":0},{"_id":"source/gallery/thumbnails/yarn2.png","path":"gallery/thumbnails/yarn2.png","modified":1,"renderable":0},{"_id":"source/gallery/thumbnails/svelte_intro.png","path":"gallery/thumbnails/svelte_intro.png","modified":1,"renderable":0},{"_id":"source/images/chrome/coalescedevents.png","path":"images/chrome/coalescedevents.png","modified":1,"renderable":0},{"_id":"source/images/chrome/composit.png","path":"images/chrome/composit.png","modified":1,"renderable":0},{"_id":"source/images/chrome/computedstyle.png","path":"images/chrome/computedstyle.png","modified":1,"renderable":0},{"_id":"source/images/chrome/drawgame.png","path":"images/chrome/drawgame.png","modified":1,"renderable":0},{"_id":"source/images/chrome/getCoalescedEvents.png","path":"images/chrome/getCoalescedEvents.png","modified":1,"renderable":0},{"_id":"source/images/chrome/hittest.png","path":"images/chrome/hittest.png","modified":1,"renderable":0},{"_id":"source/images/chrome/input.png","path":"images/chrome/input.png","modified":1,"renderable":0},{"_id":"source/images/chrome/isolation.png","path":"images/chrome/isolation.png","modified":1,"renderable":0},{"_id":"source/images/chrome/layer.png","path":"images/chrome/layer.png","modified":1,"renderable":0},{"_id":"source/images/chrome/layout.png","path":"images/chrome/layout.png","modified":1,"renderable":0},{"_id":"source/images/chrome/nfsr1.png","path":"images/chrome/nfsr1.png","modified":1,"renderable":0},{"_id":"source/images/chrome/navstart.png","path":"images/chrome/navstart.png","modified":1,"renderable":0},{"_id":"source/images/chrome/pagejank2.png","path":"images/chrome/pagejank2.png","modified":1,"renderable":0},{"_id":"source/images/chrome/pagejank1.png","path":"images/chrome/pagejank1.png","modified":1,"renderable":0},{"_id":"source/images/chrome/paint.png","path":"images/chrome/paint.png","modified":1,"renderable":0},{"_id":"source/images/chrome/process-thread.png","path":"images/chrome/process-thread.png","modified":1,"renderable":0},{"_id":"source/images/chrome/raf.png","path":"images/chrome/raf.png","modified":1,"renderable":0},{"_id":"source/images/chrome/rawevents.png","path":"images/chrome/rawevents.png","modified":1,"renderable":0},{"_id":"source/images/chrome/renderer.png","path":"images/chrome/renderer.png","modified":1,"renderable":0},{"_id":"source/images/chrome/response.png","path":"images/chrome/response.png","modified":1,"renderable":0},{"_id":"source/images/chrome/scope_lookup.png","path":"images/chrome/scope_lookup.png","modified":1,"renderable":0},{"_id":"source/images/chrome/tellgame.png","path":"images/chrome/tellgame.png","modified":1,"renderable":0},{"_id":"source/images/console/assert.png","path":"images/console/assert.png","modified":1,"renderable":0},{"_id":"source/images/console/count.png","path":"images/console/count.png","modified":1,"renderable":0},{"_id":"source/images/console/css.png","path":"images/console/css.png","modified":1,"renderable":0},{"_id":"source/images/console/level.png","path":"images/console/level.png","modified":1,"renderable":0},{"_id":"source/images/console/string-substitution.png","path":"images/console/string-substitution.png","modified":1,"renderable":0},{"_id":"source/images/console/time.png","path":"images/console/time.png","modified":1,"renderable":0},{"_id":"source/images/css-in-js/above-the-fold.png","path":"images/css-in-js/above-the-fold.png","modified":1,"renderable":0},{"_id":"source/images/simple/architecture.png","path":"images/simple/architecture.png","modified":1,"renderable":0},{"_id":"source/images/simple/interpreter.jpg","path":"images/simple/interpreter.jpg","modified":1,"renderable":0},{"_id":"source/images/simple/mustache.png","path":"images/simple/mustache.png","modified":1,"renderable":0},{"_id":"source/images/simple/lexical-analysis.png","path":"images/simple/lexical-analysis.png","modified":1,"renderable":0},{"_id":"source/images/yarn2/add-interactive.png","path":"images/yarn2/add-interactive.png","modified":1,"renderable":0},{"_id":"source/images/yarn2/log.png","path":"images/yarn2/log.png","modified":1,"renderable":0},{"_id":"source/images/yarn2/version.png","path":"images/yarn2/version.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/index.html","path":"opensource/mongodb-backup-manager/index.html","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/package.json","path":"opensource/mongodb-backup-manager/package.json","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/postcss.config.js","path":"opensource/mongodb-backup-manager/postcss.config.js","modified":1,"renderable":0},{"_id":"source/opensource/simple/README.md","path":"opensource/simple/README.md","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/webpack.config.js","path":"opensource/mongodb-backup-manager/webpack.config.js","modified":1,"renderable":0},{"_id":"source/opensource/simple/config-overrides.js","path":"opensource/simple/config-overrides.js","modified":1,"renderable":0},{"_id":"source/opensource/simple/package.json","path":"opensource/simple/package.json","modified":1,"renderable":0},{"_id":"themes/icarus/source/css/back-to-top.css","path":"css/back-to-top.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/insight.css","path":"css/insight.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/progressbar.css","path":"css/progressbar.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/search.css","path":"css/search.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/favicon.svg","path":"images/favicon.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/thumbnail.svg","path":"images/thumbnail.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/gopherjs.png","path":"images/gopherjs.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/og_image.png","path":"images/og_image.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/back-to-top.js","path":"js/back-to-top.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"source/images/chrome/GPU.png","path":"images/chrome/GPU.png","modified":1,"renderable":0},{"_id":"source/images/chrome/CPU.png","path":"images/chrome/CPU.png","modified":1,"renderable":0},{"_id":"source/images/chrome/beforeunload.png","path":"images/chrome/beforeunload.png","modified":1,"renderable":0},{"_id":"source/images/chrome/browser-arch.png","path":"images/chrome/browser-arch.png","modified":1,"renderable":0},{"_id":"source/images/chrome/browser-arch2.png","path":"images/chrome/browser-arch2.png","modified":1,"renderable":0},{"_id":"source/images/chrome/browserprocesses.png","path":"images/chrome/browserprocesses.png","modified":1,"renderable":0},{"_id":"source/images/chrome/commit.png","path":"images/chrome/commit.png","modified":1,"renderable":0},{"_id":"source/images/chrome/browserui.png","path":"images/chrome/browserui.png","modified":1,"renderable":0},{"_id":"source/images/chrome/dom.png","path":"images/chrome/dom.png","modified":1,"renderable":0},{"_id":"source/images/chrome/findrenderer.png","path":"images/chrome/findrenderer.png","modified":1,"renderable":0},{"_id":"source/images/chrome/hw-os-app.png","path":"images/chrome/hw-os-app.png","modified":1,"renderable":0},{"_id":"source/images/chrome/input_event.png","path":"images/chrome/input_event.png","modified":1,"renderable":0},{"_id":"source/images/chrome/loaded.png","path":"images/chrome/loaded.png","modified":1,"renderable":0},{"_id":"source/images/chrome/memory.png","path":"images/chrome/memory.png","modified":1,"renderable":0},{"_id":"source/images/chrome/navpreload.png","path":"images/chrome/navpreload.png","modified":1,"renderable":0},{"_id":"source/images/chrome/nfsr2.png","path":"images/chrome/nfsr2.png","modified":1,"renderable":0},{"_id":"source/images/chrome/raster.png","path":"images/chrome/raster.png","modified":1,"renderable":0},{"_id":"source/images/chrome/rasterizing.gif","path":"images/chrome/rasterizing.gif","modified":1,"renderable":0},{"_id":"source/images/chrome/serviceworker.png","path":"images/chrome/serviceworker.png","modified":1,"renderable":0},{"_id":"source/images/chrome/servicfication.png","path":"images/chrome/servicfication.png","modified":1,"renderable":0},{"_id":"source/images/chrome/sniff.png","path":"images/chrome/sniff.png","modified":1,"renderable":0},{"_id":"source/images/chrome/tabs.png","path":"images/chrome/tabs.png","modified":1,"renderable":0},{"_id":"source/images/chrome/tabs.svg","path":"images/chrome/tabs.svg","modified":1,"renderable":0},{"_id":"source/images/chrome/tree.png","path":"images/chrome/tree.png","modified":1,"renderable":0},{"_id":"source/images/chrome/trees.gif","path":"images/chrome/trees.gif","modified":1,"renderable":0},{"_id":"source/images/chrome/unload.png","path":"images/chrome/unload.png","modified":1,"renderable":0},{"_id":"source/images/chrome/workerprocess.png","path":"images/chrome/workerprocess.png","modified":1,"renderable":0},{"_id":"source/images/chrome/zindex.png","path":"images/chrome/zindex.png","modified":1,"renderable":0},{"_id":"source/images/console/level-verbose.png","path":"images/console/level-verbose.png","modified":1,"renderable":0},{"_id":"source/images/console/table.png","path":"images/console/table.png","modified":1,"renderable":0},{"_id":"source/images/jamstack/demo-structure.png","path":"images/jamstack/demo-structure.png","modified":1,"renderable":0},{"_id":"source/images/jamstack/blog-structure.png","path":"images/jamstack/blog-structure.png","modified":1,"renderable":0},{"_id":"source/images/simple/bnf.png","path":"images/simple/bnf.png","modified":1,"renderable":0},{"_id":"source/images/svelte3-intro/bootstrap-structure.png","path":"images/svelte3-intro/bootstrap-structure.png","modified":1,"renderable":0},{"_id":"source/images/svelte3-intro/bundle-size.png","path":"images/svelte3-intro/bundle-size.png","modified":1,"renderable":0},{"_id":"source/images/svelte3-intro/bootstrap.png","path":"images/svelte3-intro/bootstrap.png","modified":1,"renderable":0},{"_id":"themes/icarus/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/Superman-js.jpg","path":"images/Superman-js.jpg","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/wechat_pay.jpg","path":"images/wechat_pay.jpg","modified":1,"renderable":1},{"_id":"source/images/chrome/devtool.png","path":"images/chrome/devtool.png","modified":1,"renderable":0},{"_id":"source/images/console/group.png","path":"images/console/group.png","modified":1,"renderable":0},{"_id":"source/images/console/label-count.png","path":"images/console/label-count.png","modified":1,"renderable":0},{"_id":"source/images/simple/fsm.png","path":"images/simple/fsm.png","modified":1,"renderable":0},{"_id":"source/images/simple/jquery.png","path":"images/simple/jquery.png","modified":1,"renderable":0},{"_id":"source/images/svelte3-intro/bookcard-props.png","path":"images/svelte3-intro/bookcard-props.png","modified":1,"renderable":0},{"_id":"source/images/svelte3-intro/bookcard-markup.png","path":"images/svelte3-intro/bookcard-markup.png","modified":1,"renderable":0},{"_id":"source/images/yarn2/berry-pnp.png","path":"images/yarn2/berry-pnp.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/css/style.css.map","path":"opensource/mongodb-backup-manager/css/style.css.map","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/css/style.css","path":"opensource/mongodb-backup-manager/css/style.css","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/app.js","path":"opensource/mongodb-backup-manager/src/app.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/index.html","path":"opensource/mongodb-backup-manager/src/index.html","modified":1,"renderable":0},{"_id":"source/opensource/simple/build/asset-manifest.json","path":"opensource/simple/build/asset-manifest.json","modified":1,"renderable":0},{"_id":"source/opensource/simple/build/favicon.ico","path":"opensource/simple/build/favicon.ico","modified":1,"renderable":0},{"_id":"source/opensource/simple/build/logo192.png","path":"opensource/simple/build/logo192.png","modified":1,"renderable":0},{"_id":"source/opensource/simple/build/index.html","path":"opensource/simple/build/index.html","modified":1,"renderable":0},{"_id":"source/opensource/simple/build/logo512.png","path":"opensource/simple/build/logo512.png","modified":1,"renderable":0},{"_id":"source/opensource/simple/build/manifest.json","path":"opensource/simple/build/manifest.json","modified":1,"renderable":0},{"_id":"source/opensource/simple/build/robots.txt","path":"opensource/simple/build/robots.txt","modified":1,"renderable":0},{"_id":"source/opensource/simple/build/precache-manifest.d9c606d6d37614a9a361b3c00ed12231.js","path":"opensource/simple/build/precache-manifest.d9c606d6d37614a9a361b3c00ed12231.js","modified":1,"renderable":0},{"_id":"source/opensource/simple/build/service-worker.js","path":"opensource/simple/build/service-worker.js","modified":1,"renderable":0},{"_id":"source/opensource/simple/public/logo192.png","path":"opensource/simple/public/logo192.png","modified":1,"renderable":0},{"_id":"source/opensource/simple/public/favicon.ico","path":"opensource/simple/public/favicon.ico","modified":1,"renderable":0},{"_id":"source/opensource/simple/public/logo512.png","path":"opensource/simple/public/logo512.png","modified":1,"renderable":0},{"_id":"source/opensource/simple/public/index.html","path":"opensource/simple/public/index.html","modified":1,"renderable":0},{"_id":"source/opensource/simple/public/robots.txt","path":"opensource/simple/public/robots.txt","modified":1,"renderable":0},{"_id":"source/opensource/simple/public/manifest.json","path":"opensource/simple/public/manifest.json","modified":1,"renderable":0},{"_id":"source/opensource/simple/src/App.css","path":"opensource/simple/src/App.css","modified":1,"renderable":0},{"_id":"source/opensource/simple/src/App.js","path":"opensource/simple/src/App.js","modified":1,"renderable":0},{"_id":"source/opensource/simple/src/App.test.js","path":"opensource/simple/src/App.test.js","modified":1,"renderable":0},{"_id":"source/opensource/simple/src/Code.js","path":"opensource/simple/src/Code.js","modified":1,"renderable":0},{"_id":"source/opensource/simple/src/index.css","path":"opensource/simple/src/index.css","modified":1,"renderable":0},{"_id":"source/opensource/simple/src/index.js","path":"opensource/simple/src/index.js","modified":1,"renderable":0},{"_id":"source/opensource/simple/src/logo.svg","path":"opensource/simple/src/logo.svg","modified":1,"renderable":0},{"_id":"source/opensource/simple/src/serviceWorker.js","path":"opensource/simple/src/serviceWorker.js","modified":1,"renderable":0},{"_id":"source/opensource/simple/src/setupTests.js","path":"opensource/simple/src/setupTests.js","modified":1,"renderable":0},{"_id":"source/opensource/simple/src/testCase.js","path":"opensource/simple/src/testCase.js","modified":1,"renderable":0},{"_id":"source/gallery/thumbnails/chrome.png","path":"gallery/thumbnails/chrome.png","modified":1,"renderable":0},{"_id":"source/images/console/trace.png","path":"images/console/trace.png","modified":1,"renderable":0},{"_id":"source/images/svelte3-intro/bookcard-css.png","path":"images/svelte3-intro/bookcard-css.png","modified":1,"renderable":0},{"_id":"source/images/chrome/memory.svg","path":"images/chrome/memory.svg","modified":1,"renderable":0},{"_id":"source/images/svelte3-intro/bookcard-book-input.png","path":"images/svelte3-intro/bookcard-book-input.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/Routes/routeMap.js","path":"opensource/mongodb-backup-manager/src/Routes/routeMap.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/utility/smoothscroll.js","path":"opensource/mongodb-backup-manager/src/utility/smoothscroll.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/sass/style.scss","path":"opensource/mongodb-backup-manager/src/sass/style.scss","modified":1,"renderable":0},{"_id":"source/images/chrome/workerprocess.svg","path":"images/chrome/workerprocess.svg","modified":1,"renderable":0},{"_id":"source/images/jamstack/build.png","path":"images/jamstack/build.png","modified":1,"renderable":0},{"_id":"source/images/simple/native.png","path":"images/simple/native.png","modified":1,"renderable":0},{"_id":"source/images/svelte3-intro/bootstrap-h1-css.png","path":"images/svelte3-intro/bootstrap-h1-css.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/static/img/new_review.png","path":"opensource/mongodb-backup-manager/static/img/new_review.png","modified":1,"renderable":0},{"_id":"source/images/react-hook/wrapper-hell.jpg","path":"images/react-hook/wrapper-hell.jpg","modified":1,"renderable":0},{"_id":"source/images/simple/english-sentence.png","path":"images/simple/english-sentence.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/GetStarted/index.js","path":"opensource/mongodb-backup-manager/src/components/GetStarted/index.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Header/MenuIcon.js","path":"opensource/mongodb-backup-manager/src/components/Header/MenuIcon.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/GetStarted/style.scss","path":"opensource/mongodb-backup-manager/src/components/GetStarted/style.scss","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Header/Logo.js","path":"opensource/mongodb-backup-manager/src/components/Header/Logo.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Header/index.js","path":"opensource/mongodb-backup-manager/src/components/Header/index.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Header/style.scss","path":"opensource/mongodb-backup-manager/src/components/Header/style.scss","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Header/Navigation.js","path":"opensource/mongodb-backup-manager/src/components/Header/Navigation.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Home/Section.js","path":"opensource/mongodb-backup-manager/src/components/Home/Section.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Home/index.js","path":"opensource/mongodb-backup-manager/src/components/Home/index.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Home/BackToTop.js","path":"opensource/mongodb-backup-manager/src/components/Home/BackToTop.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/SideBar.js","path":"opensource/mongodb-backup-manager/src/components/Docs/SideBar.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/data.js","path":"opensource/mongodb-backup-manager/src/components/Docs/data.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/authDoc.js","path":"opensource/mongodb-backup-manager/src/components/Docs/authDoc.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Home/style.scss","path":"opensource/mongodb-backup-manager/src/components/Home/style.scss","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/deleteDoc.js","path":"opensource/mongodb-backup-manager/src/components/Docs/deleteDoc.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/index.js","path":"opensource/mongodb-backup-manager/src/components/Docs/index.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/newDoc.js","path":"opensource/mongodb-backup-manager/src/components/Docs/newDoc.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/notificationsDoc.js","path":"opensource/mongodb-backup-manager/src/components/Docs/notificationsDoc.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/restoreDoc.js","path":"opensource/mongodb-backup-manager/src/components/Docs/restoreDoc.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/rolesDoc.js","path":"opensource/mongodb-backup-manager/src/components/Docs/rolesDoc.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/statisticsDoc.js","path":"opensource/mongodb-backup-manager/src/components/Docs/statisticsDoc.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/resumeDoc.js","path":"opensource/mongodb-backup-manager/src/components/Docs/resumeDoc.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/runDoc.js","path":"opensource/mongodb-backup-manager/src/components/Docs/runDoc.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/serverSetupDoc.js","path":"opensource/mongodb-backup-manager/src/components/Docs/serverSetupDoc.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/updateDoc.js","path":"opensource/mongodb-backup-manager/src/components/Docs/updateDoc.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/style.scss","path":"opensource/mongodb-backup-manager/src/components/Docs/style.scss","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/static/img/statistics.png","path":"opensource/mongodb-backup-manager/static/img/statistics.png","modified":1,"renderable":0},{"_id":"source/opensource/simple/build/static/js/2.f6114ee3.chunk.js.LICENSE.txt","path":"opensource/simple/build/static/js/2.f6114ee3.chunk.js.LICENSE.txt","modified":1,"renderable":0},{"_id":"source/opensource/simple/build/static/css/main.5f361e03.chunk.css","path":"opensource/simple/build/static/css/main.5f361e03.chunk.css","modified":1,"renderable":0},{"_id":"source/opensource/simple/build/static/css/main.5f361e03.chunk.css.map","path":"opensource/simple/build/static/css/main.5f361e03.chunk.css.map","modified":1,"renderable":0},{"_id":"source/opensource/simple/build/static/js/main.9d04a46a.chunk.js","path":"opensource/simple/build/static/js/main.9d04a46a.chunk.js","modified":1,"renderable":0},{"_id":"source/opensource/simple/build/static/js/runtime-main.e4d3d915.js","path":"opensource/simple/build/static/js/runtime-main.e4d3d915.js","modified":1,"renderable":0},{"_id":"source/images/chrome/composit.gif","path":"images/chrome/composit.gif","modified":1,"renderable":0},{"_id":"source/opensource/simple/build/static/js/main.9d04a46a.chunk.js.map","path":"opensource/simple/build/static/js/main.9d04a46a.chunk.js.map","modified":1,"renderable":0},{"_id":"source/images/chrome/servicfication.svg","path":"images/chrome/servicfication.svg","modified":1,"renderable":0},{"_id":"source/opensource/simple/build/static/js/runtime-main.e4d3d915.js.map","path":"opensource/simple/build/static/js/runtime-main.e4d3d915.js.map","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/new_review.png","path":"opensource/mongodb-backup-manager/src/static/img/new_review.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/static/img/new_config.png","path":"opensource/mongodb-backup-manager/static/img/new_config.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/static/img/new_credential.png","path":"opensource/mongodb-backup-manager/static/img/new_credential.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/static/img/new_history_conn.png","path":"opensource/mongodb-backup-manager/static/img/new_history_conn.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/static/img/resume.png","path":"opensource/mongodb-backup-manager/static/img/resume.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/static/img/run_backup.png","path":"opensource/mongodb-backup-manager/static/img/run_backup.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/static/img/stop.png","path":"opensource/mongodb-backup-manager/static/img/stop.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/static/img/delete_backup.png","path":"opensource/mongodb-backup-manager/static/img/delete_backup.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/static/img/new_config_wizard.png","path":"opensource/mongodb-backup-manager/static/img/new_config_wizard.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/static/img/retore_config.png","path":"opensource/mongodb-backup-manager/static/img/retore_config.png","modified":1,"renderable":0},{"_id":"source/opensource/simple/yarn.lock","path":"opensource/simple/yarn.lock","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/static/img/view_data.png","path":"opensource/mongodb-backup-manager/static/img/view_data.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/static/img/update_config.png","path":"opensource/mongodb-backup-manager/static/img/update_config.png","modified":1,"renderable":0},{"_id":"source/images/css-in-js/radium-form-css.png","path":"images/css-in-js/radium-form-css.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/new_config.png","path":"opensource/mongodb-backup-manager/src/static/img/new_config.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/new_credential.png","path":"opensource/mongodb-backup-manager/src/static/img/new_credential.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/new_history_conn.png","path":"opensource/mongodb-backup-manager/src/static/img/new_history_conn.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/resume.png","path":"opensource/mongodb-backup-manager/src/static/img/resume.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/stop.png","path":"opensource/mongodb-backup-manager/src/static/img/stop.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/statistics.png","path":"opensource/mongodb-backup-manager/src/static/img/statistics.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/static/img/dashboard.png","path":"opensource/mongodb-backup-manager/static/img/dashboard.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/view_data.png","path":"opensource/mongodb-backup-manager/src/static/img/view_data.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/dashboard.png","path":"opensource/mongodb-backup-manager/src/static/img/dashboard.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/delete_backup.png","path":"opensource/mongodb-backup-manager/src/static/img/delete_backup.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/new_config_wizard.png","path":"opensource/mongodb-backup-manager/src/static/img/new_config_wizard.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/retore_config.png","path":"opensource/mongodb-backup-manager/src/static/img/retore_config.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/run_backup.png","path":"opensource/mongodb-backup-manager/src/static/img/run_backup.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/update_config.png","path":"opensource/mongodb-backup-manager/src/static/img/update_config.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/static/img/notifications.png","path":"opensource/mongodb-backup-manager/static/img/notifications.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/databases.png","path":"opensource/mongodb-backup-manager/src/static/img/databases.png","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/static/img/databases.png","path":"opensource/mongodb-backup-manager/static/img/databases.png","modified":1,"renderable":0},{"_id":"source/images/svelte3-intro/book-cart-if.gif","path":"images/svelte3-intro/book-cart-if.gif","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/notifications.png","path":"opensource/mongodb-backup-manager/src/static/img/notifications.png","modified":1,"renderable":0},{"_id":"source/images/svelte3-intro/book-cart-reactive.gif","path":"images/svelte3-intro/book-cart-reactive.gif","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/static/img/multiple.gif","path":"opensource/mongodb-backup-manager/static/img/multiple.gif","modified":1,"renderable":0},{"_id":"source/images/css-in-js/styled-component-form.png","path":"images/css-in-js/styled-component-form.png","modified":1,"renderable":0},{"_id":"source/images/css-in-js/radium-form.png","path":"images/css-in-js/radium-form.png","modified":1,"renderable":0},{"_id":"source/images/svelte3-intro/book-input-event-bind.gif","path":"images/svelte3-intro/book-input-event-bind.gif","modified":1,"renderable":0},{"_id":"source/images/svelte3-intro/book-input-not-bind.gif","path":"images/svelte3-intro/book-input-not-bind.gif","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/multiple.gif","path":"opensource/mongodb-backup-manager/src/static/img/multiple.gif","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/static/img/real-time.gif","path":"opensource/mongodb-backup-manager/static/img/real-time.gif","modified":1,"renderable":0},{"_id":"source/opensource/simple/build/static/js/2.f6114ee3.chunk.js","path":"opensource/simple/build/static/js/2.f6114ee3.chunk.js","modified":1,"renderable":0},{"_id":"source/images/css-in-js/styled-component-form-devtools.png","path":"images/css-in-js/styled-component-form-devtools.png","modified":1,"renderable":0},{"_id":"source/images/svelte3-intro/book-cart-total.gif","path":"images/svelte3-intro/book-cart-total.gif","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/js/app.js","path":"opensource/mongodb-backup-manager/js/app.js","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/real-time.gif","path":"opensource/mongodb-backup-manager/src/static/img/real-time.gif","modified":1,"renderable":0},{"_id":"source/images/svelte3-intro/book-cart.gif","path":"images/svelte3-intro/book-cart.gif","modified":1,"renderable":0},{"_id":"source/images/jamstack/demo.gif","path":"images/jamstack/demo.gif","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/js/app.js.map","path":"opensource/mongodb-backup-manager/js/app.js.map","modified":1,"renderable":0},{"_id":"source/images/svelte3-intro/book-input-bind.gif","path":"images/svelte3-intro/book-input-bind.gif","modified":1,"renderable":0},{"_id":"source/opensource/simple/build/static/js/2.f6114ee3.chunk.js.map","path":"opensource/simple/build/static/js/2.f6114ee3.chunk.js.map","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/new_backup.gif","path":"opensource/mongodb-backup-manager/src/static/img/new_backup.gif","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/static/img/new_backup.gif","path":"opensource/mongodb-backup-manager/static/img/new_backup.gif","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/static/img/update.gif","path":"opensource/mongodb-backup-manager/static/img/update.gif","modified":1,"renderable":0},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/update.gif","path":"opensource/mongodb-backup-manager/src/static/img/update.gif","modified":1,"renderable":0},{"_id":"source/images/svelte3-intro/book-list.gif","path":"images/svelte3-intro/book-list.gif","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"4dd67997f3ebe1498db47bd187114fe0b7be5a81","modified":1612765016360},{"_id":"themes/icarus/_config.yml","hash":"144a5bd8b44fb9138ad4601db99b9e3ccd65f8b7","modified":1612765017040},{"_id":"themes/icarus/LICENSE","hash":"41f72cd544612bc4589c924c776422b800a4eff7","modified":1612765017039},{"_id":"themes/icarus/README.md","hash":"c351bc76d3b4a138989c50f57bd3c52fa95eaa56","modified":1612765017040},{"_id":"themes/icarus/package.json","hash":"e9bcb9fcf69462d5b03c7870eb13ab28aa7933c7","modified":1612765017074},{"_id":"source/about/index.md","hash":"faffc44ef25c350da4f6fa651514574a2839027b","modified":1612765016368},{"_id":"source/_posts/CSS-in-JS的好与坏.md","hash":"adda01f59e70e1f7d1b57a8f2f9a6e8576d5fe06","modified":1612765016361},{"_id":"source/_posts/ECMAScript2019-ES10新属性.md","hash":"87a7dfa4ebee7d53bffd5c894bc3fd5390a50090","modified":1612765016362},{"_id":"source/_posts/JavaScript小技巧-数组篇.md","hash":"d11d510c89aceca4b3d4e053859c89833aeb71c2","modified":1612765016362},{"_id":"source/_posts/React-Hook实践指南.md","hash":"5cc908fa7485b564199c9daa79ddf90f97cb02c0","modified":1612765016362},{"_id":"source/_posts/Svelte-3-初学者完全指南.md","hash":"cced0d14f598bbaa3ee61516f6639e2333cfe822","modified":1612765016364},{"_id":"source/_posts/React为什么需要Hook.md","hash":"1253817dd1e3e68d40daceaa10e081e1327e04c6","modified":1612765016363},{"_id":"source/_posts/React-Hook测试指南.md","hash":"e67dc772dd127b4c3d5974607b6c8d7414931593","modified":1612765016363},{"_id":"source/_posts/几个提高效率的consoleAPIs.md","hash":"a20e718e494ee057b43562570b80a2df64453673","modified":1612765016365},{"_id":"source/_posts/yarnv2.md","hash":"cc1a2a3c9b00d329023d059fa6567e881289c75b","modified":1612765016365},{"_id":"source/_posts/实现JavaScript语言解释器-一.md","hash":"29f93701c66206992a414283b98ab751e374239b","modified":1612765016365},{"_id":"source/_posts/实现JavaScript语言解释器-三.md","hash":"29103e18835ed75587fb364fe21a8ffe7a93d15b","modified":1646658676447},{"_id":"source/_posts/窥探现代浏览器架构-一.md","hash":"db5472d0e5a22e459624216cc6d51381b1798d3f","modified":1612765016366},{"_id":"source/_posts/窥探现代浏览器架构-三.md","hash":"5c40877c764421d70a76d82ae236fcd06ae71228","modified":1612765016366},{"_id":"source/_posts/进击的JAMStack.md","hash":"f1c322a10eafcee4edc00a64e6e5170f15fc2bde","modified":1612765016368},{"_id":"source/_posts/窥探现代浏览器架构-四.md","hash":"e3c433798c64787a4ad412ea37c19cc8224d6fbb","modified":1612765016367},{"_id":"source/_posts/窥探现代浏览器架构-二.md","hash":"9cc599710bc33e5a8e611920774a13a057003b45","modified":1646651905561},{"_id":"source/_posts/实现JavaScript语言解释器-二.md","hash":"806cc817d0170d6d04a3412da2184b98de820734","modified":1646385080423},{"_id":"source/images/gopherjs.png","hash":"3fe145f682449e06ab97aab30df9ff9c5022cdd8","modified":1612765016497},{"_id":"source/images/wechat_qr.jpg","hash":"9d5c1c622ec205f9e71d6b3b63097c21748c07f3","modified":1612765016667},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"6b17b84116938367757928087a09dcb8489d06f6","modified":1612765017039},{"_id":"themes/icarus/languages/en.yml","hash":"66d873bbe04894610c2d28b0d03e10143997b51b","modified":1612765017048},{"_id":"themes/icarus/languages/es.yml","hash":"2e59e579d393c881dcbb885516d93eeaf469cec2","modified":1612765017049},{"_id":"themes/icarus/languages/fr.yml","hash":"0017f93a5d491a9c0e55911cdc35316762c5a94e","modified":1612765017049},{"_id":"themes/icarus/languages/id.yml","hash":"92d2d19a62a17b6e99f82a014309bbf6c13c9ae8","modified":1612765017049},{"_id":"themes/icarus/languages/ja.yml","hash":"6eed7771de2353d71b720c6e605cceb3f230b12e","modified":1612765017049},{"_id":"themes/icarus/languages/ko.yml","hash":"e7ac736b604429adedd67f3ca6043201eff7b23b","modified":1612765017050},{"_id":"themes/icarus/languages/pl.yml","hash":"43f5447c38c9be2e1f5ce6181a0f97eeb437b059","modified":1612765017050},{"_id":"themes/icarus/languages/ru.yml","hash":"ba8b4f7d77eb1d1e28aa1f9107bd0bbbdc4cba99","modified":1612765017050},{"_id":"themes/icarus/languages/tr.yml","hash":"eff1c0b3d5c4b328f6dd74a195ff378c898f4d29","modified":1612765017051},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"bcf5bc81ca855d26bbc3b3bfabc7d84429e74b85","modified":1612765017050},{"_id":"themes/icarus/languages/vn.yml","hash":"6d9f4fabca711a6cb0a0efd72aa75c3641beb4a6","modified":1612765017051},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"804f6a1edee49bb6a5ecb8e9d14d3e93eaca37c0","modified":1612765017051},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"6ff978a0c4c11e996925e1a912a1d805f4680a6c","modified":1612765017051},{"_id":"themes/icarus/layout/archive.ejs","hash":"2527527eaf3e757ab476325f691d2e2e0ff9c2d5","modified":1612765017052},{"_id":"themes/icarus/layout/categories.ejs","hash":"29d304f2b95a04fbc5e7529f9bdce9648e3545ef","modified":1612765017052},{"_id":"themes/icarus/layout/category.ejs","hash":"58aa84f75193b978b2072f29dbb84ed8279574b9","modified":1612765017052},{"_id":"themes/icarus/layout/index.ejs","hash":"8ab440868f721bb7256ab9f2be96996850b0cf44","modified":1612765017061},{"_id":"themes/icarus/layout/page.ejs","hash":"ebf120d46074f67ea25a231d2f7a64fd1e751904","modified":1612765017061},{"_id":"themes/icarus/layout/layout.ejs","hash":"c9ab786c4c4a95e403fc8ea7e536084f21a9ecc4","modified":1612765017061},{"_id":"themes/icarus/layout/post.ejs","hash":"ebf120d46074f67ea25a231d2f7a64fd1e751904","modified":1612765017066},{"_id":"themes/icarus/layout/tag.ejs","hash":"45eb077f2ac86f5c8090cb1a2361eed56a368e95","modified":1612765017070},{"_id":"themes/icarus/layout/tags.ejs","hash":"0c527c6b72386f11c18e8aa5249be8c601e69906","modified":1612765017070},{"_id":"themes/icarus/scripts/index.js","hash":"f97eb95812480cc3b07cc0ad44dc39f9a0032f24","modified":1612765017075},{"_id":"source/gallery/thumbnails/css-in-js.png","hash":"7c5fdab1fcf8ce07e88401fe14230367e6e922f9","modified":1612765016371},{"_id":"source/gallery/thumbnails/gatsby.jpg","hash":"e48769cd9f23662e4c1d8f7957ce7abf612110eb","modified":1612765016371},{"_id":"source/gallery/thumbnails/react-hook.jpg","hash":"d732b756955897ff2b6f90b7a8b317c27523f410","modified":1612765016371},{"_id":"source/gallery/thumbnails/simple-js.jpg","hash":"001de6fb592d2512e2b0d39f0b969822ad3f3f61","modified":1612765016372},{"_id":"source/gallery/thumbnails/simple-js.png","hash":"d17a3516e9ab768500bb14099f59a18556c00e95","modified":1612765016372},{"_id":"source/gallery/thumbnails/yarn2.png","hash":"46830ce79d815fe0d544890478a10af55e199184","modified":1612765016373},{"_id":"source/gallery/thumbnails/svelte_intro.png","hash":"56167a83bd8bb604f23ec85ba86d519159bbd640","modified":1612765016372},{"_id":"source/images/chrome/coalescedevents.png","hash":"fb5dbad4ffe08c06bde275a879d08aed22ea9f1c","modified":1612765016385},{"_id":"source/images/chrome/composit.png","hash":"3ac7e6ad1eb4b352187e6474cebf944387126919","modified":1612765016389},{"_id":"source/images/chrome/computedstyle.png","hash":"53d93bfc784048f856dd309a8c7a5943740d0438","modified":1612765016390},{"_id":"source/images/chrome/drawgame.png","hash":"015b603069b37c5f8aadb7e0a28f259982b58ca8","modified":1612765016392},{"_id":"source/images/chrome/getCoalescedEvents.png","hash":"bbb8d58f2f9b73caaaabe42e41f1e7a242d26643","modified":1612765016394},{"_id":"source/images/chrome/hittest.png","hash":"09d7470a814d83ecea900dde5c2b0802cfb6c7d3","modified":1612765016394},{"_id":"source/images/chrome/input.png","hash":"b2358b9cb806e51cefe3347c3f320623a1f0783b","modified":1612765016396},{"_id":"source/images/chrome/isolation.png","hash":"cc37012d6ad6dccfbf18263057c70704eb836f51","modified":1612765016398},{"_id":"source/images/chrome/layer.png","hash":"295dcff06583ebe93b64b0567695c3ce66decd9a","modified":1612765016399},{"_id":"source/images/chrome/layout.png","hash":"5c6453bb1c9b9021b7829f88f5c5dafc06c39f25","modified":1612765016401},{"_id":"source/images/chrome/nfsr1.png","hash":"5f0327402c6e71b31f1489811a953ac305670bae","modified":1612765016409},{"_id":"source/images/chrome/navstart.png","hash":"aa2ff67bfc85902b02763494650dfcebf3071cf2","modified":1612765016408},{"_id":"source/images/chrome/pagejank2.png","hash":"1e9d1fc772c9ab720384f1eae6d773980a3eecc0","modified":1612765016412},{"_id":"source/images/chrome/pagejank1.png","hash":"65ac8323c507a1beb23b17698989edf7fca43ebf","modified":1612765016411},{"_id":"source/images/chrome/paint.png","hash":"f102e6b86b3d8f7f03ec16198bbe0a34e208cd6e","modified":1612765016413},{"_id":"source/images/chrome/process-thread.png","hash":"428b9690520df6feecce1fd889aaa9938b708734","modified":1612765016413},{"_id":"source/images/chrome/raf.png","hash":"6195003a09674bbc70b0d37e3799506a410f8c59","modified":1612765016415},{"_id":"source/images/chrome/rawevents.png","hash":"4e5fc3ad8728cdd73775d7d1ca8790901bbc5232","modified":1612765016418},{"_id":"source/images/chrome/renderer.png","hash":"fee60c6b0ba7abd9d3fc68148a0313798a58eeee","modified":1612765016419},{"_id":"source/images/chrome/response.png","hash":"51a224e9d447f8066f3edd68430274f76d67a461","modified":1612765016419},{"_id":"source/images/chrome/scope_lookup.png","hash":"8ad931988c3527243b33c4d6af284a0e72eae855","modified":1612765016420},{"_id":"source/images/chrome/tellgame.png","hash":"5a8de24fa820d3c906ea25ad7bbd7563f02aef01","modified":1612765016429},{"_id":"source/images/console/assert.png","hash":"4cbb62f2fd11543a7be870686b833f5a5e1e2997","modified":1612765016439},{"_id":"source/images/console/count.png","hash":"92bccf772ce021ae75f523dd8fa59acceec99d24","modified":1612765016440},{"_id":"source/images/console/css.png","hash":"d04cb28bf97f44eee067d3bf53bb021e3036f85a","modified":1612765016441},{"_id":"source/images/console/level.png","hash":"6bf8b7592ef52630f40e77a09f655f463c6196d6","modified":1612765016447},{"_id":"source/images/console/string-substitution.png","hash":"4316143768dc7104dff0ea4272cc258126348126","modified":1612765016448},{"_id":"source/images/console/time.png","hash":"acfd832f2bb961f8f470617e764ffbf4af7a3053","modified":1612765016450},{"_id":"source/images/css-in-js/above-the-fold.png","hash":"7508849758552dc8d55a08f4f51dc30d3ff81682","modified":1612765016453},{"_id":"source/images/simple/architecture.png","hash":"667bc7ace2189b514182c28702cefee4389c34d5","modified":1612765016523},{"_id":"source/images/simple/interpreter.jpg","hash":"90747acc61aeeb2ea294a63e3563e9213da80084","modified":1612765016529},{"_id":"source/images/simple/mustache.png","hash":"973daf788c703bae6b8051b6440e93e6f3e6a2f5","modified":1646385080425},{"_id":"source/images/simple/lexical-analysis.png","hash":"776a86a83c4d991091ee65fc27cbf198535e5db8","modified":1612765016530},{"_id":"source/images/yarn2/add-interactive.png","hash":"164d747a01bf5b7674385fa964f9278efd2eb999","modified":1612765016668},{"_id":"source/images/yarn2/log.png","hash":"a9e2682d250f18049d378a0d223341b11f5f3274","modified":1612765016671},{"_id":"source/images/yarn2/version.png","hash":"46acef3ffd715349c69ff4f2291c29da6e2093f8","modified":1612765016671},{"_id":"source/opensource/mongodb-backup-manager/index.html","hash":"f6bb6f0de12b0d69cf3cd7c01d47cf7fa02426b4","modified":1612765016672},{"_id":"source/opensource/mongodb-backup-manager/package.json","hash":"d8b79f6b2b9d1978cacd0396c78dc2807a1ec3d0","modified":1612765016686},{"_id":"source/opensource/mongodb-backup-manager/postcss.config.js","hash":"af3d019a99024f559ad4de7087363614fe0325e1","modified":1612765016687},{"_id":"source/opensource/simple/README.md","hash":"8a0f9b56c606de943d9663587e18e7e6525a299c","modified":1612765016991},{"_id":"source/opensource/mongodb-backup-manager/webpack.config.js","hash":"596b8a7cb4edc764dc2c299d884038cbbf583a92","modified":1612765016990},{"_id":"source/opensource/simple/.gitignore","hash":"eff64cfec6170ee43e0b47cd50c3ee3c67925b9d","modified":1612765016991},{"_id":"source/opensource/simple/config-overrides.js","hash":"3740768280e3a1839fb5bfe813cb5ca30990f61f","modified":1612765017026},{"_id":"source/opensource/simple/package.json","hash":"d0fc7caec8a2a7e8d029a41dd2386d98d7bf25dd","modified":1612765017026},{"_id":"themes/icarus/includes/common/ConfigGenerator.js","hash":"451397efc7808787419fa3eb6b043c0bd8bbdf30","modified":1612765017040},{"_id":"themes/icarus/includes/common/ConfigValidator.js","hash":"48cff5402e93b11d5266370e9c4b78ee21369cb9","modified":1612765017041},{"_id":"themes/icarus/includes/common/utils.js","hash":"c0aeaeb57a42bcc71a92da2249762f91abd83ffe","modified":1612765017041},{"_id":"themes/icarus/includes/filters/highlight.js","hash":"19a4dcd2dee7388544b57e473cfb0fc9eea9623e","modified":1612765017041},{"_id":"themes/icarus/includes/generators/categories.js","hash":"7cb370ac53a05d6b1b9203579716c0ca83d35c36","modified":1612765017041},{"_id":"themes/icarus/includes/generators/category.js","hash":"313e170e55d74526c4e1be7181ef7a21439147c9","modified":1612765017042},{"_id":"themes/icarus/includes/generators/insight.js","hash":"c4b981443927b87cc14a3a583029e13f819d6d71","modified":1612765017042},{"_id":"themes/icarus/includes/generators/tags.js","hash":"8195322c208706427a1cf56361669dca4d86f6f1","modified":1612765017042},{"_id":"themes/icarus/includes/helpers/cdn.js","hash":"7d34ea6400cb3611c374c135304abcb65ef291b7","modified":1612765017043},{"_id":"themes/icarus/includes/helpers/config.js","hash":"173e02987e7a7d5df1e686f6ee4edd8cf494bdd3","modified":1612765017043},{"_id":"themes/icarus/includes/helpers/layout.js","hash":"afdf5e9704cfc087526b4a0403fe7eb04f22190e","modified":1612765017043},{"_id":"themes/icarus/includes/helpers/override.js","hash":"98f2c72c79de74bd01e3be10ef2f174c885d395a","modified":1612765017043},{"_id":"themes/icarus/includes/helpers/page.js","hash":"4ce98c781bcbc132672e6d16bf02df5bebcea7b3","modified":1612765017044},{"_id":"themes/icarus/includes/helpers/site.js","hash":"2f55818448fe83c73418dcf9751745c7918c10e3","modified":1612765017044},{"_id":"themes/icarus/includes/specs/article.spec.js","hash":"ce24279cd0cd39855216dab0cd5223c755757cdf","modified":1612765017044},{"_id":"themes/icarus/includes/specs/comment.spec.js","hash":"b0ef033e363b918134fb5a003143e9bd8fafa300","modified":1612765017044},{"_id":"themes/icarus/includes/specs/config.spec.js","hash":"7a9bac384a73cf9f39173fdb2dfc2813784d8891","modified":1612765017045},{"_id":"themes/icarus/includes/specs/donate.spec.js","hash":"722cb2662569957e8b1d1a467d9632b8cc6e69d6","modified":1612765017045},{"_id":"themes/icarus/includes/specs/footer.spec.js","hash":"8e6d7c5f9a13ce03241b6562259d210b389cb88e","modified":1612765017045},{"_id":"themes/icarus/includes/specs/icon_link.spec.js","hash":"f2a83ac5ccb74fc6f3dfbd25430e142297d8491c","modified":1612765017046},{"_id":"themes/icarus/includes/specs/meta.spec.js","hash":"ed1b818b929d71930608291514a72ef5a639efee","modified":1612765017046},{"_id":"themes/icarus/includes/specs/navbar.spec.js","hash":"7de29c0031738a4de4d31ed4f7b0c43447c7961c","modified":1612765017046},{"_id":"themes/icarus/includes/specs/plugins.spec.js","hash":"2fb7a28fdde9a46f576e69b9967f24d66adffb57","modified":1612765017046},{"_id":"themes/icarus/includes/specs/providers.spec.js","hash":"820cc6936ba75e3104cc2e8641716ed65ada8b6f","modified":1612765017047},{"_id":"themes/icarus/includes/specs/search.spec.js","hash":"1e3995cdc471e6a2817cd45e2b6f0fd39b4540ec","modified":1612765017047},{"_id":"themes/icarus/includes/specs/share.spec.js","hash":"5ec65409a17ead13974140fc5ddc19e526586d9f","modified":1612765017047},{"_id":"themes/icarus/includes/specs/sidebar.spec.js","hash":"630c9701affe2549abc61cd4d1e5153af2224fb6","modified":1612765017047},{"_id":"themes/icarus/includes/specs/widgets.spec.js","hash":"c5cedfe1074c0566baf8aca248f0392a501d9a74","modified":1612765017047},{"_id":"themes/icarus/includes/tasks/check_config.js","hash":"ce7626d643737c90dee6b75435ccdec26b89dacf","modified":1612765017048},{"_id":"themes/icarus/includes/tasks/check_deps.js","hash":"cfc357f27116d1b9285a3b0bec35c3e89ae73711","modified":1612765017048},{"_id":"themes/icarus/includes/tasks/welcome.js","hash":"00d1ef8c9609552b82e9a5140b838a9057c59508","modified":1612765017048},{"_id":"themes/icarus/layout/comment/changyan.locals.js","hash":"49bce2ee742c7224bda97092d6e0a1a09184ef34","modified":1612765017053},{"_id":"themes/icarus/layout/comment/disqus.locals.js","hash":"a8d2cecaa82ec9e2e2e61cb73417d63d115335d6","modified":1612765017053},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"73038ac4fdfdfa71d92edaa98cc194b3446586a3","modified":1612765017052},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"7a8c656c8651d48e21ed24c469ea75898b2b12df","modified":1612765017053},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"1c3751f36f737527e352c65bb1ca7172ff792979","modified":1612765017053},{"_id":"themes/icarus/layout/comment/facebook.locals.js","hash":"77e3ef1d933660d980b26d15968aa1a5c8a93a56","modified":1612765017054},{"_id":"themes/icarus/layout/comment/gitalk.locals.js","hash":"f920f130598148b4d9f213c82f2d7f88a796012f","modified":1612765017054},{"_id":"themes/icarus/layout/comment/gitalk.ejs","hash":"eb1314badf793924b5786e92f8b3ebb0f21f3b58","modified":1612765017054},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"141a0dc47f7ac218ab4ba2b83f2926a0a79d57e1","modified":1612765017054},{"_id":"themes/icarus/layout/comment/gitment.locals.js","hash":"f920f130598148b4d9f213c82f2d7f88a796012f","modified":1612765017055},{"_id":"themes/icarus/layout/comment/isso.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1612765017055},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"cc6a43bd24be764086f88ad7c5c97ff04df87e0b","modified":1612765017055},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"12ff9a345f6bba2f732f592e39508c2afde89b00","modified":1612765017055},{"_id":"themes/icarus/layout/comment/livere.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1612765017056},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"a29cf2e69f66a37ddcec8343c60af1e676dcb77d","modified":1612765017056},{"_id":"themes/icarus/layout/comment/valine.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1612765017056},{"_id":"themes/icarus/layout/common/article.ejs","hash":"d2362964b2d9427067e1d7dfe100220b380b2f70","modified":1612765017056},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"4adfc361b780193bfc8ad73afb7079e550f37eb7","modified":1612765017057},{"_id":"themes/icarus/layout/common/footer.locals.js","hash":"504ed92dc76723f19777463d690acfbe1d89e2ba","modified":1612765017057},{"_id":"themes/icarus/layout/common/article.locals.js","hash":"1f108fa96e61a681d7b1ee390b4f0ff60d042720","modified":1612765017057},{"_id":"themes/icarus/layout/common/head.ejs","hash":"dac5138d87fdb1de2b895f23580935e2bc61e8bf","modified":1612765017057},{"_id":"themes/icarus/layout/common/navbar.ejs","hash":"765d8ab516781d7157bb41d690a71b549e95e721","modified":1612765017058},{"_id":"themes/icarus/layout/common/navbar.locals.js","hash":"7e523ba80667038f2e58cf4f9cb073e9afbc70e6","modified":1612765017058},{"_id":"themes/icarus/layout/common/paginator.ejs","hash":"7837d80b27f166161b3deeffb571680025c7d723","modified":1612765017058},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"52f54b4ba88253ad0ec13d3b40fa4232e691af57","modified":1612765017058},{"_id":"themes/icarus/layout/donate/alipay.ejs","hash":"3290058879973e403a05472a0fe2ac0219d5b961","modified":1612765017059},{"_id":"themes/icarus/layout/donate/alipay.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1612765017059},{"_id":"themes/icarus/layout/common/widget.ejs","hash":"02ffa7531d14b88e76bff5ff6d2b4482e7c5bbfd","modified":1612765017058},{"_id":"themes/icarus/layout/donate/patreon.ejs","hash":"8e52a9c28ffaf4b0b786a20977b848c5f60f2274","modified":1612765017059},{"_id":"themes/icarus/layout/donate/patreon.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1612765017060},{"_id":"themes/icarus/layout/donate/paypal.ejs","hash":"3975dee39f9378975b9c10f37d118ad7cb6f5bf6","modified":1612765017060},{"_id":"themes/icarus/layout/donate/paypal.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1612765017060},{"_id":"themes/icarus/layout/donate/wechat.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1612765017060},{"_id":"themes/icarus/layout/donate/wechat.ejs","hash":"051b873e1fc28c1d7c2d6443991b6a2f43813e6b","modified":1612765017060},{"_id":"themes/icarus/layout/plugin/animejs.ejs","hash":"c17ea2cfe5cb239342166e2ba72cbfc663c8160f","modified":1612765017061},{"_id":"themes/icarus/layout/plugin/animejs.locals.js","hash":"3bf911060a222f00b03be708c37f20e36cb66ba9","modified":1612765017062},{"_id":"themes/icarus/layout/plugin/back-to-top.ejs","hash":"5936b5fd2f2444605a21c6c422623f07f02d5c9a","modified":1612765017062},{"_id":"themes/icarus/layout/plugin/back-to-top.locals.js","hash":"3bf911060a222f00b03be708c37f20e36cb66ba9","modified":1612765017062},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"7dbbea5722277e00a624c1796ec83d5f9c12d059","modified":1612765017062},{"_id":"themes/icarus/layout/plugin/baidu-analytics.locals.js","hash":"c02eb152e6aff05833006e6edd32b74c1c4258c3","modified":1612765017062},{"_id":"themes/icarus/layout/plugin/busuanzi.ejs","hash":"4285b0ae608c7c54e4ecbebb6d22d4cd1be28f70","modified":1612765017063},{"_id":"themes/icarus/layout/plugin/busuanzi.locals.js","hash":"ec80bcfa4c1302c04130a746df4b1298d117de0b","modified":1612765017063},{"_id":"themes/icarus/layout/plugin/gallery.ejs","hash":"7d19b7a5713d08a614578f079f1327a651c472ae","modified":1612765017063},{"_id":"themes/icarus/layout/plugin/gallery.locals.js","hash":"037fb56dffc128d3a91c1cb8852998d9539d3fac","modified":1612765017063},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"13b298b0026bfc7bcb6a47b6c795fe15cc4584fc","modified":1612765017064},{"_id":"themes/icarus/layout/plugin/google-analytics.locals.js","hash":"c02eb152e6aff05833006e6edd32b74c1c4258c3","modified":1612765017064},{"_id":"themes/icarus/layout/plugin/hotjar.ejs","hash":"6df0d8f77ed39e4d32c78177844115e31bf3a776","modified":1612765017064},{"_id":"themes/icarus/layout/plugin/hotjar.locals.js","hash":"9258fc2af057d2545a43fae54790743b63450378","modified":1612765017064},{"_id":"themes/icarus/layout/plugin/mathjax.ejs","hash":"dddb6f37487286fe2080118bcbb4a8d82dc84d5e","modified":1612765017064},{"_id":"themes/icarus/layout/plugin/mathjax.locals.js","hash":"7faa26fa6da6a93dc3f7fdcf5a784d1f8825b031","modified":1612765017065},{"_id":"themes/icarus/layout/plugin/outdated-browser.ejs","hash":"1437d1ac085a8110e61317254f6c0a034121bc39","modified":1612765017065},{"_id":"themes/icarus/layout/plugin/outdated-browser.locals.js","hash":"037fb56dffc128d3a91c1cb8852998d9539d3fac","modified":1612765017065},{"_id":"themes/icarus/layout/plugin/progressbar.ejs","hash":"34423f74787cc9d67b2598dd69b07c84d5bf2280","modified":1612765017065},{"_id":"themes/icarus/layout/plugin/progressbar.locals.js","hash":"ec80bcfa4c1302c04130a746df4b1298d117de0b","modified":1612765017066},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"850aa91778100d693a52b10eaa8586c8e3215ee6","modified":1612765017066},{"_id":"themes/icarus/layout/search/baidu.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1612765017066},{"_id":"themes/icarus/layout/search/google-cse.ejs","hash":"4b881a99325a6a0cebf97ac53e09d8fc67f87d29","modified":1612765017066},{"_id":"themes/icarus/layout/search/google-cse.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1612765017067},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"9a27db2a007582ceee7ca4b1eebddbd456893568","modified":1612765017067},{"_id":"themes/icarus/layout/search/insight.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1612765017067},{"_id":"themes/icarus/layout/share/addthis.ejs","hash":"f1c5f337333009d5f00dfbac4864a16ef8f9cb8d","modified":1612765017067},{"_id":"themes/icarus/layout/share/addthis.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1612765017068},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"95d3bc1a841bd934b1ae9209ad1af74e743ecb10","modified":1612765017068},{"_id":"themes/icarus/layout/share/addtoany.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1612765017068},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"f14c8084b7ee16a091f0bd2ae9039e3bfff7e7b7","modified":1612765017068},{"_id":"themes/icarus/layout/share/bdshare.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1612765017069},{"_id":"themes/icarus/layout/share/sharejs.ejs","hash":"65d08316cc479910ea4f526cd1c299d0104daf7f","modified":1612765017069},{"_id":"themes/icarus/layout/share/sharejs.locals.js","hash":"11976fd4cfed1044be29b476b34c33175c9b4308","modified":1612765017069},{"_id":"themes/icarus/layout/share/sharethis.ejs","hash":"4f2c40f790f3be0a4e79db04f02ea41ba2f4d4c0","modified":1612765017069},{"_id":"themes/icarus/layout/share/sharethis.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1612765017070},{"_id":"themes/icarus/layout/widget/adsense.ejs","hash":"3c76a0e720706400e8adf0365a9a241faf81cb7d","modified":1612765017070},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"eb738a2ac2935ce7a542964d90088613b281dd15","modified":1612765017070},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"17e58e537645c4434a1140377ae3e7f43cca4927","modified":1612765017071},{"_id":"themes/icarus/layout/widget/archive.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1612765017071},{"_id":"themes/icarus/layout/widget/category.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1612765017071},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"c18dab874af84147349a596d9e713f8e0ee5e17e","modified":1612765017071},{"_id":"themes/icarus/layout/widget/links.locals.js","hash":"872cf1a18e152361f5739c6d5fecc0bf46d59513","modified":1612765017072},{"_id":"themes/icarus/layout/widget/profile.ejs","hash":"14f024e8da3cbaaa55f9ae9706de664c3f9b7dd8","modified":1612765017072},{"_id":"themes/icarus/layout/widget/profile.locals.js","hash":"9a43112ac0a58df98bb418563ec04558023e1fae","modified":1612765017072},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"14a2f4587831e017b93818c06dbe18a7e8a27c1e","modified":1612765017072},{"_id":"themes/icarus/layout/widget/recent_posts.locals.js","hash":"5065aca74ec2c98ec88994636fee8408f769c5f2","modified":1612765017072},{"_id":"themes/icarus/layout/widget/subscribe_email.ejs","hash":"391622e9c1d17bf79180faa617ed8c1ee1871a87","modified":1612765017073},{"_id":"themes/icarus/layout/widget/subscribe_email.locals.js","hash":"aae87fbdb7a1245a0fc0637225a935fc39836916","modified":1612765017073},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"e41aff420cc4ea1c454de49bd8af0e7a93f3db3f","modified":1612765017073},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"26fa17afaf0cb345a213816c44c39575a66759ba","modified":1612765017073},{"_id":"themes/icarus/layout/widget/tagcloud.locals.js","hash":"093f59d2f43e7ffa47bee79da15f98705300dfba","modified":1612765017074},{"_id":"themes/icarus/layout/widget/toc.ejs","hash":"e800b4b38eab716882389a09527e9f59a189dea6","modified":1612765017074},{"_id":"themes/icarus/layout/widget/toc.locals.js","hash":"e730a7fff2717f17741540e5ed77b89e289fdeab","modified":1612765017074},{"_id":"themes/icarus/source/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1612765017075},{"_id":"themes/icarus/source/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1612765017075},{"_id":"themes/icarus/source/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1612765017075},{"_id":"themes/icarus/source/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1612765017076},{"_id":"themes/icarus/source/css/style.styl","hash":"1c4fa31437c7e499f4bcf0b4fa7da9c2d16eeea7","modified":1612765017076},{"_id":"themes/icarus/source/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1612765017081},{"_id":"themes/icarus/source/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1612765017080},{"_id":"themes/icarus/source/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1612765017082},{"_id":"themes/icarus/source/images/gopherjs.png","hash":"3fe145f682449e06ab97aab30df9ff9c5022cdd8","modified":1612765017081},{"_id":"themes/icarus/source/images/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1612765017081},{"_id":"themes/icarus/source/images/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1612765017082},{"_id":"themes/icarus/source/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1612765017084},{"_id":"themes/icarus/source/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1612765017084},{"_id":"themes/icarus/source/js/gallery.js","hash":"bb74e694457dc23b83ac80cf5aadcd26b60469fd","modified":1612765017084},{"_id":"themes/icarus/source/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1612765017085},{"_id":"themes/icarus/source/js/main.js","hash":"faee41896e7bb3373ba5032b82d0b21a0321cea5","modified":1612765017086},{"_id":"source/images/chrome/GPU.png","hash":"0ebe13217a2b6d182bec4a9368ed3f2921d8beb4","modified":1612765016380},{"_id":"source/images/chrome/CPU.png","hash":"5650c734d895796a322ec8730e0caf3565ea0ac9","modified":1612765016379},{"_id":"source/images/chrome/beforeunload.png","hash":"ba40fb8539043766da22d6c9aca3e9dc907d5b3f","modified":1612765016381},{"_id":"source/images/chrome/browser-arch.png","hash":"b884251c01cd09c7947def44caff12ad8bf801cb","modified":1612765016382},{"_id":"source/images/chrome/browser-arch2.png","hash":"9162a7aabbfeb7d6160dbb9004014a1d45f97a57","modified":1612765016383},{"_id":"source/images/chrome/browserprocesses.png","hash":"a2bb268f9b09b5bfe55056b8570e82ad0de5b044","modified":1612765016384},{"_id":"source/images/chrome/commit.png","hash":"851f0f72c926dab7715badfccc728678af0e3081","modified":1612765016386},{"_id":"source/images/chrome/browserui.png","hash":"6d0b17bd7ed59eea2f02f615f0d4ea1be18767bc","modified":1612765016384},{"_id":"source/images/chrome/dom.png","hash":"d36f56da3290733e8115a82cac4db219389a55a8","modified":1612765016392},{"_id":"source/images/chrome/findrenderer.png","hash":"bced82301c3a2f3209b844f6ed947ff7cf357105","modified":1612765016393},{"_id":"source/images/chrome/hw-os-app.png","hash":"c2e32114e0177835158b34886e8a73a912c917bf","modified":1612765016395},{"_id":"source/images/chrome/input_event.png","hash":"fad986c4278ac32630f7de227c0af440822d2266","modified":1612765016397},{"_id":"source/images/chrome/loaded.png","hash":"abe1d5cfca5327d30e48d9213648fe0a6b806903","modified":1612765016401},{"_id":"source/images/chrome/memory.png","hash":"750eda12db01f582aa44c3420c28ee9a9d4534b6","modified":1612765016403},{"_id":"source/images/chrome/navpreload.png","hash":"faad143f6875cb940af08305e0d0488b1a6f692b","modified":1612765016407},{"_id":"source/images/chrome/nfsr2.png","hash":"1b68fc559a4614d704b9049fdcfdb7cab6b1c01d","modified":1612765016410},{"_id":"source/images/chrome/raster.png","hash":"7273e76521f8ccf56fc341c66d95434f6434b7db","modified":1612765016415},{"_id":"source/images/chrome/rasterizing.gif","hash":"e1f3ddd0954e36646319c2503692ccc5d6c1d2ec","modified":1612765016417},{"_id":"source/images/chrome/serviceworker.png","hash":"71d7be7cea922723039e323a8beef15049c8baa0","modified":1612765016420},{"_id":"source/images/chrome/servicfication.png","hash":"a1c9d8eab895ac55c602284565b261903fbae28a","modified":1612765016421},{"_id":"source/images/chrome/sniff.png","hash":"8d652a13869794908fc7747d9cdc8d4d4ba6486b","modified":1612765016426},{"_id":"source/images/chrome/tabs.png","hash":"7a460a0d7ebfd3f51ef5d26ccaa4c280f7a592b9","modified":1612765016427},{"_id":"source/images/chrome/tabs.svg","hash":"82ddc5970d1db1e0ad6f16a49d0d454f160a4838","modified":1612765016428},{"_id":"source/images/chrome/tree.png","hash":"26c493671aa45f661aae082b426bdf413a7ab14a","modified":1612765016430},{"_id":"source/images/chrome/trees.gif","hash":"75b6ff6f2ce966ed52189b2da876b35dc9389903","modified":1612765016431},{"_id":"source/images/chrome/unload.png","hash":"139f32eb9bbd8e3789fd760ce49c29c3e2922dd9","modified":1612765016432},{"_id":"source/images/chrome/workerprocess.png","hash":"2e5d1b4948ed40092f089c68ce72d1ca52ad92ad","modified":1612765016434},{"_id":"source/images/chrome/zindex.png","hash":"5f2fe66d7f314daf1d37cbae52560e77bafd51fe","modified":1612765016438},{"_id":"source/images/console/level-verbose.png","hash":"86e5b8a17b48499b6d179a6b819f4fff3dfc74d0","modified":1612765016447},{"_id":"source/images/console/table.png","hash":"755e462028b413d98b2b0f59dbfe8d70bc891b5e","modified":1612765016449},{"_id":"source/images/jamstack/demo-structure.png","hash":"eec8d329392ccf19d63ded20381076bea8847c7c","modified":1612765016504},{"_id":"source/images/jamstack/blog-structure.png","hash":"73ec12f3110a5fb87d3387d8e5e903237634ccc8","modified":1612765016499},{"_id":"source/images/simple/bnf.png","hash":"c942357ed8a02c451d94b127c8aca6453d8ccf98","modified":1612773280157},{"_id":"source/images/svelte3-intro/bootstrap-structure.png","hash":"33e5b25586a940965553e93568093a1e09450425","modified":1612765016665},{"_id":"source/images/svelte3-intro/bundle-size.png","hash":"f1c9e2373ce18b7447b429e0cec5ff9afc0be4b2","modified":1612765016667},{"_id":"source/images/svelte3-intro/bootstrap.png","hash":"f058f65cc7f703dc8ec9a9ba8dd48a42d3d06af1","modified":1612765016666},{"_id":"themes/icarus/source/images/alipay.jpg","hash":"06858e34370cee357bd742ec09f0ed0cfa0c2b62","modified":1612765017080},{"_id":"themes/icarus/source/images/Superman-js.jpg","hash":"479bd15138686b9fc99797742e7a72e4df29c558","modified":1612765017079},{"_id":"themes/icarus/source/images/wechat_pay.jpg","hash":"d6ea80c3b6942aaab5e1dd752cded3b0ec5f1661","modified":1612765017083},{"_id":"source/images/chrome/devtool.png","hash":"970996a7d4026c7326b830fae6d0c3c00ae401b0","modified":1612765016391},{"_id":"source/images/console/group.png","hash":"e24ede1fc829486767d80090485d6ab3fe8fe3bf","modified":1612765016443},{"_id":"source/images/console/label-count.png","hash":"8de9f0df906ac5d26839205bbeeb675d26092f95","modified":1612765016445},{"_id":"source/images/simple/fsm.png","hash":"2121e661224db16fa16a3aa736707e53cfbd9602","modified":1612765016528},{"_id":"source/images/simple/jquery.png","hash":"046259256f58017792ffc0f184e0008f6156bd6c","modified":1646385080425},{"_id":"source/images/svelte3-intro/bookcard-props.png","hash":"4218b0435843dc4e70980df1c18683cfe9ecf18f","modified":1612765016660},{"_id":"source/images/svelte3-intro/bookcard-markup.png","hash":"ccf15a218375cd7f7a67983d218d5bc60008f6cd","modified":1612765016658},{"_id":"source/images/yarn2/berry-pnp.png","hash":"5545b0576cc42d7d380b848aa96521112b08de92","modified":1612765016670},{"_id":"source/opensource/mongodb-backup-manager/css/style.css.map","hash":"963a201fcf6d62e2c43f034f8559f135fc6aea69","modified":1612765016672},{"_id":"source/opensource/mongodb-backup-manager/css/style.css","hash":"21201fc5da4318a5161069e4d6404f24f5fbdc22","modified":1612765016672},{"_id":"source/opensource/mongodb-backup-manager/src/app.js","hash":"707ce38c6b198892ed322ab27f0520b014ad5c77","modified":1612765016687},{"_id":"source/opensource/mongodb-backup-manager/src/index.html","hash":"f6bb6f0de12b0d69cf3cd7c01d47cf7fa02426b4","modified":1612765016694},{"_id":"source/opensource/simple/build/asset-manifest.json","hash":"bef96a1a945476540bef3e073a4c640642bc1017","modified":1646385080427},{"_id":"source/opensource/simple/build/favicon.ico","hash":"9867af024c6549908fb72feea145b21b8658d090","modified":1612765016991},{"_id":"source/opensource/simple/build/logo192.png","hash":"7f4f2d68782a7fafceda84554ecab9b489877500","modified":1612765016992},{"_id":"source/opensource/simple/build/index.html","hash":"b8d2b0c90eb3cd44257305918c48997852becf9b","modified":1646385080428},{"_id":"source/opensource/simple/build/logo512.png","hash":"46915f9d02694ed49bfc7a9534947684103dc3fe","modified":1612765016992},{"_id":"source/opensource/simple/build/manifest.json","hash":"4e0afe7f81a71f41366cd7859ca34776b8107923","modified":1612765016992},{"_id":"source/opensource/simple/build/robots.txt","hash":"044ce68f83ee8543475fea16f6e3a73d28a1c6d5","modified":1612765016993},{"_id":"source/opensource/simple/build/precache-manifest.d9c606d6d37614a9a361b3c00ed12231.js","hash":"6aaf354a8ec7eda0fba92236f6e534db7b41a48f","modified":1646385080428},{"_id":"source/opensource/simple/build/service-worker.js","hash":"eefaaf4c6b01b3c7f53b0f56f17062c9557c1268","modified":1646385080429},{"_id":"source/opensource/simple/public/logo192.png","hash":"7f4f2d68782a7fafceda84554ecab9b489877500","modified":1612765017027},{"_id":"source/opensource/simple/public/favicon.ico","hash":"9867af024c6549908fb72feea145b21b8658d090","modified":1612765017027},{"_id":"source/opensource/simple/public/logo512.png","hash":"46915f9d02694ed49bfc7a9534947684103dc3fe","modified":1612765017027},{"_id":"source/opensource/simple/public/index.html","hash":"93ff6c80c3ab44a927d219ee8dae6685ec4d0101","modified":1612765017027},{"_id":"source/opensource/simple/public/robots.txt","hash":"044ce68f83ee8543475fea16f6e3a73d28a1c6d5","modified":1612765017028},{"_id":"source/opensource/simple/public/manifest.json","hash":"4e0afe7f81a71f41366cd7859ca34776b8107923","modified":1612765017027},{"_id":"source/opensource/simple/src/App.css","hash":"0be63cf9418edda239b2c4eedf70b0d157fdbedf","modified":1612765017028},{"_id":"source/opensource/simple/src/App.js","hash":"147f8ce84fab20db7eb78f63016095bd796bf79c","modified":1612765017028},{"_id":"source/opensource/simple/src/App.test.js","hash":"ba2347a799e6116663715e0ccdfa4893668839ba","modified":1612765017028},{"_id":"source/opensource/simple/src/Code.js","hash":"b2a7c04bbd203c21bbf3472aa1fa132df8d4f87e","modified":1612765017029},{"_id":"source/opensource/simple/src/index.css","hash":"5c1d01fe7c2c646773fff312b7e9574f1e8852e1","modified":1612765017029},{"_id":"source/opensource/simple/src/index.js","hash":"79990276a4b694aaddd590516a455c1ffc780d45","modified":1612765017029},{"_id":"source/opensource/simple/src/logo.svg","hash":"aff68d3eb65414ecd2fa6e0e9d43cd7485a935c9","modified":1612765017029},{"_id":"source/opensource/simple/src/serviceWorker.js","hash":"69b8ef82bd5db45340dc1747c7b32b2c0cf8f0f4","modified":1612765017030},{"_id":"source/opensource/simple/src/setupTests.js","hash":"527047b42e70937f24957bb83307f9f396117d80","modified":1612765017030},{"_id":"source/opensource/simple/src/testCase.js","hash":"bc0d244369ea0fa68b09d8c08ee8b9500811b21d","modified":1612765017031},{"_id":"source/gallery/thumbnails/chrome.png","hash":"3cdfcdf7d95fdf9808008adeeae79fef381c81f9","modified":1612765016370},{"_id":"source/images/console/trace.png","hash":"0b7d8d619b9a69ccf82bd76231889c3956ef37dd","modified":1612765016452},{"_id":"source/images/svelte3-intro/bookcard-css.png","hash":"afb12ffc674e0f6f210648733e8ac7cb76ccbf05","modified":1612765016657},{"_id":"source/images/chrome/memory.svg","hash":"cc5b31fae5c6321f927083021292a40068b157a1","modified":1612765016405},{"_id":"source/images/svelte3-intro/bookcard-book-input.png","hash":"c4c3df7e59ac2b7dc396da91b90cb187fa24f2ad","modified":1612765016656},{"_id":"source/opensource/mongodb-backup-manager/src/Routes/routeMap.js","hash":"f99797c9e0b90ad276c7ec5d738a4f1582cdfdb0","modified":1612765016687},{"_id":"source/opensource/mongodb-backup-manager/src/utility/smoothscroll.js","hash":"adc98d48633db59814da04cfbd608aeb0f9a410e","modified":1612765016901},{"_id":"source/opensource/mongodb-backup-manager/src/sass/_base.scss","hash":"59c89095089fbf165d27bda2c6d5955ba4c5201f","modified":1612765016694},{"_id":"source/opensource/mongodb-backup-manager/src/sass/style.scss","hash":"a9c8a34d33e261a35f8b6fce2018366d8283528a","modified":1612765016694},{"_id":"source/images/chrome/workerprocess.svg","hash":"3ad2cefb1284be4185b72f5dce2a9537b5bcff59","modified":1612765016437},{"_id":"source/images/jamstack/build.png","hash":"9ac98a7b95a30ff876d8a1f03fb42259e52edaad","modified":1612765016502},{"_id":"source/images/simple/native.png","hash":"46f81fecfc3f7a7d5ed0d7689b0461f55238e1a3","modified":1646385080426},{"_id":"source/images/svelte3-intro/bootstrap-h1-css.png","hash":"4ff13217ed5fc4bca72829dff9797419ee4abb46","modified":1612765016664},{"_id":"source/opensource/mongodb-backup-manager/static/img/new_review.png","hash":"2c4c309c6f3df16328ede6d28f0acf87434516d2","modified":1612765016946},{"_id":"source/images/react-hook/wrapper-hell.jpg","hash":"7ec4b77a1711d4c51cf72c687d85875c0ed08e13","modified":1612765016521},{"_id":"source/images/simple/english-sentence.png","hash":"396c4191572791f6fab808e4cd41679e0959bcd7","modified":1612765016526},{"_id":"source/opensource/mongodb-backup-manager/src/components/GetStarted/index.js","hash":"ab6baa6c515a05ad8046a611f2166346c3f6c3ee","modified":1612765016691},{"_id":"source/opensource/mongodb-backup-manager/src/components/Header/MenuIcon.js","hash":"b11d0eb4e462ed01dec340017a286f041dd83162","modified":1612765016692},{"_id":"source/opensource/mongodb-backup-manager/src/components/GetStarted/style.scss","hash":"a4b5ed89bb3c49e0dbf01c2fc631c49d0ec037a5","modified":1612765016691},{"_id":"source/opensource/mongodb-backup-manager/src/components/Header/Logo.js","hash":"a286219361786e4f8eee2269832ccb4ffaf5b559","modified":1612765016692},{"_id":"source/opensource/mongodb-backup-manager/src/components/Header/index.js","hash":"61a91b918cad2fcb87440155ad215a9301bc1550","modified":1612765016692},{"_id":"source/opensource/mongodb-backup-manager/src/components/Header/style.scss","hash":"ed35d6de92ef2d75e06d1260be04c460e91a50de","modified":1612765016692},{"_id":"source/opensource/mongodb-backup-manager/src/components/Header/Navigation.js","hash":"57ad0cc66c1cdf0d01ebe162c2489cfe3998a495","modified":1612765016692},{"_id":"source/opensource/mongodb-backup-manager/src/components/Home/Section.js","hash":"0aa7f0e8268e413e76e7b3066d2bfa61ecaf4db4","modified":1612765016693},{"_id":"source/opensource/mongodb-backup-manager/src/components/Home/index.js","hash":"18f95473723bfb93b4ca133ae50a0cbf9e55edce","modified":1612765016693},{"_id":"source/opensource/mongodb-backup-manager/src/components/Home/BackToTop.js","hash":"5882537fa7e8dc4b9f2fc48e750aa76992a91255","modified":1612765016693},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/SideBar.js","hash":"86593e82dbbd1878a18b8c2ff6e43c2b3995bdd8","modified":1612765016688},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/data.js","hash":"fa06a2f4afc277b4e050febac5104bde882aaa01","modified":1612765016688},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/authDoc.js","hash":"a8d7cf529bc9bcd4ad2781c9252405cec94b1fd1","modified":1612765016688},{"_id":"source/opensource/mongodb-backup-manager/src/components/Home/style.scss","hash":"b83ab6789c108c70554f9a8f2b5bda0c285c9a44","modified":1612765016693},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/deleteDoc.js","hash":"21af8c44dacc3e10eec35c505116ff7c634e5c99","modified":1612765016688},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/index.js","hash":"f3dea2163b5d366296d9068b5928cb90254b29b3","modified":1612765016688},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/newDoc.js","hash":"d3386446ba57940aebb011d68ea84552986cac71","modified":1612765016689},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/notificationsDoc.js","hash":"3e65c9e6938600c8e140312fc8d0e2a2fe34d5da","modified":1612765016689},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/restoreDoc.js","hash":"9f6d58c08017da65734d7789b0cf300f66f0fc76","modified":1612765016689},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/rolesDoc.js","hash":"e1b7b20d8c0429de8315fc4ce3399b6e1c7d4022","modified":1612765016690},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/statisticsDoc.js","hash":"b2c4f704d099839680c261dc27b6e9229ce76246","modified":1612765016690},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/resumeDoc.js","hash":"486f50389aa7a3794b988f4a5610b64a5fb101ed","modified":1612765016689},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/runDoc.js","hash":"922cb16422d5369afbe29e6d76c7d9de935b9171","modified":1612765016690},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/serverSetupDoc.js","hash":"3b7ccf10b10e58372fe1ff77f9f63a8c9669f03c","modified":1612765016690},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/updateDoc.js","hash":"84d2b711b81a6957564b9443945b62f467af80f3","modified":1612765016691},{"_id":"source/opensource/mongodb-backup-manager/src/components/Docs/style.scss","hash":"afdbc3a4dc79a15cb158fb5f15643576c0c43730","modified":1612765016690},{"_id":"source/opensource/mongodb-backup-manager/static/img/statistics.png","hash":"0c20355d88d6823b0090d859719fb1f1a918b256","modified":1612765016966},{"_id":"source/opensource/simple/build/static/js/2.f6114ee3.chunk.js.LICENSE.txt","hash":"adbd495c2402e7bcd47f5d3a22220bc274986ade","modified":1612765017000},{"_id":"source/opensource/simple/build/static/css/main.5f361e03.chunk.css","hash":"09e25a0210880a572f0b7596566e0f2d14b4b5c1","modified":1612765016993},{"_id":"source/opensource/simple/build/static/css/main.5f361e03.chunk.css.map","hash":"1b8177e6dd53322f83ead8992d8c0ce878b31a95","modified":1612765016993},{"_id":"source/opensource/simple/build/static/js/main.9d04a46a.chunk.js","hash":"23886207b2073f8e249907cb59de824091e6fe71","modified":1646385080447},{"_id":"source/opensource/simple/build/static/js/runtime-main.e4d3d915.js","hash":"a5a32c227818509d5ed93dec6d032eda889700c7","modified":1612765017025},{"_id":"source/images/chrome/composit.gif","hash":"ea45db5724e1fffd42aa1e985bd303286040c1ea","modified":1612765016388},{"_id":"source/opensource/simple/build/static/js/main.9d04a46a.chunk.js.map","hash":"287278529d3566d1198c2d1bea38844e76609e00","modified":1646385080447},{"_id":"source/images/chrome/servicfication.svg","hash":"4fc7f33f4e3bc8e3adba2ddd8c9d6367d2435353","modified":1612765016424},{"_id":"source/opensource/simple/build/static/js/runtime-main.e4d3d915.js.map","hash":"397349803648a8c5e1ab2ffbfcfe230b89c1f981","modified":1612765017026},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/new_review.png","hash":"2c4c309c6f3df16328ede6d28f0acf87434516d2","modified":1612765016795},{"_id":"source/opensource/mongodb-backup-manager/static/img/new_config.png","hash":"a13c0145ac59cde000cc53a97192374b81ecd2a6","modified":1612765016939},{"_id":"source/opensource/mongodb-backup-manager/static/img/new_credential.png","hash":"7046e1f52727da346ebc9ecf24f2d377cc13acd3","modified":1612765016943},{"_id":"source/opensource/mongodb-backup-manager/static/img/new_history_conn.png","hash":"67acfd1d0204a6d4ce51e0166a0e23c60cc04af4","modified":1612765016945},{"_id":"source/opensource/mongodb-backup-manager/static/img/resume.png","hash":"499676a6ae8601e3c981b6b62b389b444658a66e","modified":1612765016959},{"_id":"source/opensource/mongodb-backup-manager/static/img/run_backup.png","hash":"2abb657a6a70b310c5471311cc2a083cccc983eb","modified":1612765016964},{"_id":"source/opensource/mongodb-backup-manager/static/img/stop.png","hash":"cc2b38ce8cd96c219712bb4bfc3758638c6de99a","modified":1612765016968},{"_id":"source/opensource/mongodb-backup-manager/static/img/delete_backup.png","hash":"bdcf67c69a49d19ebebdffaec50cdc9f135ac611","modified":1612765016907},{"_id":"source/opensource/mongodb-backup-manager/static/img/new_config_wizard.png","hash":"8e8e576599923c85a46ad5591af3685163b81bfe","modified":1612765016942},{"_id":"source/opensource/mongodb-backup-manager/static/img/retore_config.png","hash":"888ce4d4ec7bb252f955c215994f218abf3c5a5e","modified":1612765016962},{"_id":"source/opensource/simple/yarn.lock","hash":"46b130162efea6d0e85f2de2573744b54e8e9d04","modified":1612765017037},{"_id":"source/opensource/mongodb-backup-manager/static/img/view_data.png","hash":"b06648cb0007864d3a88f7c46ae12c3b812f2684","modified":1612765016990},{"_id":"source/opensource/mongodb-backup-manager/static/img/update_config.png","hash":"e801b631fa54f2c9f2482b21e306de1a95c93c9d","modified":1612765016988},{"_id":"source/images/css-in-js/radium-form-css.png","hash":"51fa083a73a6f05f124878fda18b14faffa3d6c3","modified":1612765016460},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/new_config.png","hash":"a13c0145ac59cde000cc53a97192374b81ecd2a6","modified":1612765016777},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/new_credential.png","hash":"7046e1f52727da346ebc9ecf24f2d377cc13acd3","modified":1612765016785},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/new_history_conn.png","hash":"67acfd1d0204a6d4ce51e0166a0e23c60cc04af4","modified":1612765016792},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/resume.png","hash":"499676a6ae8601e3c981b6b62b389b444658a66e","modified":1612765016819},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/stop.png","hash":"cc2b38ce8cd96c219712bb4bfc3758638c6de99a","modified":1612765016836},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/statistics.png","hash":"0c20355d88d6823b0090d859719fb1f1a918b256","modified":1612765016831},{"_id":"source/opensource/mongodb-backup-manager/static/img/dashboard.png","hash":"16077267678a3cf5346268f06265ef927ca02d46","modified":1612765016903},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/view_data.png","hash":"b06648cb0007864d3a88f7c46ae12c3b812f2684","modified":1612765016900},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/dashboard.png","hash":"16077267678a3cf5346268f06265ef927ca02d46","modified":1612765016697},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/delete_backup.png","hash":"bdcf67c69a49d19ebebdffaec50cdc9f135ac611","modified":1612765016708},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/new_config_wizard.png","hash":"8e8e576599923c85a46ad5591af3685163b81bfe","modified":1612765016781},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/retore_config.png","hash":"888ce4d4ec7bb252f955c215994f218abf3c5a5e","modified":1612765016824},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/run_backup.png","hash":"2abb657a6a70b310c5471311cc2a083cccc983eb","modified":1612765016828},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/update_config.png","hash":"e801b631fa54f2c9f2482b21e306de1a95c93c9d","modified":1612765016898},{"_id":"source/opensource/mongodb-backup-manager/static/img/notifications.png","hash":"b135e49c0f018af13369df8bf2d89b78c72ceae6","modified":1612765016950},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/databases.png","hash":"65c824ae83a84b39c9aef8773ba0e25a42fe8d70","modified":1612765016705},{"_id":"source/opensource/mongodb-backup-manager/static/img/databases.png","hash":"65c824ae83a84b39c9aef8773ba0e25a42fe8d70","modified":1612765016905},{"_id":"source/images/svelte3-intro/book-cart-if.gif","hash":"ef8c20a3e70d033089f25ce4828adbd74e5abc6a","modified":1612765016537},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/notifications.png","hash":"b135e49c0f018af13369df8bf2d89b78c72ceae6","modified":1612765016805},{"_id":"source/images/svelte3-intro/book-cart-reactive.gif","hash":"46b8e503eae5105fdff15ccdc6911f6ce0830f61","modified":1612765016546},{"_id":"source/opensource/mongodb-backup-manager/static/img/multiple.gif","hash":"36912218217c9b88c6b359996c1d4ddbb3a718ae","modified":1612765016911},{"_id":"source/images/css-in-js/styled-component-form.png","hash":"32f1877b622068fe8a7477d60c58d084be433bf4","modified":1612765016496},{"_id":"source/images/css-in-js/radium-form.png","hash":"4b560c1e3c345f3b0314393de43fb1d34fb666e7","modified":1612765016470},{"_id":"source/images/svelte3-intro/book-input-event-bind.gif","hash":"286eb3e354a72b19c7d24a0ca878de5287348ea0","modified":1612765016600},{"_id":"source/images/svelte3-intro/book-input-not-bind.gif","hash":"86b5a3621a15d3823df080920f317543ff036c57","modified":1612765016610},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/multiple.gif","hash":"36912218217c9b88c6b359996c1d4ddbb3a718ae","modified":1612765016716},{"_id":"source/opensource/mongodb-backup-manager/static/img/real-time.gif","hash":"26389df09865eeab3c7cafbcef5eed52858ec7da","modified":1612765016956},{"_id":"source/opensource/simple/build/static/js/2.f6114ee3.chunk.js","hash":"3fcece14a3cfbc3f6a7a1c8200c64cc6aaab3fef","modified":1612765016999},{"_id":"source/images/css-in-js/styled-component-form-devtools.png","hash":"8c950f77e391758bcd8ec274191673f03432469b","modified":1612765016483},{"_id":"source/images/svelte3-intro/book-cart-total.gif","hash":"57d1c754d937db2ec3ad8c9fa4fd0bb73e549392","modified":1612765016559},{"_id":"source/opensource/mongodb-backup-manager/js/app.js","hash":"f214c7a2923be512362f8fff548ec75951a4c380","modified":1612765016679},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/real-time.gif","hash":"26389df09865eeab3c7cafbcef5eed52858ec7da","modified":1612765016817},{"_id":"source/images/svelte3-intro/book-cart.gif","hash":"2bf76907f1a0e9ed89ffe16de9d29c8f5a7ba3a9","modified":1612765016576},{"_id":"source/images/jamstack/demo.gif","hash":"4f9124ce5d47f17234c62c09eae37f5381b04981","modified":1612765016516},{"_id":"source/opensource/mongodb-backup-manager/js/app.js.map","hash":"9520fe75ec4a159041771efba04dbc69b1b62a44","modified":1612765016686},{"_id":"source/images/svelte3-intro/book-input-bind.gif","hash":"1bb30e85e9763df50a656c76e458fcccbeabebc3","modified":1612765016591},{"_id":"source/opensource/simple/build/static/js/2.f6114ee3.chunk.js.map","hash":"53c573b33e57c7492aed8972ba17d0ef8603abaa","modified":1646385080446},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/new_backup.gif","hash":"7a89813b61ee841711a1d3febe1d998b6557234d","modified":1612765016772},{"_id":"source/opensource/mongodb-backup-manager/static/img/new_backup.gif","hash":"7a89813b61ee841711a1d3febe1d998b6557234d","modified":1612765016935},{"_id":"source/opensource/mongodb-backup-manager/static/img/update.gif","hash":"ab6a31908faa602693ce48bba7786913ac7b80ee","modified":1612765016986},{"_id":"source/opensource/mongodb-backup-manager/src/static/img/update.gif","hash":"ab6a31908faa602693ce48bba7786913ac7b80ee","modified":1612765016892},{"_id":"source/images/svelte3-intro/book-list.gif","hash":"7bc8f30bd589db2072e04a638dacde2f15f49e83","modified":1612765016652},{"_id":"public/content.json","hash":"35c02cd9e44d21607d814516ea5783a4ee7da218","modified":1646659282320},{"_id":"public/about/index.html","hash":"1edd08d803c898bfe20d518d436918ef19d109ce","modified":1646659282320},{"_id":"public/2022/03/07/实现JavaScript语言解释器-三/index.html","hash":"8d575be47bf572177d7514347c880a34fce0ba3f","modified":1646659282320},{"_id":"public/2021/04/18/实现JavaScript语言解释器-二/index.html","hash":"3f6840d1e31556e50abb9eaec89de69ed791da72","modified":1646659282320},{"_id":"public/2020/10/29/实现JavaScript语言解释器-一/index.html","hash":"5c5e8eb7aa67df6e7714d145e715414fde3a83ed","modified":1646659282320},{"_id":"public/2020/07/22/React-Hook测试指南/index.html","hash":"8d80230b2ea254f9e28e282f5cd24dd3f0630842","modified":1646659282320},{"_id":"public/2020/07/15/React-Hook实践指南/index.html","hash":"165cfbd27a0c013c248972fa12add39150e14987","modified":1646659282320},{"_id":"public/2020/04/29/React为什么需要Hook/index.html","hash":"0eeabcf16184c638cfd1503bbc4327fa64b232b6","modified":1646659282320},{"_id":"public/2020/04/22/进击的JAMStack/index.html","hash":"740dc2ecebe38b0086db04138bb9b96bff704680","modified":1646659282320},{"_id":"public/2020/02/17/yarnv2/index.html","hash":"2a2efc35254e75c8185f75bd358b671b945f014d","modified":1646659282320},{"_id":"public/2020/01/19/CSS-in-JS的好与坏/index.html","hash":"d6ab0c40cef0fd04397a113c7e5203608f9f7888","modified":1646659282320},{"_id":"public/2020/01/08/窥探现代浏览器架构-三/index.html","hash":"7d934a55b5dd541e92cd6024a2d13730142ad38f","modified":1646659282320},{"_id":"public/2020/01/08/窥探现代浏览器架构-四/index.html","hash":"5c1c3715465baa76d1355fd709fdec77ade643aa","modified":1646659282320},{"_id":"public/2019/12/27/窥探现代浏览器架构-二/index.html","hash":"1e5f26b83ace53014f6107ecdf77da87c8c8cebe","modified":1646659282320},{"_id":"public/2019/12/25/窥探现代浏览器架构-一/index.html","hash":"073488cdb8cda9c32e1df0bc69456280f6f6bdad","modified":1646659282320},{"_id":"public/2019/12/23/几个提高效率的consoleAPIs/index.html","hash":"4518d8d6fdff96337782b64ec4a81253b14ec422","modified":1646659282320},{"_id":"public/2019/12/17/Svelte-3-初学者完全指南/index.html","hash":"830a5d89e4aff8b60e05f841661eb9a2e64f3232","modified":1646659282320},{"_id":"public/2019/12/11/JavaScript小技巧-数组篇/index.html","hash":"5d3687228a73bb144bd43d6603485e1746d77cfd","modified":1646659282320},{"_id":"public/2019/12/05/ECMAScript2019-ES10新属性/index.html","hash":"31773d5e123612c05df932ab8db346dccdf3049e","modified":1646659282320},{"_id":"public/archives/index.html","hash":"48df4c6b19123f9ade01fc49209c705b4e98c02d","modified":1646659282320},{"_id":"public/archives/page/2/index.html","hash":"21a108763180fa470604f3de6561d95e3cee21ff","modified":1646659282320},{"_id":"public/archives/2019/index.html","hash":"85bbbbec663853d0ab2cf4d645dadddc45db4e11","modified":1646659282320},{"_id":"public/archives/2019/12/index.html","hash":"79012d99c3df63a732bac5c71d0ce169f9113b10","modified":1646659282320},{"_id":"public/archives/2020/index.html","hash":"92d7af978f4c666f90506bafef1eb9be9fa42c34","modified":1646659282320},{"_id":"public/archives/2020/01/index.html","hash":"b636d4dae5327cf1e44d28d54ecf0e31974f80f9","modified":1646659282320},{"_id":"public/archives/2020/02/index.html","hash":"ed99edce2caf79cca68e1076109a46fe8e58630e","modified":1646659282320},{"_id":"public/archives/2020/04/index.html","hash":"48b9f3991de12e3785275953cced64cb7780e055","modified":1646659282320},{"_id":"public/archives/2020/07/index.html","hash":"7d72376e406af5fbf31cce38f38dbd9c8cd2be15","modified":1646659282320},{"_id":"public/archives/2020/10/index.html","hash":"827ee075a1b607085be66923749df1bdec1a3749","modified":1646659282320},{"_id":"public/archives/2021/index.html","hash":"a416dec6968e2898d67a20f130444b4858304e1c","modified":1646659282320},{"_id":"public/archives/2022/index.html","hash":"acfcf1abbe691e533db1e618dd22db8fb7abe072","modified":1646659282320},{"_id":"public/archives/2022/03/index.html","hash":"2509040898095de3b3a7798ad23cb62fa58f173f","modified":1646659282320},{"_id":"public/archives/2021/04/index.html","hash":"7bb06ec4963d1550cf99cd2e3d9b926d2a3b93ea","modified":1646659282320},{"_id":"public/index.html","hash":"712d06ab8cc294c0ab3bdf0a4774df9a6c57d083","modified":1646659282320},{"_id":"public/page/2/index.html","hash":"444ecac6cd1eb5521db76b3880e0f18631cf70ff","modified":1646659282320},{"_id":"public/tags/CSS/index.html","hash":"01144e0ac49f528d71b938766319a44abb943cf9","modified":1646659282320},{"_id":"public/tags/CSS-in-JS/index.html","hash":"a22a70ed990b37f442a3b503b05bd7d75c1a1a6d","modified":1646659282320},{"_id":"public/tags/JavaScript/index.html","hash":"59455643e39e628e872e2de25e0e31720106dd08","modified":1646659282320},{"_id":"public/tags/ECMAScript/index.html","hash":"84bbf971b89a46ddac75eb6337f022966a6ee06d","modified":1646659282320},{"_id":"public/tags/2019/index.html","hash":"ad97c77278811557e31247249006d212e34e14f7","modified":1646659282320},{"_id":"public/tags/React/index.html","hash":"f87421f2b411a890be82bd25972eee83c29b91de","modified":1646659282320},{"_id":"public/tags/Hook/index.html","hash":"4ee4a494ad0845ecbf53a3831c1ece228fed06cc","modified":1646659282320},{"_id":"public/tags/Svelte/index.html","hash":"d285c661f6a801aa6ef46904fe950d8114bc3dd4","modified":1646659282320},{"_id":"public/tags/testing/index.html","hash":"0da464e9330843cbe106de47cbbe9a4cda70b566","modified":1646659282320},{"_id":"public/tags/react/index.html","hash":"3faa3e049d44403968e8df2a7e6e99fd2bd56b2e","modified":1646659282320},{"_id":"public/tags/hook/index.html","hash":"61c7857fba1e3a6a461c9db63e7ae8dfa52c9dc4","modified":1646659282320},{"_id":"public/tags/前端开发技巧/index.html","hash":"d7279b0e2e8965aa63498f52d6b10cfad02cd028","modified":1646659282320},{"_id":"public/tags/yarn/index.html","hash":"299f26eb124f7b72b41aa52e8f68de417b27bdab","modified":1646659282320},{"_id":"public/tags/TypeScript/index.html","hash":"85e6722be8076150080142fb1385138c2550c778","modified":1646659282320},{"_id":"public/tags/Interpreter/index.html","hash":"e9613fbea9ded1f2550d9d3bed2e8c567459ecbe","modified":1646659282320},{"_id":"public/tags/编译原理/index.html","hash":"98c2e4ba93688ee240afb13f6040d18e760fcfab","modified":1646659282320},{"_id":"public/tags/Chrome/index.html","hash":"4a866519f331b7913f5f485693f740aec098d362","modified":1646659282320},{"_id":"public/tags/浏览器/index.html","hash":"5efce583aaf0faeb521a75d92b9a0e195ee46ebb","modified":1646659282320},{"_id":"public/tags/Markdown/index.html","hash":"7d8bfeca34dbbf82bab1d53ec1fb6e12182d2d21","modified":1646659282320},{"_id":"public/tags/GraphQL/index.html","hash":"56c134a4867bbc7c73a0f08a9b021a1bbf7a2b0b","modified":1646659282320},{"_id":"public/categories/JavaScript/index.html","hash":"cdb10584ce0245eeb190b960bea0a0d3f6055f04","modified":1646659282320},{"_id":"public/categories/前端/index.html","hash":"643cee72282bd38655d58d24109b9dc256050929","modified":1646659282320},{"_id":"public/tags/index.html","hash":"9dab30ff85ec91dc0e3de55c6e6d47cd3acf7525","modified":1646659282320},{"_id":"public/categories/index.html","hash":"c6ccd1b2050efaac6cd1fb4ec413528acc4a5835","modified":1646659282320},{"_id":"public/images/gopherjs.png","hash":"3fe145f682449e06ab97aab30df9ff9c5022cdd8","modified":1646659282320},{"_id":"public/images/wechat_qr.jpg","hash":"9d5c1c622ec205f9e71d6b3b63097c21748c07f3","modified":1646659282320},{"_id":"public/gallery/thumbnails/css-in-js.png","hash":"7c5fdab1fcf8ce07e88401fe14230367e6e922f9","modified":1646659282320},{"_id":"public/CNAME","hash":"4dd67997f3ebe1498db47bd187114fe0b7be5a81","modified":1646659282320},{"_id":"public/gallery/thumbnails/gatsby.jpg","hash":"e48769cd9f23662e4c1d8f7957ce7abf612110eb","modified":1646659282320},{"_id":"public/gallery/thumbnails/react-hook.jpg","hash":"d732b756955897ff2b6f90b7a8b317c27523f410","modified":1646659282320},{"_id":"public/gallery/thumbnails/simple-js.jpg","hash":"001de6fb592d2512e2b0d39f0b969822ad3f3f61","modified":1646659282320},{"_id":"public/gallery/thumbnails/simple-js.png","hash":"d17a3516e9ab768500bb14099f59a18556c00e95","modified":1646659282320},{"_id":"public/gallery/thumbnails/yarn2.png","hash":"46830ce79d815fe0d544890478a10af55e199184","modified":1646659282320},{"_id":"public/images/chrome/coalescedevents.png","hash":"fb5dbad4ffe08c06bde275a879d08aed22ea9f1c","modified":1646659282320},{"_id":"public/images/chrome/computedstyle.png","hash":"53d93bfc784048f856dd309a8c7a5943740d0438","modified":1646659282320},{"_id":"public/gallery/thumbnails/svelte_intro.png","hash":"56167a83bd8bb604f23ec85ba86d519159bbd640","modified":1646659282320},{"_id":"public/images/chrome/drawgame.png","hash":"015b603069b37c5f8aadb7e0a28f259982b58ca8","modified":1646659282320},{"_id":"public/images/chrome/getCoalescedEvents.png","hash":"bbb8d58f2f9b73caaaabe42e41f1e7a242d26643","modified":1646659282320},{"_id":"public/images/chrome/composit.png","hash":"3ac7e6ad1eb4b352187e6474cebf944387126919","modified":1646659282320},{"_id":"public/images/chrome/input.png","hash":"b2358b9cb806e51cefe3347c3f320623a1f0783b","modified":1646659282320},{"_id":"public/images/chrome/hittest.png","hash":"09d7470a814d83ecea900dde5c2b0802cfb6c7d3","modified":1646659282320},{"_id":"public/images/chrome/layout.png","hash":"5c6453bb1c9b9021b7829f88f5c5dafc06c39f25","modified":1646659282320},{"_id":"public/images/chrome/layer.png","hash":"295dcff06583ebe93b64b0567695c3ce66decd9a","modified":1646659282320},{"_id":"public/images/chrome/pagejank2.png","hash":"1e9d1fc772c9ab720384f1eae6d773980a3eecc0","modified":1646659282320},{"_id":"public/images/chrome/isolation.png","hash":"cc37012d6ad6dccfbf18263057c70704eb836f51","modified":1646659282320},{"_id":"public/images/chrome/nfsr1.png","hash":"5f0327402c6e71b31f1489811a953ac305670bae","modified":1646659282320},{"_id":"public/images/chrome/navstart.png","hash":"aa2ff67bfc85902b02763494650dfcebf3071cf2","modified":1646659282320},{"_id":"public/images/chrome/pagejank1.png","hash":"65ac8323c507a1beb23b17698989edf7fca43ebf","modified":1646659282320},{"_id":"public/images/chrome/rawevents.png","hash":"4e5fc3ad8728cdd73775d7d1ca8790901bbc5232","modified":1646659282320},{"_id":"public/images/chrome/paint.png","hash":"f102e6b86b3d8f7f03ec16198bbe0a34e208cd6e","modified":1646659282320},{"_id":"public/images/chrome/raf.png","hash":"6195003a09674bbc70b0d37e3799506a410f8c59","modified":1646659282320},{"_id":"public/images/chrome/process-thread.png","hash":"428b9690520df6feecce1fd889aaa9938b708734","modified":1646659282320},{"_id":"public/images/chrome/response.png","hash":"51a224e9d447f8066f3edd68430274f76d67a461","modified":1646659282320},{"_id":"public/images/chrome/renderer.png","hash":"fee60c6b0ba7abd9d3fc68148a0313798a58eeee","modified":1646659282320},{"_id":"public/images/chrome/scope_lookup.png","hash":"8ad931988c3527243b33c4d6af284a0e72eae855","modified":1646659282320},{"_id":"public/images/console/css.png","hash":"d04cb28bf97f44eee067d3bf53bb021e3036f85a","modified":1646659282320},{"_id":"public/images/chrome/tellgame.png","hash":"5a8de24fa820d3c906ea25ad7bbd7563f02aef01","modified":1646659282320},{"_id":"public/images/console/assert.png","hash":"4cbb62f2fd11543a7be870686b833f5a5e1e2997","modified":1646659282320},{"_id":"public/images/console/level.png","hash":"6bf8b7592ef52630f40e77a09f655f463c6196d6","modified":1646659282320},{"_id":"public/images/console/count.png","hash":"92bccf772ce021ae75f523dd8fa59acceec99d24","modified":1646659282320},{"_id":"public/images/console/string-substitution.png","hash":"4316143768dc7104dff0ea4272cc258126348126","modified":1646659282320},{"_id":"public/images/console/time.png","hash":"acfd832f2bb961f8f470617e764ffbf4af7a3053","modified":1646659282320},{"_id":"public/images/css-in-js/above-the-fold.png","hash":"7508849758552dc8d55a08f4f51dc30d3ff81682","modified":1646659282320},{"_id":"public/images/simple/interpreter.jpg","hash":"90747acc61aeeb2ea294a63e3563e9213da80084","modified":1646659282320},{"_id":"public/images/simple/mustache.png","hash":"973daf788c703bae6b8051b6440e93e6f3e6a2f5","modified":1646659282320},{"_id":"public/images/simple/architecture.png","hash":"667bc7ace2189b514182c28702cefee4389c34d5","modified":1646659282320},{"_id":"public/images/yarn2/add-interactive.png","hash":"164d747a01bf5b7674385fa964f9278efd2eb999","modified":1646659282320},{"_id":"public/images/simple/lexical-analysis.png","hash":"776a86a83c4d991091ee65fc27cbf198535e5db8","modified":1646659282320},{"_id":"public/images/yarn2/log.png","hash":"a9e2682d250f18049d378a0d223341b11f5f3274","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/index.html","hash":"f6bb6f0de12b0d69cf3cd7c01d47cf7fa02426b4","modified":1646659282320},{"_id":"public/images/yarn2/version.png","hash":"46acef3ffd715349c69ff4f2291c29da6e2093f8","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/package.json","hash":"d8b79f6b2b9d1978cacd0396c78dc2807a1ec3d0","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/postcss.config.js","hash":"af3d019a99024f559ad4de7087363614fe0325e1","modified":1646659282320},{"_id":"public/opensource/simple/README.md","hash":"8a0f9b56c606de943d9663587e18e7e6525a299c","modified":1646659282320},{"_id":"public/opensource/simple/package.json","hash":"d0fc7caec8a2a7e8d029a41dd2386d98d7bf25dd","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/webpack.config.js","hash":"596b8a7cb4edc764dc2c299d884038cbbf583a92","modified":1646659282320},{"_id":"public/opensource/simple/config-overrides.js","hash":"3740768280e3a1839fb5bfe813cb5ca30990f61f","modified":1646659282320},{"_id":"public/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1646659282320},{"_id":"public/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1646659282320},{"_id":"public/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1646659282320},{"_id":"public/images/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1646659282320},{"_id":"public/images/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1646659282320},{"_id":"public/images/chrome/browser-arch.png","hash":"b884251c01cd09c7947def44caff12ad8bf801cb","modified":1646659282320},{"_id":"public/images/chrome/browserprocesses.png","hash":"a2bb268f9b09b5bfe55056b8570e82ad0de5b044","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/css/style.css.map","hash":"963a201fcf6d62e2c43f034f8559f135fc6aea69","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/css/style.css","hash":"21201fc5da4318a5161069e4d6404f24f5fbdc22","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/index.html","hash":"f6bb6f0de12b0d69cf3cd7c01d47cf7fa02426b4","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/app.js","hash":"707ce38c6b198892ed322ab27f0520b014ad5c77","modified":1646659282320},{"_id":"public/opensource/simple/build/asset-manifest.json","hash":"bef96a1a945476540bef3e073a4c640642bc1017","modified":1646659282320},{"_id":"public/opensource/simple/build/index.html","hash":"b8d2b0c90eb3cd44257305918c48997852becf9b","modified":1646659282320},{"_id":"public/opensource/simple/build/logo512.png","hash":"46915f9d02694ed49bfc7a9534947684103dc3fe","modified":1646659282320},{"_id":"public/opensource/simple/build/logo192.png","hash":"7f4f2d68782a7fafceda84554ecab9b489877500","modified":1646659282320},{"_id":"public/opensource/simple/build/favicon.ico","hash":"9867af024c6549908fb72feea145b21b8658d090","modified":1646659282320},{"_id":"public/opensource/simple/build/robots.txt","hash":"044ce68f83ee8543475fea16f6e3a73d28a1c6d5","modified":1646659282320},{"_id":"public/opensource/simple/public/logo192.png","hash":"7f4f2d68782a7fafceda84554ecab9b489877500","modified":1646659282320},{"_id":"public/opensource/simple/build/service-worker.js","hash":"eefaaf4c6b01b3c7f53b0f56f17062c9557c1268","modified":1646659282320},{"_id":"public/opensource/simple/build/manifest.json","hash":"4e0afe7f81a71f41366cd7859ca34776b8107923","modified":1646659282320},{"_id":"public/opensource/simple/build/precache-manifest.d9c606d6d37614a9a361b3c00ed12231.js","hash":"6aaf354a8ec7eda0fba92236f6e534db7b41a48f","modified":1646659282320},{"_id":"public/opensource/simple/public/favicon.ico","hash":"9867af024c6549908fb72feea145b21b8658d090","modified":1646659282320},{"_id":"public/opensource/simple/public/logo512.png","hash":"46915f9d02694ed49bfc7a9534947684103dc3fe","modified":1646659282320},{"_id":"public/opensource/simple/public/manifest.json","hash":"4e0afe7f81a71f41366cd7859ca34776b8107923","modified":1646659282320},{"_id":"public/opensource/simple/public/robots.txt","hash":"044ce68f83ee8543475fea16f6e3a73d28a1c6d5","modified":1646659282320},{"_id":"public/opensource/simple/src/App.css","hash":"0be63cf9418edda239b2c4eedf70b0d157fdbedf","modified":1646659282320},{"_id":"public/opensource/simple/public/index.html","hash":"93ff6c80c3ab44a927d219ee8dae6685ec4d0101","modified":1646659282320},{"_id":"public/opensource/simple/src/index.css","hash":"5c1d01fe7c2c646773fff312b7e9574f1e8852e1","modified":1646659282320},{"_id":"public/opensource/simple/src/App.test.js","hash":"ba2347a799e6116663715e0ccdfa4893668839ba","modified":1646659282320},{"_id":"public/opensource/simple/src/Code.js","hash":"b2a7c04bbd203c21bbf3472aa1fa132df8d4f87e","modified":1646659282320},{"_id":"public/opensource/simple/src/App.js","hash":"147f8ce84fab20db7eb78f63016095bd796bf79c","modified":1646659282320},{"_id":"public/opensource/simple/src/logo.svg","hash":"aff68d3eb65414ecd2fa6e0e9d43cd7485a935c9","modified":1646659282320},{"_id":"public/opensource/simple/src/serviceWorker.js","hash":"69b8ef82bd5db45340dc1747c7b32b2c0cf8f0f4","modified":1646659282320},{"_id":"public/opensource/simple/src/testCase.js","hash":"bc0d244369ea0fa68b09d8c08ee8b9500811b21d","modified":1646659282320},{"_id":"public/opensource/simple/src/setupTests.js","hash":"527047b42e70937f24957bb83307f9f396117d80","modified":1646659282320},{"_id":"public/opensource/simple/src/index.js","hash":"79990276a4b694aaddd590516a455c1ffc780d45","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/Routes/routeMap.js","hash":"f99797c9e0b90ad276c7ec5d738a4f1582cdfdb0","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/utility/smoothscroll.js","hash":"adc98d48633db59814da04cfbd608aeb0f9a410e","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/sass/style.scss","hash":"a9c8a34d33e261a35f8b6fce2018366d8283528a","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Header/MenuIcon.js","hash":"b11d0eb4e462ed01dec340017a286f041dd83162","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/GetStarted/index.js","hash":"ab6baa6c515a05ad8046a611f2166346c3f6c3ee","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/GetStarted/style.scss","hash":"a4b5ed89bb3c49e0dbf01c2fc631c49d0ec037a5","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Header/style.scss","hash":"ed35d6de92ef2d75e06d1260be04c460e91a50de","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Header/Logo.js","hash":"a286219361786e4f8eee2269832ccb4ffaf5b559","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Header/index.js","hash":"61a91b918cad2fcb87440155ad215a9301bc1550","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Header/Navigation.js","hash":"57ad0cc66c1cdf0d01ebe162c2489cfe3998a495","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Home/Section.js","hash":"0aa7f0e8268e413e76e7b3066d2bfa61ecaf4db4","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Home/BackToTop.js","hash":"5882537fa7e8dc4b9f2fc48e750aa76992a91255","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Home/index.js","hash":"18f95473723bfb93b4ca133ae50a0cbf9e55edce","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Docs/SideBar.js","hash":"86593e82dbbd1878a18b8c2ff6e43c2b3995bdd8","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Docs/deleteDoc.js","hash":"21af8c44dacc3e10eec35c505116ff7c634e5c99","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Home/style.scss","hash":"b83ab6789c108c70554f9a8f2b5bda0c285c9a44","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Docs/index.js","hash":"f3dea2163b5d366296d9068b5928cb90254b29b3","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Docs/notificationsDoc.js","hash":"3e65c9e6938600c8e140312fc8d0e2a2fe34d5da","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Docs/newDoc.js","hash":"d3386446ba57940aebb011d68ea84552986cac71","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Docs/restoreDoc.js","hash":"9f6d58c08017da65734d7789b0cf300f66f0fc76","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Docs/rolesDoc.js","hash":"e1b7b20d8c0429de8315fc4ce3399b6e1c7d4022","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Docs/statisticsDoc.js","hash":"b2c4f704d099839680c261dc27b6e9229ce76246","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Docs/resumeDoc.js","hash":"486f50389aa7a3794b988f4a5610b64a5fb101ed","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Docs/runDoc.js","hash":"922cb16422d5369afbe29e6d76c7d9de935b9171","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Docs/serverSetupDoc.js","hash":"3b7ccf10b10e58372fe1ff77f9f63a8c9669f03c","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Docs/updateDoc.js","hash":"84d2b711b81a6957564b9443945b62f467af80f3","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Docs/style.scss","hash":"afdbc3a4dc79a15cb158fb5f15643576c0c43730","modified":1646659282320},{"_id":"public/opensource/simple/build/static/js/2.f6114ee3.chunk.js.LICENSE.txt","hash":"adbd495c2402e7bcd47f5d3a22220bc274986ade","modified":1646659282320},{"_id":"public/opensource/simple/build/static/css/main.5f361e03.chunk.css","hash":"09e25a0210880a572f0b7596566e0f2d14b4b5c1","modified":1646659282320},{"_id":"public/opensource/simple/build/static/js/runtime-main.e4d3d915.js","hash":"a5a32c227818509d5ed93dec6d032eda889700c7","modified":1646659282320},{"_id":"public/opensource/simple/build/static/js/main.9d04a46a.chunk.js","hash":"23886207b2073f8e249907cb59de824091e6fe71","modified":1646659282320},{"_id":"public/opensource/simple/build/static/css/main.5f361e03.chunk.css.map","hash":"1b8177e6dd53322f83ead8992d8c0ce878b31a95","modified":1646659282320},{"_id":"public/opensource/simple/build/static/js/main.9d04a46a.chunk.js.map","hash":"287278529d3566d1198c2d1bea38844e76609e00","modified":1646659282320},{"_id":"public/opensource/simple/build/static/js/runtime-main.e4d3d915.js.map","hash":"397349803648a8c5e1ab2ffbfcfe230b89c1f981","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Docs/data.js","hash":"fa06a2f4afc277b4e050febac5104bde882aaa01","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/components/Docs/authDoc.js","hash":"a8d7cf529bc9bcd4ad2781c9252405cec94b1fd1","modified":1646659282320},{"_id":"public/images/chrome/CPU.png","hash":"5650c734d895796a322ec8730e0caf3565ea0ac9","modified":1646659282320},{"_id":"public/images/chrome/GPU.png","hash":"0ebe13217a2b6d182bec4a9368ed3f2921d8beb4","modified":1646659282320},{"_id":"public/images/chrome/beforeunload.png","hash":"ba40fb8539043766da22d6c9aca3e9dc907d5b3f","modified":1646659282320},{"_id":"public/images/chrome/browser-arch2.png","hash":"9162a7aabbfeb7d6160dbb9004014a1d45f97a57","modified":1646659282320},{"_id":"public/images/chrome/commit.png","hash":"851f0f72c926dab7715badfccc728678af0e3081","modified":1646659282320},{"_id":"public/images/chrome/browserui.png","hash":"6d0b17bd7ed59eea2f02f615f0d4ea1be18767bc","modified":1646659282320},{"_id":"public/images/chrome/hw-os-app.png","hash":"c2e32114e0177835158b34886e8a73a912c917bf","modified":1646659282320},{"_id":"public/images/chrome/dom.png","hash":"d36f56da3290733e8115a82cac4db219389a55a8","modified":1646659282320},{"_id":"public/images/chrome/findrenderer.png","hash":"bced82301c3a2f3209b844f6ed947ff7cf357105","modified":1646659282320},{"_id":"public/images/chrome/input_event.png","hash":"fad986c4278ac32630f7de227c0af440822d2266","modified":1646659282320},{"_id":"public/images/chrome/loaded.png","hash":"abe1d5cfca5327d30e48d9213648fe0a6b806903","modified":1646659282320},{"_id":"public/images/chrome/navpreload.png","hash":"faad143f6875cb940af08305e0d0488b1a6f692b","modified":1646659282320},{"_id":"public/images/chrome/memory.png","hash":"750eda12db01f582aa44c3420c28ee9a9d4534b6","modified":1646659282320},{"_id":"public/images/chrome/nfsr2.png","hash":"1b68fc559a4614d704b9049fdcfdb7cab6b1c01d","modified":1646659282320},{"_id":"public/images/chrome/rasterizing.gif","hash":"e1f3ddd0954e36646319c2503692ccc5d6c1d2ec","modified":1646659282320},{"_id":"public/images/chrome/servicfication.png","hash":"a1c9d8eab895ac55c602284565b261903fbae28a","modified":1646659282320},{"_id":"public/images/chrome/raster.png","hash":"7273e76521f8ccf56fc341c66d95434f6434b7db","modified":1646659282320},{"_id":"public/images/chrome/sniff.png","hash":"8d652a13869794908fc7747d9cdc8d4d4ba6486b","modified":1646659282320},{"_id":"public/images/chrome/serviceworker.png","hash":"71d7be7cea922723039e323a8beef15049c8baa0","modified":1646659282320},{"_id":"public/images/chrome/tabs.png","hash":"7a460a0d7ebfd3f51ef5d26ccaa4c280f7a592b9","modified":1646659282320},{"_id":"public/images/chrome/tree.png","hash":"26c493671aa45f661aae082b426bdf413a7ab14a","modified":1646659282320},{"_id":"public/images/chrome/tabs.svg","hash":"82ddc5970d1db1e0ad6f16a49d0d454f160a4838","modified":1646659282320},{"_id":"public/images/chrome/unload.png","hash":"139f32eb9bbd8e3789fd760ce49c29c3e2922dd9","modified":1646659282320},{"_id":"public/images/chrome/trees.gif","hash":"75b6ff6f2ce966ed52189b2da876b35dc9389903","modified":1646659282320},{"_id":"public/images/chrome/workerprocess.png","hash":"2e5d1b4948ed40092f089c68ce72d1ca52ad92ad","modified":1646659282320},{"_id":"public/images/chrome/zindex.png","hash":"5f2fe66d7f314daf1d37cbae52560e77bafd51fe","modified":1646659282320},{"_id":"public/images/console/level-verbose.png","hash":"86e5b8a17b48499b6d179a6b819f4fff3dfc74d0","modified":1646659282320},{"_id":"public/images/jamstack/demo-structure.png","hash":"eec8d329392ccf19d63ded20381076bea8847c7c","modified":1646659282320},{"_id":"public/images/jamstack/blog-structure.png","hash":"73ec12f3110a5fb87d3387d8e5e903237634ccc8","modified":1646659282320},{"_id":"public/images/console/table.png","hash":"755e462028b413d98b2b0f59dbfe8d70bc891b5e","modified":1646659282320},{"_id":"public/images/svelte3-intro/bootstrap-structure.png","hash":"33e5b25586a940965553e93568093a1e09450425","modified":1646659282320},{"_id":"public/images/simple/bnf.png","hash":"c942357ed8a02c451d94b127c8aca6453d8ccf98","modified":1646659282320},{"_id":"public/images/svelte3-intro/bootstrap.png","hash":"f058f65cc7f703dc8ec9a9ba8dd48a42d3d06af1","modified":1646659282320},{"_id":"public/images/svelte3-intro/bundle-size.png","hash":"f1c9e2373ce18b7447b429e0cec5ff9afc0be4b2","modified":1646659282320},{"_id":"public/images/alipay.jpg","hash":"06858e34370cee357bd742ec09f0ed0cfa0c2b62","modified":1646659282320},{"_id":"public/images/wechat_pay.jpg","hash":"d6ea80c3b6942aaab5e1dd752cded3b0ec5f1661","modified":1646659282320},{"_id":"public/images/Superman-js.jpg","hash":"479bd15138686b9fc99797742e7a72e4df29c558","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/static/img/new_review.png","hash":"2c4c309c6f3df16328ede6d28f0acf87434516d2","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/static/img/new_review.png","hash":"2c4c309c6f3df16328ede6d28f0acf87434516d2","modified":1646659282320},{"_id":"public/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1646659282320},{"_id":"public/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1646659282320},{"_id":"public/css/style.css","hash":"ce4b8320c2280b82e0d0c255cfbbe31fd8a0c264","modified":1646659282320},{"_id":"public/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1646659282320},{"_id":"public/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1646659282320},{"_id":"public/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1646659282320},{"_id":"public/js/gallery.js","hash":"bb74e694457dc23b83ac80cf5aadcd26b60469fd","modified":1646659282320},{"_id":"public/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1646659282320},{"_id":"public/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1646659282320},{"_id":"public/js/main.js","hash":"faee41896e7bb3373ba5032b82d0b21a0321cea5","modified":1646659282320},{"_id":"public/images/simple/fsm.png","hash":"2121e661224db16fa16a3aa736707e53cfbd9602","modified":1646659282320},{"_id":"public/images/svelte3-intro/bookcard-props.png","hash":"4218b0435843dc4e70980df1c18683cfe9ecf18f","modified":1646659282320},{"_id":"public/images/console/label-count.png","hash":"8de9f0df906ac5d26839205bbeeb675d26092f95","modified":1646659282320},{"_id":"public/images/svelte3-intro/bookcard-markup.png","hash":"ccf15a218375cd7f7a67983d218d5bc60008f6cd","modified":1646659282320},{"_id":"public/images/yarn2/berry-pnp.png","hash":"5545b0576cc42d7d380b848aa96521112b08de92","modified":1646659282320},{"_id":"public/images/svelte3-intro/bookcard-css.png","hash":"afb12ffc674e0f6f210648733e8ac7cb76ccbf05","modified":1646659282320},{"_id":"public/images/console/trace.png","hash":"0b7d8d619b9a69ccf82bd76231889c3956ef37dd","modified":1646659282320},{"_id":"public/gallery/thumbnails/chrome.png","hash":"3cdfcdf7d95fdf9808008adeeae79fef381c81f9","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/static/img/statistics.png","hash":"0c20355d88d6823b0090d859719fb1f1a918b256","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/static/img/statistics.png","hash":"0c20355d88d6823b0090d859719fb1f1a918b256","modified":1646659282320},{"_id":"public/images/console/group.png","hash":"e24ede1fc829486767d80090485d6ab3fe8fe3bf","modified":1646659282320},{"_id":"public/images/chrome/devtool.png","hash":"970996a7d4026c7326b830fae6d0c3c00ae401b0","modified":1646659282320},{"_id":"public/images/simple/jquery.png","hash":"046259256f58017792ffc0f184e0008f6156bd6c","modified":1646659282320},{"_id":"public/images/chrome/memory.svg","hash":"cc5b31fae5c6321f927083021292a40068b157a1","modified":1646659282320},{"_id":"public/images/simple/native.png","hash":"46f81fecfc3f7a7d5ed0d7689b0461f55238e1a3","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/static/img/new_credential.png","hash":"7046e1f52727da346ebc9ecf24f2d377cc13acd3","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/static/img/new_history_conn.png","hash":"67acfd1d0204a6d4ce51e0166a0e23c60cc04af4","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/static/img/resume.png","hash":"499676a6ae8601e3c981b6b62b389b444658a66e","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/static/img/view_data.png","hash":"b06648cb0007864d3a88f7c46ae12c3b812f2684","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/static/img/new_credential.png","hash":"7046e1f52727da346ebc9ecf24f2d377cc13acd3","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/static/img/new_history_conn.png","hash":"67acfd1d0204a6d4ce51e0166a0e23c60cc04af4","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/static/img/new_config.png","hash":"a13c0145ac59cde000cc53a97192374b81ecd2a6","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/static/img/resume.png","hash":"499676a6ae8601e3c981b6b62b389b444658a66e","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/static/img/stop.png","hash":"cc2b38ce8cd96c219712bb4bfc3758638c6de99a","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/static/img/view_data.png","hash":"b06648cb0007864d3a88f7c46ae12c3b812f2684","modified":1646659282320},{"_id":"public/images/svelte3-intro/bootstrap-h1-css.png","hash":"4ff13217ed5fc4bca72829dff9797419ee4abb46","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/static/img/new_config.png","hash":"a13c0145ac59cde000cc53a97192374b81ecd2a6","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/static/img/stop.png","hash":"cc2b38ce8cd96c219712bb4bfc3758638c6de99a","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/static/img/update_config.png","hash":"e801b631fa54f2c9f2482b21e306de1a95c93c9d","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/static/img/dashboard.png","hash":"16077267678a3cf5346268f06265ef927ca02d46","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/static/img/dashboard.png","hash":"16077267678a3cf5346268f06265ef927ca02d46","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/static/img/run_backup.png","hash":"2abb657a6a70b310c5471311cc2a083cccc983eb","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/static/img/update_config.png","hash":"e801b631fa54f2c9f2482b21e306de1a95c93c9d","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/static/img/new_config_wizard.png","hash":"8e8e576599923c85a46ad5591af3685163b81bfe","modified":1646659282320},{"_id":"public/images/jamstack/build.png","hash":"9ac98a7b95a30ff876d8a1f03fb42259e52edaad","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/static/img/run_backup.png","hash":"2abb657a6a70b310c5471311cc2a083cccc983eb","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/static/img/delete_backup.png","hash":"bdcf67c69a49d19ebebdffaec50cdc9f135ac611","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/static/img/new_config_wizard.png","hash":"8e8e576599923c85a46ad5591af3685163b81bfe","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/static/img/delete_backup.png","hash":"bdcf67c69a49d19ebebdffaec50cdc9f135ac611","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/static/img/retore_config.png","hash":"888ce4d4ec7bb252f955c215994f218abf3c5a5e","modified":1646659282320},{"_id":"public/images/svelte3-intro/bookcard-book-input.png","hash":"c4c3df7e59ac2b7dc396da91b90cb187fa24f2ad","modified":1646659282320},{"_id":"public/images/chrome/workerprocess.svg","hash":"3ad2cefb1284be4185b72f5dce2a9537b5bcff59","modified":1646659282320},{"_id":"public/images/simple/english-sentence.png","hash":"396c4191572791f6fab808e4cd41679e0959bcd7","modified":1646659282320},{"_id":"public/images/chrome/composit.gif","hash":"ea45db5724e1fffd42aa1e985bd303286040c1ea","modified":1646659282320},{"_id":"public/images/chrome/servicfication.svg","hash":"4fc7f33f4e3bc8e3adba2ddd8c9d6367d2435353","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/static/img/databases.png","hash":"65c824ae83a84b39c9aef8773ba0e25a42fe8d70","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/static/img/databases.png","hash":"65c824ae83a84b39c9aef8773ba0e25a42fe8d70","modified":1646659282320},{"_id":"public/images/react-hook/wrapper-hell.jpg","hash":"7ec4b77a1711d4c51cf72c687d85875c0ed08e13","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/static/img/retore_config.png","hash":"888ce4d4ec7bb252f955c215994f218abf3c5a5e","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/static/img/notifications.png","hash":"b135e49c0f018af13369df8bf2d89b78c72ceae6","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/static/img/notifications.png","hash":"b135e49c0f018af13369df8bf2d89b78c72ceae6","modified":1646659282320},{"_id":"public/images/css-in-js/radium-form-css.png","hash":"51fa083a73a6f05f124878fda18b14faffa3d6c3","modified":1646659282320},{"_id":"public/opensource/simple/yarn.lock","hash":"46b130162efea6d0e85f2de2573744b54e8e9d04","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/static/img/multiple.gif","hash":"36912218217c9b88c6b359996c1d4ddbb3a718ae","modified":1646659282320},{"_id":"public/opensource/simple/build/static/js/2.f6114ee3.chunk.js","hash":"3fcece14a3cfbc3f6a7a1c8200c64cc6aaab3fef","modified":1646659282320},{"_id":"public/images/svelte3-intro/book-cart-if.gif","hash":"ef8c20a3e70d033089f25ce4828adbd74e5abc6a","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/static/img/real-time.gif","hash":"26389df09865eeab3c7cafbcef5eed52858ec7da","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/static/img/multiple.gif","hash":"36912218217c9b88c6b359996c1d4ddbb3a718ae","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/static/img/real-time.gif","hash":"26389df09865eeab3c7cafbcef5eed52858ec7da","modified":1646659282320},{"_id":"public/images/svelte3-intro/book-cart-reactive.gif","hash":"46b8e503eae5105fdff15ccdc6911f6ce0830f61","modified":1646659282320},{"_id":"public/images/css-in-js/styled-component-form.png","hash":"32f1877b622068fe8a7477d60c58d084be433bf4","modified":1646659282320},{"_id":"public/images/css-in-js/radium-form.png","hash":"4b560c1e3c345f3b0314393de43fb1d34fb666e7","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/js/app.js","hash":"f214c7a2923be512362f8fff548ec75951a4c380","modified":1646659282320},{"_id":"public/images/svelte3-intro/book-input-event-bind.gif","hash":"286eb3e354a72b19c7d24a0ca878de5287348ea0","modified":1646659282320},{"_id":"public/images/css-in-js/styled-component-form-devtools.png","hash":"8c950f77e391758bcd8ec274191673f03432469b","modified":1646659282320},{"_id":"public/images/svelte3-intro/book-input-not-bind.gif","hash":"86b5a3621a15d3823df080920f317543ff036c57","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/js/app.js.map","hash":"9520fe75ec4a159041771efba04dbc69b1b62a44","modified":1646659282320},{"_id":"public/images/svelte3-intro/book-cart-total.gif","hash":"57d1c754d937db2ec3ad8c9fa4fd0bb73e549392","modified":1646659282320},{"_id":"public/images/jamstack/demo.gif","hash":"4f9124ce5d47f17234c62c09eae37f5381b04981","modified":1646659282320},{"_id":"public/images/svelte3-intro/book-cart.gif","hash":"2bf76907f1a0e9ed89ffe16de9d29c8f5a7ba3a9","modified":1646659282320},{"_id":"public/images/svelte3-intro/book-input-bind.gif","hash":"1bb30e85e9763df50a656c76e458fcccbeabebc3","modified":1646659282320},{"_id":"public/opensource/simple/build/static/js/2.f6114ee3.chunk.js.map","hash":"53c573b33e57c7492aed8972ba17d0ef8603abaa","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/static/img/new_backup.gif","hash":"7a89813b61ee841711a1d3febe1d998b6557234d","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/static/img/new_backup.gif","hash":"7a89813b61ee841711a1d3febe1d998b6557234d","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/static/img/update.gif","hash":"ab6a31908faa602693ce48bba7786913ac7b80ee","modified":1646659282320},{"_id":"public/opensource/mongodb-backup-manager/src/static/img/update.gif","hash":"ab6a31908faa602693ce48bba7786913ac7b80ee","modified":1646659282320},{"_id":"public/images/svelte3-intro/book-list.gif","hash":"7bc8f30bd589db2072e04a638dacde2f15f49e83","modified":1646659282320}],"Category":[{"name":"JavaScript","_id":"cl0gqf6fe0005ucnx6ertgdqx"},{"name":"前端","_id":"cl0gqf6fj000cucnxctvldmrq"}],"Data":[],"Page":[{"title":"about","date":"2019-12-05T10:14:42.000Z","_content":"大家好，我是进击的大葱。我2016年毕业于北京邮电大学通信工程本科专业，现在正努力成为一个全面的全栈工程师。\n\n我的梦想是通过自己的努力去改变别人，然后改变世界。\n\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-12-05 18:14:42\n---\n大家好，我是进击的大葱。我2016年毕业于北京邮电大学通信工程本科专业，现在正努力成为一个全面的全栈工程师。\n\n我的梦想是通过自己的努力去改变别人，然后改变世界。\n\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","updated":"2021-02-08T06:16:56.368Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl0gqf6f20000ucnx9p0thynq","content":"<p>大家好，我是进击的大葱。我2016年毕业于北京邮电大学通信工程本科专业，现在正努力成为一个全面的全栈工程师。</p>\n<p>我的梦想是通过自己的努力去改变别人，然后改变世界。</p>\n<p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p>大家好，我是进击的大葱。我2016年毕业于北京邮电大学通信工程本科专业，现在正努力成为一个全面的全栈工程师。</p>\n<p>我的梦想是通过自己的努力去改变别人，然后改变世界。</p>\n<p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt=\"\"></p>\n"}],"Post":[{"title":"CSS in JS的好与坏","thumbnail":"/gallery/thumbnails/css-in-js.png","date":"2020-01-19T10:57:50.000Z","_content":"\n## 是什么\nCSS-in-JS是一种技术（technique），而不是一个具体的库实现（library）。简单来说CSS-in-JS就是**将应用的CSS样式写在JavaScript文件里面**，而不是独立为一些`.css`，`.scss`或者`less`之类的文件，这样你就可以在CSS中使用一些属于JS的诸如模块声明，变量定义，函数调用和条件判断等语言特性来提供灵活的可扩展的样式定义。值得一提的是，虽然CSS-in-JS不是一种很新的技术，可是它在国内普及度好像并不是很高，它当初的出现是因为一些`component-based`的Web框架（例如React，Vue和Angular）的逐渐流行，使得开发者也想将组件的CSS样式也一块封装到组件中去以**解决原生CSS写法的一系列问题**。还有就是CSS-in-JS在React社区的热度是最高的，这是因为React本身不会管用户怎么去为组件定义样式的问题，而Vue和Angular都有属于框架自己的一套定义样式的方案。\n\n本文将通过分析CSS-in-JS这项技术带来的好处以及它存在的一些问题来帮助大家判断自己是不是要在项目中使用CSS-in-JS。\n\n<!-- more-->\n\n## 不同的实现\n实现了CSS-in-JS的库有很多，[据统计](https://github.com/MicheleBertoli/css-in-js)现在已经超过了61种。虽然每个库解决的问题都差不多，可是它们的实现方法和语法却大相径庭。从实现方法上区分大体分为两种：唯一CSS选择器和内联样式（Unique Selector VS Inline Styles）。接下来我们会分别看一下对应于这两种实现方式的两个比较有代表性的实现：[styled-components](https://www.styled-components.com/)和[radium](https://formidable.com/open-source/radium/)。\n\n### Styled-components\n[Styled-components](https://www.styled-components.com/) 应该是CSS-in-JS最热门的一个库了，到目前为止github的star数已经超过了27k。通过styled-components，你可以使用ES6的[标签模板字符串](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)语法（Tagged Templates）为需要`styled`的Component定义一系列CSS属性，当该组件的JS代码被解析执行的时候，styled-components会动态生成一个CSS选择器，并把对应的CSS样式通过style标签的形式插入到head标签里面。动态生成的CSS选择器会有一小段哈希值来保证全局唯一性来避免样式发生冲突。\n\n[CSS-in-JS Playground](https://www.cssinjsplayground.com/)是一个可以快速尝试不同CSS-in-JS实现的网站，上面有一个简单的用styled-components实现表单的例子：\n\n![](/images/css-in-js/styled-component-form.png)\n\n从上面的例子可以看出，styled-components不需要你为需要设置样式的DOM节点设置一个样式名，使用完标签模板字符串定义后你会得到一个styled好的Component，直接在JSX中使用这个Component就可以了。接着让我们打开DevTools查看一下生成的CSS：\n\n![](/images/css-in-js/styled-component-form-devtools.png)\n\n从上面DevTools可以看出styled的Component样式存在于style标签内，而且选择器名字是一串随机的哈希字符串，这样其实实现了局部CSS作用域的效果（scoping styles），各个组件的样式不会发生冲突。除了styled-components，采用唯一CSS选择器做法的实现还有：[jss](https://github.com/cssinjs/jss)，[emotion](https://github.com/emotion-js/emotion)，[glamorous](https://github.com/paypal/glamorous)等。\n\n### Radium\n[Radium](https://formidable.com/open-source/radium/)是由FormidableLabs创建的在github上有超过7.2k star的CSS-in-JS库。Radium和styled-components的最大区别是它生成的是标签内联样式（inline styles）。由于标签内联样式在处理诸如`media query`以及`:hover`，`:focus`，`:active`等和浏览器状态相关的样式的时候非常不方便，所以radium为这些样式封装了一些标准的接口以及抽象。\n\n再来看一下radium在CSS-in-JS Playground的例子：\n\n![](/images/css-in-js/radium-form.png)\n\n从上面的例子可以看出radium定义样式的语法和styled-components有很大的区别，它要求你使用style属性为DOM添加相应的样式。打开DevTools查看一下radium生成的CSS：\n\n![](/images/css-in-js/radium-form-css.png)\n\n从DevTools上面inspect的结果可以看出，radium会直接在标签内生成内联样式。内联样式相比于CSS选择器的方法有以下的优点：\n* 自带局部样式作用域的效果，无需额外的操作\n* 内联样式的权重（specificity）是最高的，可以避免权重冲突的烦恼\n* 由于样式直接写在HTML中，十分方便开发者调试\n\n### 其他区别\n不同的CSS-in-JS实现除了生成的CSS样式和编写语法有所区别外，它们实现的功能也不尽相同，除了一些最基本的诸如CSS局部作用域的功能，下面这些功能有的实现会包含而有的却不支持：\n* 自动生成浏览器引擎前缀 - built-in vendor prefix\n* 支持抽取独立的CSS样式表 - extract css file\n* 自带支持动画 - built-in support for animations\n* 伪类 - pseudo classes\n* 媒体查询 - media query\n* 其他\n\n想了解更多关于不同CSS-in-JS的对比，可以看一下Michele Bertoli整理的不同实现的[对比图](https://github.com/michelebertoli/css-in-js#features)。\n\n## 好处\n看完了一些不同的实现，大家应该对CSS-in-JS一些基本的概念和用法有了大概的理解，接着我们可以来聊一下CSS-in-JS都有什么好处和坏处了。\n### 局部样式 - Scoping Styles\nCSS有一个被大家诟病的问题就是没有本地作用域，所有声明的样式都是全局的（global styles）。换句话来说页面上任意元素只要匹配上某个选择器的规则，这个规则就会被应用上，而且规则和规则之间可以叠加作用（cascading）。SPA应用流行了之后这个问题变得更加突出了，因为对于SPA应用来说所有页面的样式代码都会加载到同一个环境中，样式冲突的概率会大大加大。由于这个问题的存在，我们在日常开发中会遇到以下这些问题：\n* 很难为选择器起名字。为了避免和页面上其他元素的样式发生冲突，我们在起选择器名的时候一定要深思熟虑，起的名字一定不能太普通。举个例子，假如你为页面上某个作为标题的DOM节点定义一个叫做`.title`的样式名，这个类名很大概率已经或者将会和页面上的其他选择器发生冲突，所以你不得不**手动**为这个类名添加一些前缀，例如`.home-page-title`来避免这个问题。\n* 团队多人合作困难。当多个人一起开发同一个项目的时候，特别是多个分支同时开发的时候，大家各自取的选择器名字可能有会冲突，可是在本地独立开发的时候这个问题几乎发现不了。当大家的代码合并到同一个分支的时候，一些样式的问题就会随之出现。\n\nCSS-in-JS会提供**自动**局部CSS作用域的功能，你为组件定义的样式会被限制在这个组件，而不会对其他组件的样式产生影响。不同的CSS-in-JS库实现局部作用域的方法可能有所不一样，一般来说它们会通过为组件的样式生成唯一的选择器来限制CSS样式的作用域。以下是一个简化了的CSS-in-JS库生成唯一选择器的示例代码：\n```javascript\nconst css = styleBlock => {\n  const className = someHash(styleBlock);\n  const styleEl = document.createElement('style');\n  styleEl.textContent = `\n    .${className} {\n      ${styleBlock}\n    }\n  `;\n  document.head.appendChild(styleEl);\n  return className;\n};\nconst className = css(`\n  color: red;\n  padding: 20px;\n`); // 'c23j4'\n```\n从上面的代码可以看出，CSS-in-JS的实现会根据定义的样式字符串生成一个唯一的CSS选择器，然后把对应的样式插入到页面头部的style标签中，styled-components使用的就是类似的方法。\n### 避免无用的CSS样式堆积 - Dead Code Elimination\n进行过大型Web项目开发的同学应该都有经历过这个情景：在开发新的功能或者进行代码重构的时候，由于HTML代码和CSS样式之间没有**显式的一一对应关系**，我们很难辨认出项目中哪些CSS样式代码是有用的哪些是无用的，这就导致了我们不敢轻易删除代码中可能是无用的样式。这样随着时间的推移，项目中的CSS样式只会增加而不会减少([append-only stylesheets](https://css-tricks.com/oh-no-stylesheet-grows-grows-grows-append-stylesheet-problem/)）。无用的样式代码堆积会导致以下这些问题：\n* 项目变得越来越重量级，加载到浏览器的CSS样式会越来越多，会造成一定的性能影响。\n* 开发者发现他们很难理解项目中的样式代码，甚至可能被大量的样式代码吓到，这就导致了开发效率的降低以及一些奇奇怪怪的样式问题的出现。\n\nCSS-in-JS的思路就可以很好地解决这个问题。我们先来看一段styled-components的作者Max Stoiber说过的话：\n> “For three years, I have styled my web apps without any .css files. Instead, I have written all the CSS in JavaScript. ... I can add, change and delete CSS without any unexpected consequences. My changes to the styling of a component will not affect anything else. If I delete a component, I delete its CSS too. No more append-only stylesheets!” – Max Stoiber\n> \nMax Stoiber大体就是说由于CSS-in-JS会把样式和组件绑定在一起，当这个组件要被删除掉的时候，直接把这些代码删除掉就好了，不用担心删掉的样式代码会对项目的其他组件样式产生影响。而且由于CSS是写在JavaScript里面的，我们还可以利用JS显式的变量定义，模块引用等语言特性来追踪样式的使用情况，这大大方便了我们对样式代码的更改或者重构。\n\n### Critical CSS\n浏览器在将我们的页面呈现给用户之前一定要先完成页面引用到的CSS文件的下载和解析（download and parse），所以link标签链接的CSS资源是渲染阻塞的（render-blocking）。如果CSS文件非常大或者网络的状况很差，渲染阻塞的CSS会严重影响用户体验。针对这个问题，社区有一种优化方案就是将一些重要的CSS代码（Critical CSS）直接放在头部的style标签内，其余的CSS代码再进行异步加载，这样浏览器在解析完HTML后就可以直接渲染页面了。具体做法类似于以下代码：\n```html\n<html>\n  <head>\n    <style>\n      /* critical CSS */\n    </style>\n    <script>asyncLoadCSS(\"non-critical.css\")</script>\n  </head>\n  <body>\n    ...body goes here\n  </body>\n</html>\n```\n那么如何定义Critical CSS呢？放在head标签内的CSS当然是越少越好，因为太多的内容会加大html的体积，所以我们一般把**用户需要在首屏看到的（above the fold）页面要用到的最少CSS提取为Critical CSS**。以下是示意图：\n![](/images/css-in-js/above-the-fold.png)\n\n上图中above the fold的CSS就是Critical CSS，因为它们需要立即展示在用户面前。由于页面在不同的设备上展示的效果不同，对应着的Critical CSS内容也会有所差别，因此Critical CSS的提取是一个十分复杂的过程，虽然社区有很多对应的工具可是效果都差强人意。CSS-in-JS却可以很好地支持Critical CSS的生成。在CSS-in-JS中，由于CSS是和组件绑定在一起的，只有当组件挂载到页面上的时候，它们的CSS样式才会被插入到页面的style标签内，所以很容易就可以知道哪些CSS样式需要在首屏渲染的时候发送给客户端，再配合打包工具的Code Splitting功能，可以将加载到页面的代码最小化，从而达到Critical CSS的效果。换句话来说，CSS-in-JS通过增加一点加载的JS体积就可以避免另外发一次请求来获取其它的CSS文件。而且一些CSS-in-JS的实现（例如styled-components）对Critical CSS是**自动支持的**。\n### 基于状态的样式定义 - State-based styling\nCSS-in-JS最吸引我的地方就是它可以根据组件的状态动态地生成样式。对于SPA应用来说，特别是一些交互复杂的页面，页面的样式通常要根据组件的状态变化而发生变化。如果不使用CSS-in-JS，处理这些逻辑复杂的情况会比较麻烦。举个例子，假如你现在页面有一个圆点，它根据不同的状态展示不同的颜色，`running`的时候是绿色，`stop`的时候是红色，`ready`的时候是黄色。如果使用的是CSS modules方案你可能会写下面的代码：\n\n`style.css`文件\n```css\n.circle {\n  ... circle base styles\n}\n\n.healthy {\n  composes: circle;\n  background-color: green;\n}\n\n.stop {\n  composes: circle;\n  background-color: red;\n}\n\n.ready {\n  composes: circle;\n  background-color: \n}\n```\n`index.js`文件\n```javascript\nimport React from 'react'\nimport styles from './style.css'\n\nconst styleLookup = {\n  healthy: styles.healthy,\n  stop: styles.stop,\n  ready: styles.ready\n}\n\nexport default ({ status }) => (\n  <div\n    className={styleLookup[status]}\n  />\n)\n```\n在style.css中我们使用了CSS modules的继承写法来在不同状态的CSS类中共用circle基类的样式，代码看起来十分冗余和繁琐。由于CSS-in-JS会直接将CSS样式写在JS文件里面，所以样式复用以及逻辑判断都十分方便，如果上面的例子用styled-components来写是这样的：\n```javascript\nimport styled from 'styled-components'\n\nconst circleColorLookup = {\n  healthy: 'green',\n  stop: 'red',\n  ready: 'yellow'\n}\n\nexport default styled.div`\n  ... circle base styles\n  background-color: ${({ status }) => circleColorLookup[status]};\n`\n```\n对比起来，styled-components的逻辑更加清晰和简洁，如果后面需要增加一个状态，只需要为`circleColorLookup`添加一个键值对就好，而CSS modules的写法需要同时改动style.css和index.js文件，代码不好维护和扩展。\n\n### 封装得更好的组件库\n大家在日常开发的过程中可能会封装一些组件在不同的项目中使用，如果你的组件的样式使用的CSS预处理方案和另外一个项目的预处理方案不一样，例如组件使用的是less，项目使用的是css modules，组件复用会变得很麻烦。可是如果CSS是写在JS里面的，项目想要使用封装的组件库只需要进行简单的`npm install`就可以了，非常方便。\n## 坏处\n**任何事物都有好的地方和坏的地方，只有对好处和坏处都了解清楚我们才能更好地做出判断。**接着我们就来说一下CSS-in-JS不好的地方吧。\n### 陡峭的学习曲线 - Steep learning curve\n这其实可以从两方面来说明。首先CSS-in-JS是针对component-based的框架的，这就意味着要学习CSS-in-JS你必须得学习：component-based框架（例如React），JavaScript和CSS这三样技能。其次，即使你已经会用React，JavaScript和CSS来构建SPA应用，你还要学习某个CSS-in-JS实现（例如styled-components），以及学习一种全新的基于组件定义样式的思考问题方式。我们团队在刚开始使用styled-components的时候，适应了好一段时间才学会如何用好这个库。因为学习成本比较高，在项目中引入CSS-in-JS可能会降低你们的开发效率。\n### 运行时消耗 - Runtime cost\n由于大多数的CSS-in-JS的库都是在动态生成CSS的。这会有两方面的影响。首先你发送到客户端的代码会包括使用到的CSS-in-JS运行时（runtime）代码，这些代码一般都不是很小，例如styled-components的runtime大小是`12.42kB min + gzip`，如果你希望你首屏加载的代码很小，你得考虑这个问题。其次大多数CSS-in-JS实现都是在客户端动态生成CSS的，这就意味着会有一定的性能代价。不同的CSS-in-JS实现由于具体的实现细节不一样，所以它们的性能也会有很大的区别，你可以通过[这个工具](http://necolas.github.io/react-native-web/benchmarks/)来查看和衡量各个实现的性能差异。\n### 代码可读性差 - Unreadable class names\n大多数CSS-in-JS实现会通过生成唯一的CSS选择器来达到CSS局部作用域的效果。这些自动生成的选择器会大大降低代码的可读性，给开发人员debug造成一定的影响。\n### 没有统一的业界标准 - No interoperability\n由于CSS-in-JS只是一种技术思路而没有一个社区统一遵循的标准和规范，所以不同实现的语法和功能可能有很大的差异。这就意味着你不能从一个实现快速地切换到另外一个实现。举个例子，假如你先在项目使用radium，可是随着项目规模的变大，你发现radium可能不适合你现在的业务，更好的解决方案应该是styled-components。可是由于写法差异巨大，这时候你要对代码进行脱胎换骨的改动才能将代码迁移到styled-components。不过令人欣慰的是，现在已经有人在制定相关的标准了，有兴趣的同学可以看一下[Interoperable Style Transfer Format](https://github.com/cssinjs/istf-spec)。\n\n## 个人思考与总结\nCSS-in-JS有好处也有坏处，我们一定要根据自己的实际情况进行衡量和取舍来确定是不是要在自己的项目中使用它。**永远不要为了使用一个技术而用一个技术**。例如在下面几种情况下你就不需要它:\n* 你是前端开发的初学者： 由于CSS-in-JS的学习坡度很陡，刚开始学习Web开发的同学没必要学习，可能会有挫败感。\n* 你只想制作一些功能简单的静态页面：逻辑交互不复杂的网站没有必要使用CSS-in-JS。\n* 你很注重样式名的可读性以及调试体验： CSS-in-JS动态生成的选择器很影响代码的可读性，可能会降低你的调试效率。\n\n相反如果你的应用交互逻辑复杂的话，CSS-in-JS可能会给你带来很大的开发便利，没有使用过的人十分值得一试。\n## 参考文献\n* [An Introduction to CSS-in-JS: Examples, Pros, and Cons](https://webdesign.tutsplus.com/articles/an-introduction-to-css-in-js-examples-pros-and-cons--cms-33574)\n* [Why I Write CSS in JavaScript](https://mxstbr.com/thoughts/css-in-js)\n* [Oh No! Our Stylesheet Only Grows and Grows and Grows!](https://css-tricks.com/oh-no-stylesheet-grows-grows-grows-append-stylesheet-problem/)\n* [What actually is CSS-in-JS](https://medium.com/dailyjs/what-is-actually-css-in-js-f2f529a2757)\n* [The tradeoffs of CSS-in-JS](https://medium.com/free-code-camp/the-tradeoffs-of-css-in-js-bee5cf926fdb)\n* [9 CSS in JS Libraries you should Know in 2019](https://blog.bitsrc.io/9-css-in-js-libraries-you-should-know-in-2018-25afb4025b9b)\n* [Extract Critical CSS](https://web.dev/extract-critical-css/)\n\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","source":"_posts/CSS-in-JS的好与坏.md","raw":"---\ntitle: CSS in JS的好与坏\ntags:\n  - CSS-in-JS\n  - CSS\n  - JavaScript\nthumbnail: /gallery/thumbnails/css-in-js.png\ndate: 2020-01-19 18:57:50\n---\n\n## 是什么\nCSS-in-JS是一种技术（technique），而不是一个具体的库实现（library）。简单来说CSS-in-JS就是**将应用的CSS样式写在JavaScript文件里面**，而不是独立为一些`.css`，`.scss`或者`less`之类的文件，这样你就可以在CSS中使用一些属于JS的诸如模块声明，变量定义，函数调用和条件判断等语言特性来提供灵活的可扩展的样式定义。值得一提的是，虽然CSS-in-JS不是一种很新的技术，可是它在国内普及度好像并不是很高，它当初的出现是因为一些`component-based`的Web框架（例如React，Vue和Angular）的逐渐流行，使得开发者也想将组件的CSS样式也一块封装到组件中去以**解决原生CSS写法的一系列问题**。还有就是CSS-in-JS在React社区的热度是最高的，这是因为React本身不会管用户怎么去为组件定义样式的问题，而Vue和Angular都有属于框架自己的一套定义样式的方案。\n\n本文将通过分析CSS-in-JS这项技术带来的好处以及它存在的一些问题来帮助大家判断自己是不是要在项目中使用CSS-in-JS。\n\n<!-- more-->\n\n## 不同的实现\n实现了CSS-in-JS的库有很多，[据统计](https://github.com/MicheleBertoli/css-in-js)现在已经超过了61种。虽然每个库解决的问题都差不多，可是它们的实现方法和语法却大相径庭。从实现方法上区分大体分为两种：唯一CSS选择器和内联样式（Unique Selector VS Inline Styles）。接下来我们会分别看一下对应于这两种实现方式的两个比较有代表性的实现：[styled-components](https://www.styled-components.com/)和[radium](https://formidable.com/open-source/radium/)。\n\n### Styled-components\n[Styled-components](https://www.styled-components.com/) 应该是CSS-in-JS最热门的一个库了，到目前为止github的star数已经超过了27k。通过styled-components，你可以使用ES6的[标签模板字符串](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)语法（Tagged Templates）为需要`styled`的Component定义一系列CSS属性，当该组件的JS代码被解析执行的时候，styled-components会动态生成一个CSS选择器，并把对应的CSS样式通过style标签的形式插入到head标签里面。动态生成的CSS选择器会有一小段哈希值来保证全局唯一性来避免样式发生冲突。\n\n[CSS-in-JS Playground](https://www.cssinjsplayground.com/)是一个可以快速尝试不同CSS-in-JS实现的网站，上面有一个简单的用styled-components实现表单的例子：\n\n![](/images/css-in-js/styled-component-form.png)\n\n从上面的例子可以看出，styled-components不需要你为需要设置样式的DOM节点设置一个样式名，使用完标签模板字符串定义后你会得到一个styled好的Component，直接在JSX中使用这个Component就可以了。接着让我们打开DevTools查看一下生成的CSS：\n\n![](/images/css-in-js/styled-component-form-devtools.png)\n\n从上面DevTools可以看出styled的Component样式存在于style标签内，而且选择器名字是一串随机的哈希字符串，这样其实实现了局部CSS作用域的效果（scoping styles），各个组件的样式不会发生冲突。除了styled-components，采用唯一CSS选择器做法的实现还有：[jss](https://github.com/cssinjs/jss)，[emotion](https://github.com/emotion-js/emotion)，[glamorous](https://github.com/paypal/glamorous)等。\n\n### Radium\n[Radium](https://formidable.com/open-source/radium/)是由FormidableLabs创建的在github上有超过7.2k star的CSS-in-JS库。Radium和styled-components的最大区别是它生成的是标签内联样式（inline styles）。由于标签内联样式在处理诸如`media query`以及`:hover`，`:focus`，`:active`等和浏览器状态相关的样式的时候非常不方便，所以radium为这些样式封装了一些标准的接口以及抽象。\n\n再来看一下radium在CSS-in-JS Playground的例子：\n\n![](/images/css-in-js/radium-form.png)\n\n从上面的例子可以看出radium定义样式的语法和styled-components有很大的区别，它要求你使用style属性为DOM添加相应的样式。打开DevTools查看一下radium生成的CSS：\n\n![](/images/css-in-js/radium-form-css.png)\n\n从DevTools上面inspect的结果可以看出，radium会直接在标签内生成内联样式。内联样式相比于CSS选择器的方法有以下的优点：\n* 自带局部样式作用域的效果，无需额外的操作\n* 内联样式的权重（specificity）是最高的，可以避免权重冲突的烦恼\n* 由于样式直接写在HTML中，十分方便开发者调试\n\n### 其他区别\n不同的CSS-in-JS实现除了生成的CSS样式和编写语法有所区别外，它们实现的功能也不尽相同，除了一些最基本的诸如CSS局部作用域的功能，下面这些功能有的实现会包含而有的却不支持：\n* 自动生成浏览器引擎前缀 - built-in vendor prefix\n* 支持抽取独立的CSS样式表 - extract css file\n* 自带支持动画 - built-in support for animations\n* 伪类 - pseudo classes\n* 媒体查询 - media query\n* 其他\n\n想了解更多关于不同CSS-in-JS的对比，可以看一下Michele Bertoli整理的不同实现的[对比图](https://github.com/michelebertoli/css-in-js#features)。\n\n## 好处\n看完了一些不同的实现，大家应该对CSS-in-JS一些基本的概念和用法有了大概的理解，接着我们可以来聊一下CSS-in-JS都有什么好处和坏处了。\n### 局部样式 - Scoping Styles\nCSS有一个被大家诟病的问题就是没有本地作用域，所有声明的样式都是全局的（global styles）。换句话来说页面上任意元素只要匹配上某个选择器的规则，这个规则就会被应用上，而且规则和规则之间可以叠加作用（cascading）。SPA应用流行了之后这个问题变得更加突出了，因为对于SPA应用来说所有页面的样式代码都会加载到同一个环境中，样式冲突的概率会大大加大。由于这个问题的存在，我们在日常开发中会遇到以下这些问题：\n* 很难为选择器起名字。为了避免和页面上其他元素的样式发生冲突，我们在起选择器名的时候一定要深思熟虑，起的名字一定不能太普通。举个例子，假如你为页面上某个作为标题的DOM节点定义一个叫做`.title`的样式名，这个类名很大概率已经或者将会和页面上的其他选择器发生冲突，所以你不得不**手动**为这个类名添加一些前缀，例如`.home-page-title`来避免这个问题。\n* 团队多人合作困难。当多个人一起开发同一个项目的时候，特别是多个分支同时开发的时候，大家各自取的选择器名字可能有会冲突，可是在本地独立开发的时候这个问题几乎发现不了。当大家的代码合并到同一个分支的时候，一些样式的问题就会随之出现。\n\nCSS-in-JS会提供**自动**局部CSS作用域的功能，你为组件定义的样式会被限制在这个组件，而不会对其他组件的样式产生影响。不同的CSS-in-JS库实现局部作用域的方法可能有所不一样，一般来说它们会通过为组件的样式生成唯一的选择器来限制CSS样式的作用域。以下是一个简化了的CSS-in-JS库生成唯一选择器的示例代码：\n```javascript\nconst css = styleBlock => {\n  const className = someHash(styleBlock);\n  const styleEl = document.createElement('style');\n  styleEl.textContent = `\n    .${className} {\n      ${styleBlock}\n    }\n  `;\n  document.head.appendChild(styleEl);\n  return className;\n};\nconst className = css(`\n  color: red;\n  padding: 20px;\n`); // 'c23j4'\n```\n从上面的代码可以看出，CSS-in-JS的实现会根据定义的样式字符串生成一个唯一的CSS选择器，然后把对应的样式插入到页面头部的style标签中，styled-components使用的就是类似的方法。\n### 避免无用的CSS样式堆积 - Dead Code Elimination\n进行过大型Web项目开发的同学应该都有经历过这个情景：在开发新的功能或者进行代码重构的时候，由于HTML代码和CSS样式之间没有**显式的一一对应关系**，我们很难辨认出项目中哪些CSS样式代码是有用的哪些是无用的，这就导致了我们不敢轻易删除代码中可能是无用的样式。这样随着时间的推移，项目中的CSS样式只会增加而不会减少([append-only stylesheets](https://css-tricks.com/oh-no-stylesheet-grows-grows-grows-append-stylesheet-problem/)）。无用的样式代码堆积会导致以下这些问题：\n* 项目变得越来越重量级，加载到浏览器的CSS样式会越来越多，会造成一定的性能影响。\n* 开发者发现他们很难理解项目中的样式代码，甚至可能被大量的样式代码吓到，这就导致了开发效率的降低以及一些奇奇怪怪的样式问题的出现。\n\nCSS-in-JS的思路就可以很好地解决这个问题。我们先来看一段styled-components的作者Max Stoiber说过的话：\n> “For three years, I have styled my web apps without any .css files. Instead, I have written all the CSS in JavaScript. ... I can add, change and delete CSS without any unexpected consequences. My changes to the styling of a component will not affect anything else. If I delete a component, I delete its CSS too. No more append-only stylesheets!” – Max Stoiber\n> \nMax Stoiber大体就是说由于CSS-in-JS会把样式和组件绑定在一起，当这个组件要被删除掉的时候，直接把这些代码删除掉就好了，不用担心删掉的样式代码会对项目的其他组件样式产生影响。而且由于CSS是写在JavaScript里面的，我们还可以利用JS显式的变量定义，模块引用等语言特性来追踪样式的使用情况，这大大方便了我们对样式代码的更改或者重构。\n\n### Critical CSS\n浏览器在将我们的页面呈现给用户之前一定要先完成页面引用到的CSS文件的下载和解析（download and parse），所以link标签链接的CSS资源是渲染阻塞的（render-blocking）。如果CSS文件非常大或者网络的状况很差，渲染阻塞的CSS会严重影响用户体验。针对这个问题，社区有一种优化方案就是将一些重要的CSS代码（Critical CSS）直接放在头部的style标签内，其余的CSS代码再进行异步加载，这样浏览器在解析完HTML后就可以直接渲染页面了。具体做法类似于以下代码：\n```html\n<html>\n  <head>\n    <style>\n      /* critical CSS */\n    </style>\n    <script>asyncLoadCSS(\"non-critical.css\")</script>\n  </head>\n  <body>\n    ...body goes here\n  </body>\n</html>\n```\n那么如何定义Critical CSS呢？放在head标签内的CSS当然是越少越好，因为太多的内容会加大html的体积，所以我们一般把**用户需要在首屏看到的（above the fold）页面要用到的最少CSS提取为Critical CSS**。以下是示意图：\n![](/images/css-in-js/above-the-fold.png)\n\n上图中above the fold的CSS就是Critical CSS，因为它们需要立即展示在用户面前。由于页面在不同的设备上展示的效果不同，对应着的Critical CSS内容也会有所差别，因此Critical CSS的提取是一个十分复杂的过程，虽然社区有很多对应的工具可是效果都差强人意。CSS-in-JS却可以很好地支持Critical CSS的生成。在CSS-in-JS中，由于CSS是和组件绑定在一起的，只有当组件挂载到页面上的时候，它们的CSS样式才会被插入到页面的style标签内，所以很容易就可以知道哪些CSS样式需要在首屏渲染的时候发送给客户端，再配合打包工具的Code Splitting功能，可以将加载到页面的代码最小化，从而达到Critical CSS的效果。换句话来说，CSS-in-JS通过增加一点加载的JS体积就可以避免另外发一次请求来获取其它的CSS文件。而且一些CSS-in-JS的实现（例如styled-components）对Critical CSS是**自动支持的**。\n### 基于状态的样式定义 - State-based styling\nCSS-in-JS最吸引我的地方就是它可以根据组件的状态动态地生成样式。对于SPA应用来说，特别是一些交互复杂的页面，页面的样式通常要根据组件的状态变化而发生变化。如果不使用CSS-in-JS，处理这些逻辑复杂的情况会比较麻烦。举个例子，假如你现在页面有一个圆点，它根据不同的状态展示不同的颜色，`running`的时候是绿色，`stop`的时候是红色，`ready`的时候是黄色。如果使用的是CSS modules方案你可能会写下面的代码：\n\n`style.css`文件\n```css\n.circle {\n  ... circle base styles\n}\n\n.healthy {\n  composes: circle;\n  background-color: green;\n}\n\n.stop {\n  composes: circle;\n  background-color: red;\n}\n\n.ready {\n  composes: circle;\n  background-color: \n}\n```\n`index.js`文件\n```javascript\nimport React from 'react'\nimport styles from './style.css'\n\nconst styleLookup = {\n  healthy: styles.healthy,\n  stop: styles.stop,\n  ready: styles.ready\n}\n\nexport default ({ status }) => (\n  <div\n    className={styleLookup[status]}\n  />\n)\n```\n在style.css中我们使用了CSS modules的继承写法来在不同状态的CSS类中共用circle基类的样式，代码看起来十分冗余和繁琐。由于CSS-in-JS会直接将CSS样式写在JS文件里面，所以样式复用以及逻辑判断都十分方便，如果上面的例子用styled-components来写是这样的：\n```javascript\nimport styled from 'styled-components'\n\nconst circleColorLookup = {\n  healthy: 'green',\n  stop: 'red',\n  ready: 'yellow'\n}\n\nexport default styled.div`\n  ... circle base styles\n  background-color: ${({ status }) => circleColorLookup[status]};\n`\n```\n对比起来，styled-components的逻辑更加清晰和简洁，如果后面需要增加一个状态，只需要为`circleColorLookup`添加一个键值对就好，而CSS modules的写法需要同时改动style.css和index.js文件，代码不好维护和扩展。\n\n### 封装得更好的组件库\n大家在日常开发的过程中可能会封装一些组件在不同的项目中使用，如果你的组件的样式使用的CSS预处理方案和另外一个项目的预处理方案不一样，例如组件使用的是less，项目使用的是css modules，组件复用会变得很麻烦。可是如果CSS是写在JS里面的，项目想要使用封装的组件库只需要进行简单的`npm install`就可以了，非常方便。\n## 坏处\n**任何事物都有好的地方和坏的地方，只有对好处和坏处都了解清楚我们才能更好地做出判断。**接着我们就来说一下CSS-in-JS不好的地方吧。\n### 陡峭的学习曲线 - Steep learning curve\n这其实可以从两方面来说明。首先CSS-in-JS是针对component-based的框架的，这就意味着要学习CSS-in-JS你必须得学习：component-based框架（例如React），JavaScript和CSS这三样技能。其次，即使你已经会用React，JavaScript和CSS来构建SPA应用，你还要学习某个CSS-in-JS实现（例如styled-components），以及学习一种全新的基于组件定义样式的思考问题方式。我们团队在刚开始使用styled-components的时候，适应了好一段时间才学会如何用好这个库。因为学习成本比较高，在项目中引入CSS-in-JS可能会降低你们的开发效率。\n### 运行时消耗 - Runtime cost\n由于大多数的CSS-in-JS的库都是在动态生成CSS的。这会有两方面的影响。首先你发送到客户端的代码会包括使用到的CSS-in-JS运行时（runtime）代码，这些代码一般都不是很小，例如styled-components的runtime大小是`12.42kB min + gzip`，如果你希望你首屏加载的代码很小，你得考虑这个问题。其次大多数CSS-in-JS实现都是在客户端动态生成CSS的，这就意味着会有一定的性能代价。不同的CSS-in-JS实现由于具体的实现细节不一样，所以它们的性能也会有很大的区别，你可以通过[这个工具](http://necolas.github.io/react-native-web/benchmarks/)来查看和衡量各个实现的性能差异。\n### 代码可读性差 - Unreadable class names\n大多数CSS-in-JS实现会通过生成唯一的CSS选择器来达到CSS局部作用域的效果。这些自动生成的选择器会大大降低代码的可读性，给开发人员debug造成一定的影响。\n### 没有统一的业界标准 - No interoperability\n由于CSS-in-JS只是一种技术思路而没有一个社区统一遵循的标准和规范，所以不同实现的语法和功能可能有很大的差异。这就意味着你不能从一个实现快速地切换到另外一个实现。举个例子，假如你先在项目使用radium，可是随着项目规模的变大，你发现radium可能不适合你现在的业务，更好的解决方案应该是styled-components。可是由于写法差异巨大，这时候你要对代码进行脱胎换骨的改动才能将代码迁移到styled-components。不过令人欣慰的是，现在已经有人在制定相关的标准了，有兴趣的同学可以看一下[Interoperable Style Transfer Format](https://github.com/cssinjs/istf-spec)。\n\n## 个人思考与总结\nCSS-in-JS有好处也有坏处，我们一定要根据自己的实际情况进行衡量和取舍来确定是不是要在自己的项目中使用它。**永远不要为了使用一个技术而用一个技术**。例如在下面几种情况下你就不需要它:\n* 你是前端开发的初学者： 由于CSS-in-JS的学习坡度很陡，刚开始学习Web开发的同学没必要学习，可能会有挫败感。\n* 你只想制作一些功能简单的静态页面：逻辑交互不复杂的网站没有必要使用CSS-in-JS。\n* 你很注重样式名的可读性以及调试体验： CSS-in-JS动态生成的选择器很影响代码的可读性，可能会降低你的调试效率。\n\n相反如果你的应用交互逻辑复杂的话，CSS-in-JS可能会给你带来很大的开发便利，没有使用过的人十分值得一试。\n## 参考文献\n* [An Introduction to CSS-in-JS: Examples, Pros, and Cons](https://webdesign.tutsplus.com/articles/an-introduction-to-css-in-js-examples-pros-and-cons--cms-33574)\n* [Why I Write CSS in JavaScript](https://mxstbr.com/thoughts/css-in-js)\n* [Oh No! Our Stylesheet Only Grows and Grows and Grows!](https://css-tricks.com/oh-no-stylesheet-grows-grows-grows-append-stylesheet-problem/)\n* [What actually is CSS-in-JS](https://medium.com/dailyjs/what-is-actually-css-in-js-f2f529a2757)\n* [The tradeoffs of CSS-in-JS](https://medium.com/free-code-camp/the-tradeoffs-of-css-in-js-bee5cf926fdb)\n* [9 CSS in JS Libraries you should Know in 2019](https://blog.bitsrc.io/9-css-in-js-libraries-you-should-know-in-2018-25afb4025b9b)\n* [Extract Critical CSS](https://web.dev/extract-critical-css/)\n\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","slug":"CSS-in-JS的好与坏","published":1,"updated":"2021-02-08T06:16:56.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0gqf6f50001ucnx3by86hyh","content":"<h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><p>CSS-in-JS是一种技术（technique），而不是一个具体的库实现（library）。简单来说CSS-in-JS就是<strong>将应用的CSS样式写在JavaScript文件里面</strong>，而不是独立为一些<code>.css</code>，<code>.scss</code>或者<code>less</code>之类的文件，这样你就可以在CSS中使用一些属于JS的诸如模块声明，变量定义，函数调用和条件判断等语言特性来提供灵活的可扩展的样式定义。值得一提的是，虽然CSS-in-JS不是一种很新的技术，可是它在国内普及度好像并不是很高，它当初的出现是因为一些<code>component-based</code>的Web框架（例如React，Vue和Angular）的逐渐流行，使得开发者也想将组件的CSS样式也一块封装到组件中去以<strong>解决原生CSS写法的一系列问题</strong>。还有就是CSS-in-JS在React社区的热度是最高的，这是因为React本身不会管用户怎么去为组件定义样式的问题，而Vue和Angular都有属于框架自己的一套定义样式的方案。</p>\n<p>本文将通过分析CSS-in-JS这项技术带来的好处以及它存在的一些问题来帮助大家判断自己是不是要在项目中使用CSS-in-JS。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"不同的实现\"><a href=\"#不同的实现\" class=\"headerlink\" title=\"不同的实现\"></a>不同的实现</h2><p>实现了CSS-in-JS的库有很多，<a href=\"https://github.com/MicheleBertoli/css-in-js\" target=\"_blank\" rel=\"noopener\">据统计</a>现在已经超过了61种。虽然每个库解决的问题都差不多，可是它们的实现方法和语法却大相径庭。从实现方法上区分大体分为两种：唯一CSS选择器和内联样式（Unique Selector VS Inline Styles）。接下来我们会分别看一下对应于这两种实现方式的两个比较有代表性的实现：<a href=\"https://www.styled-components.com/\" target=\"_blank\" rel=\"noopener\">styled-components</a>和<a href=\"https://formidable.com/open-source/radium/\" target=\"_blank\" rel=\"noopener\">radium</a>。</p>\n<h3 id=\"Styled-components\"><a href=\"#Styled-components\" class=\"headerlink\" title=\"Styled-components\"></a>Styled-components</h3><p><a href=\"https://www.styled-components.com/\" target=\"_blank\" rel=\"noopener\">Styled-components</a> 应该是CSS-in-JS最热门的一个库了，到目前为止github的star数已经超过了27k。通过styled-components，你可以使用ES6的<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\" target=\"_blank\" rel=\"noopener\">标签模板字符串</a>语法（Tagged Templates）为需要<code>styled</code>的Component定义一系列CSS属性，当该组件的JS代码被解析执行的时候，styled-components会动态生成一个CSS选择器，并把对应的CSS样式通过style标签的形式插入到head标签里面。动态生成的CSS选择器会有一小段哈希值来保证全局唯一性来避免样式发生冲突。</p>\n<p><a href=\"https://www.cssinjsplayground.com/\" target=\"_blank\" rel=\"noopener\">CSS-in-JS Playground</a>是一个可以快速尝试不同CSS-in-JS实现的网站，上面有一个简单的用styled-components实现表单的例子：</p>\n<p><img src=\"/images/css-in-js/styled-component-form.png\" alt></p>\n<p>从上面的例子可以看出，styled-components不需要你为需要设置样式的DOM节点设置一个样式名，使用完标签模板字符串定义后你会得到一个styled好的Component，直接在JSX中使用这个Component就可以了。接着让我们打开DevTools查看一下生成的CSS：</p>\n<p><img src=\"/images/css-in-js/styled-component-form-devtools.png\" alt></p>\n<p>从上面DevTools可以看出styled的Component样式存在于style标签内，而且选择器名字是一串随机的哈希字符串，这样其实实现了局部CSS作用域的效果（scoping styles），各个组件的样式不会发生冲突。除了styled-components，采用唯一CSS选择器做法的实现还有：<a href=\"https://github.com/cssinjs/jss\" target=\"_blank\" rel=\"noopener\">jss</a>，<a href=\"https://github.com/emotion-js/emotion\" target=\"_blank\" rel=\"noopener\">emotion</a>，<a href=\"https://github.com/paypal/glamorous\" target=\"_blank\" rel=\"noopener\">glamorous</a>等。</p>\n<h3 id=\"Radium\"><a href=\"#Radium\" class=\"headerlink\" title=\"Radium\"></a>Radium</h3><p><a href=\"https://formidable.com/open-source/radium/\" target=\"_blank\" rel=\"noopener\">Radium</a>是由FormidableLabs创建的在github上有超过7.2k star的CSS-in-JS库。Radium和styled-components的最大区别是它生成的是标签内联样式（inline styles）。由于标签内联样式在处理诸如<code>media query</code>以及<code>:hover</code>，<code>:focus</code>，<code>:active</code>等和浏览器状态相关的样式的时候非常不方便，所以radium为这些样式封装了一些标准的接口以及抽象。</p>\n<p>再来看一下radium在CSS-in-JS Playground的例子：</p>\n<p><img src=\"/images/css-in-js/radium-form.png\" alt></p>\n<p>从上面的例子可以看出radium定义样式的语法和styled-components有很大的区别，它要求你使用style属性为DOM添加相应的样式。打开DevTools查看一下radium生成的CSS：</p>\n<p><img src=\"/images/css-in-js/radium-form-css.png\" alt></p>\n<p>从DevTools上面inspect的结果可以看出，radium会直接在标签内生成内联样式。内联样式相比于CSS选择器的方法有以下的优点：</p>\n<ul>\n<li>自带局部样式作用域的效果，无需额外的操作</li>\n<li>内联样式的权重（specificity）是最高的，可以避免权重冲突的烦恼</li>\n<li>由于样式直接写在HTML中，十分方便开发者调试</li>\n</ul>\n<h3 id=\"其他区别\"><a href=\"#其他区别\" class=\"headerlink\" title=\"其他区别\"></a>其他区别</h3><p>不同的CSS-in-JS实现除了生成的CSS样式和编写语法有所区别外，它们实现的功能也不尽相同，除了一些最基本的诸如CSS局部作用域的功能，下面这些功能有的实现会包含而有的却不支持：</p>\n<ul>\n<li>自动生成浏览器引擎前缀 - built-in vendor prefix</li>\n<li>支持抽取独立的CSS样式表 - extract css file</li>\n<li>自带支持动画 - built-in support for animations</li>\n<li>伪类 - pseudo classes</li>\n<li>媒体查询 - media query</li>\n<li>其他</li>\n</ul>\n<p>想了解更多关于不同CSS-in-JS的对比，可以看一下Michele Bertoli整理的不同实现的<a href=\"https://github.com/michelebertoli/css-in-js#features\" target=\"_blank\" rel=\"noopener\">对比图</a>。</p>\n<h2 id=\"好处\"><a href=\"#好处\" class=\"headerlink\" title=\"好处\"></a>好处</h2><p>看完了一些不同的实现，大家应该对CSS-in-JS一些基本的概念和用法有了大概的理解，接着我们可以来聊一下CSS-in-JS都有什么好处和坏处了。</p>\n<h3 id=\"局部样式-Scoping-Styles\"><a href=\"#局部样式-Scoping-Styles\" class=\"headerlink\" title=\"局部样式 - Scoping Styles\"></a>局部样式 - Scoping Styles</h3><p>CSS有一个被大家诟病的问题就是没有本地作用域，所有声明的样式都是全局的（global styles）。换句话来说页面上任意元素只要匹配上某个选择器的规则，这个规则就会被应用上，而且规则和规则之间可以叠加作用（cascading）。SPA应用流行了之后这个问题变得更加突出了，因为对于SPA应用来说所有页面的样式代码都会加载到同一个环境中，样式冲突的概率会大大加大。由于这个问题的存在，我们在日常开发中会遇到以下这些问题：</p>\n<ul>\n<li>很难为选择器起名字。为了避免和页面上其他元素的样式发生冲突，我们在起选择器名的时候一定要深思熟虑，起的名字一定不能太普通。举个例子，假如你为页面上某个作为标题的DOM节点定义一个叫做<code>.title</code>的样式名，这个类名很大概率已经或者将会和页面上的其他选择器发生冲突，所以你不得不<strong>手动</strong>为这个类名添加一些前缀，例如<code>.home-page-title</code>来避免这个问题。</li>\n<li>团队多人合作困难。当多个人一起开发同一个项目的时候，特别是多个分支同时开发的时候，大家各自取的选择器名字可能有会冲突，可是在本地独立开发的时候这个问题几乎发现不了。当大家的代码合并到同一个分支的时候，一些样式的问题就会随之出现。</li>\n</ul>\n<p>CSS-in-JS会提供<strong>自动</strong>局部CSS作用域的功能，你为组件定义的样式会被限制在这个组件，而不会对其他组件的样式产生影响。不同的CSS-in-JS库实现局部作用域的方法可能有所不一样，一般来说它们会通过为组件的样式生成唯一的选择器来限制CSS样式的作用域。以下是一个简化了的CSS-in-JS库生成唯一选择器的示例代码：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> css = <span class=\"hljs-function\"><span class=\"hljs-params\">styleBlock</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> className = someHash(styleBlock);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> styleEl = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'style'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  styleEl.textContent = <span class=\"hljs-string\">`</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">    .<span class=\"hljs-subst\">$&#123;className&#125;</span> &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">      <span class=\"hljs-subst\">$&#123;styleBlock&#125;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">    &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">  `</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-built_in\">document</span>.head.appendChild(styleEl);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> className;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> className = css(<span class=\"hljs-string\">`</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">  color: red;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">  padding: 20px;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">`</span>); <span class=\"hljs-comment\">// 'c23j4'</span></span></pre></td></tr></table></figure>\n<p>从上面的代码可以看出，CSS-in-JS的实现会根据定义的样式字符串生成一个唯一的CSS选择器，然后把对应的样式插入到页面头部的style标签中，styled-components使用的就是类似的方法。</p>\n<h3 id=\"避免无用的CSS样式堆积-Dead-Code-Elimination\"><a href=\"#避免无用的CSS样式堆积-Dead-Code-Elimination\" class=\"headerlink\" title=\"避免无用的CSS样式堆积 - Dead Code Elimination\"></a>避免无用的CSS样式堆积 - Dead Code Elimination</h3><p>进行过大型Web项目开发的同学应该都有经历过这个情景：在开发新的功能或者进行代码重构的时候，由于HTML代码和CSS样式之间没有<strong>显式的一一对应关系</strong>，我们很难辨认出项目中哪些CSS样式代码是有用的哪些是无用的，这就导致了我们不敢轻易删除代码中可能是无用的样式。这样随着时间的推移，项目中的CSS样式只会增加而不会减少(<a href=\"https://css-tricks.com/oh-no-stylesheet-grows-grows-grows-append-stylesheet-problem/\" target=\"_blank\" rel=\"noopener\">append-only stylesheets</a>）。无用的样式代码堆积会导致以下这些问题：</p>\n<ul>\n<li>项目变得越来越重量级，加载到浏览器的CSS样式会越来越多，会造成一定的性能影响。</li>\n<li>开发者发现他们很难理解项目中的样式代码，甚至可能被大量的样式代码吓到，这就导致了开发效率的降低以及一些奇奇怪怪的样式问题的出现。</li>\n</ul>\n<p>CSS-in-JS的思路就可以很好地解决这个问题。我们先来看一段styled-components的作者Max Stoiber说过的话：</p>\n<blockquote>\n<p>“For three years, I have styled my web apps without any .css files. Instead, I have written all the CSS in JavaScript. … I can add, change and delete CSS without any unexpected consequences. My changes to the styling of a component will not affect anything else. If I delete a component, I delete its CSS too. No more append-only stylesheets!” – Max Stoiber</p>\n</blockquote>\n<p>Max Stoiber大体就是说由于CSS-in-JS会把样式和组件绑定在一起，当这个组件要被删除掉的时候，直接把这些代码删除掉就好了，不用担心删掉的样式代码会对项目的其他组件样式产生影响。而且由于CSS是写在JavaScript里面的，我们还可以利用JS显式的变量定义，模块引用等语言特性来追踪样式的使用情况，这大大方便了我们对样式代码的更改或者重构。</p>\n<h3 id=\"Critical-CSS\"><a href=\"#Critical-CSS\" class=\"headerlink\" title=\"Critical CSS\"></a>Critical CSS</h3><p>浏览器在将我们的页面呈现给用户之前一定要先完成页面引用到的CSS文件的下载和解析（download and parse），所以link标签链接的CSS资源是渲染阻塞的（render-blocking）。如果CSS文件非常大或者网络的状况很差，渲染阻塞的CSS会严重影响用户体验。针对这个问题，社区有一种优化方案就是将一些重要的CSS代码（Critical CSS）直接放在头部的style标签内，其余的CSS代码再进行异步加载，这样浏览器在解析完HTML后就可以直接渲染页面了。具体做法类似于以下代码：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-css\">      <span class=\"hljs-comment\">/* critical CSS */</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-actionscript\">asyncLoadCSS(<span class=\"hljs-string\">\"non-critical.css\"</span>)</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ...body goes here</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span></pre></td></tr></table></figure>\n<p>那么如何定义Critical CSS呢？放在head标签内的CSS当然是越少越好，因为太多的内容会加大html的体积，所以我们一般把<strong>用户需要在首屏看到的（above the fold）页面要用到的最少CSS提取为Critical CSS</strong>。以下是示意图：<br><img src=\"/images/css-in-js/above-the-fold.png\" alt></p>\n<p>上图中above the fold的CSS就是Critical CSS，因为它们需要立即展示在用户面前。由于页面在不同的设备上展示的效果不同，对应着的Critical CSS内容也会有所差别，因此Critical CSS的提取是一个十分复杂的过程，虽然社区有很多对应的工具可是效果都差强人意。CSS-in-JS却可以很好地支持Critical CSS的生成。在CSS-in-JS中，由于CSS是和组件绑定在一起的，只有当组件挂载到页面上的时候，它们的CSS样式才会被插入到页面的style标签内，所以很容易就可以知道哪些CSS样式需要在首屏渲染的时候发送给客户端，再配合打包工具的Code Splitting功能，可以将加载到页面的代码最小化，从而达到Critical CSS的效果。换句话来说，CSS-in-JS通过增加一点加载的JS体积就可以避免另外发一次请求来获取其它的CSS文件。而且一些CSS-in-JS的实现（例如styled-components）对Critical CSS是<strong>自动支持的</strong>。</p>\n<h3 id=\"基于状态的样式定义-State-based-styling\"><a href=\"#基于状态的样式定义-State-based-styling\" class=\"headerlink\" title=\"基于状态的样式定义 - State-based styling\"></a>基于状态的样式定义 - State-based styling</h3><p>CSS-in-JS最吸引我的地方就是它可以根据组件的状态动态地生成样式。对于SPA应用来说，特别是一些交互复杂的页面，页面的样式通常要根据组件的状态变化而发生变化。如果不使用CSS-in-JS，处理这些逻辑复杂的情况会比较麻烦。举个例子，假如你现在页面有一个圆点，它根据不同的状态展示不同的颜色，<code>running</code>的时候是绿色，<code>stop</code>的时候是红色，<code>ready</code>的时候是黄色。如果使用的是CSS modules方案你可能会写下面的代码：</p>\n<p><code>style.css</code>文件</p>\n<figure class=\"highlight css hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.circle</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ... circle base styles</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.healthy</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attribute\">composes</span>: circle;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attribute\">background-color</span>: green;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.stop</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attribute\">composes</span>: circle;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attribute\">background-color</span>: red;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-selector-class\">.ready</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attribute\">composes</span>: circle;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attribute\">background-color</span>: </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p><code>index.js</code>文件</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> styles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./style.css'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> styleLookup = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  healthy: styles.healthy,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  stop: styles.stop,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ready: styles.ready</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> (&#123; status &#125;) =&gt; (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;div</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    className=&#123;styleLookup[status]&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  /&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">)</span></pre></td></tr></table></figure>\n<p>在style.css中我们使用了CSS modules的继承写法来在不同状态的CSS类中共用circle基类的样式，代码看起来十分冗余和繁琐。由于CSS-in-JS会直接将CSS样式写在JS文件里面，所以样式复用以及逻辑判断都十分方便，如果上面的例子用styled-components来写是这样的：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> styled <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'styled-components'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> circleColorLookup = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  healthy: <span class=\"hljs-string\">'green'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  stop: <span class=\"hljs-string\">'red'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ready: <span class=\"hljs-string\">'yellow'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> styled.div<span class=\"hljs-string\">`</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">  ... circle base styles</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">  background-color: <span class=\"hljs-subst\">$&#123;(&#123; status &#125;</span>) =&gt; circleColorLookup[status]&#125;;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">`</span></span></pre></td></tr></table></figure>\n<p>对比起来，styled-components的逻辑更加清晰和简洁，如果后面需要增加一个状态，只需要为<code>circleColorLookup</code>添加一个键值对就好，而CSS modules的写法需要同时改动style.css和index.js文件，代码不好维护和扩展。</p>\n<h3 id=\"封装得更好的组件库\"><a href=\"#封装得更好的组件库\" class=\"headerlink\" title=\"封装得更好的组件库\"></a>封装得更好的组件库</h3><p>大家在日常开发的过程中可能会封装一些组件在不同的项目中使用，如果你的组件的样式使用的CSS预处理方案和另外一个项目的预处理方案不一样，例如组件使用的是less，项目使用的是css modules，组件复用会变得很麻烦。可是如果CSS是写在JS里面的，项目想要使用封装的组件库只需要进行简单的<code>npm install</code>就可以了，非常方便。</p>\n<h2 id=\"坏处\"><a href=\"#坏处\" class=\"headerlink\" title=\"坏处\"></a>坏处</h2><p><strong>任何事物都有好的地方和坏的地方，只有对好处和坏处都了解清楚我们才能更好地做出判断。</strong>接着我们就来说一下CSS-in-JS不好的地方吧。</p>\n<h3 id=\"陡峭的学习曲线-Steep-learning-curve\"><a href=\"#陡峭的学习曲线-Steep-learning-curve\" class=\"headerlink\" title=\"陡峭的学习曲线 - Steep learning curve\"></a>陡峭的学习曲线 - Steep learning curve</h3><p>这其实可以从两方面来说明。首先CSS-in-JS是针对component-based的框架的，这就意味着要学习CSS-in-JS你必须得学习：component-based框架（例如React），JavaScript和CSS这三样技能。其次，即使你已经会用React，JavaScript和CSS来构建SPA应用，你还要学习某个CSS-in-JS实现（例如styled-components），以及学习一种全新的基于组件定义样式的思考问题方式。我们团队在刚开始使用styled-components的时候，适应了好一段时间才学会如何用好这个库。因为学习成本比较高，在项目中引入CSS-in-JS可能会降低你们的开发效率。</p>\n<h3 id=\"运行时消耗-Runtime-cost\"><a href=\"#运行时消耗-Runtime-cost\" class=\"headerlink\" title=\"运行时消耗 - Runtime cost\"></a>运行时消耗 - Runtime cost</h3><p>由于大多数的CSS-in-JS的库都是在动态生成CSS的。这会有两方面的影响。首先你发送到客户端的代码会包括使用到的CSS-in-JS运行时（runtime）代码，这些代码一般都不是很小，例如styled-components的runtime大小是<code>12.42kB min + gzip</code>，如果你希望你首屏加载的代码很小，你得考虑这个问题。其次大多数CSS-in-JS实现都是在客户端动态生成CSS的，这就意味着会有一定的性能代价。不同的CSS-in-JS实现由于具体的实现细节不一样，所以它们的性能也会有很大的区别，你可以通过<a href=\"http://necolas.github.io/react-native-web/benchmarks/\" target=\"_blank\" rel=\"noopener\">这个工具</a>来查看和衡量各个实现的性能差异。</p>\n<h3 id=\"代码可读性差-Unreadable-class-names\"><a href=\"#代码可读性差-Unreadable-class-names\" class=\"headerlink\" title=\"代码可读性差 - Unreadable class names\"></a>代码可读性差 - Unreadable class names</h3><p>大多数CSS-in-JS实现会通过生成唯一的CSS选择器来达到CSS局部作用域的效果。这些自动生成的选择器会大大降低代码的可读性，给开发人员debug造成一定的影响。</p>\n<h3 id=\"没有统一的业界标准-No-interoperability\"><a href=\"#没有统一的业界标准-No-interoperability\" class=\"headerlink\" title=\"没有统一的业界标准 - No interoperability\"></a>没有统一的业界标准 - No interoperability</h3><p>由于CSS-in-JS只是一种技术思路而没有一个社区统一遵循的标准和规范，所以不同实现的语法和功能可能有很大的差异。这就意味着你不能从一个实现快速地切换到另外一个实现。举个例子，假如你先在项目使用radium，可是随着项目规模的变大，你发现radium可能不适合你现在的业务，更好的解决方案应该是styled-components。可是由于写法差异巨大，这时候你要对代码进行脱胎换骨的改动才能将代码迁移到styled-components。不过令人欣慰的是，现在已经有人在制定相关的标准了，有兴趣的同学可以看一下<a href=\"https://github.com/cssinjs/istf-spec\" target=\"_blank\" rel=\"noopener\">Interoperable Style Transfer Format</a>。</p>\n<h2 id=\"个人思考与总结\"><a href=\"#个人思考与总结\" class=\"headerlink\" title=\"个人思考与总结\"></a>个人思考与总结</h2><p>CSS-in-JS有好处也有坏处，我们一定要根据自己的实际情况进行衡量和取舍来确定是不是要在自己的项目中使用它。<strong>永远不要为了使用一个技术而用一个技术</strong>。例如在下面几种情况下你就不需要它:</p>\n<ul>\n<li>你是前端开发的初学者： 由于CSS-in-JS的学习坡度很陡，刚开始学习Web开发的同学没必要学习，可能会有挫败感。</li>\n<li>你只想制作一些功能简单的静态页面：逻辑交互不复杂的网站没有必要使用CSS-in-JS。</li>\n<li>你很注重样式名的可读性以及调试体验： CSS-in-JS动态生成的选择器很影响代码的可读性，可能会降低你的调试效率。</li>\n</ul>\n<p>相反如果你的应用交互逻辑复杂的话，CSS-in-JS可能会给你带来很大的开发便利，没有使用过的人十分值得一试。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://webdesign.tutsplus.com/articles/an-introduction-to-css-in-js-examples-pros-and-cons--cms-33574\" target=\"_blank\" rel=\"noopener\">An Introduction to CSS-in-JS: Examples, Pros, and Cons</a></li>\n<li><a href=\"https://mxstbr.com/thoughts/css-in-js\" target=\"_blank\" rel=\"noopener\">Why I Write CSS in JavaScript</a></li>\n<li><a href=\"https://css-tricks.com/oh-no-stylesheet-grows-grows-grows-append-stylesheet-problem/\" target=\"_blank\" rel=\"noopener\">Oh No! Our Stylesheet Only Grows and Grows and Grows!</a></li>\n<li><a href=\"https://medium.com/dailyjs/what-is-actually-css-in-js-f2f529a2757\" target=\"_blank\" rel=\"noopener\">What actually is CSS-in-JS</a></li>\n<li><a href=\"https://medium.com/free-code-camp/the-tradeoffs-of-css-in-js-bee5cf926fdb\" target=\"_blank\" rel=\"noopener\">The tradeoffs of CSS-in-JS</a></li>\n<li><a href=\"https://blog.bitsrc.io/9-css-in-js-libraries-you-should-know-in-2018-25afb4025b9b\" target=\"_blank\" rel=\"noopener\">9 CSS in JS Libraries you should Know in 2019</a></li>\n<li><a href=\"https://web.dev/extract-critical-css/\" target=\"_blank\" rel=\"noopener\">Extract Critical CSS</a></li>\n</ul>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><p>CSS-in-JS是一种技术（technique），而不是一个具体的库实现（library）。简单来说CSS-in-JS就是<strong>将应用的CSS样式写在JavaScript文件里面</strong>，而不是独立为一些<code>.css</code>，<code>.scss</code>或者<code>less</code>之类的文件，这样你就可以在CSS中使用一些属于JS的诸如模块声明，变量定义，函数调用和条件判断等语言特性来提供灵活的可扩展的样式定义。值得一提的是，虽然CSS-in-JS不是一种很新的技术，可是它在国内普及度好像并不是很高，它当初的出现是因为一些<code>component-based</code>的Web框架（例如React，Vue和Angular）的逐渐流行，使得开发者也想将组件的CSS样式也一块封装到组件中去以<strong>解决原生CSS写法的一系列问题</strong>。还有就是CSS-in-JS在React社区的热度是最高的，这是因为React本身不会管用户怎么去为组件定义样式的问题，而Vue和Angular都有属于框架自己的一套定义样式的方案。</p>\n<p>本文将通过分析CSS-in-JS这项技术带来的好处以及它存在的一些问题来帮助大家判断自己是不是要在项目中使用CSS-in-JS。</p>","more":"<h2 id=\"不同的实现\"><a href=\"#不同的实现\" class=\"headerlink\" title=\"不同的实现\"></a>不同的实现</h2><p>实现了CSS-in-JS的库有很多，<a href=\"https://github.com/MicheleBertoli/css-in-js\" target=\"_blank\" rel=\"noopener\">据统计</a>现在已经超过了61种。虽然每个库解决的问题都差不多，可是它们的实现方法和语法却大相径庭。从实现方法上区分大体分为两种：唯一CSS选择器和内联样式（Unique Selector VS Inline Styles）。接下来我们会分别看一下对应于这两种实现方式的两个比较有代表性的实现：<a href=\"https://www.styled-components.com/\" target=\"_blank\" rel=\"noopener\">styled-components</a>和<a href=\"https://formidable.com/open-source/radium/\" target=\"_blank\" rel=\"noopener\">radium</a>。</p>\n<h3 id=\"Styled-components\"><a href=\"#Styled-components\" class=\"headerlink\" title=\"Styled-components\"></a>Styled-components</h3><p><a href=\"https://www.styled-components.com/\" target=\"_blank\" rel=\"noopener\">Styled-components</a> 应该是CSS-in-JS最热门的一个库了，到目前为止github的star数已经超过了27k。通过styled-components，你可以使用ES6的<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\" target=\"_blank\" rel=\"noopener\">标签模板字符串</a>语法（Tagged Templates）为需要<code>styled</code>的Component定义一系列CSS属性，当该组件的JS代码被解析执行的时候，styled-components会动态生成一个CSS选择器，并把对应的CSS样式通过style标签的形式插入到head标签里面。动态生成的CSS选择器会有一小段哈希值来保证全局唯一性来避免样式发生冲突。</p>\n<p><a href=\"https://www.cssinjsplayground.com/\" target=\"_blank\" rel=\"noopener\">CSS-in-JS Playground</a>是一个可以快速尝试不同CSS-in-JS实现的网站，上面有一个简单的用styled-components实现表单的例子：</p>\n<p><img src=\"/images/css-in-js/styled-component-form.png\" alt=\"\"></p>\n<p>从上面的例子可以看出，styled-components不需要你为需要设置样式的DOM节点设置一个样式名，使用完标签模板字符串定义后你会得到一个styled好的Component，直接在JSX中使用这个Component就可以了。接着让我们打开DevTools查看一下生成的CSS：</p>\n<p><img src=\"/images/css-in-js/styled-component-form-devtools.png\" alt=\"\"></p>\n<p>从上面DevTools可以看出styled的Component样式存在于style标签内，而且选择器名字是一串随机的哈希字符串，这样其实实现了局部CSS作用域的效果（scoping styles），各个组件的样式不会发生冲突。除了styled-components，采用唯一CSS选择器做法的实现还有：<a href=\"https://github.com/cssinjs/jss\" target=\"_blank\" rel=\"noopener\">jss</a>，<a href=\"https://github.com/emotion-js/emotion\" target=\"_blank\" rel=\"noopener\">emotion</a>，<a href=\"https://github.com/paypal/glamorous\" target=\"_blank\" rel=\"noopener\">glamorous</a>等。</p>\n<h3 id=\"Radium\"><a href=\"#Radium\" class=\"headerlink\" title=\"Radium\"></a>Radium</h3><p><a href=\"https://formidable.com/open-source/radium/\" target=\"_blank\" rel=\"noopener\">Radium</a>是由FormidableLabs创建的在github上有超过7.2k star的CSS-in-JS库。Radium和styled-components的最大区别是它生成的是标签内联样式（inline styles）。由于标签内联样式在处理诸如<code>media query</code>以及<code>:hover</code>，<code>:focus</code>，<code>:active</code>等和浏览器状态相关的样式的时候非常不方便，所以radium为这些样式封装了一些标准的接口以及抽象。</p>\n<p>再来看一下radium在CSS-in-JS Playground的例子：</p>\n<p><img src=\"/images/css-in-js/radium-form.png\" alt=\"\"></p>\n<p>从上面的例子可以看出radium定义样式的语法和styled-components有很大的区别，它要求你使用style属性为DOM添加相应的样式。打开DevTools查看一下radium生成的CSS：</p>\n<p><img src=\"/images/css-in-js/radium-form-css.png\" alt=\"\"></p>\n<p>从DevTools上面inspect的结果可以看出，radium会直接在标签内生成内联样式。内联样式相比于CSS选择器的方法有以下的优点：</p>\n<ul>\n<li>自带局部样式作用域的效果，无需额外的操作</li>\n<li>内联样式的权重（specificity）是最高的，可以避免权重冲突的烦恼</li>\n<li>由于样式直接写在HTML中，十分方便开发者调试</li>\n</ul>\n<h3 id=\"其他区别\"><a href=\"#其他区别\" class=\"headerlink\" title=\"其他区别\"></a>其他区别</h3><p>不同的CSS-in-JS实现除了生成的CSS样式和编写语法有所区别外，它们实现的功能也不尽相同，除了一些最基本的诸如CSS局部作用域的功能，下面这些功能有的实现会包含而有的却不支持：</p>\n<ul>\n<li>自动生成浏览器引擎前缀 - built-in vendor prefix</li>\n<li>支持抽取独立的CSS样式表 - extract css file</li>\n<li>自带支持动画 - built-in support for animations</li>\n<li>伪类 - pseudo classes</li>\n<li>媒体查询 - media query</li>\n<li>其他</li>\n</ul>\n<p>想了解更多关于不同CSS-in-JS的对比，可以看一下Michele Bertoli整理的不同实现的<a href=\"https://github.com/michelebertoli/css-in-js#features\" target=\"_blank\" rel=\"noopener\">对比图</a>。</p>\n<h2 id=\"好处\"><a href=\"#好处\" class=\"headerlink\" title=\"好处\"></a>好处</h2><p>看完了一些不同的实现，大家应该对CSS-in-JS一些基本的概念和用法有了大概的理解，接着我们可以来聊一下CSS-in-JS都有什么好处和坏处了。</p>\n<h3 id=\"局部样式-Scoping-Styles\"><a href=\"#局部样式-Scoping-Styles\" class=\"headerlink\" title=\"局部样式 - Scoping Styles\"></a>局部样式 - Scoping Styles</h3><p>CSS有一个被大家诟病的问题就是没有本地作用域，所有声明的样式都是全局的（global styles）。换句话来说页面上任意元素只要匹配上某个选择器的规则，这个规则就会被应用上，而且规则和规则之间可以叠加作用（cascading）。SPA应用流行了之后这个问题变得更加突出了，因为对于SPA应用来说所有页面的样式代码都会加载到同一个环境中，样式冲突的概率会大大加大。由于这个问题的存在，我们在日常开发中会遇到以下这些问题：</p>\n<ul>\n<li>很难为选择器起名字。为了避免和页面上其他元素的样式发生冲突，我们在起选择器名的时候一定要深思熟虑，起的名字一定不能太普通。举个例子，假如你为页面上某个作为标题的DOM节点定义一个叫做<code>.title</code>的样式名，这个类名很大概率已经或者将会和页面上的其他选择器发生冲突，所以你不得不<strong>手动</strong>为这个类名添加一些前缀，例如<code>.home-page-title</code>来避免这个问题。</li>\n<li>团队多人合作困难。当多个人一起开发同一个项目的时候，特别是多个分支同时开发的时候，大家各自取的选择器名字可能有会冲突，可是在本地独立开发的时候这个问题几乎发现不了。当大家的代码合并到同一个分支的时候，一些样式的问题就会随之出现。</li>\n</ul>\n<p>CSS-in-JS会提供<strong>自动</strong>局部CSS作用域的功能，你为组件定义的样式会被限制在这个组件，而不会对其他组件的样式产生影响。不同的CSS-in-JS库实现局部作用域的方法可能有所不一样，一般来说它们会通过为组件的样式生成唯一的选择器来限制CSS样式的作用域。以下是一个简化了的CSS-in-JS库生成唯一选择器的示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> css = <span class=\"function\"><span class=\"params\">styleBlock</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> className = someHash(styleBlock);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> styleEl = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'style'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  styleEl.textContent = <span class=\"string\">`</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">    .<span class=\"subst\">$&#123;className&#125;</span> &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">      <span class=\"subst\">$&#123;styleBlock&#125;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">    &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">  `</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">document</span>.head.appendChild(styleEl);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> className;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> className = css(<span class=\"string\">`</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">  color: red;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">  padding: 20px;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`</span>); <span class=\"comment\">// 'c23j4'</span></span></pre></td></tr></table></figure>\n<p>从上面的代码可以看出，CSS-in-JS的实现会根据定义的样式字符串生成一个唯一的CSS选择器，然后把对应的样式插入到页面头部的style标签中，styled-components使用的就是类似的方法。</p>\n<h3 id=\"避免无用的CSS样式堆积-Dead-Code-Elimination\"><a href=\"#避免无用的CSS样式堆积-Dead-Code-Elimination\" class=\"headerlink\" title=\"避免无用的CSS样式堆积 - Dead Code Elimination\"></a>避免无用的CSS样式堆积 - Dead Code Elimination</h3><p>进行过大型Web项目开发的同学应该都有经历过这个情景：在开发新的功能或者进行代码重构的时候，由于HTML代码和CSS样式之间没有<strong>显式的一一对应关系</strong>，我们很难辨认出项目中哪些CSS样式代码是有用的哪些是无用的，这就导致了我们不敢轻易删除代码中可能是无用的样式。这样随着时间的推移，项目中的CSS样式只会增加而不会减少(<a href=\"https://css-tricks.com/oh-no-stylesheet-grows-grows-grows-append-stylesheet-problem/\" target=\"_blank\" rel=\"noopener\">append-only stylesheets</a>）。无用的样式代码堆积会导致以下这些问题：</p>\n<ul>\n<li>项目变得越来越重量级，加载到浏览器的CSS样式会越来越多，会造成一定的性能影响。</li>\n<li>开发者发现他们很难理解项目中的样式代码，甚至可能被大量的样式代码吓到，这就导致了开发效率的降低以及一些奇奇怪怪的样式问题的出现。</li>\n</ul>\n<p>CSS-in-JS的思路就可以很好地解决这个问题。我们先来看一段styled-components的作者Max Stoiber说过的话：</p>\n<blockquote>\n<p>“For three years, I have styled my web apps without any .css files. Instead, I have written all the CSS in JavaScript. … I can add, change and delete CSS without any unexpected consequences. My changes to the styling of a component will not affect anything else. If I delete a component, I delete its CSS too. No more append-only stylesheets!” – Max Stoiber</p>\n</blockquote>\n<p>Max Stoiber大体就是说由于CSS-in-JS会把样式和组件绑定在一起，当这个组件要被删除掉的时候，直接把这些代码删除掉就好了，不用担心删掉的样式代码会对项目的其他组件样式产生影响。而且由于CSS是写在JavaScript里面的，我们还可以利用JS显式的变量定义，模块引用等语言特性来追踪样式的使用情况，这大大方便了我们对样式代码的更改或者重构。</p>\n<h3 id=\"Critical-CSS\"><a href=\"#Critical-CSS\" class=\"headerlink\" title=\"Critical CSS\"></a>Critical CSS</h3><p>浏览器在将我们的页面呈现给用户之前一定要先完成页面引用到的CSS文件的下载和解析（download and parse），所以link标签链接的CSS资源是渲染阻塞的（render-blocking）。如果CSS文件非常大或者网络的状况很差，渲染阻塞的CSS会严重影响用户体验。针对这个问题，社区有一种优化方案就是将一些重要的CSS代码（Critical CSS）直接放在头部的style标签内，其余的CSS代码再进行异步加载，这样浏览器在解析完HTML后就可以直接渲染页面了。具体做法类似于以下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"css\">      <span class=\"comment\">/* critical CSS */</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"actionscript\">asyncLoadCSS(<span class=\"string\">\"non-critical.css\"</span>)</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ...body goes here</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></pre></td></tr></table></figure>\n<p>那么如何定义Critical CSS呢？放在head标签内的CSS当然是越少越好，因为太多的内容会加大html的体积，所以我们一般把<strong>用户需要在首屏看到的（above the fold）页面要用到的最少CSS提取为Critical CSS</strong>。以下是示意图：<br><img src=\"/images/css-in-js/above-the-fold.png\" alt=\"\"></p>\n<p>上图中above the fold的CSS就是Critical CSS，因为它们需要立即展示在用户面前。由于页面在不同的设备上展示的效果不同，对应着的Critical CSS内容也会有所差别，因此Critical CSS的提取是一个十分复杂的过程，虽然社区有很多对应的工具可是效果都差强人意。CSS-in-JS却可以很好地支持Critical CSS的生成。在CSS-in-JS中，由于CSS是和组件绑定在一起的，只有当组件挂载到页面上的时候，它们的CSS样式才会被插入到页面的style标签内，所以很容易就可以知道哪些CSS样式需要在首屏渲染的时候发送给客户端，再配合打包工具的Code Splitting功能，可以将加载到页面的代码最小化，从而达到Critical CSS的效果。换句话来说，CSS-in-JS通过增加一点加载的JS体积就可以避免另外发一次请求来获取其它的CSS文件。而且一些CSS-in-JS的实现（例如styled-components）对Critical CSS是<strong>自动支持的</strong>。</p>\n<h3 id=\"基于状态的样式定义-State-based-styling\"><a href=\"#基于状态的样式定义-State-based-styling\" class=\"headerlink\" title=\"基于状态的样式定义 - State-based styling\"></a>基于状态的样式定义 - State-based styling</h3><p>CSS-in-JS最吸引我的地方就是它可以根据组件的状态动态地生成样式。对于SPA应用来说，特别是一些交互复杂的页面，页面的样式通常要根据组件的状态变化而发生变化。如果不使用CSS-in-JS，处理这些逻辑复杂的情况会比较麻烦。举个例子，假如你现在页面有一个圆点，它根据不同的状态展示不同的颜色，<code>running</code>的时候是绿色，<code>stop</code>的时候是红色，<code>ready</code>的时候是黄色。如果使用的是CSS modules方案你可能会写下面的代码：</p>\n<p><code>style.css</code>文件</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.circle</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ... circle base styles</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.healthy</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attribute\">composes</span>: circle;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attribute\">background-color</span>: green;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.stop</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attribute\">composes</span>: circle;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.ready</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attribute\">composes</span>: circle;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attribute\">background-color</span>: </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p><code>index.js</code>文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> styles <span class=\"keyword\">from</span> <span class=\"string\">'./style.css'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> styleLookup = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  healthy: styles.healthy,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  stop: styles.stop,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ready: styles.ready</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (&#123; status &#125;) =&gt; (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;div</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    className=&#123;styleLookup[status]&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  /&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">)</span></pre></td></tr></table></figure>\n<p>在style.css中我们使用了CSS modules的继承写法来在不同状态的CSS类中共用circle基类的样式，代码看起来十分冗余和繁琐。由于CSS-in-JS会直接将CSS样式写在JS文件里面，所以样式复用以及逻辑判断都十分方便，如果上面的例子用styled-components来写是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> styled <span class=\"keyword\">from</span> <span class=\"string\">'styled-components'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> circleColorLookup = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  healthy: <span class=\"string\">'green'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  stop: <span class=\"string\">'red'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ready: <span class=\"string\">'yellow'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> styled.div<span class=\"string\">`</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">  ... circle base styles</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">  background-color: <span class=\"subst\">$&#123;(&#123; status &#125;</span>) =&gt; circleColorLookup[status]&#125;;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`</span></span></pre></td></tr></table></figure>\n<p>对比起来，styled-components的逻辑更加清晰和简洁，如果后面需要增加一个状态，只需要为<code>circleColorLookup</code>添加一个键值对就好，而CSS modules的写法需要同时改动style.css和index.js文件，代码不好维护和扩展。</p>\n<h3 id=\"封装得更好的组件库\"><a href=\"#封装得更好的组件库\" class=\"headerlink\" title=\"封装得更好的组件库\"></a>封装得更好的组件库</h3><p>大家在日常开发的过程中可能会封装一些组件在不同的项目中使用，如果你的组件的样式使用的CSS预处理方案和另外一个项目的预处理方案不一样，例如组件使用的是less，项目使用的是css modules，组件复用会变得很麻烦。可是如果CSS是写在JS里面的，项目想要使用封装的组件库只需要进行简单的<code>npm install</code>就可以了，非常方便。</p>\n<h2 id=\"坏处\"><a href=\"#坏处\" class=\"headerlink\" title=\"坏处\"></a>坏处</h2><p><strong>任何事物都有好的地方和坏的地方，只有对好处和坏处都了解清楚我们才能更好地做出判断。</strong>接着我们就来说一下CSS-in-JS不好的地方吧。</p>\n<h3 id=\"陡峭的学习曲线-Steep-learning-curve\"><a href=\"#陡峭的学习曲线-Steep-learning-curve\" class=\"headerlink\" title=\"陡峭的学习曲线 - Steep learning curve\"></a>陡峭的学习曲线 - Steep learning curve</h3><p>这其实可以从两方面来说明。首先CSS-in-JS是针对component-based的框架的，这就意味着要学习CSS-in-JS你必须得学习：component-based框架（例如React），JavaScript和CSS这三样技能。其次，即使你已经会用React，JavaScript和CSS来构建SPA应用，你还要学习某个CSS-in-JS实现（例如styled-components），以及学习一种全新的基于组件定义样式的思考问题方式。我们团队在刚开始使用styled-components的时候，适应了好一段时间才学会如何用好这个库。因为学习成本比较高，在项目中引入CSS-in-JS可能会降低你们的开发效率。</p>\n<h3 id=\"运行时消耗-Runtime-cost\"><a href=\"#运行时消耗-Runtime-cost\" class=\"headerlink\" title=\"运行时消耗 - Runtime cost\"></a>运行时消耗 - Runtime cost</h3><p>由于大多数的CSS-in-JS的库都是在动态生成CSS的。这会有两方面的影响。首先你发送到客户端的代码会包括使用到的CSS-in-JS运行时（runtime）代码，这些代码一般都不是很小，例如styled-components的runtime大小是<code>12.42kB min + gzip</code>，如果你希望你首屏加载的代码很小，你得考虑这个问题。其次大多数CSS-in-JS实现都是在客户端动态生成CSS的，这就意味着会有一定的性能代价。不同的CSS-in-JS实现由于具体的实现细节不一样，所以它们的性能也会有很大的区别，你可以通过<a href=\"http://necolas.github.io/react-native-web/benchmarks/\" target=\"_blank\" rel=\"noopener\">这个工具</a>来查看和衡量各个实现的性能差异。</p>\n<h3 id=\"代码可读性差-Unreadable-class-names\"><a href=\"#代码可读性差-Unreadable-class-names\" class=\"headerlink\" title=\"代码可读性差 - Unreadable class names\"></a>代码可读性差 - Unreadable class names</h3><p>大多数CSS-in-JS实现会通过生成唯一的CSS选择器来达到CSS局部作用域的效果。这些自动生成的选择器会大大降低代码的可读性，给开发人员debug造成一定的影响。</p>\n<h3 id=\"没有统一的业界标准-No-interoperability\"><a href=\"#没有统一的业界标准-No-interoperability\" class=\"headerlink\" title=\"没有统一的业界标准 - No interoperability\"></a>没有统一的业界标准 - No interoperability</h3><p>由于CSS-in-JS只是一种技术思路而没有一个社区统一遵循的标准和规范，所以不同实现的语法和功能可能有很大的差异。这就意味着你不能从一个实现快速地切换到另外一个实现。举个例子，假如你先在项目使用radium，可是随着项目规模的变大，你发现radium可能不适合你现在的业务，更好的解决方案应该是styled-components。可是由于写法差异巨大，这时候你要对代码进行脱胎换骨的改动才能将代码迁移到styled-components。不过令人欣慰的是，现在已经有人在制定相关的标准了，有兴趣的同学可以看一下<a href=\"https://github.com/cssinjs/istf-spec\" target=\"_blank\" rel=\"noopener\">Interoperable Style Transfer Format</a>。</p>\n<h2 id=\"个人思考与总结\"><a href=\"#个人思考与总结\" class=\"headerlink\" title=\"个人思考与总结\"></a>个人思考与总结</h2><p>CSS-in-JS有好处也有坏处，我们一定要根据自己的实际情况进行衡量和取舍来确定是不是要在自己的项目中使用它。<strong>永远不要为了使用一个技术而用一个技术</strong>。例如在下面几种情况下你就不需要它:</p>\n<ul>\n<li>你是前端开发的初学者： 由于CSS-in-JS的学习坡度很陡，刚开始学习Web开发的同学没必要学习，可能会有挫败感。</li>\n<li>你只想制作一些功能简单的静态页面：逻辑交互不复杂的网站没有必要使用CSS-in-JS。</li>\n<li>你很注重样式名的可读性以及调试体验： CSS-in-JS动态生成的选择器很影响代码的可读性，可能会降低你的调试效率。</li>\n</ul>\n<p>相反如果你的应用交互逻辑复杂的话，CSS-in-JS可能会给你带来很大的开发便利，没有使用过的人十分值得一试。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://webdesign.tutsplus.com/articles/an-introduction-to-css-in-js-examples-pros-and-cons--cms-33574\" target=\"_blank\" rel=\"noopener\">An Introduction to CSS-in-JS: Examples, Pros, and Cons</a></li>\n<li><a href=\"https://mxstbr.com/thoughts/css-in-js\" target=\"_blank\" rel=\"noopener\">Why I Write CSS in JavaScript</a></li>\n<li><a href=\"https://css-tricks.com/oh-no-stylesheet-grows-grows-grows-append-stylesheet-problem/\" target=\"_blank\" rel=\"noopener\">Oh No! Our Stylesheet Only Grows and Grows and Grows!</a></li>\n<li><a href=\"https://medium.com/dailyjs/what-is-actually-css-in-js-f2f529a2757\" target=\"_blank\" rel=\"noopener\">What actually is CSS-in-JS</a></li>\n<li><a href=\"https://medium.com/free-code-camp/the-tradeoffs-of-css-in-js-bee5cf926fdb\" target=\"_blank\" rel=\"noopener\">The tradeoffs of CSS-in-JS</a></li>\n<li><a href=\"https://blog.bitsrc.io/9-css-in-js-libraries-you-should-know-in-2018-25afb4025b9b\" target=\"_blank\" rel=\"noopener\">9 CSS in JS Libraries you should Know in 2019</a></li>\n<li><a href=\"https://web.dev/extract-critical-css/\" target=\"_blank\" rel=\"noopener\">Extract Critical CSS</a></li>\n</ul>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt=\"\"></p>"},{"title":"详解ECMAScript2019/ES10新属性","date":"2019-12-05T10:04:15.000Z","_content":"\n每年都有一些新的属性进入[ECMA262](https://tc39.es/ecma262/#sec-intro)标准，今年发布的ECMAScript2019/ES10同样也有很多新的特性，本文将会挑选一些普通开发者会用到的新属性进行深入的解读。\n## Array.prototype.flat()\n> The flat() method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth. -- [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat)\n\n简单来说flat这个函数就是按照一定的深度depth将一个深层次嵌套的数组拍扁, 例子:\n```javascript\nconst nestedArr = [1, 2, [3, 4, [5, 6, [7, [8], 9]]], 10]\nconsole.log(nestedArr.flat())\n// [1, 2, 3, 4, [5, 6, [7, [8], 9]], 10]\nconsole.log(nestedArr.flat(2))\n// [1, 2, 3, 4, 5, 6, [7, [8], 9], 10]\nconsole.log(nestedArr.flat(3))\n// [1, 2, 3, 4, 5, 6, 7, [8], 9, 10]\nconsole.log(nestedArr.flat(4))\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nconsole.log(nestedArr.flat(Infinity))\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n由上面的例子可以看出flat会按照指定的深度depth将一个数组扁平化，如果需要将数组完全拍扁变成一维数组，则指定depth为无限大，即是**Infinity**，相反如果不指定深度，其默认值是1。\n<!-- more --> \n## Array.prototype.flatMap()\n> The flatMap() method first maps each element using a mapping function, then flattens the result into a new array. It is identical to a map() followed by a flat() of depth 1, but flatMap() is often quite useful, as merging both into one method is slightly more efficient. -- [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap)\n\n简单来说flatMap等于一个数组先调用完map函数再调用flat函数将其扁平化，扁平化的深度固定为1，先通过一个简单的例子感受一下:\n```javascript\nconst myArr = [1, 2, 3]\nmyArr\n  .map(n => [n * n]) // [[1], [4], [9]]\n  .flat() // [1, 4, 9]\n\n// 用flatMap可以一步到位\nmyArr.flatMap(n => [n * n]) // [1, 4, 9]\n```\n从上面的例子来看flatMap如果只是将flat和map做了一个简单的组合好像可有可无，其实不然，flatMap有个强大的功能是可以在map的时候添加和删除元素，这个无论是map还是filter都没有这个功能。\n\n要想删除某一个元素只需要在mapper函数里面返回一个空的数组[], 而增加元素只需在mapper函数里面返回一个长度大于1的数组，具体可以看下面的例子：\n```javascript\n// 假如我们想要删除掉原数组里面所有的负数，同时将单数转换为一个复数和1\nconst a = [5, 4, -3, 20, 17, -33, -4, 18]\n//        |\\  \\  x   |   | \\   x   x   |\n//       [4,1, 4,   20, 16,1,         18]\na.flatMap(n =>\n  (n < 0) ? []: // 删除负数\n  (n % 2 == 0) ? [n] : // 保留复数\n                 [n - 1, 1] // 单数变为一个复数和1\n)\n// [4, 1, 4, 20, 20, 16, 1, 18]\n```\n## Object.fromEntries()\n> The Object.fromEntries() method transforms a list of key-value pairs into an object. -- [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries)\n\nfromEntries方法将一个[iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol)对象返回的一系列键值对(key-value pairs)转换为一个object。先看一个简单的例子理解一下:\n```javascript\n// key-value pairs数组\nconst entriesArr = [['k1', 1], ['k2', 2]]\nconsole.log(Object.fromEntries(entriesArr)\n// {k1: 1, k2: 2}\n\nconst entriesMap = new Map([\n  ['k1', 1],\n  ['k2', 2]\n]) // {\"k1\" => 1, \"k2\" => 2}\nconsole.log(Object.fromEntries(entriesMap))\n// {k1: 1, k2: 2}\n```\n再来看一个自定义的iterable对象例子深入理解一下:\n```javascript\nconst iteratorObj = {\n  [Symbol.iterator]: function () {\n    const entries = [['k1', 1], ['k2', 2]]\n    let cursor = 0\n\n    return {\n      next() {\n        const done = entries.length === cursor\n        \n        return {\n          value: done ? undefined : entries[cursor++],\n          done\n        }\n      }\n    }\n  }\n}\nObject.fromEntries(iteratorObj) // {k1: 1, k2: 2}\n```\n这个方法有一个用途就是对object的key进行filter，举个例子:\n```javascript\nconst studentMap = {\n  student1: {grade: 80},\n  student2: {grade: 50},\n  student3: {grade: 100}\n}\nconst goodStudentMap = Object.fromEntries(\n  Object\n    .entries(studentMap)\n    .filter(([_, meta]) => meta.grade >= 60)\n)\nconsole.log(goodStudentMap)\n// {student1: {grade: 80}, student3: {grade: 100}}\n```\n## String.prototype.trimStart\n这个方法很简单，就是返回一个将原字符串开头的空格字符去掉的新的字符串，例子:\n```javascript\nconst greeting = '    Hello world!  '\nconsole.log(greeting.trimStart())\n// 'Hello world! '\n```\n这个方法还有一个别名函数，叫做trimLeft，它们具有一样的功能。\n## String.prototype.trimEnd\n这个方法和trimStart类似，只不过是将原字符串结尾的空格字符去掉，例子:\n```javascript\nconst greeting = '  Hello world!  '\nconsole.log(greeting.trimEnd())\n// ' Hello world!'\n```\n这个方法也有一个别名函数，叫做trimRight, 它们也具有一样的功能。\n\n## Symbol.prototype.description\n> The read-only description property is a string returning the optional description of Symbol objects. -- [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description)\n\nECMAScript2019给Symbol对象添加了一个可选的description属性，这个属性是个只读属性，看看例子:\n```javascript\nconsole.log(Symbol('desc').description)\n// desc\nconsole.log(Symbol.for('desc').description)\n// desc\n\n// 一些内置的Symbol也有这个属性\nconsole.log(Symbol.iterator.description)\n// Symbol.iterator\n\n// 如果初始化时没有带description，这个属性会返回一个undefined，因为这样才说这个属性是可选的\nconsole.log(Symbol().description)\n// undefined\n\n// 这个属性是只读的，不能被设置\nSymbol.iterator.description = 'mess it'\nconsole.log(Symbol.iterator.description)\n// Symbol.iterator\n```\n这个新的属性只要是为了方便开发者调试，不能通过比较两个Symbol对象的description来确定这两个Symbol是不是同一个Symbol:\n```javascript\nvar s1 = Symbol(\"desc\")\nvar s2 = Symbol(\"desc\")\nconsole.log(s1.description === s2.description)\n// true\nconsole.log(s1 === s2)\n// false\n```\n## try catch optional binding\nECMAScript2019之后，你写try...catch时如果没必要时可以不用声明error：\n``` javascript\n// ECMAScript2019之前，你一定要在catch里面声明error，否则会报错\ntry {\n  ...\n} catch (error) {\n\n}\n// 可是有时候，你确实用不到这个error对象，于是你会写这样的代码\ntry {\n  ...\n} catch (_) {\n  ...\n}\n\n// ECMAScript2019后，你可以直接这样写了\ntry {\n  ...\n} catch {\n  ...\n}\n```\n虽然这个新属性可以让你省略掉error，可是我觉得开发者应该避免使用这个属性，因为在我看来所有的错误都应该被处理，至少应该被console.error出来，否则可能会有一些潜在的bug，举个例子：\n```javascript\nlet testJSONObj\ntry {\n  testJSONObj = JSON.prase(testStr)\n} catch {\n  testJSONObj = {}\n}\nconsole.log(testJSONObj)\n```\n以上代码中无论testStr是不是一个合法的JSON字符串，testJSONObj永远都是一个空对象，因为JSON.parse函数名写错了，而你又忽略了错误处理，所以你永远不会知道这个typo。\n## 稳定的排序 Array.prototype.sort\nECMAScript2019后Array.sort一定是个稳定的排序。什么是稳定排序？所谓的稳定排序就是：假如没排序之前有两个相同数值的元素a[i]和a[j]，而且i在j前面，即i < j，经过排序后元素a[i]依然排在a[j]元素的前面，也就是说稳定的排序不会改变原来数组里面相同数值的元素的先后关系。看个例子：\n```javascript\nvar users = [\n  {name: 'Sean', rating: 14},\n  {name: 'Ken', rating: 14},\n  {name: 'Jeremy', rating: 13}\n]\nusers.sort((a, b) => a.rating - b.rating)\n// 非稳定的排序结果可能是\n// [\n//   {name: 'Jeremy', rating: 13}, \n//   {name: 'Ken', rating: 14}, \n//   {name: 'Sean', rating: 14}\n// ]\n// 虽然Sean和Ken具有同样的rating，可是非稳定的排序不能保证他们两个的顺序在排序后保持不变\n\n// ECMAScript2019后，Array.sort将是一个稳定的排序，也就是说它可以保证Sean和Ken两个人的顺序在排序后不变\n// [\n//   {name: 'Jeremy', rating: 13}, \n//   {name: 'Sean', rating: 14}, \n//   {name: 'Ken', rating: 14}\n// ]\n```\n## 改进Function.prototype.toString()\nECMAScript2019之前，调用function的toString方法会将方法体里面的空格字符省略掉，例如:\n```javascript\nfunction hello() {\n  console.log('hello word')\n}\n\nconsole.log(hello.toString())\n//'function hello() {\\nconsole.log('hello word')\\n}'\n```\nECMAScript2019之后，要求一定要返回函数源代码（保留空格字符）或者一个标准的占位符例如native code，所以ECMAScript2019之后，以上的输出会变为：\n```javascript\nconsole.log(hello.toString())\n//\"function hello() {\n//  console.log('hello word')\n//}\"\n```\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","source":"_posts/ECMAScript2019-ES10新属性.md","raw":"---\ntitle: 详解ECMAScript2019/ES10新属性\ntags:\n  - JavaScript\n  - ECMAScript\n  - 2019\ncategories:\n  - JavaScript\ndate: 2019-12-05 18:04:15\n---\n\n每年都有一些新的属性进入[ECMA262](https://tc39.es/ecma262/#sec-intro)标准，今年发布的ECMAScript2019/ES10同样也有很多新的特性，本文将会挑选一些普通开发者会用到的新属性进行深入的解读。\n## Array.prototype.flat()\n> The flat() method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth. -- [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat)\n\n简单来说flat这个函数就是按照一定的深度depth将一个深层次嵌套的数组拍扁, 例子:\n```javascript\nconst nestedArr = [1, 2, [3, 4, [5, 6, [7, [8], 9]]], 10]\nconsole.log(nestedArr.flat())\n// [1, 2, 3, 4, [5, 6, [7, [8], 9]], 10]\nconsole.log(nestedArr.flat(2))\n// [1, 2, 3, 4, 5, 6, [7, [8], 9], 10]\nconsole.log(nestedArr.flat(3))\n// [1, 2, 3, 4, 5, 6, 7, [8], 9, 10]\nconsole.log(nestedArr.flat(4))\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nconsole.log(nestedArr.flat(Infinity))\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n由上面的例子可以看出flat会按照指定的深度depth将一个数组扁平化，如果需要将数组完全拍扁变成一维数组，则指定depth为无限大，即是**Infinity**，相反如果不指定深度，其默认值是1。\n<!-- more --> \n## Array.prototype.flatMap()\n> The flatMap() method first maps each element using a mapping function, then flattens the result into a new array. It is identical to a map() followed by a flat() of depth 1, but flatMap() is often quite useful, as merging both into one method is slightly more efficient. -- [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap)\n\n简单来说flatMap等于一个数组先调用完map函数再调用flat函数将其扁平化，扁平化的深度固定为1，先通过一个简单的例子感受一下:\n```javascript\nconst myArr = [1, 2, 3]\nmyArr\n  .map(n => [n * n]) // [[1], [4], [9]]\n  .flat() // [1, 4, 9]\n\n// 用flatMap可以一步到位\nmyArr.flatMap(n => [n * n]) // [1, 4, 9]\n```\n从上面的例子来看flatMap如果只是将flat和map做了一个简单的组合好像可有可无，其实不然，flatMap有个强大的功能是可以在map的时候添加和删除元素，这个无论是map还是filter都没有这个功能。\n\n要想删除某一个元素只需要在mapper函数里面返回一个空的数组[], 而增加元素只需在mapper函数里面返回一个长度大于1的数组，具体可以看下面的例子：\n```javascript\n// 假如我们想要删除掉原数组里面所有的负数，同时将单数转换为一个复数和1\nconst a = [5, 4, -3, 20, 17, -33, -4, 18]\n//        |\\  \\  x   |   | \\   x   x   |\n//       [4,1, 4,   20, 16,1,         18]\na.flatMap(n =>\n  (n < 0) ? []: // 删除负数\n  (n % 2 == 0) ? [n] : // 保留复数\n                 [n - 1, 1] // 单数变为一个复数和1\n)\n// [4, 1, 4, 20, 20, 16, 1, 18]\n```\n## Object.fromEntries()\n> The Object.fromEntries() method transforms a list of key-value pairs into an object. -- [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries)\n\nfromEntries方法将一个[iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol)对象返回的一系列键值对(key-value pairs)转换为一个object。先看一个简单的例子理解一下:\n```javascript\n// key-value pairs数组\nconst entriesArr = [['k1', 1], ['k2', 2]]\nconsole.log(Object.fromEntries(entriesArr)\n// {k1: 1, k2: 2}\n\nconst entriesMap = new Map([\n  ['k1', 1],\n  ['k2', 2]\n]) // {\"k1\" => 1, \"k2\" => 2}\nconsole.log(Object.fromEntries(entriesMap))\n// {k1: 1, k2: 2}\n```\n再来看一个自定义的iterable对象例子深入理解一下:\n```javascript\nconst iteratorObj = {\n  [Symbol.iterator]: function () {\n    const entries = [['k1', 1], ['k2', 2]]\n    let cursor = 0\n\n    return {\n      next() {\n        const done = entries.length === cursor\n        \n        return {\n          value: done ? undefined : entries[cursor++],\n          done\n        }\n      }\n    }\n  }\n}\nObject.fromEntries(iteratorObj) // {k1: 1, k2: 2}\n```\n这个方法有一个用途就是对object的key进行filter，举个例子:\n```javascript\nconst studentMap = {\n  student1: {grade: 80},\n  student2: {grade: 50},\n  student3: {grade: 100}\n}\nconst goodStudentMap = Object.fromEntries(\n  Object\n    .entries(studentMap)\n    .filter(([_, meta]) => meta.grade >= 60)\n)\nconsole.log(goodStudentMap)\n// {student1: {grade: 80}, student3: {grade: 100}}\n```\n## String.prototype.trimStart\n这个方法很简单，就是返回一个将原字符串开头的空格字符去掉的新的字符串，例子:\n```javascript\nconst greeting = '    Hello world!  '\nconsole.log(greeting.trimStart())\n// 'Hello world! '\n```\n这个方法还有一个别名函数，叫做trimLeft，它们具有一样的功能。\n## String.prototype.trimEnd\n这个方法和trimStart类似，只不过是将原字符串结尾的空格字符去掉，例子:\n```javascript\nconst greeting = '  Hello world!  '\nconsole.log(greeting.trimEnd())\n// ' Hello world!'\n```\n这个方法也有一个别名函数，叫做trimRight, 它们也具有一样的功能。\n\n## Symbol.prototype.description\n> The read-only description property is a string returning the optional description of Symbol objects. -- [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description)\n\nECMAScript2019给Symbol对象添加了一个可选的description属性，这个属性是个只读属性，看看例子:\n```javascript\nconsole.log(Symbol('desc').description)\n// desc\nconsole.log(Symbol.for('desc').description)\n// desc\n\n// 一些内置的Symbol也有这个属性\nconsole.log(Symbol.iterator.description)\n// Symbol.iterator\n\n// 如果初始化时没有带description，这个属性会返回一个undefined，因为这样才说这个属性是可选的\nconsole.log(Symbol().description)\n// undefined\n\n// 这个属性是只读的，不能被设置\nSymbol.iterator.description = 'mess it'\nconsole.log(Symbol.iterator.description)\n// Symbol.iterator\n```\n这个新的属性只要是为了方便开发者调试，不能通过比较两个Symbol对象的description来确定这两个Symbol是不是同一个Symbol:\n```javascript\nvar s1 = Symbol(\"desc\")\nvar s2 = Symbol(\"desc\")\nconsole.log(s1.description === s2.description)\n// true\nconsole.log(s1 === s2)\n// false\n```\n## try catch optional binding\nECMAScript2019之后，你写try...catch时如果没必要时可以不用声明error：\n``` javascript\n// ECMAScript2019之前，你一定要在catch里面声明error，否则会报错\ntry {\n  ...\n} catch (error) {\n\n}\n// 可是有时候，你确实用不到这个error对象，于是你会写这样的代码\ntry {\n  ...\n} catch (_) {\n  ...\n}\n\n// ECMAScript2019后，你可以直接这样写了\ntry {\n  ...\n} catch {\n  ...\n}\n```\n虽然这个新属性可以让你省略掉error，可是我觉得开发者应该避免使用这个属性，因为在我看来所有的错误都应该被处理，至少应该被console.error出来，否则可能会有一些潜在的bug，举个例子：\n```javascript\nlet testJSONObj\ntry {\n  testJSONObj = JSON.prase(testStr)\n} catch {\n  testJSONObj = {}\n}\nconsole.log(testJSONObj)\n```\n以上代码中无论testStr是不是一个合法的JSON字符串，testJSONObj永远都是一个空对象，因为JSON.parse函数名写错了，而你又忽略了错误处理，所以你永远不会知道这个typo。\n## 稳定的排序 Array.prototype.sort\nECMAScript2019后Array.sort一定是个稳定的排序。什么是稳定排序？所谓的稳定排序就是：假如没排序之前有两个相同数值的元素a[i]和a[j]，而且i在j前面，即i < j，经过排序后元素a[i]依然排在a[j]元素的前面，也就是说稳定的排序不会改变原来数组里面相同数值的元素的先后关系。看个例子：\n```javascript\nvar users = [\n  {name: 'Sean', rating: 14},\n  {name: 'Ken', rating: 14},\n  {name: 'Jeremy', rating: 13}\n]\nusers.sort((a, b) => a.rating - b.rating)\n// 非稳定的排序结果可能是\n// [\n//   {name: 'Jeremy', rating: 13}, \n//   {name: 'Ken', rating: 14}, \n//   {name: 'Sean', rating: 14}\n// ]\n// 虽然Sean和Ken具有同样的rating，可是非稳定的排序不能保证他们两个的顺序在排序后保持不变\n\n// ECMAScript2019后，Array.sort将是一个稳定的排序，也就是说它可以保证Sean和Ken两个人的顺序在排序后不变\n// [\n//   {name: 'Jeremy', rating: 13}, \n//   {name: 'Sean', rating: 14}, \n//   {name: 'Ken', rating: 14}\n// ]\n```\n## 改进Function.prototype.toString()\nECMAScript2019之前，调用function的toString方法会将方法体里面的空格字符省略掉，例如:\n```javascript\nfunction hello() {\n  console.log('hello word')\n}\n\nconsole.log(hello.toString())\n//'function hello() {\\nconsole.log('hello word')\\n}'\n```\nECMAScript2019之后，要求一定要返回函数源代码（保留空格字符）或者一个标准的占位符例如native code，所以ECMAScript2019之后，以上的输出会变为：\n```javascript\nconsole.log(hello.toString())\n//\"function hello() {\n//  console.log('hello word')\n//}\"\n```\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","slug":"ECMAScript2019-ES10新属性","published":1,"updated":"2021-02-08T06:16:56.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0gqf6f90002ucnxhmt07x0z","content":"<p>每年都有一些新的属性进入<a href=\"https://tc39.es/ecma262/#sec-intro\" target=\"_blank\" rel=\"noopener\">ECMA262</a>标准，今年发布的ECMAScript2019/ES10同样也有很多新的特性，本文将会挑选一些普通开发者会用到的新属性进行深入的解读。</p>\n<h2 id=\"Array-prototype-flat\"><a href=\"#Array-prototype-flat\" class=\"headerlink\" title=\"Array.prototype.flat()\"></a>Array.prototype.flat()</h2><blockquote>\n<p>The flat() method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth. – <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\" target=\"_blank\" rel=\"noopener\">MDN</a></p>\n</blockquote>\n<p>简单来说flat这个函数就是按照一定的深度depth将一个深层次嵌套的数组拍扁, 例子:</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> nestedArr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, [<span class=\"hljs-number\">7</span>, [<span class=\"hljs-number\">8</span>], <span class=\"hljs-number\">9</span>]]], <span class=\"hljs-number\">10</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(nestedArr.flat())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [1, 2, 3, 4, [5, 6, [7, [8], 9]], 10]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(nestedArr.flat(<span class=\"hljs-number\">2</span>))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [1, 2, 3, 4, 5, 6, [7, [8], 9], 10]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(nestedArr.flat(<span class=\"hljs-number\">3</span>))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [1, 2, 3, 4, 5, 6, 7, [8], 9, 10]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(nestedArr.flat(<span class=\"hljs-number\">4</span>))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(nestedArr.flat(<span class=\"hljs-literal\">Infinity</span>))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span></pre></td></tr></table></figure>\n<p>由上面的例子可以看出flat会按照指定的深度depth将一个数组扁平化，如果需要将数组完全拍扁变成一维数组，则指定depth为无限大，即是<strong>Infinity</strong>，相反如果不指定深度，其默认值是1。</p>\n<a id=\"more\"></a> \n<h2 id=\"Array-prototype-flatMap\"><a href=\"#Array-prototype-flatMap\" class=\"headerlink\" title=\"Array.prototype.flatMap()\"></a>Array.prototype.flatMap()</h2><blockquote>\n<p>The flatMap() method first maps each element using a mapping function, then flattens the result into a new array. It is identical to a map() followed by a flat() of depth 1, but flatMap() is often quite useful, as merging both into one method is slightly more efficient. – <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\" target=\"_blank\" rel=\"noopener\">MDN</a></p>\n</blockquote>\n<p>简单来说flatMap等于一个数组先调用完map函数再调用flat函数将其扁平化，扁平化的深度固定为1，先通过一个简单的例子感受一下:</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> myArr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">myArr</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  .map(<span class=\"hljs-function\"><span class=\"hljs-params\">n</span> =&gt;</span> [n * n]) <span class=\"hljs-comment\">// [[1], [4], [9]]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  .flat() <span class=\"hljs-comment\">// [1, 4, 9]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 用flatMap可以一步到位</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">myArr.flatMap(<span class=\"hljs-function\"><span class=\"hljs-params\">n</span> =&gt;</span> [n * n]) <span class=\"hljs-comment\">// [1, 4, 9]</span></span></pre></td></tr></table></figure>\n<p>从上面的例子来看flatMap如果只是将flat和map做了一个简单的组合好像可有可无，其实不然，flatMap有个强大的功能是可以在map的时候添加和删除元素，这个无论是map还是filter都没有这个功能。</p>\n<p>要想删除某一个元素只需要在mapper函数里面返回一个空的数组[], 而增加元素只需在mapper函数里面返回一个长度大于1的数组，具体可以看下面的例子：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 假如我们想要删除掉原数组里面所有的负数，同时将单数转换为一个复数和1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> a = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">-3</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">-33</span>, <span class=\"hljs-number\">-4</span>, <span class=\"hljs-number\">18</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//        |\\  \\  x   |   | \\   x   x   |</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//       [4,1, 4,   20, 16,1,         18]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">a.flatMap(<span class=\"hljs-function\"><span class=\"hljs-params\">n</span> =&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  (n &lt; <span class=\"hljs-number\">0</span>) ? []: <span class=\"hljs-comment\">// 删除负数</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  (n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) ? [n] : <span class=\"hljs-comment\">// 保留复数</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">                 [n - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>] <span class=\"hljs-comment\">// 单数变为一个复数和1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [4, 1, 4, 20, 20, 16, 1, 18]</span></span></pre></td></tr></table></figure>\n<h2 id=\"Object-fromEntries\"><a href=\"#Object-fromEntries\" class=\"headerlink\" title=\"Object.fromEntries()\"></a>Object.fromEntries()</h2><blockquote>\n<p>The Object.fromEntries() method transforms a list of key-value pairs into an object. – <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries\" target=\"_blank\" rel=\"noopener\">MDN</a></p>\n</blockquote>\n<p>fromEntries方法将一个<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol\" target=\"_blank\" rel=\"noopener\">iterable</a>对象返回的一系列键值对(key-value pairs)转换为一个object。先看一个简单的例子理解一下:</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// key-value pairs数组</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> entriesArr = [[<span class=\"hljs-string\">'k1'</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-string\">'k2'</span>, <span class=\"hljs-number\">2</span>]]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.fromEntries(entriesArr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// &#123;k1: 1, k2: 2&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> entriesMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  [<span class=\"hljs-string\">'k1'</span>, <span class=\"hljs-number\">1</span>],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  [<span class=\"hljs-string\">'k2'</span>, <span class=\"hljs-number\">2</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">]) <span class=\"hljs-comment\">// &#123;\"k1\" =&gt; 1, \"k2\" =&gt; 2&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.fromEntries(entriesMap))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// &#123;k1: 1, k2: 2&#125;</span></span></pre></td></tr></table></figure>\n<p>再来看一个自定义的iterable对象例子深入理解一下:</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> iteratorObj = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  [<span class=\"hljs-built_in\">Symbol</span>.iterator]: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">const</span> entries = [[<span class=\"hljs-string\">'k1'</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-string\">'k2'</span>, <span class=\"hljs-number\">2</span>]]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">let</span> cursor = <span class=\"hljs-number\">0</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">return</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      next() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-keyword\">const</span> done = entries.length === cursor</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">        </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-keyword\">return</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">          value: done ? <span class=\"hljs-literal\">undefined</span> : entries[cursor++],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">          done</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">Object</span>.fromEntries(iteratorObj) <span class=\"hljs-comment\">// &#123;k1: 1, k2: 2&#125;</span></span></pre></td></tr></table></figure>\n<p>这个方法有一个用途就是对object的key进行filter，举个例子:</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> studentMap = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  student1: &#123;<span class=\"hljs-attr\">grade</span>: <span class=\"hljs-number\">80</span>&#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  student2: &#123;<span class=\"hljs-attr\">grade</span>: <span class=\"hljs-number\">50</span>&#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  student3: &#123;<span class=\"hljs-attr\">grade</span>: <span class=\"hljs-number\">100</span>&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> goodStudentMap = <span class=\"hljs-built_in\">Object</span>.fromEntries(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-built_in\">Object</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    .entries(studentMap)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    .filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">[_, meta]</span>) =&gt;</span> meta.grade &gt;= <span class=\"hljs-number\">60</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(goodStudentMap)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// &#123;student1: &#123;grade: 80&#125;, student3: &#123;grade: 100&#125;&#125;</span></span></pre></td></tr></table></figure>\n<h2 id=\"String-prototype-trimStart\"><a href=\"#String-prototype-trimStart\" class=\"headerlink\" title=\"String.prototype.trimStart\"></a>String.prototype.trimStart</h2><p>这个方法很简单，就是返回一个将原字符串开头的空格字符去掉的新的字符串，例子:</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> greeting = <span class=\"hljs-string\">'    Hello world!  '</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(greeting.trimStart())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 'Hello world! '</span></span></pre></td></tr></table></figure>\n<p>这个方法还有一个别名函数，叫做trimLeft，它们具有一样的功能。</p>\n<h2 id=\"String-prototype-trimEnd\"><a href=\"#String-prototype-trimEnd\" class=\"headerlink\" title=\"String.prototype.trimEnd\"></a>String.prototype.trimEnd</h2><p>这个方法和trimStart类似，只不过是将原字符串结尾的空格字符去掉，例子:</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> greeting = <span class=\"hljs-string\">'  Hello world!  '</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(greeting.trimEnd())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// ' Hello world!'</span></span></pre></td></tr></table></figure>\n<p>这个方法也有一个别名函数，叫做trimRight, 它们也具有一样的功能。</p>\n<h2 id=\"Symbol-prototype-description\"><a href=\"#Symbol-prototype-description\" class=\"headerlink\" title=\"Symbol.prototype.description\"></a>Symbol.prototype.description</h2><blockquote>\n<p>The read-only description property is a string returning the optional description of Symbol objects. – <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description\" target=\"_blank\" rel=\"noopener\">MDN</a></p>\n</blockquote>\n<p>ECMAScript2019给Symbol对象添加了一个可选的description属性，这个属性是个只读属性，看看例子:</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">'desc'</span>).description)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// desc</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Symbol</span>.for(<span class=\"hljs-string\">'desc'</span>).description)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// desc</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 一些内置的Symbol也有这个属性</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Symbol</span>.iterator.description)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// Symbol.iterator</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 如果初始化时没有带description，这个属性会返回一个undefined，因为这样才说这个属性是可选的</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Symbol</span>().description)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// undefined</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 这个属性是只读的，不能被设置</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">Symbol</span>.iterator.description = <span class=\"hljs-string\">'mess it'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Symbol</span>.iterator.description)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// Symbol.iterator</span></span></pre></td></tr></table></figure>\n<p>这个新的属性只要是为了方便开发者调试，不能通过比较两个Symbol对象的description来确定这两个Symbol是不是同一个Symbol:</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> s1 = <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">\"desc\"</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> s2 = <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">\"desc\"</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(s1.description === s2.description)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(s1 === s2)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// false</span></span></pre></td></tr></table></figure>\n<h2 id=\"try-catch-optional-binding\"><a href=\"#try-catch-optional-binding\" class=\"headerlink\" title=\"try catch optional binding\"></a>try catch optional binding</h2><p>ECMAScript2019之后，你写try…catch时如果没必要时可以不用声明error：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// ECMAScript2019之前，你一定要在catch里面声明error，否则会报错</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">try</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"hljs-keyword\">catch</span> (error) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 可是有时候，你确实用不到这个error对象，于是你会写这样的代码</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">try</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"hljs-keyword\">catch</span> (_) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// ECMAScript2019后，你可以直接这样写了</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">try</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"hljs-keyword\">catch</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>虽然这个新属性可以让你省略掉error，可是我觉得开发者应该避免使用这个属性，因为在我看来所有的错误都应该被处理，至少应该被console.error出来，否则可能会有一些潜在的bug，举个例子：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> testJSONObj</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">try</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  testJSONObj = <span class=\"hljs-built_in\">JSON</span>.prase(testStr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"hljs-keyword\">catch</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  testJSONObj = &#123;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(testJSONObj)</span></pre></td></tr></table></figure>\n<p>以上代码中无论testStr是不是一个合法的JSON字符串，testJSONObj永远都是一个空对象，因为JSON.parse函数名写错了，而你又忽略了错误处理，所以你永远不会知道这个typo。</p>\n<h2 id=\"稳定的排序-Array-prototype-sort\"><a href=\"#稳定的排序-Array-prototype-sort\" class=\"headerlink\" title=\"稳定的排序 Array.prototype.sort\"></a>稳定的排序 Array.prototype.sort</h2><p>ECMAScript2019后Array.sort一定是个稳定的排序。什么是稳定排序？所谓的稳定排序就是：假如没排序之前有两个相同数值的元素a[i]和a[j]，而且i在j前面，即i &lt; j，经过排序后元素a[i]依然排在a[j]元素的前面，也就是说稳定的排序不会改变原来数组里面相同数值的元素的先后关系。看个例子：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">var</span> users = [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Sean'</span>, <span class=\"hljs-attr\">rating</span>: <span class=\"hljs-number\">14</span>&#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Ken'</span>, <span class=\"hljs-attr\">rating</span>: <span class=\"hljs-number\">14</span>&#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Jeremy'</span>, <span class=\"hljs-attr\">rating</span>: <span class=\"hljs-number\">13</span>&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">users.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> a.rating - b.rating)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 非稳定的排序结果可能是</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//   &#123;name: 'Jeremy', rating: 13&#125;, </span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//   &#123;name: 'Ken', rating: 14&#125;, </span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//   &#123;name: 'Sean', rating: 14&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// ]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 虽然Sean和Ken具有同样的rating，可是非稳定的排序不能保证他们两个的顺序在排序后保持不变</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// ECMAScript2019后，Array.sort将是一个稳定的排序，也就是说它可以保证Sean和Ken两个人的顺序在排序后不变</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//   &#123;name: 'Jeremy', rating: 13&#125;, </span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//   &#123;name: 'Sean', rating: 14&#125;, </span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//   &#123;name: 'Ken', rating: 14&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// ]</span></span></pre></td></tr></table></figure>\n<h2 id=\"改进Function-prototype-toString\"><a href=\"#改进Function-prototype-toString\" class=\"headerlink\" title=\"改进Function.prototype.toString()\"></a>改进Function.prototype.toString()</h2><p>ECMAScript2019之前，调用function的toString方法会将方法体里面的空格字符省略掉，例如:</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">hello</span>(<span class=\"hljs-params\"></span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'hello word'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(hello.toString())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//'function hello() &#123;\\nconsole.log('hello word')\\n&#125;'</span></span></pre></td></tr></table></figure>\n<p>ECMAScript2019之后，要求一定要返回函数源代码（保留空格字符）或者一个标准的占位符例如native code，所以ECMAScript2019之后，以上的输出会变为：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(hello.toString())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//\"function hello() &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//  console.log('hello word')</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">//&#125;\"</span></span></pre></td></tr></table></figure>\n\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<p>每年都有一些新的属性进入<a href=\"https://tc39.es/ecma262/#sec-intro\" target=\"_blank\" rel=\"noopener\">ECMA262</a>标准，今年发布的ECMAScript2019/ES10同样也有很多新的特性，本文将会挑选一些普通开发者会用到的新属性进行深入的解读。</p>\n<h2 id=\"Array-prototype-flat\"><a href=\"#Array-prototype-flat\" class=\"headerlink\" title=\"Array.prototype.flat()\"></a>Array.prototype.flat()</h2><blockquote>\n<p>The flat() method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth. – <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\" target=\"_blank\" rel=\"noopener\">MDN</a></p>\n</blockquote>\n<p>简单来说flat这个函数就是按照一定的深度depth将一个深层次嵌套的数组拍扁, 例子:</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> nestedArr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, [<span class=\"hljs-number\">7</span>, [<span class=\"hljs-number\">8</span>], <span class=\"hljs-number\">9</span>]]], <span class=\"hljs-number\">10</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(nestedArr.flat())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [1, 2, 3, 4, [5, 6, [7, [8], 9]], 10]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(nestedArr.flat(<span class=\"hljs-number\">2</span>))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [1, 2, 3, 4, 5, 6, [7, [8], 9], 10]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(nestedArr.flat(<span class=\"hljs-number\">3</span>))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [1, 2, 3, 4, 5, 6, 7, [8], 9, 10]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(nestedArr.flat(<span class=\"hljs-number\">4</span>))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(nestedArr.flat(<span class=\"hljs-literal\">Infinity</span>))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span></pre></td></tr></table></figure>\n<p>由上面的例子可以看出flat会按照指定的深度depth将一个数组扁平化，如果需要将数组完全拍扁变成一维数组，则指定depth为无限大，即是<strong>Infinity</strong>，相反如果不指定深度，其默认值是1。</p>","more":"<h2 id=\"Array-prototype-flatMap\"><a href=\"#Array-prototype-flatMap\" class=\"headerlink\" title=\"Array.prototype.flatMap()\"></a>Array.prototype.flatMap()</h2><blockquote>\n<p>The flatMap() method first maps each element using a mapping function, then flattens the result into a new array. It is identical to a map() followed by a flat() of depth 1, but flatMap() is often quite useful, as merging both into one method is slightly more efficient. – <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\" target=\"_blank\" rel=\"noopener\">MDN</a></p>\n</blockquote>\n<p>简单来说flatMap等于一个数组先调用完map函数再调用flat函数将其扁平化，扁平化的深度固定为1，先通过一个简单的例子感受一下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myArr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">myArr</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  .map(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> [n * n]) <span class=\"comment\">// [[1], [4], [9]]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  .flat() <span class=\"comment\">// [1, 4, 9]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用flatMap可以一步到位</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">myArr.flatMap(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> [n * n]) <span class=\"comment\">// [1, 4, 9]</span></span></pre></td></tr></table></figure>\n<p>从上面的例子来看flatMap如果只是将flat和map做了一个简单的组合好像可有可无，其实不然，flatMap有个强大的功能是可以在map的时候添加和删除元素，这个无论是map还是filter都没有这个功能。</p>\n<p>要想删除某一个元素只需要在mapper函数里面返回一个空的数组[], 而增加元素只需在mapper函数里面返回一个长度大于1的数组，具体可以看下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假如我们想要删除掉原数组里面所有的负数，同时将单数转换为一个复数和1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = [<span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">-3</span>, <span class=\"number\">20</span>, <span class=\"number\">17</span>, <span class=\"number\">-33</span>, <span class=\"number\">-4</span>, <span class=\"number\">18</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//        |\\  \\  x   |   | \\   x   x   |</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//       [4,1, 4,   20, 16,1,         18]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">a.flatMap(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  (n &lt; <span class=\"number\">0</span>) ? []: <span class=\"comment\">// 删除负数</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  (n % <span class=\"number\">2</span> == <span class=\"number\">0</span>) ? [n] : <span class=\"comment\">// 保留复数</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">                 [n - <span class=\"number\">1</span>, <span class=\"number\">1</span>] <span class=\"comment\">// 单数变为一个复数和1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [4, 1, 4, 20, 20, 16, 1, 18]</span></span></pre></td></tr></table></figure>\n<h2 id=\"Object-fromEntries\"><a href=\"#Object-fromEntries\" class=\"headerlink\" title=\"Object.fromEntries()\"></a>Object.fromEntries()</h2><blockquote>\n<p>The Object.fromEntries() method transforms a list of key-value pairs into an object. – <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries\" target=\"_blank\" rel=\"noopener\">MDN</a></p>\n</blockquote>\n<p>fromEntries方法将一个<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol\" target=\"_blank\" rel=\"noopener\">iterable</a>对象返回的一系列键值对(key-value pairs)转换为一个object。先看一个简单的例子理解一下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// key-value pairs数组</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> entriesArr = [[<span class=\"string\">'k1'</span>, <span class=\"number\">1</span>], [<span class=\"string\">'k2'</span>, <span class=\"number\">2</span>]]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.fromEntries(entriesArr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123;k1: 1, k2: 2&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> entriesMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  [<span class=\"string\">'k1'</span>, <span class=\"number\">1</span>],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  [<span class=\"string\">'k2'</span>, <span class=\"number\">2</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">]) <span class=\"comment\">// &#123;\"k1\" =&gt; 1, \"k2\" =&gt; 2&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.fromEntries(entriesMap))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123;k1: 1, k2: 2&#125;</span></span></pre></td></tr></table></figure>\n<p>再来看一个自定义的iterable对象例子深入理解一下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> iteratorObj = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  [<span class=\"built_in\">Symbol</span>.iterator]: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> entries = [[<span class=\"string\">'k1'</span>, <span class=\"number\">1</span>], [<span class=\"string\">'k2'</span>, <span class=\"number\">2</span>]]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">let</span> cursor = <span class=\"number\">0</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      next() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">const</span> done = entries.length === cursor</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">        </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">          value: done ? <span class=\"literal\">undefined</span> : entries[cursor++],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">          done</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.fromEntries(iteratorObj) <span class=\"comment\">// &#123;k1: 1, k2: 2&#125;</span></span></pre></td></tr></table></figure>\n<p>这个方法有一个用途就是对object的key进行filter，举个例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> studentMap = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  student1: &#123;<span class=\"attr\">grade</span>: <span class=\"number\">80</span>&#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  student2: &#123;<span class=\"attr\">grade</span>: <span class=\"number\">50</span>&#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  student3: &#123;<span class=\"attr\">grade</span>: <span class=\"number\">100</span>&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> goodStudentMap = <span class=\"built_in\">Object</span>.fromEntries(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">Object</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    .entries(studentMap)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    .filter(<span class=\"function\">(<span class=\"params\">[_, meta]</span>) =&gt;</span> meta.grade &gt;= <span class=\"number\">60</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(goodStudentMap)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123;student1: &#123;grade: 80&#125;, student3: &#123;grade: 100&#125;&#125;</span></span></pre></td></tr></table></figure>\n<h2 id=\"String-prototype-trimStart\"><a href=\"#String-prototype-trimStart\" class=\"headerlink\" title=\"String.prototype.trimStart\"></a>String.prototype.trimStart</h2><p>这个方法很简单，就是返回一个将原字符串开头的空格字符去掉的新的字符串，例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> greeting = <span class=\"string\">'    Hello world!  '</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(greeting.trimStart())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 'Hello world! '</span></span></pre></td></tr></table></figure>\n<p>这个方法还有一个别名函数，叫做trimLeft，它们具有一样的功能。</p>\n<h2 id=\"String-prototype-trimEnd\"><a href=\"#String-prototype-trimEnd\" class=\"headerlink\" title=\"String.prototype.trimEnd\"></a>String.prototype.trimEnd</h2><p>这个方法和trimStart类似，只不过是将原字符串结尾的空格字符去掉，例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> greeting = <span class=\"string\">'  Hello world!  '</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(greeting.trimEnd())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ' Hello world!'</span></span></pre></td></tr></table></figure>\n<p>这个方法也有一个别名函数，叫做trimRight, 它们也具有一样的功能。</p>\n<h2 id=\"Symbol-prototype-description\"><a href=\"#Symbol-prototype-description\" class=\"headerlink\" title=\"Symbol.prototype.description\"></a>Symbol.prototype.description</h2><blockquote>\n<p>The read-only description property is a string returning the optional description of Symbol objects. – <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description\" target=\"_blank\" rel=\"noopener\">MDN</a></p>\n</blockquote>\n<p>ECMAScript2019给Symbol对象添加了一个可选的description属性，这个属性是个只读属性，看看例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Symbol</span>(<span class=\"string\">'desc'</span>).description)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// desc</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'desc'</span>).description)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// desc</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一些内置的Symbol也有这个属性</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Symbol</span>.iterator.description)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Symbol.iterator</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果初始化时没有带description，这个属性会返回一个undefined，因为这样才说这个属性是可选的</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Symbol</span>().description)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// undefined</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个属性是只读的，不能被设置</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Symbol</span>.iterator.description = <span class=\"string\">'mess it'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Symbol</span>.iterator.description)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Symbol.iterator</span></span></pre></td></tr></table></figure>\n<p>这个新的属性只要是为了方便开发者调试，不能通过比较两个Symbol对象的description来确定这两个Symbol是不是同一个Symbol:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"desc\"</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"desc\"</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(s1.description === s2.description)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(s1 === s2)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// false</span></span></pre></td></tr></table></figure>\n<h2 id=\"try-catch-optional-binding\"><a href=\"#try-catch-optional-binding\" class=\"headerlink\" title=\"try catch optional binding\"></a>try catch optional binding</h2><p>ECMAScript2019之后，你写try…catch时如果没必要时可以不用声明error：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ECMAScript2019之前，你一定要在catch里面声明error，否则会报错</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可是有时候，你确实用不到这个error对象，于是你会写这样的代码</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (_) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ECMAScript2019后，你可以直接这样写了</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>虽然这个新属性可以让你省略掉error，可是我觉得开发者应该避免使用这个属性，因为在我看来所有的错误都应该被处理，至少应该被console.error出来，否则可能会有一些潜在的bug，举个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> testJSONObj</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  testJSONObj = <span class=\"built_in\">JSON</span>.prase(testStr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  testJSONObj = &#123;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(testJSONObj)</span></pre></td></tr></table></figure>\n<p>以上代码中无论testStr是不是一个合法的JSON字符串，testJSONObj永远都是一个空对象，因为JSON.parse函数名写错了，而你又忽略了错误处理，所以你永远不会知道这个typo。</p>\n<h2 id=\"稳定的排序-Array-prototype-sort\"><a href=\"#稳定的排序-Array-prototype-sort\" class=\"headerlink\" title=\"稳定的排序 Array.prototype.sort\"></a>稳定的排序 Array.prototype.sort</h2><p>ECMAScript2019后Array.sort一定是个稳定的排序。什么是稳定排序？所谓的稳定排序就是：假如没排序之前有两个相同数值的元素a[i]和a[j]，而且i在j前面，即i &lt; j，经过排序后元素a[i]依然排在a[j]元素的前面，也就是说稳定的排序不会改变原来数组里面相同数值的元素的先后关系。看个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> users = [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;<span class=\"attr\">name</span>: <span class=\"string\">'Sean'</span>, <span class=\"attr\">rating</span>: <span class=\"number\">14</span>&#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;<span class=\"attr\">name</span>: <span class=\"string\">'Ken'</span>, <span class=\"attr\">rating</span>: <span class=\"number\">14</span>&#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;<span class=\"attr\">name</span>: <span class=\"string\">'Jeremy'</span>, <span class=\"attr\">rating</span>: <span class=\"number\">13</span>&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">users.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a.rating - b.rating)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非稳定的排序结果可能是</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//   &#123;name: 'Jeremy', rating: 13&#125;, </span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//   &#123;name: 'Ken', rating: 14&#125;, </span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//   &#123;name: 'Sean', rating: 14&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 虽然Sean和Ken具有同样的rating，可是非稳定的排序不能保证他们两个的顺序在排序后保持不变</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ECMAScript2019后，Array.sort将是一个稳定的排序，也就是说它可以保证Sean和Ken两个人的顺序在排序后不变</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//   &#123;name: 'Jeremy', rating: 13&#125;, </span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//   &#123;name: 'Sean', rating: 14&#125;, </span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//   &#123;name: 'Ken', rating: 14&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ]</span></span></pre></td></tr></table></figure>\n<h2 id=\"改进Function-prototype-toString\"><a href=\"#改进Function-prototype-toString\" class=\"headerlink\" title=\"改进Function.prototype.toString()\"></a>改进Function.prototype.toString()</h2><p>ECMAScript2019之前，调用function的toString方法会将方法体里面的空格字符省略掉，例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello word'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(hello.toString())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//'function hello() &#123;\\nconsole.log('hello word')\\n&#125;'</span></span></pre></td></tr></table></figure>\n<p>ECMAScript2019之后，要求一定要返回函数源代码（保留空格字符）或者一个标准的占位符例如native code，所以ECMAScript2019之后，以上的输出会变为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(hello.toString())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//\"function hello() &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  console.log('hello word')</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#125;\"</span></span></pre></td></tr></table></figure>\n\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt=\"\"></p>"},{"title":"JavaScript小技巧 - 数组篇","date":"2019-12-11T09:32:16.000Z","_content":"\n本文整理了一些在日常工作可以用到的JavaScript数组小技巧\n# 去重\n巧用Set特性\n```javascript\nconst arr = [1, 2, 2, 3, 4, 7, 7]\nconst uniqueArr = [...new Set(arr)]\nconsole.log(uniqueArr)\n// [1, 2, 3, 4, 7]\n```\n<!-- more --> \n# 某一个位置插入元素\n改变原数组\n```javascript\nconst arr = [1, 2, 3, 5, 6, 7]\narr.splice(3, 0, 4)\nconsole.log(arr)\n// [1, 2, 3, 4, 5, 6, 7]\n```\n不改变原数组\n```javascript\nconst arr = [1, 2, 4, 5]\nconst indexNeededToInsert = 2\nconst newArr = [...arr.slice(0, indexNeededToInsert), 3, ...arr.slice(indexNeededToInsert)]\n\nconsole.log(newArr)\n// [1, 2, 3, 4, 5]\nconsole.log(arr)\n// [1, 2, 4, 5]\n```\n# 删除某一个位置的元素\n不改变原数组\n```javascript\nconst arr = [1, 2, 3, 4, 5]\nconst indexToBeRemoved = 3\nconst filteredArr = arr.filter((_, index) => index !== indexToBeRemoved)\nconsole.log(filteredArr)\n// [1, 2, 3, 5]\nconsole.log(arr)\n// [1, 2, 3, 4, 5]\n```\n改变原数组\n```javascript\nconst arr = [1, 2, 3, 4, 5]\nconst indexToBeRemoved = 3\narr.splice(indexToBeRemoved, 1)\nconsole.log(arr)\n// [1, 2, 3, 5]\n```\n# 获取数组最后一个元素\n改变原数组\n```javascript\nconst arr = [1, 2, 3, 4, 5]\nconst lastElement = arr.pop()\nconsole.log(lastElement)\n// 5\nconsole.log(arr)\n// [1, 2, 3, 4]\n```\n不改变原数组\n```javascript\nconst arr = [1, 2, 3, 4, 5]\nconst lastElement = arr.slice(-1)[0]\nconsole.log(lastElement)\n// 5\nconsole.log(arr)\n// [1, 2, 3, 4, 5]\n```\n[slice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice)第一个参数如果是负数表示从后面开始数起的第几个元素，-1表示倒数第一个元素。\n# 清空数组\n```javascript\nconst arr = [1, 2, 3, 4, 5]\narr.length = 0\nconsole.log(arr)\n// []\nconsole.log(arr[0])\n// undefined\n```\n# 生成一定长度的数组\n```javascript\nconst newArr = new Array(10)\nconsole.log(newArr)\n// [ <10 empty items> ]\n```\n# 两个数组的交集\n```javascript\nconst arr1 = [1, 2, 3, 4]\nconst arr2 = [2, 3]\nconst intersectedArr = arr1.filter(item1 => arr2.includes(item1))\nconsole.log(intersectedArr)\n// [2, 3]\n```\n# 合并多个数组\n```javascript\nconst arr1 = [1, 2, 3]\nconst arr2 = [4, 5, 6]\nconst arr3 = [7, 8, 9]\nconst mergedArr = [...arr1, ...arr2, ...arr3]\nconsole.log(mergedArr)\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n# 移除数组的虚假(falsy)值\n```javascript\nconst mixedArr = [0, “blue”, “”, NaN, 9, true, undefined, “white”, false]\nconst trueArr = mixedArr.filter(Boolean);\nconsole.log(trueArr)\n// [“blue”, 9, true, “white”]\n```\n# 求和\n```javascript\nconst nums = [1, 2, 3, 4, 5]\nconst sum = nums.reduce((currSum, num) => currSum + num)\nconsole.log(sum)\n// 15\n```\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","source":"_posts/JavaScript小技巧-数组篇.md","raw":"---\ntitle: JavaScript小技巧 - 数组篇\ntags: JavaScript\ndate: 2019-12-11 17:32:16\n---\n\n本文整理了一些在日常工作可以用到的JavaScript数组小技巧\n# 去重\n巧用Set特性\n```javascript\nconst arr = [1, 2, 2, 3, 4, 7, 7]\nconst uniqueArr = [...new Set(arr)]\nconsole.log(uniqueArr)\n// [1, 2, 3, 4, 7]\n```\n<!-- more --> \n# 某一个位置插入元素\n改变原数组\n```javascript\nconst arr = [1, 2, 3, 5, 6, 7]\narr.splice(3, 0, 4)\nconsole.log(arr)\n// [1, 2, 3, 4, 5, 6, 7]\n```\n不改变原数组\n```javascript\nconst arr = [1, 2, 4, 5]\nconst indexNeededToInsert = 2\nconst newArr = [...arr.slice(0, indexNeededToInsert), 3, ...arr.slice(indexNeededToInsert)]\n\nconsole.log(newArr)\n// [1, 2, 3, 4, 5]\nconsole.log(arr)\n// [1, 2, 4, 5]\n```\n# 删除某一个位置的元素\n不改变原数组\n```javascript\nconst arr = [1, 2, 3, 4, 5]\nconst indexToBeRemoved = 3\nconst filteredArr = arr.filter((_, index) => index !== indexToBeRemoved)\nconsole.log(filteredArr)\n// [1, 2, 3, 5]\nconsole.log(arr)\n// [1, 2, 3, 4, 5]\n```\n改变原数组\n```javascript\nconst arr = [1, 2, 3, 4, 5]\nconst indexToBeRemoved = 3\narr.splice(indexToBeRemoved, 1)\nconsole.log(arr)\n// [1, 2, 3, 5]\n```\n# 获取数组最后一个元素\n改变原数组\n```javascript\nconst arr = [1, 2, 3, 4, 5]\nconst lastElement = arr.pop()\nconsole.log(lastElement)\n// 5\nconsole.log(arr)\n// [1, 2, 3, 4]\n```\n不改变原数组\n```javascript\nconst arr = [1, 2, 3, 4, 5]\nconst lastElement = arr.slice(-1)[0]\nconsole.log(lastElement)\n// 5\nconsole.log(arr)\n// [1, 2, 3, 4, 5]\n```\n[slice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice)第一个参数如果是负数表示从后面开始数起的第几个元素，-1表示倒数第一个元素。\n# 清空数组\n```javascript\nconst arr = [1, 2, 3, 4, 5]\narr.length = 0\nconsole.log(arr)\n// []\nconsole.log(arr[0])\n// undefined\n```\n# 生成一定长度的数组\n```javascript\nconst newArr = new Array(10)\nconsole.log(newArr)\n// [ <10 empty items> ]\n```\n# 两个数组的交集\n```javascript\nconst arr1 = [1, 2, 3, 4]\nconst arr2 = [2, 3]\nconst intersectedArr = arr1.filter(item1 => arr2.includes(item1))\nconsole.log(intersectedArr)\n// [2, 3]\n```\n# 合并多个数组\n```javascript\nconst arr1 = [1, 2, 3]\nconst arr2 = [4, 5, 6]\nconst arr3 = [7, 8, 9]\nconst mergedArr = [...arr1, ...arr2, ...arr3]\nconsole.log(mergedArr)\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n# 移除数组的虚假(falsy)值\n```javascript\nconst mixedArr = [0, “blue”, “”, NaN, 9, true, undefined, “white”, false]\nconst trueArr = mixedArr.filter(Boolean);\nconsole.log(trueArr)\n// [“blue”, 9, true, “white”]\n```\n# 求和\n```javascript\nconst nums = [1, 2, 3, 4, 5]\nconst sum = nums.reduce((currSum, num) => currSum + num)\nconsole.log(sum)\n// 15\n```\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","slug":"JavaScript小技巧-数组篇","published":1,"updated":"2021-02-08T06:16:56.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0gqf6fc0004ucnx4zpkgxc7","content":"<p>本文整理了一些在日常工作可以用到的JavaScript数组小技巧</p>\n<h1 id=\"去重\"><a href=\"#去重\" class=\"headerlink\" title=\"去重\"></a>去重</h1><p>巧用Set特性</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">7</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> uniqueArr = [...new <span class=\"hljs-built_in\">Set</span>(arr)]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(uniqueArr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [1, 2, 3, 4, 7]</span></span></pre></td></tr></table></figure>\n<a id=\"more\"></a> \n<h1 id=\"某一个位置插入元素\"><a href=\"#某一个位置插入元素\" class=\"headerlink\" title=\"某一个位置插入元素\"></a>某一个位置插入元素</h1><p>改变原数组</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">arr.splice(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(arr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [1, 2, 3, 4, 5, 6, 7]</span></span></pre></td></tr></table></figure>\n<p>不改变原数组</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> indexNeededToInsert = <span class=\"hljs-number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> newArr = [...arr.slice(<span class=\"hljs-number\">0</span>, indexNeededToInsert), <span class=\"hljs-number\">3</span>, ...arr.slice(indexNeededToInsert)]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(newArr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [1, 2, 3, 4, 5]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(arr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [1, 2, 4, 5]</span></span></pre></td></tr></table></figure>\n<h1 id=\"删除某一个位置的元素\"><a href=\"#删除某一个位置的元素\" class=\"headerlink\" title=\"删除某一个位置的元素\"></a>删除某一个位置的元素</h1><p>不改变原数组</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> indexToBeRemoved = <span class=\"hljs-number\">3</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> filteredArr = arr.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">_, index</span>) =&gt;</span> index !== indexToBeRemoved)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(filteredArr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [1, 2, 3, 5]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(arr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [1, 2, 3, 4, 5]</span></span></pre></td></tr></table></figure>\n<p>改变原数组</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> indexToBeRemoved = <span class=\"hljs-number\">3</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">arr.splice(indexToBeRemoved, <span class=\"hljs-number\">1</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(arr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [1, 2, 3, 5]</span></span></pre></td></tr></table></figure>\n<h1 id=\"获取数组最后一个元素\"><a href=\"#获取数组最后一个元素\" class=\"headerlink\" title=\"获取数组最后一个元素\"></a>获取数组最后一个元素</h1><p>改变原数组</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> lastElement = arr.pop()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(lastElement)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(arr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [1, 2, 3, 4]</span></span></pre></td></tr></table></figure>\n<p>不改变原数组</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> lastElement = arr.slice(<span class=\"hljs-number\">-1</span>)[<span class=\"hljs-number\">0</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(lastElement)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(arr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [1, 2, 3, 4, 5]</span></span></pre></td></tr></table></figure>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\" target=\"_blank\" rel=\"noopener\">slice</a>第一个参数如果是负数表示从后面开始数起的第几个元素，-1表示倒数第一个元素。</p>\n<h1 id=\"清空数组\"><a href=\"#清空数组\" class=\"headerlink\" title=\"清空数组\"></a>清空数组</h1><figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">arr.length = <span class=\"hljs-number\">0</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(arr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// []</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(arr[<span class=\"hljs-number\">0</span>])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// undefined</span></span></pre></td></tr></table></figure>\n<h1 id=\"生成一定长度的数组\"><a href=\"#生成一定长度的数组\" class=\"headerlink\" title=\"生成一定长度的数组\"></a>生成一定长度的数组</h1><figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> newArr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">10</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(newArr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [ &lt;10 empty items&gt; ]</span></span></pre></td></tr></table></figure>\n<h1 id=\"两个数组的交集\"><a href=\"#两个数组的交集\" class=\"headerlink\" title=\"两个数组的交集\"></a>两个数组的交集</h1><figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> arr1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> arr2 = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> intersectedArr = arr1.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">item1</span> =&gt;</span> arr2.includes(item1))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(intersectedArr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [2, 3]</span></span></pre></td></tr></table></figure>\n<h1 id=\"合并多个数组\"><a href=\"#合并多个数组\" class=\"headerlink\" title=\"合并多个数组\"></a>合并多个数组</h1><figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> arr1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> arr2 = [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> arr3 = [<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> mergedArr = [...arr1, ...arr2, ...arr3]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(mergedArr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span></pre></td></tr></table></figure>\n<h1 id=\"移除数组的虚假-falsy-值\"><a href=\"#移除数组的虚假-falsy-值\" class=\"headerlink\" title=\"移除数组的虚假(falsy)值\"></a>移除数组的虚假(falsy)值</h1><figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> mixedArr = [<span class=\"hljs-number\">0</span>, “blue”, “”, <span class=\"hljs-literal\">NaN</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">undefined</span>, “white”, <span class=\"hljs-literal\">false</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> trueArr = mixedArr.filter(<span class=\"hljs-built_in\">Boolean</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(trueArr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [“blue”, 9, true, “white”]</span></span></pre></td></tr></table></figure>\n<h1 id=\"求和\"><a href=\"#求和\" class=\"headerlink\" title=\"求和\"></a>求和</h1><figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> nums = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> sum = nums.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">currSum, num</span>) =&gt;</span> currSum + num)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(sum)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 15</span></span></pre></td></tr></table></figure>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<p>本文整理了一些在日常工作可以用到的JavaScript数组小技巧</p>\n<h1 id=\"去重\"><a href=\"#去重\" class=\"headerlink\" title=\"去重\"></a>去重</h1><p>巧用Set特性</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">7</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> uniqueArr = [...new <span class=\"hljs-built_in\">Set</span>(arr)]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(uniqueArr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// [1, 2, 3, 4, 7]</span></span></pre></td></tr></table></figure>","more":"<h1 id=\"某一个位置插入元素\"><a href=\"#某一个位置插入元素\" class=\"headerlink\" title=\"某一个位置插入元素\"></a>某一个位置插入元素</h1><p>改变原数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">arr.splice(<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 4, 5, 6, 7]</span></span></pre></td></tr></table></figure>\n<p>不改变原数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> indexNeededToInsert = <span class=\"number\">2</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArr = [...arr.slice(<span class=\"number\">0</span>, indexNeededToInsert), <span class=\"number\">3</span>, ...arr.slice(indexNeededToInsert)]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 4, 5]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [1, 2, 4, 5]</span></span></pre></td></tr></table></figure>\n<h1 id=\"删除某一个位置的元素\"><a href=\"#删除某一个位置的元素\" class=\"headerlink\" title=\"删除某一个位置的元素\"></a>删除某一个位置的元素</h1><p>不改变原数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> indexToBeRemoved = <span class=\"number\">3</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> filteredArr = arr.filter(<span class=\"function\">(<span class=\"params\">_, index</span>) =&gt;</span> index !== indexToBeRemoved)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(filteredArr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 5]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 4, 5]</span></span></pre></td></tr></table></figure>\n<p>改变原数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> indexToBeRemoved = <span class=\"number\">3</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">arr.splice(indexToBeRemoved, <span class=\"number\">1</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 5]</span></span></pre></td></tr></table></figure>\n<h1 id=\"获取数组最后一个元素\"><a href=\"#获取数组最后一个元素\" class=\"headerlink\" title=\"获取数组最后一个元素\"></a>获取数组最后一个元素</h1><p>改变原数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> lastElement = arr.pop()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(lastElement)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 4]</span></span></pre></td></tr></table></figure>\n<p>不改变原数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> lastElement = arr.slice(<span class=\"number\">-1</span>)[<span class=\"number\">0</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(lastElement)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 4, 5]</span></span></pre></td></tr></table></figure>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\" target=\"_blank\" rel=\"noopener\">slice</a>第一个参数如果是负数表示从后面开始数起的第几个元素，-1表示倒数第一个元素。</p>\n<h1 id=\"清空数组\"><a href=\"#清空数组\" class=\"headerlink\" title=\"清空数组\"></a>清空数组</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">arr.length = <span class=\"number\">0</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// []</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(arr[<span class=\"number\">0</span>])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// undefined</span></span></pre></td></tr></table></figure>\n<h1 id=\"生成一定长度的数组\"><a href=\"#生成一定长度的数组\" class=\"headerlink\" title=\"生成一定长度的数组\"></a>生成一定长度的数组</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">10</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [ &lt;10 empty items&gt; ]</span></span></pre></td></tr></table></figure>\n<h1 id=\"两个数组的交集\"><a href=\"#两个数组的交集\" class=\"headerlink\" title=\"两个数组的交集\"></a>两个数组的交集</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"number\">2</span>, <span class=\"number\">3</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> intersectedArr = arr1.filter(<span class=\"function\"><span class=\"params\">item1</span> =&gt;</span> arr2.includes(item1))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(intersectedArr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [2, 3]</span></span></pre></td></tr></table></figure>\n<h1 id=\"合并多个数组\"><a href=\"#合并多个数组\" class=\"headerlink\" title=\"合并多个数组\"></a>合并多个数组</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr3 = [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mergedArr = [...arr1, ...arr2, ...arr3]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(mergedArr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span></pre></td></tr></table></figure>\n<h1 id=\"移除数组的虚假-falsy-值\"><a href=\"#移除数组的虚假-falsy-值\" class=\"headerlink\" title=\"移除数组的虚假(falsy)值\"></a>移除数组的虚假(falsy)值</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mixedArr = [<span class=\"number\">0</span>, “blue”, “”, <span class=\"literal\">NaN</span>, <span class=\"number\">9</span>, <span class=\"literal\">true</span>, <span class=\"literal\">undefined</span>, “white”, <span class=\"literal\">false</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> trueArr = mixedArr.filter(<span class=\"built_in\">Boolean</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(trueArr)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [“blue”, 9, true, “white”]</span></span></pre></td></tr></table></figure>\n<h1 id=\"求和\"><a href=\"#求和\" class=\"headerlink\" title=\"求和\"></a>求和</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nums = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sum = nums.reduce(<span class=\"function\">(<span class=\"params\">currSum, num</span>) =&gt;</span> currSum + num)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(sum)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 15</span></span></pre></td></tr></table></figure>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt=\"\"></p>"},{"title":"React Hook实践指南","thumbnail":"/gallery/thumbnails/react-hook.jpg","date":"2020-07-15T10:35:13.000Z","_content":"\n在[React为什么需要Hook](https://superseany.com/2020/04/29/React%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81Hook/)这篇文章中我们探讨了React开发团队为什么要为Function Component添加Hook的原因，在本篇文章中我将会为大家提供一份较为全面的React Hook实践指南，其中包括以下方面的内容：\n* [什么是React Hook](#什么是react-hook)\n* [常用Hook介绍](#常用hook介绍)\n  * [useState](#usestate)\n  * [useEffect](#useeffect)\n  * [useRef](#useref)\n  * [useCallback](#usecallback)\n  * [useMemo](#usememo)\n  * [useContext](#usecontext)\n  * [useReducer](#usereducer)\n* [自定义Hook](#自定义hook)\n<!-- more-->\n\n## 什么是React Hook\nReact Hook是React 16.8版本之后添加的新属性，用最简单的话来说，**React Hook就是一些React提供的内置函数，这些函数可以让Function Component和Class Component一样能够拥有组件状态（state）以及进行副作用（side effect）**。\n\n## 常用Hook介绍\n接下来我将会为大家介绍一些常用的Hook，对于每一个Hook，我都会覆盖以下方面的内容：\n* 作用\n* 用法\n* 注意事项\n\n### useState\n#### 作用\n`useState`理解起来非常简单，和Class Component的`this.state`一样，都是用来**管理组件状态的**。在React Hook没出来之前，Function Component也叫做Functional Stateless Component（FSC），这是因为Function Component每次执行的时候都会生成新的函数作用域所以同一个组件的不同渲染（render）之间是不能够共用状态的，因此开发者一旦需要在组件中引入状态就需要将原来的Function Component改成Class Component，这使得开发者的体验十分不好。`useState`就是用来解决这个问题的，**它允许Function Component将自己的状态持久化到React运行时（runtime）的某个地方（memory cell），这样在组件每次重新渲染的时候都可以从这个地方拿到该状态，而且当该状态被更新的时候，组件也会重渲染**。\n\n#### 用法\n```javascript\nconst [state, setState] = useState(initialState)\n```\n`useState`接收一个`initialState`变量作为状态的初始值，返回值是一个数组。返回数组的第一个元素代表当前`state`的最新值，第二个元素是一个用来更新`state`的函数。这里要注意的是`state`和`setState`这两个变量的命名不是固定的，应该根据你业务的实际情况选择不同的名字，可以是`text`和`setText`，也可以是`width`和`setWidth`这类的命名。（对上面数组解构赋值不熟悉的同学可以看下[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)的介绍）。\n\n我们在实际开发中，一个组件可能不止一个state，如果组件有多个state，则可以在组件内部多次调用`useState`，以下是一个简单的例子：\n```jsx\nimport React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst App = () => {\n  const [counter, setCounter] = useState(0)\n  const [text, setText] = useState('')\n\n  const handleTextChange = (event) => {\n    setText(event.target.value)\n  }\n\n  return (\n    <>\n      <div>Current counter: {counter}</div>\n      <button\n        onClick={() => setCounter(counter + 1)}\n      >\n        Increase counter\n      </button>\n      <input\n        onChange={handleTextChange}\n        value={text}\n      />\n    </>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n```\n和Class Component的[this.setState](https://reactjs.org/docs/react-component.html#setstate) API类似，`setCounter`和`setText`都可以接收一个函数为参数，这个函数叫做`updater`，`updater`接收的参数是当前状态的**最新值**，返回值是**下一个状态**。例如setCounter的参数可以改成一个函数：\n```javascript\n<button\n  onClick={() => {\n    setCounter(counter => counter + 1)\n  }}\n>\n  Increase counter\n</button>\n```\n`useState`的`initialState`也可以是一个用来生成状态初始值的函数，这种做法主要是避免组件每次渲染的时候`initialState`需要被重复计算。下面是个简单的例子：\n```javascript\nconst [state, setState] = useState(() => {\n  const initialState = someExpensiveComputation(props)\n  return initialState\n})\n```\n\n#### 注意事项\n##### setState是全量替代\nFunction Component的`setState`和Class Component的`this.setState`函数的一个重要区别是`this.setState`函数是**将当前设置的state浅归并（shallowly merge）到旧state的操作**。而`setState`函数则是将**新state直接替换旧的state（replace）**。因此我们在编写Function Component的时候，就要合理划分state，避免将没有关系的状态放在一起管理，例如下面这个是不好的设计：\n```jsx\nconst [state, setState] = useState({ left: 0, top: 0, width: 0, height: 0 })\n```\n在上面代码中，由于我们将互不关联的DOM位置信息`{left: 0, top: 0}`和大小信息`{width: 0, height: 0}`绑定在同一个`state`，所以我们在更新任意一个状态的时候也要维护一下另外一个状态：\n```jsx\nconst handleContainerResize = ({ width, height }) => {\n  setState({...state, width, height})\n}\n\nconst handleContainerMove = ({ left, top }) => {\n  setState({...state, left, top})\n}\n```\n这种写法十分不方便而且容易引发bug，更加合理的做法应该是将位置信息和大小信息**放在两个不同的state里面**，这样可以避免更新某个状态的时候要手动维护另一个状态：\n```javascript\n// separate state into position and size states\nconst [position, setPosition] = useState({ left: 0, top: 0 })\nconst [size, setSize] = useState({ width: 0, height: 0})\n\nconst handleContainerResize = ({ width, height }) => {\n  setSize({width, height})\n}\n\nconst handleContainerMove = ({ left, top }) => {\n  setPosition({left, top})\n}\n```\n如果你确实要将多个互不关联的状态放在一起的话，建议你使用[useReducer](#usereducer)来管理你的状态，这样你的代码会更好维护。\n\n##### 设置相同的state值时setState会[bailing out of update](https://reactjs.org/docs/hooks-reference.html#bailing-out-of-a-state-update)\n如果setState接收到的`新的state`和`当前的state`是一样的（判断方法是[Object.is](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Description)），React将不会重新渲染子组件或者触发`side effect`。这里要注意的是虽然React不会渲染子组件，不过它还是会重新渲染当前的组件的，如果你的组件渲染有些很耗性能的计算的话，可以考虑使用[useMemo](#usememo)来优化性能。\n\n##### setState没有回调函数\n无论是`useState`还是Class Component的`this.setState`都是**异步调用**的，也就是说每次组件调用完它们之后都不能拿到最新的state值。为了解决这个问题，Class Component的`this.setState`允许你通过一个回调函数来获取到最新的state值，用法如下：\n```jsx\nthis.setState(newState, state => {\n  console.log(\"I get new state\", state)\n})\n```\n而Function Component的setState函数不存在这么一个可以拿到最新state的回调函数，不过我们可以使用[useEffect](#useeffect)来实现相同的效果，具体可以参见StackOverflow的这个[讨论](https://stackoverflow.com/questions/54954091/how-to-use-callback-with-usestate-hook-in-react)。\n\n### useEffect\n#### 作用\n`useEffect`是用来使Function Component也可以进行副作用的。那么什么是副作用呢？我们可以先来看看维基百科的定义：\n> In computer science, an operation, function or expression is said to have a side effect if it modifies some state variable value(s) outside its local environment, that is to say has an observable effect besides returning a value (the main effect) to the invoker of the operation.\n\n通俗来说，**函数的副作用就是函数除了返回值外对外界环境造成的其它影响**。举个例子，假如我们每次执行一个函数，该函数都会操作全局的一个变量，那么对全局变量的操作就是这个函数的副作用。而在React的世界里，我们的副作用大体可以分为两类，一类是**调用浏览器的API**，例如使用`addEventListener`来添加事件监听函数等，另外一类是**发起获取服务器数据的请求**，例如当用户卡片挂载的时候去异步获取用户的信息等。在Hook出来之前，如果我们需要在组件中进行副作用的话就需要将组件写成Class Component，然后在组件的生命周期函数里面写副作用，这其实会引起很多代码设计上的问题，具体大家可以查看我的上篇文章[React为什么需要Hook](https://superseany.com/2020/04/29/React%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81Hook/)。Hook出来之后，开发者就可以在Function Component中使用`useEffect`来定义副作用了。虽然`useEffect`基本可以覆盖`componentDidMount`， `componentDidUpdate`，`componentWillUnmount`等生命周期函数组合起来使用的所有场景，但是`useEffect`和生命周期函数的设计理念还是存在本质上的区别的，如果一味用生命周期函数的思考方式去理解和使用`useEffect`的话，可能会引发一些奇怪的问题，大家有兴趣的话，可以看看React核心开发Dan写的这篇文章：[A Complete Guide to useEffect](https://overreacted.io/a-complete-guide-to-useeffect/)，里面阐述了使用`useEffect`的一个比较正确的思考方式（mental model）。\n\n#### 用法\n```javascript\nuseEffect(effect, dependencies?)\n```\nuseEffect的第一个参数effect是要执行的副作用函数，它可以是任意的用户自定义函数，用户可以在这个函数里面操作一些浏览器的API或者和外部环境进行交互，这个函数会在**每次组件渲染完成之后**被调用，例如下面是一个简单的例子：\n```javascript\nimport React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst UserDetail = ({ userId }) => {\n  const [userDetail, setUserDetail] = useState({})\n\n  useEffect(() => {\n    fetch(`https://myapi/users/${userId}`)\n      .then(response => response.json())\n      .then(user => setUserDetail(userDetail))\n  })\n\n  return (\n    <div>\n      <div>User Name: {userDetail.name}</div>\n    </div>\n  )\n}\n\nReactDOM.render(<UserDetail />, document.getElementById('root'))\n```\n上面定义的获取用户详情信息的副作用会在`UserDetail组件`每次**完成渲染后**执行，所以当该组件第一次挂载的时候就会向服务器发起获取用户详情信息的请求然后更新`userDetail`的值，这里的第一次挂载我们可以类比成Class Component的`componentDidMount`。可是如果试着运行一下上面的代码的话，你会发现代码进入了死循环：组件会不断向服务端发起请求。出现这个死循环的原因是`useEffect`里面调用了`setUserDetail`，这个函数会更新`userDetail`的值，从而使组件重渲染，而重渲染后`useEffect`的`effect`继续被执行，进而组件再次重渲染。。。为了避免重复的副作用执行，`useEffect`允许我们通过第二个参数`dependencies`来限制该副作用什么时候被执行：指明了`dependencies`的副作用，**只有在`dependencies`数组里面的元素的值发生变化时才会被执行**，因此如果要避免上面的代码进入死循环我们就要将`userId`指定为我们定义的副作用的`dependencies`：\n```javascript\nimport React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst UserDetail = ({ userId }) => {\n  const [userDetail, setUserDetail] = useState({})\n\n  useEffect(() => {\n    fetch(`https://myapi/users/${userId}`)\n      .then(response => response.json())\n      .then(user => setUserDetail(userDetail))\n  }, [userId])\n\n  return (\n    <div>\n      <div>User Name: ${userDetail.name}</div>\n    </div>\n  )\n}\n\nReactDOM.render(<UserDetail />, document.getElementById('root'))\n```\n除了发起服务端的请求外，我们往往还需要在`useEffect`里面调用浏览器的API，例如使用`addEventListener`来添加浏览器事件的监听函数等。我们一旦使用了`addEventListener`就必须在合适的时候调用`removeEventListener`来移除对事件的监听，否则会有性能问题，`useEffect`允许我们在副作用函数里面返回一个`cleanup`函数，这个函数会在组件**重新渲染之前**被执行，我们可以在这个返回的函数里面移除对事件的监听，下面是一个具体的例子：\n```javascript\nimport React, { useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst WindowScrollListener = () => {\n  useEffect(() => {\n    const handleWindowScroll = () => console.log('yean, window is scrolling!')\n    window.addEventListener('scroll', handleWindowScroll)\n\n    // this is clean up function\n    return () => {\n      window.removeEventListener(handleWindowScroll)\n    }\n  }, [])\n\n  return (\n    <div>\n      I can listen to the window scroll event!\n    </div>\n  )\n}\n\nReactDOM.render(<WindowScrollListener />, document.getElementById('root'))\n```\n上面的代码中我们会在`WindowScrollListener`组件首次渲染完成后注册一个监听页面滚动事件的函数，并在组件下一次渲染前移除该监听函数。由于我们指定了一个空数组作为这个副作用的`dependencies`，所以这个副作用只会在组件首次渲染时被执行一次，而它的cleanup函数只会在组件`unmount`时才被执行，这就避免了频繁注册页面监听函数从而影响页面的性能。\n\n#### 注意事项\n##### 避免使用“旧的”变量\n我们在实际使用`useEffect`的过程中可能遇到最多的问题就是我们的effect函数被调用的时候，拿到的某些state, props或者是变量不是**最新**的变量而是之前**旧的**变量。出现这个问题的原因是：我们定义的副作用其实就是一个函数，而JS的作用域是词法作用域，所以函数使用到的变量值是它被**定义时**就确定的，用最简单的话来说就是，useEffect的effect会**记住**它被定义时的外部变量的值，所以它被调用时使用到的值可能不是**最新**的值。解决这个问题的办法有两种，一种是将那些你希望每次effect被调用时拿到的都是最新值的变量保存在一个ref里面，并且在每次组件渲染的时候更新该ref的值：\n```javascript\nconst [someState, setSomeState] = useState()\nconst someStateRef = useRef()\n\nsomeStateRef.current = someState\n\nuseEffect(() => {\n  ...\n  const latestSomeState = someStateRef.current\n  console.log(latestSomeState)\n}, [otherDependencies...])\n```\n这种做法虽然不是很优雅，不过可以解决我们的问题，如果你没有了解过`useRef`用法的话，可以查看本篇文章[useRef](#useref)这部分内容。解决这个问题的另外一个做法是将副作用**使用**到的所有变量都加到effect的`dependencies`中去，这也是比较推荐的做法。在实际开发中我们可以使用facebook自家的[eslint-plugin-react-hooks](https://www.npmjs.com/package/eslint-plugin-react-hooks#installation)的[exhaustive-deps](https://github.com/facebook/react/issues/14920)规则来进行编码约束，在你的项目加上这个约束之后，在代码开发阶段eslint就会告诉你要将someState放到`useEffect`的`dependencies`中去，这样就可以不使用`useRef`来存储someState的值了，例如下面代码：\n```javascript\nconst [someState, setSomeState] = useState()\n\nuseEffect(() => {\n  ...\n  console.log(someState)\n}, [otherDependencies..., someState])\n```\n### useRef\n#### 作用\n`useRef`是用来在组件不同渲染之间共用一些数据的，它的作用和我们在Class Component里面为`this`赋值是一样的。\n#### 用法\n```javascript\nconst refObject = useRef(initialValue)\n```\n`useRef`接收`initialValue`作为初始值，它的返回值是一个`ref`对象，这个对象的`.current`属性就是该数据的最新值。使用`useRef`的一个最简单的情况就是在Function Component里面存储对DOM对象的引用，例如下面这个例子：\n```javascript\nimport { useRef, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst AutoFocusInput = () => {\n  const inputRef = useRef(null)\n\n  useEffect(() => {\n    // auto focus when component mount\n    inputRef.current.focus()\n  }, [])\n\n  return (\n    <input ref={inputRef} type='text' />\n  )\n}\n\nReactDOM.render(<AutoFocusInput />, document.getElementById('root'))\n```\n在上面代码中inputRef其实就是一个`{current: inputDomInstance}`对象，只不过它可以保证在组件每次渲染的时候拿到的都是同一个对象。\n#### 注意事项\n##### 更新ref对象不会触发组件重渲染\n`useRef`返回的ref object被重新赋值的时候不会引起组件的**重渲染**，如果你有这个需求的话请使用`useState`来存储数据。\n### useCallback\n#### 作用\n随着Hook的出现，开发者开始越来越多地使用Function Component来开发需求。当开发者在定义Function Component的时候往往需要在函数体内定义一些内嵌函数（inline function），这些内嵌函数会在组件每次重新渲染的时候被重新定义，如果它们作为props传递给了子组件的话，即使其它props的值没有发生变化，它都会使子组件重新渲染，而无用的组件重渲染可能会产生一些性能问题。每次重新生成新的内嵌函数还有另外一个问题就是当我们把内嵌函数作为`dependency`传进`useEffect`的`dependencies`数组的话，因为该函数频繁被重新生成，所以`useEffect`里面的effect就会频繁被调用。为了解决上述问题，React允许我们使用`useCallback`来**记住**（memoize）当前定义的函数，并在下次组件渲染的时候返回之前定义的函数而不是使用新定义的函数。\n#### 用法\n```javascript\nconst memoizedCallback = useCallback(callback, dependencies)\n```\n`useCallback`接收两个参数，第一个参数是需要被记住的函数，第二个参数是这个函数的`dependencies`，只有`dependencies`数组里面的元素的值发生变化时`useCallback`才会返回新定义的函数，否则`useCallback`都会返回之前定义的函数。下面是一个简单的使用`useCallback`来优化子组件频繁被渲染的例子：\n```javascript\nimport React, { useCallback } from 'react'\nimport useSearch from 'hooks/useSearch'\nimport ReactDOM from 'react-dom'\n\n// this list may contain thousands of items, so each re-render is expensive\nconst HugeList = ({ items, onClick }) => {\n  return (\n    <div>\n      {\n        items.map((item, index) => (\n          <div\n            key={index}\n            onClick={() => onClick(index)}\n          >\n            {item}\n          </div>\n        ))\n      }\n    </div>\n  )\n}\n\nconst MemoizedHugeList = React.memo(HugeList)\n\nconst SearchApp = ({ searchText }) => {\n  const handleClick = useCallback(item => {\n    console.log('You clicked', item)\n  }, [])\n  const items = useSearch(searchText)\n\n  return (\n    <MemoizedHugeList\n      items={items}\n      onClick={handleClick}\n    />\n  )\n}\n\nReactDOM.render(<SearchApp />, document.getElementById('root'))\n```\n上面的例子中我定义了一个`HugeList`组件，由于这个组件需要渲染一个大的列表（items），所以每次重渲染都是十分消耗性能的，因此我使用了`React.memo`函数来让该组件只有在`onClick`函数和`items`数组发生变化的时候才被渲染，如果大家对`React.memo`不是很熟悉的话，可以看看我写的[这篇文章](https://juejin.im/post/5c8edf626fb9a0710d65c7fc)。接着我在`SearchApp`里面使用`MemoizedHugeList`，由于要避免该组件的重复渲染，所以我使用了`useCallback`来记住定义的`handleClick函数`，这样在组件后面渲染的时候，`handleClick`变量指向的都是同一个函数，所以`MemorizedHugeList`只有在items发生变化时才会重新渲染。这里要注意的是由于我的`handleClick`函数没有使用到任何的外部依赖所以它的`dependencies`才是个空数组，如果你的函数有使用到外面的依赖的话，记得一定要将该依赖放进`useCallback`的`dependencies`参数中，不然会有bug发生。\n\n#### 注意事项\n##### 避免在函数里面使用“旧的”变量\n和`useEffect`类似，我们也需要将所有在`useCallback`的callback中使用到的外部变量写到`dependencies`数组里面，不然我们可能会在`callback`调用的时候使用到“旧的”外部变量的值。\n\n##### 不是所有函数都要使用useCallback\n> Performance optimizations are not free. They ALWAYS come with a cost but do NOT always come with a benefit to offset that cost.\n\n**任何优化都会有代价**，`useCallback`也是一样的。当我们在Function Component里面调用`useCallback`函数的时候，React背后要做一系列计算才能保证当`dependencies`不发生变化的时候，我们拿到的是同一个函数，因此如果我们滥用`useCallback`的话，并不会带来想象中的性能优化，反而会影响到我们的性能，例如下面这个例子就是一个不好的使用`useCallback`的例子：\n```javascript\nimport React, { useCallback } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst DummyButton = () => {\n  const handleClick = useCallback(() => {\n    console.log('button is clicked')\n  }, [])\n\n  return (\n    <button onClick={handleClick}>\n      I'm super dummy\n    </button>\n  )\n}\n\nReactDOM.render(<DummyButton />, document.getElementById('root'))\n```\n上面例子使用的`useCallback`没有起到任何优化代码性能的作用，因为上面的代码执行起来其实相当于下面的代码：\n```javascript\nimport React, { useCallback } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst DummyButton = () => {\n  const inlineClick = () => {\n    console.log('button is clicked')\n  }\n  const handleClick = useCallback(inlineClick, [])\n\n  return (\n    <button onClick={handleClick}>\n      I'm super dummy\n    </button>\n  )\n}\n\nReactDOM.render(<DummyButton />, document.getElementById('root'))\n```\n从上面的代码我们可以看出，即使我们使用了`useCallback`函数，浏览器在执行`DummyButton`这个函数的时候还是需要创建一个新的内嵌函数`inlineClick`，这和不使用`useCallback`的效果是一样的，而且除此之外，优化后的代码由于还调用了`useCallback`函数，所以它消耗的计算资源其实比没有优化之前还多，而且由于`useCallback`函数内部存储了一些额外的变量（例如之前的`dependencies`）所以它消耗的内存资源也会更多。因此我们并不能一味地将所有的内嵌函数使用`useCallback`来包裹，只对那些真正需要被记住的函数使用`useCallback`。\n\n### useMemo\n#### 作用\n`useMemo`和`useCallback`的作用十分类似，只不过它允许你`记住`任何类型的变量（不只是函数）。\n#### 用法\n```javascript\nconst memoizedValue = useMemo(() => valueNeededToBeMemoized, dependencies)\n```\n`useMemo`接收一个函数，该函数的返回值就是需要被记住的变量，当`useMemo`的第二个参数`dependencies`数组里面的元素的值没有发生变化的时候，`memoizedValue`使用的就是上一次的值。下面是一个例子：\n```javascript\nimport React, { useMemo } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst RenderPrimes = ({ iterations, multiplier }) => {\n  const primes = React.useMemo(() => calculatePrimes(iterations, multiplier), [\n    iterations,\n    multiplier\n  ])\n\n  return (\n    <div>\n      Primes! {primes}\n    </div>\n  )\n}\n\nReactDOM.render(<RenderPrimes />, document.getElementById('root'))\n```\n上面的例子中[calculatePrimes](https://developer.mozilla.org/en-US/docs/Tools/Performance/Scenarios/Intensive_JavaScript)是用来计算素数的，因此每次调用它都需要消耗大量的计算资源。为了提高组件渲染的性能，我们可以使用`useMemo`来记住计算的结果，当`iterations`和`multiplier`保持不变的时候，我们就不需要重新执行calculatePrimes函数来重新计算了，直接使用上一次的结果即可。\n\n#### 注意事项\n##### 不是所有的变量要包裹在useMemo里面\n和`useCallback`类似，我们只将那些确实有需要被记住的变量使用`useMemo`来封装，切记不能滥用`useMemo`，例如下面就是一个滥用`useMemo`的例子：\n```javascript\nimport React, { useMemo } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst DummyDisplay = () => {\n  const items = useMemo(() => ['1', '2', '3'], [])\n  \n  return (\n    <>\n      {\n        items.map(item => <div key={item}>{item}</div>)\n      }\n    </>\n  )\n}\n\nReactDOM.render(<DummyDisplay />, document.getElementById('root'))\n```\n上面的例子中直接将items定义在组件外面会更好：\n```javascript\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nconst items = ['1', '2', '3']\n\nconst DummyDisplay = () => {  \n  return (\n    <>\n      {\n        items.map(item => <div key={item}>{item}</div>)\n      }\n    </>\n  )\n}\n\nReactDOM.render(<DummyDisplay />, document.getElementById('root'))\n```\n\n### useContext\n#### 作用\n我们知道React中组件之间传递参数的方式是props，假如我们在父级组件中定义了某些状态，而这些状态需要在该组件深层次嵌套的子组件中被使用的话就需要将这些状态以props的形式层层传递，这就造成了`props drilling`的问题。为了解决这个问题，React允许我们使用`Context`来在父级组件和底下任意层次的子组件之间传递状态。在Function Component中我们可以使用`useContext` Hook来使用`context`。\n#### 用法\n```javascript\nconst value = useContext(MyContext)\n```\n`useContext`接收一个`context`对象为参数，该`context`对象是由`React.createContext`函数生成的。`useContext`的返回值是当前`context`的值，这个值是由最邻近的`<MyContext.Provider>`来决定的。一旦在某个组件里面使用了`useContext`这就相当于该组件订阅了这个`context`的变化，当最近的`<MyContext.Provider>`的`context`值发生变化时，使用到该`context`的子组件就会被触发重渲染，且它们会拿到`context`的最新值。下面是一个具体的例子：\n```javascript\nimport React, { useContext, useState } from 'react'\nimport ReactDOM from 'react-dom'\n\n// define context\nconst NumberContext = React.createContext()\n\nconst NumberDisplay = () => {\n  const [currentNumber, setCurrentNumber] = useContext(NumberContext)\n\n  const handleCurrentNumberChange = () => {\n    setCurrentNumber(Math.floor(Math.random() * 100))\n  }\n\n  return (\n    <>\n      <div>Current number is: {currentNumber}</div>\n      <button onClick={handleCurrentNumberChange}>Change current number</button>\n    </>\n  )\n}\n\nconst ParentComponent = () => {\n  const [currentNumber, setCurrentNumber] = useState({})\n\n  return (\n    <NumberContext.Provider value={[currentNumber, setCurrentNumber]}>\n      <NumberDisplay />\n    </NumberContext.Provider>\n  )\n}\n\nReactDOM.render(<ParentComponent />, document.getElementById('root'))\n```\n#### 注意事项\n##### 避免无用渲染\n我们在上面已经提到如果一个Function Component使用了`useContext(SomeContext)`的话它就订阅了这个`SomeContext`的变化，这样当`SomeContext.Provider`的`value`发生变化的时候，这个组件就会被重新渲染。这里有一个问题就是，我们可能会把很多不同的数据放在同一个`context`里面，而不同的子组件可能只关心这个`context`的某一部分数据，当`context`里面的任意值发生变化的时候，无论这些组件用不用到这些数据它们都会被重新渲染，这可能会造成一些性能问题。下面是一个简单的例子：\n```javascript\nimport React, { useContext, useState } from 'react'\nimport ExpensiveTree from 'somewhere/ExpensiveTree'\nimport ReactDOM from 'react-dom'\n\nconst AppContext = React.createContext()\n\nconst ChildrenComponent = () => {\n  const [appContext] = useContext(AppContext)\n  const theme = appContext.theme\n\n  return (\n    <div>\n      <ExpensiveTree theme={theme} />\n    </div>\n  )\n}\n\nconst App = () => {\n  const [appContext, setAppContext] = useState({ theme: { color: 'red' }, configuration: { showTips: false }})\n\n  return (\n    <AppContext.Provider value={[appContext, setAppContext]}>\n      <ChildrenComponent />\n    </AppContext.Provider>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n```\n在上面的例子中，ChildrenComponent只使用到了appContext的`.theme`属性，可是当appContext其它属性例如configuration被更新时，ChildrenComponent也会被重新渲染，而ChildrenComponent调用了一个十分耗费性能的ExpensiveTree组件，所以这些无用的渲染会影响到我们页面的性能，解决上面这个问题的方法有下面三种：\n###### 拆分Context\n这个方法是最被推荐的做法，和`useState`一样，我们可以将不需要同时改变的`context`拆分成不同的`context`，让它们的职责更加分明，这样子组件只会订阅那些它们需要订阅的`context`从而避免无用的重渲染。例如上面的代码可以改成这样：\n```javascript\nimport React, { useContext, useState } from 'react'\nimport ExpensiveTree from 'somewhere/ExpensiveTree'\nimport ReactDOM from 'react-dom'\n\nconst ThemeContext = React.createContext()\nconst ConfigurationContext = React.createContext()\n\nconst ChildrenComponent = () => {\n  const [themeContext] = useContext(ThemeContext)\n\n  return (\n    <div>\n      <ExpensiveTree theme={themeContext} />\n    </div>\n  )\n}\n\nconst App = () => {\n  const [themeContext, setThemeContext] = useState({ color: 'red' })\n  const [configurationContext, setConfigurationContext] = useState({ showTips: false })\n\n  return (\n    <ThemeContext.Provider value={[themeContext, setThemeContext]}>\n      <ConfigurationContext.Provider value={[configurationContext, setConfigurationContext]}>\n        <ChildrenComponent />\n      </ConfigurationContext.Provider>\n    </ThemeContext.Provider>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n```\n###### 拆分你的组件，使用memo来优化消耗性能的组件\n如果出于某些原因你不能拆分`context`，你仍然可以通过将消耗性能的组件和父组件的其他部分分离开来，并且使用`memo`函数来优化消耗性能的组件。例如上面的代码可以改为：\n```javascript\nimport React, { useContext, useState } from 'react'\nimport ExpensiveTree from 'somewhere/ExpensiveTree'\nimport ReactDOM from 'react-dom'\n\nconst AppContext = React.createContext()\n\nconst ExpensiveComponentWrapper = React.memo(({ theme }) => {\n  return (\n    <ExpensiveTree theme={theme} />\n  )\n})\n\nconst ChildrenComponent = () => {\n  const [appContext] = useContext(AppContext)\n  const theme = appContext.theme\n\n  return (\n    <div>\n      <ExpensiveComponentWrapper theme={theme} />\n    </div>\n  )\n}\n\nconst App = () => {\n  const [appContext, setAppContext] = useState({ theme: { color: 'red' }, configuration: { showTips: false }})\n\n  return (\n    <AppContext.Provider value={[appContext, setAppContext]}>\n      <ChildrenComponent />\n    </AppContext.Provider>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n```\n###### 不拆分组件，也可以使用useMemo来优化\n当然我们也可以不拆分组件使用`useMemo`来将上面的代码进行优化，代码如下：\n```javascript\nimport React, { useContext, useState, useMemo } from 'react'\nimport ExpensiveTree from 'somewhere/ExpensiveTree'\nimport ReactDOM from 'react-dom'\n\nconst AppContext = React.createContext()\n\nconst ChildrenComponent = () => {\n  const [appContext] = useContext(AppContext)\n  const theme = appContext.theme\n\n  return useMemo(() => (\n      <div>\n        <ExpensiveTree theme={theme} />\n      </div>\n    ),\n    [theme]\n  )\n}\n\nconst App = () => {\n  const [appContext, setAppContext] = useState({ theme: { color: 'red' }, configuration: { showTips: false }})\n\n  return (\n    <AppContext.Provider value={[appContext, setAppContext]}>\n      <ChildrenComponent />\n    </AppContext.Provider>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n```\n### useReducer\n#### 作用\n`useReducer`用最简单的话来说就是允许我们在Function Component里面像使用[redux](https://redux.js.org/)一样通过`reducer`和`action`来管理我们组件状态的变换（state transition）。\n#### 用法\n```javascript\nconst [state, dispatch] = useReducer(reducer, initialArg, init?)\n```\n`useReducer`和`useState`类似，都是用来管理组件状态的，只不过和`useState`的`setState`不一样的是，`useReducer`返回的`dispatch`函数是用来触发某些改变`state`的`action`而不是直接设置`state`的值，至于不同的`action`如何产生新的state的值则在`reducer`里面定义。`useReducer`接收的三个参数分别是：\n* reducer: 这是一个函数，它的签名是`(currentState, action) => newState`，从它的函数签名可以看出它会接收当前的state和当前`dispatch`的`action`为参数，然后返回下一个state,也就是说它负责状态转换（state transition）的工作。\n* initialArg：如果调用者没有提供第三个`init`参数，这个参数代表的是这个`reducer`的初始状态，如果`init`参数有被指定的话，`initialArg`会被作为参数传进`init`函数来生成初始状态。\n* init: 这是一个用来生成初始状态的函数，它的函数签名是`(initialArg) => initialState`，从它的函数签名可以看出它会接收`useReducer`的第二个参数`initialArg`作为参数，并生成一个初始状态`initialState`。\n下面是`useReducer`的一个简单的例子：\n```javascript\nimport React, { useState, useReducer } from 'react'\n\nlet todoId = 1\n\nconst reducer = (currentState, action) => {\n  switch(action.type) {\n    case 'add':\n      return [...currentState, {id: todoId++, text: action.text}]\n    case 'delete':\n      return currentState.filter(({ id }) => action.id !== id)\n    default:\n      throw new Error('Unsupported action type')\n  }\n}\n\nconst Todo = ({ id, text, onDelete }) => {\n  return (\n    <div>\n      {text}\n      <button\n        onClick={() => onDelete(id)}\n      >\n        remove\n      </button>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [todos, dispatch] = useReducer(reducer, [])\n  const [text, setText] = useState('')\n\n  return (\n    <>\n      {\n        todos.map(({ id, text }) => {\n          return (\n            <Todo\n              text={text}\n              key={id}\n              id={id}\n              onDelete={id => {\n                dispatch({ type: 'delete', id })\n              }}\n            />\n          )\n        })\n      }\n      <input onChange={event => setText(event.target.value)} />\n      <button\n        onClick={() => {\n          dispatch({ type: 'add', text })\n          setText('')\n        }}\n      >\n        add todo\n      </button>\n    </>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n```\n#### 注意事项\n##### useReducer vs useState\n`useReducer`和`useState`都可以用来管理组件的状态，它们之间最大的区别就是，`useReducer`将状态和状态的变化统一管理在`reducer`函数里面，这样对于一些复杂的状态管理会十分方便我们debug，因为它对状态的改变是`封闭的`。而由于`useState`返回的`setState`可以直接在任意地方设置我们状态的值，当我们组件的状态转换逻辑十分复杂时，它将很难debug，因为它是`开放的`状态管理。总体的来说，在`useReducer`和`useState`如何进行选择的问题上我们可以参考以下这些原则：\n* 下列情况使用`useState`\n  * `state`的值是JS原始数据类型（primitives），如`number`, `string`和`boolean`等\n  * `state`的转换逻辑十分简单\n  * 组件内不同的状态是没有关联的，它们可以使用多个独立的`useState`来单独管理\n* 下列情况使用`useReducer`\n  * `state`的值是`object`或者`array`\n  * `state`的转换逻辑十分复杂, 需要使用`reducer`函数来统一管理\n  * 组件内多个`state`互相关联，改变一个状态时也需要改变另外一个，将他们放在同一个`state`内使用reducer来统一管理\n  * 状态定义在父级组件，不过需要在深层次嵌套的子组件中使用和改变父组件的状态，可以同时使用`useReducer`和`useContext`两个hook，将`dispatch`方法放进context里面来避免组件的`props drilling`\n  * 如果你希望你的状态管理是可预测的（predictable）和可维护的（maintainable），请`useReducer`\n  * 如果你希望你的状态变化可以被测试，请使用`useReducer`\n## 自定义Hook\n上面介绍了React内置的常用Hook的用法，接着我们看一下如何编写我们自己的Hook。\n### 作用\n自定义Hook的目的是让我们封装一些可以在不同组件之间**共用的非UI逻辑**来提高我们开发业务代码的效率。\n### 什么是自定义Hook\n之前我们说过Hook其实就是一个函数，所以自定义Hook也是一个函数，只不过`它在内部使用了React的内置Hook或者其它的自定义Hook`。虽然我们可以任意命名我们的自定义Hook，可是为了另其它开发者更容易理解我们的代码以及方便一些开发工具例如`eslint-plugin-react-hooks`来给我们更好地提示，我们需要将我们的Hook以`use`作为开头，并且使用驼峰发进行命名，例如`useLocation`，`useLocalStorage`和`useQueryString`等等。\n### 例子\n下面举一个最简单的自定义hook的例子：\n```javascript\nimport React, { useState, useCallback } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst useCounter = () => {\n  const [counter, setCounter] = useState(0)\n  \n  const increase = useCallback(() => setCounter(counter => ++counter), [])\n  const decrease = useCallback(() => setCounter(counter => --counter), [])\n\n  return {\n    counter,\n    increase,\n    decrease\n  }\n}\n\nconst App = () => {\n  const { counter, increase, decrease } = useCounter()\n\n  return (\n    <>\n      <div>Counter: {counter}</div>\n      <button onClick={increase}>increase</button>\n      <button onClick={decrease}>decrease</button>\n    </>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n```\n## 总结\n在本篇文章中我给大家介绍了React一些常用的内置Hook以及如何定义我们自己的Hook。React Hook总的来说是一个十分强大的功能，合理地使用它可以提高我们代码的复用率和业务代码的开发效率，不过它也有很多隐藏的各式各样的坑，大家在使用中一定要多加防范，我的个人建议是大家尽量使用`eslint-plugin-react-hooks`插件来辅助开发，因为它真的可以在我们开发的过程中就帮我们发现代码存在的问题，不过有时候想方设法来去掉它的警告确实是很烦人的：）。\n\n在这个系列的下一篇文章中我将教大家如何测试我们自定义的Hook来提高我们的代码质量，大家敬请期待。\n## 参考文献\n* [When to useMemo and useCallback](https://kentcdodds.com/blog/usememo-and-usecallback)\n* [Preventing rerenders with React.memo and useContext hook](https://github.com/facebook/react/issues/15156)\n* [React Hook Reference](https://reactjs.org/docs/hooks-reference.html#usereducer)\n* [useReducer vs useState in React](https://www.robinwieruch.de/react-usereducer-vs-usestate)\n\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","source":"_posts/React-Hook实践指南.md","raw":"---\ntitle: React Hook实践指南\ntags:\n  - React\n  - Hook\nthumbnail: /gallery/thumbnails/react-hook.jpg\ndate: 2020-07-15 18:35:13\n---\n\n在[React为什么需要Hook](https://superseany.com/2020/04/29/React%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81Hook/)这篇文章中我们探讨了React开发团队为什么要为Function Component添加Hook的原因，在本篇文章中我将会为大家提供一份较为全面的React Hook实践指南，其中包括以下方面的内容：\n* [什么是React Hook](#什么是react-hook)\n* [常用Hook介绍](#常用hook介绍)\n  * [useState](#usestate)\n  * [useEffect](#useeffect)\n  * [useRef](#useref)\n  * [useCallback](#usecallback)\n  * [useMemo](#usememo)\n  * [useContext](#usecontext)\n  * [useReducer](#usereducer)\n* [自定义Hook](#自定义hook)\n<!-- more-->\n\n## 什么是React Hook\nReact Hook是React 16.8版本之后添加的新属性，用最简单的话来说，**React Hook就是一些React提供的内置函数，这些函数可以让Function Component和Class Component一样能够拥有组件状态（state）以及进行副作用（side effect）**。\n\n## 常用Hook介绍\n接下来我将会为大家介绍一些常用的Hook，对于每一个Hook，我都会覆盖以下方面的内容：\n* 作用\n* 用法\n* 注意事项\n\n### useState\n#### 作用\n`useState`理解起来非常简单，和Class Component的`this.state`一样，都是用来**管理组件状态的**。在React Hook没出来之前，Function Component也叫做Functional Stateless Component（FSC），这是因为Function Component每次执行的时候都会生成新的函数作用域所以同一个组件的不同渲染（render）之间是不能够共用状态的，因此开发者一旦需要在组件中引入状态就需要将原来的Function Component改成Class Component，这使得开发者的体验十分不好。`useState`就是用来解决这个问题的，**它允许Function Component将自己的状态持久化到React运行时（runtime）的某个地方（memory cell），这样在组件每次重新渲染的时候都可以从这个地方拿到该状态，而且当该状态被更新的时候，组件也会重渲染**。\n\n#### 用法\n```javascript\nconst [state, setState] = useState(initialState)\n```\n`useState`接收一个`initialState`变量作为状态的初始值，返回值是一个数组。返回数组的第一个元素代表当前`state`的最新值，第二个元素是一个用来更新`state`的函数。这里要注意的是`state`和`setState`这两个变量的命名不是固定的，应该根据你业务的实际情况选择不同的名字，可以是`text`和`setText`，也可以是`width`和`setWidth`这类的命名。（对上面数组解构赋值不熟悉的同学可以看下[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)的介绍）。\n\n我们在实际开发中，一个组件可能不止一个state，如果组件有多个state，则可以在组件内部多次调用`useState`，以下是一个简单的例子：\n```jsx\nimport React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst App = () => {\n  const [counter, setCounter] = useState(0)\n  const [text, setText] = useState('')\n\n  const handleTextChange = (event) => {\n    setText(event.target.value)\n  }\n\n  return (\n    <>\n      <div>Current counter: {counter}</div>\n      <button\n        onClick={() => setCounter(counter + 1)}\n      >\n        Increase counter\n      </button>\n      <input\n        onChange={handleTextChange}\n        value={text}\n      />\n    </>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n```\n和Class Component的[this.setState](https://reactjs.org/docs/react-component.html#setstate) API类似，`setCounter`和`setText`都可以接收一个函数为参数，这个函数叫做`updater`，`updater`接收的参数是当前状态的**最新值**，返回值是**下一个状态**。例如setCounter的参数可以改成一个函数：\n```javascript\n<button\n  onClick={() => {\n    setCounter(counter => counter + 1)\n  }}\n>\n  Increase counter\n</button>\n```\n`useState`的`initialState`也可以是一个用来生成状态初始值的函数，这种做法主要是避免组件每次渲染的时候`initialState`需要被重复计算。下面是个简单的例子：\n```javascript\nconst [state, setState] = useState(() => {\n  const initialState = someExpensiveComputation(props)\n  return initialState\n})\n```\n\n#### 注意事项\n##### setState是全量替代\nFunction Component的`setState`和Class Component的`this.setState`函数的一个重要区别是`this.setState`函数是**将当前设置的state浅归并（shallowly merge）到旧state的操作**。而`setState`函数则是将**新state直接替换旧的state（replace）**。因此我们在编写Function Component的时候，就要合理划分state，避免将没有关系的状态放在一起管理，例如下面这个是不好的设计：\n```jsx\nconst [state, setState] = useState({ left: 0, top: 0, width: 0, height: 0 })\n```\n在上面代码中，由于我们将互不关联的DOM位置信息`{left: 0, top: 0}`和大小信息`{width: 0, height: 0}`绑定在同一个`state`，所以我们在更新任意一个状态的时候也要维护一下另外一个状态：\n```jsx\nconst handleContainerResize = ({ width, height }) => {\n  setState({...state, width, height})\n}\n\nconst handleContainerMove = ({ left, top }) => {\n  setState({...state, left, top})\n}\n```\n这种写法十分不方便而且容易引发bug，更加合理的做法应该是将位置信息和大小信息**放在两个不同的state里面**，这样可以避免更新某个状态的时候要手动维护另一个状态：\n```javascript\n// separate state into position and size states\nconst [position, setPosition] = useState({ left: 0, top: 0 })\nconst [size, setSize] = useState({ width: 0, height: 0})\n\nconst handleContainerResize = ({ width, height }) => {\n  setSize({width, height})\n}\n\nconst handleContainerMove = ({ left, top }) => {\n  setPosition({left, top})\n}\n```\n如果你确实要将多个互不关联的状态放在一起的话，建议你使用[useReducer](#usereducer)来管理你的状态，这样你的代码会更好维护。\n\n##### 设置相同的state值时setState会[bailing out of update](https://reactjs.org/docs/hooks-reference.html#bailing-out-of-a-state-update)\n如果setState接收到的`新的state`和`当前的state`是一样的（判断方法是[Object.is](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Description)），React将不会重新渲染子组件或者触发`side effect`。这里要注意的是虽然React不会渲染子组件，不过它还是会重新渲染当前的组件的，如果你的组件渲染有些很耗性能的计算的话，可以考虑使用[useMemo](#usememo)来优化性能。\n\n##### setState没有回调函数\n无论是`useState`还是Class Component的`this.setState`都是**异步调用**的，也就是说每次组件调用完它们之后都不能拿到最新的state值。为了解决这个问题，Class Component的`this.setState`允许你通过一个回调函数来获取到最新的state值，用法如下：\n```jsx\nthis.setState(newState, state => {\n  console.log(\"I get new state\", state)\n})\n```\n而Function Component的setState函数不存在这么一个可以拿到最新state的回调函数，不过我们可以使用[useEffect](#useeffect)来实现相同的效果，具体可以参见StackOverflow的这个[讨论](https://stackoverflow.com/questions/54954091/how-to-use-callback-with-usestate-hook-in-react)。\n\n### useEffect\n#### 作用\n`useEffect`是用来使Function Component也可以进行副作用的。那么什么是副作用呢？我们可以先来看看维基百科的定义：\n> In computer science, an operation, function or expression is said to have a side effect if it modifies some state variable value(s) outside its local environment, that is to say has an observable effect besides returning a value (the main effect) to the invoker of the operation.\n\n通俗来说，**函数的副作用就是函数除了返回值外对外界环境造成的其它影响**。举个例子，假如我们每次执行一个函数，该函数都会操作全局的一个变量，那么对全局变量的操作就是这个函数的副作用。而在React的世界里，我们的副作用大体可以分为两类，一类是**调用浏览器的API**，例如使用`addEventListener`来添加事件监听函数等，另外一类是**发起获取服务器数据的请求**，例如当用户卡片挂载的时候去异步获取用户的信息等。在Hook出来之前，如果我们需要在组件中进行副作用的话就需要将组件写成Class Component，然后在组件的生命周期函数里面写副作用，这其实会引起很多代码设计上的问题，具体大家可以查看我的上篇文章[React为什么需要Hook](https://superseany.com/2020/04/29/React%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81Hook/)。Hook出来之后，开发者就可以在Function Component中使用`useEffect`来定义副作用了。虽然`useEffect`基本可以覆盖`componentDidMount`， `componentDidUpdate`，`componentWillUnmount`等生命周期函数组合起来使用的所有场景，但是`useEffect`和生命周期函数的设计理念还是存在本质上的区别的，如果一味用生命周期函数的思考方式去理解和使用`useEffect`的话，可能会引发一些奇怪的问题，大家有兴趣的话，可以看看React核心开发Dan写的这篇文章：[A Complete Guide to useEffect](https://overreacted.io/a-complete-guide-to-useeffect/)，里面阐述了使用`useEffect`的一个比较正确的思考方式（mental model）。\n\n#### 用法\n```javascript\nuseEffect(effect, dependencies?)\n```\nuseEffect的第一个参数effect是要执行的副作用函数，它可以是任意的用户自定义函数，用户可以在这个函数里面操作一些浏览器的API或者和外部环境进行交互，这个函数会在**每次组件渲染完成之后**被调用，例如下面是一个简单的例子：\n```javascript\nimport React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst UserDetail = ({ userId }) => {\n  const [userDetail, setUserDetail] = useState({})\n\n  useEffect(() => {\n    fetch(`https://myapi/users/${userId}`)\n      .then(response => response.json())\n      .then(user => setUserDetail(userDetail))\n  })\n\n  return (\n    <div>\n      <div>User Name: {userDetail.name}</div>\n    </div>\n  )\n}\n\nReactDOM.render(<UserDetail />, document.getElementById('root'))\n```\n上面定义的获取用户详情信息的副作用会在`UserDetail组件`每次**完成渲染后**执行，所以当该组件第一次挂载的时候就会向服务器发起获取用户详情信息的请求然后更新`userDetail`的值，这里的第一次挂载我们可以类比成Class Component的`componentDidMount`。可是如果试着运行一下上面的代码的话，你会发现代码进入了死循环：组件会不断向服务端发起请求。出现这个死循环的原因是`useEffect`里面调用了`setUserDetail`，这个函数会更新`userDetail`的值，从而使组件重渲染，而重渲染后`useEffect`的`effect`继续被执行，进而组件再次重渲染。。。为了避免重复的副作用执行，`useEffect`允许我们通过第二个参数`dependencies`来限制该副作用什么时候被执行：指明了`dependencies`的副作用，**只有在`dependencies`数组里面的元素的值发生变化时才会被执行**，因此如果要避免上面的代码进入死循环我们就要将`userId`指定为我们定义的副作用的`dependencies`：\n```javascript\nimport React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst UserDetail = ({ userId }) => {\n  const [userDetail, setUserDetail] = useState({})\n\n  useEffect(() => {\n    fetch(`https://myapi/users/${userId}`)\n      .then(response => response.json())\n      .then(user => setUserDetail(userDetail))\n  }, [userId])\n\n  return (\n    <div>\n      <div>User Name: ${userDetail.name}</div>\n    </div>\n  )\n}\n\nReactDOM.render(<UserDetail />, document.getElementById('root'))\n```\n除了发起服务端的请求外，我们往往还需要在`useEffect`里面调用浏览器的API，例如使用`addEventListener`来添加浏览器事件的监听函数等。我们一旦使用了`addEventListener`就必须在合适的时候调用`removeEventListener`来移除对事件的监听，否则会有性能问题，`useEffect`允许我们在副作用函数里面返回一个`cleanup`函数，这个函数会在组件**重新渲染之前**被执行，我们可以在这个返回的函数里面移除对事件的监听，下面是一个具体的例子：\n```javascript\nimport React, { useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst WindowScrollListener = () => {\n  useEffect(() => {\n    const handleWindowScroll = () => console.log('yean, window is scrolling!')\n    window.addEventListener('scroll', handleWindowScroll)\n\n    // this is clean up function\n    return () => {\n      window.removeEventListener(handleWindowScroll)\n    }\n  }, [])\n\n  return (\n    <div>\n      I can listen to the window scroll event!\n    </div>\n  )\n}\n\nReactDOM.render(<WindowScrollListener />, document.getElementById('root'))\n```\n上面的代码中我们会在`WindowScrollListener`组件首次渲染完成后注册一个监听页面滚动事件的函数，并在组件下一次渲染前移除该监听函数。由于我们指定了一个空数组作为这个副作用的`dependencies`，所以这个副作用只会在组件首次渲染时被执行一次，而它的cleanup函数只会在组件`unmount`时才被执行，这就避免了频繁注册页面监听函数从而影响页面的性能。\n\n#### 注意事项\n##### 避免使用“旧的”变量\n我们在实际使用`useEffect`的过程中可能遇到最多的问题就是我们的effect函数被调用的时候，拿到的某些state, props或者是变量不是**最新**的变量而是之前**旧的**变量。出现这个问题的原因是：我们定义的副作用其实就是一个函数，而JS的作用域是词法作用域，所以函数使用到的变量值是它被**定义时**就确定的，用最简单的话来说就是，useEffect的effect会**记住**它被定义时的外部变量的值，所以它被调用时使用到的值可能不是**最新**的值。解决这个问题的办法有两种，一种是将那些你希望每次effect被调用时拿到的都是最新值的变量保存在一个ref里面，并且在每次组件渲染的时候更新该ref的值：\n```javascript\nconst [someState, setSomeState] = useState()\nconst someStateRef = useRef()\n\nsomeStateRef.current = someState\n\nuseEffect(() => {\n  ...\n  const latestSomeState = someStateRef.current\n  console.log(latestSomeState)\n}, [otherDependencies...])\n```\n这种做法虽然不是很优雅，不过可以解决我们的问题，如果你没有了解过`useRef`用法的话，可以查看本篇文章[useRef](#useref)这部分内容。解决这个问题的另外一个做法是将副作用**使用**到的所有变量都加到effect的`dependencies`中去，这也是比较推荐的做法。在实际开发中我们可以使用facebook自家的[eslint-plugin-react-hooks](https://www.npmjs.com/package/eslint-plugin-react-hooks#installation)的[exhaustive-deps](https://github.com/facebook/react/issues/14920)规则来进行编码约束，在你的项目加上这个约束之后，在代码开发阶段eslint就会告诉你要将someState放到`useEffect`的`dependencies`中去，这样就可以不使用`useRef`来存储someState的值了，例如下面代码：\n```javascript\nconst [someState, setSomeState] = useState()\n\nuseEffect(() => {\n  ...\n  console.log(someState)\n}, [otherDependencies..., someState])\n```\n### useRef\n#### 作用\n`useRef`是用来在组件不同渲染之间共用一些数据的，它的作用和我们在Class Component里面为`this`赋值是一样的。\n#### 用法\n```javascript\nconst refObject = useRef(initialValue)\n```\n`useRef`接收`initialValue`作为初始值，它的返回值是一个`ref`对象，这个对象的`.current`属性就是该数据的最新值。使用`useRef`的一个最简单的情况就是在Function Component里面存储对DOM对象的引用，例如下面这个例子：\n```javascript\nimport { useRef, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst AutoFocusInput = () => {\n  const inputRef = useRef(null)\n\n  useEffect(() => {\n    // auto focus when component mount\n    inputRef.current.focus()\n  }, [])\n\n  return (\n    <input ref={inputRef} type='text' />\n  )\n}\n\nReactDOM.render(<AutoFocusInput />, document.getElementById('root'))\n```\n在上面代码中inputRef其实就是一个`{current: inputDomInstance}`对象，只不过它可以保证在组件每次渲染的时候拿到的都是同一个对象。\n#### 注意事项\n##### 更新ref对象不会触发组件重渲染\n`useRef`返回的ref object被重新赋值的时候不会引起组件的**重渲染**，如果你有这个需求的话请使用`useState`来存储数据。\n### useCallback\n#### 作用\n随着Hook的出现，开发者开始越来越多地使用Function Component来开发需求。当开发者在定义Function Component的时候往往需要在函数体内定义一些内嵌函数（inline function），这些内嵌函数会在组件每次重新渲染的时候被重新定义，如果它们作为props传递给了子组件的话，即使其它props的值没有发生变化，它都会使子组件重新渲染，而无用的组件重渲染可能会产生一些性能问题。每次重新生成新的内嵌函数还有另外一个问题就是当我们把内嵌函数作为`dependency`传进`useEffect`的`dependencies`数组的话，因为该函数频繁被重新生成，所以`useEffect`里面的effect就会频繁被调用。为了解决上述问题，React允许我们使用`useCallback`来**记住**（memoize）当前定义的函数，并在下次组件渲染的时候返回之前定义的函数而不是使用新定义的函数。\n#### 用法\n```javascript\nconst memoizedCallback = useCallback(callback, dependencies)\n```\n`useCallback`接收两个参数，第一个参数是需要被记住的函数，第二个参数是这个函数的`dependencies`，只有`dependencies`数组里面的元素的值发生变化时`useCallback`才会返回新定义的函数，否则`useCallback`都会返回之前定义的函数。下面是一个简单的使用`useCallback`来优化子组件频繁被渲染的例子：\n```javascript\nimport React, { useCallback } from 'react'\nimport useSearch from 'hooks/useSearch'\nimport ReactDOM from 'react-dom'\n\n// this list may contain thousands of items, so each re-render is expensive\nconst HugeList = ({ items, onClick }) => {\n  return (\n    <div>\n      {\n        items.map((item, index) => (\n          <div\n            key={index}\n            onClick={() => onClick(index)}\n          >\n            {item}\n          </div>\n        ))\n      }\n    </div>\n  )\n}\n\nconst MemoizedHugeList = React.memo(HugeList)\n\nconst SearchApp = ({ searchText }) => {\n  const handleClick = useCallback(item => {\n    console.log('You clicked', item)\n  }, [])\n  const items = useSearch(searchText)\n\n  return (\n    <MemoizedHugeList\n      items={items}\n      onClick={handleClick}\n    />\n  )\n}\n\nReactDOM.render(<SearchApp />, document.getElementById('root'))\n```\n上面的例子中我定义了一个`HugeList`组件，由于这个组件需要渲染一个大的列表（items），所以每次重渲染都是十分消耗性能的，因此我使用了`React.memo`函数来让该组件只有在`onClick`函数和`items`数组发生变化的时候才被渲染，如果大家对`React.memo`不是很熟悉的话，可以看看我写的[这篇文章](https://juejin.im/post/5c8edf626fb9a0710d65c7fc)。接着我在`SearchApp`里面使用`MemoizedHugeList`，由于要避免该组件的重复渲染，所以我使用了`useCallback`来记住定义的`handleClick函数`，这样在组件后面渲染的时候，`handleClick`变量指向的都是同一个函数，所以`MemorizedHugeList`只有在items发生变化时才会重新渲染。这里要注意的是由于我的`handleClick`函数没有使用到任何的外部依赖所以它的`dependencies`才是个空数组，如果你的函数有使用到外面的依赖的话，记得一定要将该依赖放进`useCallback`的`dependencies`参数中，不然会有bug发生。\n\n#### 注意事项\n##### 避免在函数里面使用“旧的”变量\n和`useEffect`类似，我们也需要将所有在`useCallback`的callback中使用到的外部变量写到`dependencies`数组里面，不然我们可能会在`callback`调用的时候使用到“旧的”外部变量的值。\n\n##### 不是所有函数都要使用useCallback\n> Performance optimizations are not free. They ALWAYS come with a cost but do NOT always come with a benefit to offset that cost.\n\n**任何优化都会有代价**，`useCallback`也是一样的。当我们在Function Component里面调用`useCallback`函数的时候，React背后要做一系列计算才能保证当`dependencies`不发生变化的时候，我们拿到的是同一个函数，因此如果我们滥用`useCallback`的话，并不会带来想象中的性能优化，反而会影响到我们的性能，例如下面这个例子就是一个不好的使用`useCallback`的例子：\n```javascript\nimport React, { useCallback } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst DummyButton = () => {\n  const handleClick = useCallback(() => {\n    console.log('button is clicked')\n  }, [])\n\n  return (\n    <button onClick={handleClick}>\n      I'm super dummy\n    </button>\n  )\n}\n\nReactDOM.render(<DummyButton />, document.getElementById('root'))\n```\n上面例子使用的`useCallback`没有起到任何优化代码性能的作用，因为上面的代码执行起来其实相当于下面的代码：\n```javascript\nimport React, { useCallback } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst DummyButton = () => {\n  const inlineClick = () => {\n    console.log('button is clicked')\n  }\n  const handleClick = useCallback(inlineClick, [])\n\n  return (\n    <button onClick={handleClick}>\n      I'm super dummy\n    </button>\n  )\n}\n\nReactDOM.render(<DummyButton />, document.getElementById('root'))\n```\n从上面的代码我们可以看出，即使我们使用了`useCallback`函数，浏览器在执行`DummyButton`这个函数的时候还是需要创建一个新的内嵌函数`inlineClick`，这和不使用`useCallback`的效果是一样的，而且除此之外，优化后的代码由于还调用了`useCallback`函数，所以它消耗的计算资源其实比没有优化之前还多，而且由于`useCallback`函数内部存储了一些额外的变量（例如之前的`dependencies`）所以它消耗的内存资源也会更多。因此我们并不能一味地将所有的内嵌函数使用`useCallback`来包裹，只对那些真正需要被记住的函数使用`useCallback`。\n\n### useMemo\n#### 作用\n`useMemo`和`useCallback`的作用十分类似，只不过它允许你`记住`任何类型的变量（不只是函数）。\n#### 用法\n```javascript\nconst memoizedValue = useMemo(() => valueNeededToBeMemoized, dependencies)\n```\n`useMemo`接收一个函数，该函数的返回值就是需要被记住的变量，当`useMemo`的第二个参数`dependencies`数组里面的元素的值没有发生变化的时候，`memoizedValue`使用的就是上一次的值。下面是一个例子：\n```javascript\nimport React, { useMemo } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst RenderPrimes = ({ iterations, multiplier }) => {\n  const primes = React.useMemo(() => calculatePrimes(iterations, multiplier), [\n    iterations,\n    multiplier\n  ])\n\n  return (\n    <div>\n      Primes! {primes}\n    </div>\n  )\n}\n\nReactDOM.render(<RenderPrimes />, document.getElementById('root'))\n```\n上面的例子中[calculatePrimes](https://developer.mozilla.org/en-US/docs/Tools/Performance/Scenarios/Intensive_JavaScript)是用来计算素数的，因此每次调用它都需要消耗大量的计算资源。为了提高组件渲染的性能，我们可以使用`useMemo`来记住计算的结果，当`iterations`和`multiplier`保持不变的时候，我们就不需要重新执行calculatePrimes函数来重新计算了，直接使用上一次的结果即可。\n\n#### 注意事项\n##### 不是所有的变量要包裹在useMemo里面\n和`useCallback`类似，我们只将那些确实有需要被记住的变量使用`useMemo`来封装，切记不能滥用`useMemo`，例如下面就是一个滥用`useMemo`的例子：\n```javascript\nimport React, { useMemo } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst DummyDisplay = () => {\n  const items = useMemo(() => ['1', '2', '3'], [])\n  \n  return (\n    <>\n      {\n        items.map(item => <div key={item}>{item}</div>)\n      }\n    </>\n  )\n}\n\nReactDOM.render(<DummyDisplay />, document.getElementById('root'))\n```\n上面的例子中直接将items定义在组件外面会更好：\n```javascript\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nconst items = ['1', '2', '3']\n\nconst DummyDisplay = () => {  \n  return (\n    <>\n      {\n        items.map(item => <div key={item}>{item}</div>)\n      }\n    </>\n  )\n}\n\nReactDOM.render(<DummyDisplay />, document.getElementById('root'))\n```\n\n### useContext\n#### 作用\n我们知道React中组件之间传递参数的方式是props，假如我们在父级组件中定义了某些状态，而这些状态需要在该组件深层次嵌套的子组件中被使用的话就需要将这些状态以props的形式层层传递，这就造成了`props drilling`的问题。为了解决这个问题，React允许我们使用`Context`来在父级组件和底下任意层次的子组件之间传递状态。在Function Component中我们可以使用`useContext` Hook来使用`context`。\n#### 用法\n```javascript\nconst value = useContext(MyContext)\n```\n`useContext`接收一个`context`对象为参数，该`context`对象是由`React.createContext`函数生成的。`useContext`的返回值是当前`context`的值，这个值是由最邻近的`<MyContext.Provider>`来决定的。一旦在某个组件里面使用了`useContext`这就相当于该组件订阅了这个`context`的变化，当最近的`<MyContext.Provider>`的`context`值发生变化时，使用到该`context`的子组件就会被触发重渲染，且它们会拿到`context`的最新值。下面是一个具体的例子：\n```javascript\nimport React, { useContext, useState } from 'react'\nimport ReactDOM from 'react-dom'\n\n// define context\nconst NumberContext = React.createContext()\n\nconst NumberDisplay = () => {\n  const [currentNumber, setCurrentNumber] = useContext(NumberContext)\n\n  const handleCurrentNumberChange = () => {\n    setCurrentNumber(Math.floor(Math.random() * 100))\n  }\n\n  return (\n    <>\n      <div>Current number is: {currentNumber}</div>\n      <button onClick={handleCurrentNumberChange}>Change current number</button>\n    </>\n  )\n}\n\nconst ParentComponent = () => {\n  const [currentNumber, setCurrentNumber] = useState({})\n\n  return (\n    <NumberContext.Provider value={[currentNumber, setCurrentNumber]}>\n      <NumberDisplay />\n    </NumberContext.Provider>\n  )\n}\n\nReactDOM.render(<ParentComponent />, document.getElementById('root'))\n```\n#### 注意事项\n##### 避免无用渲染\n我们在上面已经提到如果一个Function Component使用了`useContext(SomeContext)`的话它就订阅了这个`SomeContext`的变化，这样当`SomeContext.Provider`的`value`发生变化的时候，这个组件就会被重新渲染。这里有一个问题就是，我们可能会把很多不同的数据放在同一个`context`里面，而不同的子组件可能只关心这个`context`的某一部分数据，当`context`里面的任意值发生变化的时候，无论这些组件用不用到这些数据它们都会被重新渲染，这可能会造成一些性能问题。下面是一个简单的例子：\n```javascript\nimport React, { useContext, useState } from 'react'\nimport ExpensiveTree from 'somewhere/ExpensiveTree'\nimport ReactDOM from 'react-dom'\n\nconst AppContext = React.createContext()\n\nconst ChildrenComponent = () => {\n  const [appContext] = useContext(AppContext)\n  const theme = appContext.theme\n\n  return (\n    <div>\n      <ExpensiveTree theme={theme} />\n    </div>\n  )\n}\n\nconst App = () => {\n  const [appContext, setAppContext] = useState({ theme: { color: 'red' }, configuration: { showTips: false }})\n\n  return (\n    <AppContext.Provider value={[appContext, setAppContext]}>\n      <ChildrenComponent />\n    </AppContext.Provider>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n```\n在上面的例子中，ChildrenComponent只使用到了appContext的`.theme`属性，可是当appContext其它属性例如configuration被更新时，ChildrenComponent也会被重新渲染，而ChildrenComponent调用了一个十分耗费性能的ExpensiveTree组件，所以这些无用的渲染会影响到我们页面的性能，解决上面这个问题的方法有下面三种：\n###### 拆分Context\n这个方法是最被推荐的做法，和`useState`一样，我们可以将不需要同时改变的`context`拆分成不同的`context`，让它们的职责更加分明，这样子组件只会订阅那些它们需要订阅的`context`从而避免无用的重渲染。例如上面的代码可以改成这样：\n```javascript\nimport React, { useContext, useState } from 'react'\nimport ExpensiveTree from 'somewhere/ExpensiveTree'\nimport ReactDOM from 'react-dom'\n\nconst ThemeContext = React.createContext()\nconst ConfigurationContext = React.createContext()\n\nconst ChildrenComponent = () => {\n  const [themeContext] = useContext(ThemeContext)\n\n  return (\n    <div>\n      <ExpensiveTree theme={themeContext} />\n    </div>\n  )\n}\n\nconst App = () => {\n  const [themeContext, setThemeContext] = useState({ color: 'red' })\n  const [configurationContext, setConfigurationContext] = useState({ showTips: false })\n\n  return (\n    <ThemeContext.Provider value={[themeContext, setThemeContext]}>\n      <ConfigurationContext.Provider value={[configurationContext, setConfigurationContext]}>\n        <ChildrenComponent />\n      </ConfigurationContext.Provider>\n    </ThemeContext.Provider>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n```\n###### 拆分你的组件，使用memo来优化消耗性能的组件\n如果出于某些原因你不能拆分`context`，你仍然可以通过将消耗性能的组件和父组件的其他部分分离开来，并且使用`memo`函数来优化消耗性能的组件。例如上面的代码可以改为：\n```javascript\nimport React, { useContext, useState } from 'react'\nimport ExpensiveTree from 'somewhere/ExpensiveTree'\nimport ReactDOM from 'react-dom'\n\nconst AppContext = React.createContext()\n\nconst ExpensiveComponentWrapper = React.memo(({ theme }) => {\n  return (\n    <ExpensiveTree theme={theme} />\n  )\n})\n\nconst ChildrenComponent = () => {\n  const [appContext] = useContext(AppContext)\n  const theme = appContext.theme\n\n  return (\n    <div>\n      <ExpensiveComponentWrapper theme={theme} />\n    </div>\n  )\n}\n\nconst App = () => {\n  const [appContext, setAppContext] = useState({ theme: { color: 'red' }, configuration: { showTips: false }})\n\n  return (\n    <AppContext.Provider value={[appContext, setAppContext]}>\n      <ChildrenComponent />\n    </AppContext.Provider>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n```\n###### 不拆分组件，也可以使用useMemo来优化\n当然我们也可以不拆分组件使用`useMemo`来将上面的代码进行优化，代码如下：\n```javascript\nimport React, { useContext, useState, useMemo } from 'react'\nimport ExpensiveTree from 'somewhere/ExpensiveTree'\nimport ReactDOM from 'react-dom'\n\nconst AppContext = React.createContext()\n\nconst ChildrenComponent = () => {\n  const [appContext] = useContext(AppContext)\n  const theme = appContext.theme\n\n  return useMemo(() => (\n      <div>\n        <ExpensiveTree theme={theme} />\n      </div>\n    ),\n    [theme]\n  )\n}\n\nconst App = () => {\n  const [appContext, setAppContext] = useState({ theme: { color: 'red' }, configuration: { showTips: false }})\n\n  return (\n    <AppContext.Provider value={[appContext, setAppContext]}>\n      <ChildrenComponent />\n    </AppContext.Provider>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n```\n### useReducer\n#### 作用\n`useReducer`用最简单的话来说就是允许我们在Function Component里面像使用[redux](https://redux.js.org/)一样通过`reducer`和`action`来管理我们组件状态的变换（state transition）。\n#### 用法\n```javascript\nconst [state, dispatch] = useReducer(reducer, initialArg, init?)\n```\n`useReducer`和`useState`类似，都是用来管理组件状态的，只不过和`useState`的`setState`不一样的是，`useReducer`返回的`dispatch`函数是用来触发某些改变`state`的`action`而不是直接设置`state`的值，至于不同的`action`如何产生新的state的值则在`reducer`里面定义。`useReducer`接收的三个参数分别是：\n* reducer: 这是一个函数，它的签名是`(currentState, action) => newState`，从它的函数签名可以看出它会接收当前的state和当前`dispatch`的`action`为参数，然后返回下一个state,也就是说它负责状态转换（state transition）的工作。\n* initialArg：如果调用者没有提供第三个`init`参数，这个参数代表的是这个`reducer`的初始状态，如果`init`参数有被指定的话，`initialArg`会被作为参数传进`init`函数来生成初始状态。\n* init: 这是一个用来生成初始状态的函数，它的函数签名是`(initialArg) => initialState`，从它的函数签名可以看出它会接收`useReducer`的第二个参数`initialArg`作为参数，并生成一个初始状态`initialState`。\n下面是`useReducer`的一个简单的例子：\n```javascript\nimport React, { useState, useReducer } from 'react'\n\nlet todoId = 1\n\nconst reducer = (currentState, action) => {\n  switch(action.type) {\n    case 'add':\n      return [...currentState, {id: todoId++, text: action.text}]\n    case 'delete':\n      return currentState.filter(({ id }) => action.id !== id)\n    default:\n      throw new Error('Unsupported action type')\n  }\n}\n\nconst Todo = ({ id, text, onDelete }) => {\n  return (\n    <div>\n      {text}\n      <button\n        onClick={() => onDelete(id)}\n      >\n        remove\n      </button>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [todos, dispatch] = useReducer(reducer, [])\n  const [text, setText] = useState('')\n\n  return (\n    <>\n      {\n        todos.map(({ id, text }) => {\n          return (\n            <Todo\n              text={text}\n              key={id}\n              id={id}\n              onDelete={id => {\n                dispatch({ type: 'delete', id })\n              }}\n            />\n          )\n        })\n      }\n      <input onChange={event => setText(event.target.value)} />\n      <button\n        onClick={() => {\n          dispatch({ type: 'add', text })\n          setText('')\n        }}\n      >\n        add todo\n      </button>\n    </>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n```\n#### 注意事项\n##### useReducer vs useState\n`useReducer`和`useState`都可以用来管理组件的状态，它们之间最大的区别就是，`useReducer`将状态和状态的变化统一管理在`reducer`函数里面，这样对于一些复杂的状态管理会十分方便我们debug，因为它对状态的改变是`封闭的`。而由于`useState`返回的`setState`可以直接在任意地方设置我们状态的值，当我们组件的状态转换逻辑十分复杂时，它将很难debug，因为它是`开放的`状态管理。总体的来说，在`useReducer`和`useState`如何进行选择的问题上我们可以参考以下这些原则：\n* 下列情况使用`useState`\n  * `state`的值是JS原始数据类型（primitives），如`number`, `string`和`boolean`等\n  * `state`的转换逻辑十分简单\n  * 组件内不同的状态是没有关联的，它们可以使用多个独立的`useState`来单独管理\n* 下列情况使用`useReducer`\n  * `state`的值是`object`或者`array`\n  * `state`的转换逻辑十分复杂, 需要使用`reducer`函数来统一管理\n  * 组件内多个`state`互相关联，改变一个状态时也需要改变另外一个，将他们放在同一个`state`内使用reducer来统一管理\n  * 状态定义在父级组件，不过需要在深层次嵌套的子组件中使用和改变父组件的状态，可以同时使用`useReducer`和`useContext`两个hook，将`dispatch`方法放进context里面来避免组件的`props drilling`\n  * 如果你希望你的状态管理是可预测的（predictable）和可维护的（maintainable），请`useReducer`\n  * 如果你希望你的状态变化可以被测试，请使用`useReducer`\n## 自定义Hook\n上面介绍了React内置的常用Hook的用法，接着我们看一下如何编写我们自己的Hook。\n### 作用\n自定义Hook的目的是让我们封装一些可以在不同组件之间**共用的非UI逻辑**来提高我们开发业务代码的效率。\n### 什么是自定义Hook\n之前我们说过Hook其实就是一个函数，所以自定义Hook也是一个函数，只不过`它在内部使用了React的内置Hook或者其它的自定义Hook`。虽然我们可以任意命名我们的自定义Hook，可是为了另其它开发者更容易理解我们的代码以及方便一些开发工具例如`eslint-plugin-react-hooks`来给我们更好地提示，我们需要将我们的Hook以`use`作为开头，并且使用驼峰发进行命名，例如`useLocation`，`useLocalStorage`和`useQueryString`等等。\n### 例子\n下面举一个最简单的自定义hook的例子：\n```javascript\nimport React, { useState, useCallback } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst useCounter = () => {\n  const [counter, setCounter] = useState(0)\n  \n  const increase = useCallback(() => setCounter(counter => ++counter), [])\n  const decrease = useCallback(() => setCounter(counter => --counter), [])\n\n  return {\n    counter,\n    increase,\n    decrease\n  }\n}\n\nconst App = () => {\n  const { counter, increase, decrease } = useCounter()\n\n  return (\n    <>\n      <div>Counter: {counter}</div>\n      <button onClick={increase}>increase</button>\n      <button onClick={decrease}>decrease</button>\n    </>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n```\n## 总结\n在本篇文章中我给大家介绍了React一些常用的内置Hook以及如何定义我们自己的Hook。React Hook总的来说是一个十分强大的功能，合理地使用它可以提高我们代码的复用率和业务代码的开发效率，不过它也有很多隐藏的各式各样的坑，大家在使用中一定要多加防范，我的个人建议是大家尽量使用`eslint-plugin-react-hooks`插件来辅助开发，因为它真的可以在我们开发的过程中就帮我们发现代码存在的问题，不过有时候想方设法来去掉它的警告确实是很烦人的：）。\n\n在这个系列的下一篇文章中我将教大家如何测试我们自定义的Hook来提高我们的代码质量，大家敬请期待。\n## 参考文献\n* [When to useMemo and useCallback](https://kentcdodds.com/blog/usememo-and-usecallback)\n* [Preventing rerenders with React.memo and useContext hook](https://github.com/facebook/react/issues/15156)\n* [React Hook Reference](https://reactjs.org/docs/hooks-reference.html#usereducer)\n* [useReducer vs useState in React](https://www.robinwieruch.de/react-usereducer-vs-usestate)\n\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","slug":"React-Hook实践指南","published":1,"updated":"2021-02-08T06:16:56.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0gqf6fe0006ucnxhfbx5mqs","content":"<p>在<a href=\"https://superseany.com/2020/04/29/React%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81Hook/\" target=\"_blank\" rel=\"noopener\">React为什么需要Hook</a>这篇文章中我们探讨了React开发团队为什么要为Function Component添加Hook的原因，在本篇文章中我将会为大家提供一份较为全面的React Hook实践指南，其中包括以下方面的内容：</p>\n<ul>\n<li><a href=\"#什么是react-hook\">什么是React Hook</a></li>\n<li><a href=\"#常用hook介绍\">常用Hook介绍</a><ul>\n<li><a href=\"#usestate\">useState</a></li>\n<li><a href=\"#useeffect\">useEffect</a></li>\n<li><a href=\"#useref\">useRef</a></li>\n<li><a href=\"#usecallback\">useCallback</a></li>\n<li><a href=\"#usememo\">useMemo</a></li>\n<li><a href=\"#usecontext\">useContext</a></li>\n<li><a href=\"#usereducer\">useReducer</a></li>\n</ul>\n</li>\n<li><a href=\"#自定义hook\">自定义Hook</a><a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"什么是React-Hook\"><a href=\"#什么是React-Hook\" class=\"headerlink\" title=\"什么是React Hook\"></a>什么是React Hook</h2><p>React Hook是React 16.8版本之后添加的新属性，用最简单的话来说，<strong>React Hook就是一些React提供的内置函数，这些函数可以让Function Component和Class Component一样能够拥有组件状态（state）以及进行副作用（side effect）</strong>。</p>\n<h2 id=\"常用Hook介绍\"><a href=\"#常用Hook介绍\" class=\"headerlink\" title=\"常用Hook介绍\"></a>常用Hook介绍</h2><p>接下来我将会为大家介绍一些常用的Hook，对于每一个Hook，我都会覆盖以下方面的内容：</p>\n<ul>\n<li>作用</li>\n<li>用法</li>\n<li>注意事项</li>\n</ul>\n<h3 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h3><h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p><code>useState</code>理解起来非常简单，和Class Component的<code>this.state</code>一样，都是用来<strong>管理组件状态的</strong>。在React Hook没出来之前，Function Component也叫做Functional Stateless Component（FSC），这是因为Function Component每次执行的时候都会生成新的函数作用域所以同一个组件的不同渲染（render）之间是不能够共用状态的，因此开发者一旦需要在组件中引入状态就需要将原来的Function Component改成Class Component，这使得开发者的体验十分不好。<code>useState</code>就是用来解决这个问题的，<strong>它允许Function Component将自己的状态持久化到React运行时（runtime）的某个地方（memory cell），这样在组件每次重新渲染的时候都可以从这个地方拿到该状态，而且当该状态被更新的时候，组件也会重渲染</strong>。</p>\n<h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> [state, setState] = useState(initialState)</span></pre></td></tr></table></figure>\n<p><code>useState</code>接收一个<code>initialState</code>变量作为状态的初始值，返回值是一个数组。返回数组的第一个元素代表当前<code>state</code>的最新值，第二个元素是一个用来更新<code>state</code>的函数。这里要注意的是<code>state</code>和<code>setState</code>这两个变量的命名不是固定的，应该根据你业务的实际情况选择不同的名字，可以是<code>text</code>和<code>setText</code>，也可以是<code>width</code>和<code>setWidth</code>这类的命名。（对上面数组解构赋值不熟悉的同学可以看下<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" target=\"_blank\" rel=\"noopener\">MDN</a>的介绍）。</p>\n<p>我们在实际开发中，一个组件可能不止一个state，如果组件有多个state，则可以在组件内部多次调用<code>useState</code>，以下是一个简单的例子：</p>\n<figure class=\"highlight jsx hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> React, &#123; useState &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> [counter, setCounter] = useState(<span class=\"hljs-number\">0</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> [text, setText] = useState(<span class=\"hljs-string\">''</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> handleTextChange = <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    setText(event.target.value)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;div&gt;Current counter: &#123;counter&#125;&lt;<span class=\"hljs-regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">      &lt;button</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">        onClick=&#123;() =&gt; setCounter(counter + 1)&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">      &gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">        Increase counter</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">      &lt;/</span>button&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;input</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">        onChange=&#123;handleTextChange&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">        value=&#123;text&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">      /&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"hljs-regexp\">/&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">ReactDOM.render(&lt;App /</span>&gt;, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'root'</span>))</span></pre></td></tr></table></figure>\n<p>和Class Component的<a href=\"https://reactjs.org/docs/react-component.html#setstate\" target=\"_blank\" rel=\"noopener\">this.setState</a> API类似，<code>setCounter</code>和<code>setText</code>都可以接收一个函数为参数，这个函数叫做<code>updater</code>，<code>updater</code>接收的参数是当前状态的<strong>最新值</strong>，返回值是<strong>下一个状态</strong>。例如setCounter的参数可以改成一个函数：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  onClick=&#123;() =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    setCounter(<span class=\"hljs-function\"><span class=\"hljs-params\">counter</span> =&gt;</span> counter + <span class=\"hljs-number\">1</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Increase counter</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"hljs-regexp\">/button&gt;</span></span></pre></td></tr></table></figure>\n<p><code>useState</code>的<code>initialState</code>也可以是一个用来生成状态初始值的函数，这种做法主要是避免组件每次渲染的时候<code>initialState</code>需要被重复计算。下面是个简单的例子：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> [state, setState] = useState(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> initialState = someExpensiveComputation(props)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> initialState</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><h5 id=\"setState是全量替代\"><a href=\"#setState是全量替代\" class=\"headerlink\" title=\"setState是全量替代\"></a>setState是全量替代</h5><p>Function Component的<code>setState</code>和Class Component的<code>this.setState</code>函数的一个重要区别是<code>this.setState</code>函数是<strong>将当前设置的state浅归并（shallowly merge）到旧state的操作</strong>。而<code>setState</code>函数则是将<strong>新state直接替换旧的state（replace）</strong>。因此我们在编写Function Component的时候，就要合理划分state，避免将没有关系的状态放在一起管理，例如下面这个是不好的设计：</p>\n<figure class=\"highlight jsx hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> [state, setState] = useState(&#123; <span class=\"hljs-attr\">left</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">top</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">0</span> &#125;)</span></pre></td></tr></table></figure>\n<p>在上面代码中，由于我们将互不关联的DOM位置信息<code>{left: 0, top: 0}</code>和大小信息<code>{width: 0, height: 0}</code>绑定在同一个<code>state</code>，所以我们在更新任意一个状态的时候也要维护一下另外一个状态：</p>\n<figure class=\"highlight jsx hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> handleContainerResize = <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; width, height &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  setState(&#123;...state, width, height&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> handleContainerMove = <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; left, top &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  setState(&#123;...state, left, top&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>这种写法十分不方便而且容易引发bug，更加合理的做法应该是将位置信息和大小信息<strong>放在两个不同的state里面</strong>，这样可以避免更新某个状态的时候要手动维护另一个状态：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// separate state into position and size states</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> [position, setPosition] = useState(&#123; <span class=\"hljs-attr\">left</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">top</span>: <span class=\"hljs-number\">0</span> &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> [size, setSize] = useState(&#123; <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">0</span>&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> handleContainerResize = <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; width, height &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  setSize(&#123;width, height&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> handleContainerMove = <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; left, top &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  setPosition(&#123;left, top&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>如果你确实要将多个互不关联的状态放在一起的话，建议你使用<a href=\"#usereducer\">useReducer</a>来管理你的状态，这样你的代码会更好维护。</p>\n<h5 id=\"设置相同的state值时setState会bailing-out-of-update\"><a href=\"#设置相同的state值时setState会bailing-out-of-update\" class=\"headerlink\" title=\"设置相同的state值时setState会bailing out of update\"></a>设置相同的state值时setState会<a href=\"https://reactjs.org/docs/hooks-reference.html#bailing-out-of-a-state-update\" target=\"_blank\" rel=\"noopener\">bailing out of update</a></h5><p>如果setState接收到的<code>新的state</code>和<code>当前的state</code>是一样的（判断方法是<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Description\" target=\"_blank\" rel=\"noopener\">Object.is</a>），React将不会重新渲染子组件或者触发<code>side effect</code>。这里要注意的是虽然React不会渲染子组件，不过它还是会重新渲染当前的组件的，如果你的组件渲染有些很耗性能的计算的话，可以考虑使用<a href=\"#usememo\">useMemo</a>来优化性能。</p>\n<h5 id=\"setState没有回调函数\"><a href=\"#setState没有回调函数\" class=\"headerlink\" title=\"setState没有回调函数\"></a>setState没有回调函数</h5><p>无论是<code>useState</code>还是Class Component的<code>this.setState</code>都是<strong>异步调用</strong>的，也就是说每次组件调用完它们之后都不能拿到最新的state值。为了解决这个问题，Class Component的<code>this.setState</code>允许你通过一个回调函数来获取到最新的state值，用法如下：</p>\n<figure class=\"highlight jsx hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">this</span>.setState(newState, state =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"I get new state\"</span>, state)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n<p>而Function Component的setState函数不存在这么一个可以拿到最新state的回调函数，不过我们可以使用<a href=\"#useeffect\">useEffect</a>来实现相同的效果，具体可以参见StackOverflow的这个<a href=\"https://stackoverflow.com/questions/54954091/how-to-use-callback-with-usestate-hook-in-react\" target=\"_blank\" rel=\"noopener\">讨论</a>。</p>\n<h3 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h3><h4 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p><code>useEffect</code>是用来使Function Component也可以进行副作用的。那么什么是副作用呢？我们可以先来看看维基百科的定义：</p>\n<blockquote>\n<p>In computer science, an operation, function or expression is said to have a side effect if it modifies some state variable value(s) outside its local environment, that is to say has an observable effect besides returning a value (the main effect) to the invoker of the operation.</p>\n</blockquote>\n<p>通俗来说，<strong>函数的副作用就是函数除了返回值外对外界环境造成的其它影响</strong>。举个例子，假如我们每次执行一个函数，该函数都会操作全局的一个变量，那么对全局变量的操作就是这个函数的副作用。而在React的世界里，我们的副作用大体可以分为两类，一类是<strong>调用浏览器的API</strong>，例如使用<code>addEventListener</code>来添加事件监听函数等，另外一类是<strong>发起获取服务器数据的请求</strong>，例如当用户卡片挂载的时候去异步获取用户的信息等。在Hook出来之前，如果我们需要在组件中进行副作用的话就需要将组件写成Class Component，然后在组件的生命周期函数里面写副作用，这其实会引起很多代码设计上的问题，具体大家可以查看我的上篇文章<a href=\"https://superseany.com/2020/04/29/React%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81Hook/\" target=\"_blank\" rel=\"noopener\">React为什么需要Hook</a>。Hook出来之后，开发者就可以在Function Component中使用<code>useEffect</code>来定义副作用了。虽然<code>useEffect</code>基本可以覆盖<code>componentDidMount</code>， <code>componentDidUpdate</code>，<code>componentWillUnmount</code>等生命周期函数组合起来使用的所有场景，但是<code>useEffect</code>和生命周期函数的设计理念还是存在本质上的区别的，如果一味用生命周期函数的思考方式去理解和使用<code>useEffect</code>的话，可能会引发一些奇怪的问题，大家有兴趣的话，可以看看React核心开发Dan写的这篇文章：<a href=\"https://overreacted.io/a-complete-guide-to-useeffect/\" target=\"_blank\" rel=\"noopener\">A Complete Guide to useEffect</a>，里面阐述了使用<code>useEffect</code>的一个比较正确的思考方式（mental model）。</p>\n<h4 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(effect, dependencies?)</span></pre></td></tr></table></figure>\n<p>useEffect的第一个参数effect是要执行的副作用函数，它可以是任意的用户自定义函数，用户可以在这个函数里面操作一些浏览器的API或者和外部环境进行交互，这个函数会在<strong>每次组件渲染完成之后</strong>被调用，例如下面是一个简单的例子：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> React, &#123; useState, useEffect &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> UserDetail = <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; userId &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> [userDetail, setUserDetail] = useState(&#123;&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  useEffect(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    fetch(<span class=\"hljs-string\">`https://myapi/users/<span class=\"hljs-subst\">$&#123;userId&#125;</span>`</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.json())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .then(<span class=\"hljs-function\"><span class=\"hljs-params\">user</span> =&gt;</span> setUserDetail(userDetail))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;div&gt;User Name: &#123;userDetail.name&#125;&lt;<span class=\"hljs-regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">    &lt;/</span>div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"hljs-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">UserDetail</span> /&gt;</span>, document.getElementById('root'))</span></span></pre></td></tr></table></figure>\n<p>上面定义的获取用户详情信息的副作用会在<code>UserDetail组件</code>每次<strong>完成渲染后</strong>执行，所以当该组件第一次挂载的时候就会向服务器发起获取用户详情信息的请求然后更新<code>userDetail</code>的值，这里的第一次挂载我们可以类比成Class Component的<code>componentDidMount</code>。可是如果试着运行一下上面的代码的话，你会发现代码进入了死循环：组件会不断向服务端发起请求。出现这个死循环的原因是<code>useEffect</code>里面调用了<code>setUserDetail</code>，这个函数会更新<code>userDetail</code>的值，从而使组件重渲染，而重渲染后<code>useEffect</code>的<code>effect</code>继续被执行，进而组件再次重渲染。。。为了避免重复的副作用执行，<code>useEffect</code>允许我们通过第二个参数<code>dependencies</code>来限制该副作用什么时候被执行：指明了<code>dependencies</code>的副作用，<strong>只有在<code>dependencies</code>数组里面的元素的值发生变化时才会被执行</strong>，因此如果要避免上面的代码进入死循环我们就要将<code>userId</code>指定为我们定义的副作用的<code>dependencies</code>：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> React, &#123; useState, useEffect &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> UserDetail = <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; userId &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> [userDetail, setUserDetail] = useState(&#123;&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  useEffect(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    fetch(<span class=\"hljs-string\">`https://myapi/users/<span class=\"hljs-subst\">$&#123;userId&#125;</span>`</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.json())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .then(<span class=\"hljs-function\"><span class=\"hljs-params\">user</span> =&gt;</span> setUserDetail(userDetail))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;, [userId])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;div&gt;User Name: $&#123;userDetail.name&#125;&lt;<span class=\"hljs-regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">    &lt;/</span>div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"hljs-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">UserDetail</span> /&gt;</span>, document.getElementById('root'))</span></span></pre></td></tr></table></figure>\n<p>除了发起服务端的请求外，我们往往还需要在<code>useEffect</code>里面调用浏览器的API，例如使用<code>addEventListener</code>来添加浏览器事件的监听函数等。我们一旦使用了<code>addEventListener</code>就必须在合适的时候调用<code>removeEventListener</code>来移除对事件的监听，否则会有性能问题，<code>useEffect</code>允许我们在副作用函数里面返回一个<code>cleanup</code>函数，这个函数会在组件<strong>重新渲染之前</strong>被执行，我们可以在这个返回的函数里面移除对事件的监听，下面是一个具体的例子：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> React, &#123; useEffect &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> WindowScrollListener = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  useEffect(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">const</span> handleWindowScroll = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'yean, window is scrolling!'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'scroll'</span>, handleWindowScroll)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// this is clean up function</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-built_in\">window</span>.removeEventListener(handleWindowScroll)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;, [])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">      I can listen to the <span class=\"hljs-built_in\">window</span> scroll event!</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"hljs-regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">ReactDOM.render(&lt;WindowScrollListener /</span>&gt;, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'root'</span>))</span></pre></td></tr></table></figure>\n<p>上面的代码中我们会在<code>WindowScrollListener</code>组件首次渲染完成后注册一个监听页面滚动事件的函数，并在组件下一次渲染前移除该监听函数。由于我们指定了一个空数组作为这个副作用的<code>dependencies</code>，所以这个副作用只会在组件首次渲染时被执行一次，而它的cleanup函数只会在组件<code>unmount</code>时才被执行，这就避免了频繁注册页面监听函数从而影响页面的性能。</p>\n<h4 id=\"注意事项-1\"><a href=\"#注意事项-1\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><h5 id=\"避免使用“旧的”变量\"><a href=\"#避免使用“旧的”变量\" class=\"headerlink\" title=\"避免使用“旧的”变量\"></a>避免使用“旧的”变量</h5><p>我们在实际使用<code>useEffect</code>的过程中可能遇到最多的问题就是我们的effect函数被调用的时候，拿到的某些state, props或者是变量不是<strong>最新</strong>的变量而是之前<strong>旧的</strong>变量。出现这个问题的原因是：我们定义的副作用其实就是一个函数，而JS的作用域是词法作用域，所以函数使用到的变量值是它被<strong>定义时</strong>就确定的，用最简单的话来说就是，useEffect的effect会<strong>记住</strong>它被定义时的外部变量的值，所以它被调用时使用到的值可能不是<strong>最新</strong>的值。解决这个问题的办法有两种，一种是将那些你希望每次effect被调用时拿到的都是最新值的变量保存在一个ref里面，并且在每次组件渲染的时候更新该ref的值：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> [someState, setSomeState] = useState()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> someStateRef = useRef()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">someStateRef.current = someState</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> latestSomeState = someStateRef.current</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(latestSomeState)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;, [otherDependencies...])</span></pre></td></tr></table></figure>\n<p>这种做法虽然不是很优雅，不过可以解决我们的问题，如果你没有了解过<code>useRef</code>用法的话，可以查看本篇文章<a href=\"#useref\">useRef</a>这部分内容。解决这个问题的另外一个做法是将副作用<strong>使用</strong>到的所有变量都加到effect的<code>dependencies</code>中去，这也是比较推荐的做法。在实际开发中我们可以使用facebook自家的<a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\" target=\"_blank\" rel=\"noopener\">eslint-plugin-react-hooks</a>的<a href=\"https://github.com/facebook/react/issues/14920\" target=\"_blank\" rel=\"noopener\">exhaustive-deps</a>规则来进行编码约束，在你的项目加上这个约束之后，在代码开发阶段eslint就会告诉你要将someState放到<code>useEffect</code>的<code>dependencies</code>中去，这样就可以不使用<code>useRef</code>来存储someState的值了，例如下面代码：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> [someState, setSomeState] = useState()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(someState)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;, [otherDependencies..., someState])</span></pre></td></tr></table></figure>\n<h3 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h3><h4 id=\"作用-2\"><a href=\"#作用-2\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p><code>useRef</code>是用来在组件不同渲染之间共用一些数据的，它的作用和我们在Class Component里面为<code>this</code>赋值是一样的。</p>\n<h4 id=\"用法-2\"><a href=\"#用法-2\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> refObject = useRef(initialValue)</span></pre></td></tr></table></figure>\n<p><code>useRef</code>接收<code>initialValue</code>作为初始值，它的返回值是一个<code>ref</code>对象，这个对象的<code>.current</code>属性就是该数据的最新值。使用<code>useRef</code>的一个最简单的情况就是在Function Component里面存储对DOM对象的引用，例如下面这个例子：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> &#123; useRef, useEffect &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> AutoFocusInput = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> inputRef = useRef(<span class=\"hljs-literal\">null</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  useEffect(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// auto focus when component mount</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    inputRef.current.focus()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;, [])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;input ref=&#123;inputRef&#125; type=<span class=\"hljs-string\">'text'</span> /&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"hljs-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AutoFocusInput</span> /&gt;</span>, document.getElementById('root'))</span></span></pre></td></tr></table></figure>\n<p>在上面代码中inputRef其实就是一个<code>{current: inputDomInstance}</code>对象，只不过它可以保证在组件每次渲染的时候拿到的都是同一个对象。</p>\n<h4 id=\"注意事项-2\"><a href=\"#注意事项-2\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><h5 id=\"更新ref对象不会触发组件重渲染\"><a href=\"#更新ref对象不会触发组件重渲染\" class=\"headerlink\" title=\"更新ref对象不会触发组件重渲染\"></a>更新ref对象不会触发组件重渲染</h5><p><code>useRef</code>返回的ref object被重新赋值的时候不会引起组件的<strong>重渲染</strong>，如果你有这个需求的话请使用<code>useState</code>来存储数据。</p>\n<h3 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h3><h4 id=\"作用-3\"><a href=\"#作用-3\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p>随着Hook的出现，开发者开始越来越多地使用Function Component来开发需求。当开发者在定义Function Component的时候往往需要在函数体内定义一些内嵌函数（inline function），这些内嵌函数会在组件每次重新渲染的时候被重新定义，如果它们作为props传递给了子组件的话，即使其它props的值没有发生变化，它都会使子组件重新渲染，而无用的组件重渲染可能会产生一些性能问题。每次重新生成新的内嵌函数还有另外一个问题就是当我们把内嵌函数作为<code>dependency</code>传进<code>useEffect</code>的<code>dependencies</code>数组的话，因为该函数频繁被重新生成，所以<code>useEffect</code>里面的effect就会频繁被调用。为了解决上述问题，React允许我们使用<code>useCallback</code>来<strong>记住</strong>（memoize）当前定义的函数，并在下次组件渲染的时候返回之前定义的函数而不是使用新定义的函数。</p>\n<h4 id=\"用法-3\"><a href=\"#用法-3\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> memoizedCallback = useCallback(callback, dependencies)</span></pre></td></tr></table></figure>\n<p><code>useCallback</code>接收两个参数，第一个参数是需要被记住的函数，第二个参数是这个函数的<code>dependencies</code>，只有<code>dependencies</code>数组里面的元素的值发生变化时<code>useCallback</code>才会返回新定义的函数，否则<code>useCallback</code>都会返回之前定义的函数。下面是一个简单的使用<code>useCallback</code>来优化子组件频繁被渲染的例子：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> React, &#123; useCallback &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> useSearch <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'hooks/useSearch'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// this list may contain thousands of items, so each re-render is expensive</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> HugeList = <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; items, onClick &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">        items.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">item, index</span>) =&gt;</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &lt;div</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">            key=&#123;index&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">            onClick=&#123;() =&gt; onClick(index)&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#123;item&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &lt;<span class=\"hljs-regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">        ))</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">      &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">    &lt;/</span>div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> MemoizedHugeList = React.memo(HugeList)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> SearchApp = <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; searchText &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> handleClick = useCallback(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'You clicked'</span>, item)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;, [])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> items = useSearch(searchText)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;MemoizedHugeList</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">      items=&#123;items&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">      onClick=&#123;handleClick&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">    /&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"hljs-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SearchApp</span> /&gt;</span>, document.getElementById('root'))</span></span></pre></td></tr></table></figure>\n<p>上面的例子中我定义了一个<code>HugeList</code>组件，由于这个组件需要渲染一个大的列表（items），所以每次重渲染都是十分消耗性能的，因此我使用了<code>React.memo</code>函数来让该组件只有在<code>onClick</code>函数和<code>items</code>数组发生变化的时候才被渲染，如果大家对<code>React.memo</code>不是很熟悉的话，可以看看我写的<a href=\"https://juejin.im/post/5c8edf626fb9a0710d65c7fc\" target=\"_blank\" rel=\"noopener\">这篇文章</a>。接着我在<code>SearchApp</code>里面使用<code>MemoizedHugeList</code>，由于要避免该组件的重复渲染，所以我使用了<code>useCallback</code>来记住定义的<code>handleClick函数</code>，这样在组件后面渲染的时候，<code>handleClick</code>变量指向的都是同一个函数，所以<code>MemorizedHugeList</code>只有在items发生变化时才会重新渲染。这里要注意的是由于我的<code>handleClick</code>函数没有使用到任何的外部依赖所以它的<code>dependencies</code>才是个空数组，如果你的函数有使用到外面的依赖的话，记得一定要将该依赖放进<code>useCallback</code>的<code>dependencies</code>参数中，不然会有bug发生。</p>\n<h4 id=\"注意事项-3\"><a href=\"#注意事项-3\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><h5 id=\"避免在函数里面使用“旧的”变量\"><a href=\"#避免在函数里面使用“旧的”变量\" class=\"headerlink\" title=\"避免在函数里面使用“旧的”变量\"></a>避免在函数里面使用“旧的”变量</h5><p>和<code>useEffect</code>类似，我们也需要将所有在<code>useCallback</code>的callback中使用到的外部变量写到<code>dependencies</code>数组里面，不然我们可能会在<code>callback</code>调用的时候使用到“旧的”外部变量的值。</p>\n<h5 id=\"不是所有函数都要使用useCallback\"><a href=\"#不是所有函数都要使用useCallback\" class=\"headerlink\" title=\"不是所有函数都要使用useCallback\"></a>不是所有函数都要使用useCallback</h5><blockquote>\n<p>Performance optimizations are not free. They ALWAYS come with a cost but do NOT always come with a benefit to offset that cost.</p>\n</blockquote>\n<p><strong>任何优化都会有代价</strong>，<code>useCallback</code>也是一样的。当我们在Function Component里面调用<code>useCallback</code>函数的时候，React背后要做一系列计算才能保证当<code>dependencies</code>不发生变化的时候，我们拿到的是同一个函数，因此如果我们滥用<code>useCallback</code>的话，并不会带来想象中的性能优化，反而会影响到我们的性能，例如下面这个例子就是一个不好的使用<code>useCallback</code>的例子：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> React, &#123; useCallback &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> DummyButton = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> handleClick = useCallback(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'button is clicked'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;, [])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;button onClick=&#123;handleClick&#125;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">      I<span class=\"hljs-string\">'m super dummy</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">    &lt;/button&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">ReactDOM.render(&lt;DummyButton /&gt;, document.getElementById('</span>root<span class=\"hljs-string\">'))</span></span></pre></td></tr></table></figure>\n<p>上面例子使用的<code>useCallback</code>没有起到任何优化代码性能的作用，因为上面的代码执行起来其实相当于下面的代码：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> React, &#123; useCallback &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> DummyButton = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> inlineClick = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'button is clicked'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> handleClick = useCallback(inlineClick, [])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;button onClick=&#123;handleClick&#125;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      I<span class=\"hljs-string\">'m super dummy</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">    &lt;/button&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-string\">ReactDOM.render(&lt;DummyButton /&gt;, document.getElementById('</span>root<span class=\"hljs-string\">'))</span></span></pre></td></tr></table></figure>\n<p>从上面的代码我们可以看出，即使我们使用了<code>useCallback</code>函数，浏览器在执行<code>DummyButton</code>这个函数的时候还是需要创建一个新的内嵌函数<code>inlineClick</code>，这和不使用<code>useCallback</code>的效果是一样的，而且除此之外，优化后的代码由于还调用了<code>useCallback</code>函数，所以它消耗的计算资源其实比没有优化之前还多，而且由于<code>useCallback</code>函数内部存储了一些额外的变量（例如之前的<code>dependencies</code>）所以它消耗的内存资源也会更多。因此我们并不能一味地将所有的内嵌函数使用<code>useCallback</code>来包裹，只对那些真正需要被记住的函数使用<code>useCallback</code>。</p>\n<h3 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a>useMemo</h3><h4 id=\"作用-4\"><a href=\"#作用-4\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p><code>useMemo</code>和<code>useCallback</code>的作用十分类似，只不过它允许你<code>记住</code>任何类型的变量（不只是函数）。</p>\n<h4 id=\"用法-4\"><a href=\"#用法-4\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> memoizedValue = useMemo(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> valueNeededToBeMemoized, dependencies)</span></pre></td></tr></table></figure>\n<p><code>useMemo</code>接收一个函数，该函数的返回值就是需要被记住的变量，当<code>useMemo</code>的第二个参数<code>dependencies</code>数组里面的元素的值没有发生变化的时候，<code>memoizedValue</code>使用的就是上一次的值。下面是一个例子：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> React, &#123; useMemo &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> RenderPrimes = <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; iterations, multiplier &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> primes = React.useMemo(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> calculatePrimes(iterations, multiplier), [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    iterations,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    multiplier</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      Primes! &#123;primes&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"hljs-regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">ReactDOM.render(&lt;RenderPrimes /</span>&gt;, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'root'</span>))</span></pre></td></tr></table></figure>\n<p>上面的例子中<a href=\"https://developer.mozilla.org/en-US/docs/Tools/Performance/Scenarios/Intensive_JavaScript\" target=\"_blank\" rel=\"noopener\">calculatePrimes</a>是用来计算素数的，因此每次调用它都需要消耗大量的计算资源。为了提高组件渲染的性能，我们可以使用<code>useMemo</code>来记住计算的结果，当<code>iterations</code>和<code>multiplier</code>保持不变的时候，我们就不需要重新执行calculatePrimes函数来重新计算了，直接使用上一次的结果即可。</p>\n<h4 id=\"注意事项-4\"><a href=\"#注意事项-4\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><h5 id=\"不是所有的变量要包裹在useMemo里面\"><a href=\"#不是所有的变量要包裹在useMemo里面\" class=\"headerlink\" title=\"不是所有的变量要包裹在useMemo里面\"></a>不是所有的变量要包裹在useMemo里面</h5><p>和<code>useCallback</code>类似，我们只将那些确实有需要被记住的变量使用<code>useMemo</code>来封装，切记不能滥用<code>useMemo</code>，例如下面就是一个滥用<code>useMemo</code>的例子：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> React, &#123; useMemo &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> DummyDisplay = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> items = useMemo(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> [<span class=\"hljs-string\">'1'</span>, <span class=\"hljs-string\">'2'</span>, <span class=\"hljs-string\">'3'</span>], [])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">        items.map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> <span class=\"hljs-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"hljs-regexp\">/&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">ReactDOM.render(&lt;DummyDisplay /</span>&gt;, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'root'</span>))</span></pre></td></tr></table></figure>\n<p>上面的例子中直接将items定义在组件外面会更好：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> items = [<span class=\"hljs-string\">'1'</span>, <span class=\"hljs-string\">'2'</span>, <span class=\"hljs-string\">'3'</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> DummyDisplay = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;  </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">        items.map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> <span class=\"hljs-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"hljs-regexp\">/&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">ReactDOM.render(&lt;DummyDisplay /</span>&gt;, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'root'</span>))</span></pre></td></tr></table></figure>\n\n<h3 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h3><h4 id=\"作用-5\"><a href=\"#作用-5\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p>我们知道React中组件之间传递参数的方式是props，假如我们在父级组件中定义了某些状态，而这些状态需要在该组件深层次嵌套的子组件中被使用的话就需要将这些状态以props的形式层层传递，这就造成了<code>props drilling</code>的问题。为了解决这个问题，React允许我们使用<code>Context</code>来在父级组件和底下任意层次的子组件之间传递状态。在Function Component中我们可以使用<code>useContext</code> Hook来使用<code>context</code>。</p>\n<h4 id=\"用法-5\"><a href=\"#用法-5\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> value = useContext(MyContext)</span></pre></td></tr></table></figure>\n<p><code>useContext</code>接收一个<code>context</code>对象为参数，该<code>context</code>对象是由<code>React.createContext</code>函数生成的。<code>useContext</code>的返回值是当前<code>context</code>的值，这个值是由最邻近的<code>&lt;MyContext.Provider&gt;</code>来决定的。一旦在某个组件里面使用了<code>useContext</code>这就相当于该组件订阅了这个<code>context</code>的变化，当最近的<code>&lt;MyContext.Provider&gt;</code>的<code>context</code>值发生变化时，使用到该<code>context</code>的子组件就会被触发重渲染，且它们会拿到<code>context</code>的最新值。下面是一个具体的例子：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> React, &#123; useContext, useState &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// define context</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> NumberContext = React.createContext()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> NumberDisplay = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> [currentNumber, setCurrentNumber] = useContext(NumberContext)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> handleCurrentNumberChange = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    setCurrentNumber(<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">100</span>))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;div&gt;Current number is: &#123;currentNumber&#125;&lt;<span class=\"hljs-regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">      &lt;button onClick=&#123;handleCurrentNumberChange&#125;&gt;Change current number&lt;/</span>button&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"hljs-regexp\">/&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">const ParentComponent = () =&gt; &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  const [currentNumber, setCurrentNumber] = useState(&#123;&#125;)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  return (</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">    &lt;NumberContext.Provider value=&#123;[currentNumber, setCurrentNumber]&#125;&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">      &lt;NumberDisplay /</span>&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"hljs-regexp\">/NumberContext.Provider&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">ReactDOM.render(&lt;ParentComponent /</span>&gt;, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'root'</span>))</span></pre></td></tr></table></figure>\n<h4 id=\"注意事项-5\"><a href=\"#注意事项-5\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><h5 id=\"避免无用渲染\"><a href=\"#避免无用渲染\" class=\"headerlink\" title=\"避免无用渲染\"></a>避免无用渲染</h5><p>我们在上面已经提到如果一个Function Component使用了<code>useContext(SomeContext)</code>的话它就订阅了这个<code>SomeContext</code>的变化，这样当<code>SomeContext.Provider</code>的<code>value</code>发生变化的时候，这个组件就会被重新渲染。这里有一个问题就是，我们可能会把很多不同的数据放在同一个<code>context</code>里面，而不同的子组件可能只关心这个<code>context</code>的某一部分数据，当<code>context</code>里面的任意值发生变化的时候，无论这些组件用不用到这些数据它们都会被重新渲染，这可能会造成一些性能问题。下面是一个简单的例子：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> React, &#123; useContext, useState &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> ExpensiveTree <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'somewhere/ExpensiveTree'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> AppContext = React.createContext()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> ChildrenComponent = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> [appContext] = useContext(AppContext)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> theme = appContext.theme</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;ExpensiveTree theme=&#123;theme&#125; /&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"hljs-regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">const App = () =&gt; &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  const [appContext, setAppContext] = useState(&#123; theme: &#123; color: 'red' &#125;, configuration: &#123; showTips: false &#125;&#125;)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  return (</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">    &lt;AppContext.Provider value=&#123;[appContext, setAppContext]&#125;&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">      &lt;ChildrenComponent /</span>&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"hljs-regexp\">/AppContext.Provider&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">ReactDOM.render(&lt;App /</span>&gt;, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'root'</span>))</span></pre></td></tr></table></figure>\n<p>在上面的例子中，ChildrenComponent只使用到了appContext的<code>.theme</code>属性，可是当appContext其它属性例如configuration被更新时，ChildrenComponent也会被重新渲染，而ChildrenComponent调用了一个十分耗费性能的ExpensiveTree组件，所以这些无用的渲染会影响到我们页面的性能，解决上面这个问题的方法有下面三种：</p>\n<h6 id=\"拆分Context\"><a href=\"#拆分Context\" class=\"headerlink\" title=\"拆分Context\"></a>拆分Context</h6><p>这个方法是最被推荐的做法，和<code>useState</code>一样，我们可以将不需要同时改变的<code>context</code>拆分成不同的<code>context</code>，让它们的职责更加分明，这样子组件只会订阅那些它们需要订阅的<code>context</code>从而避免无用的重渲染。例如上面的代码可以改成这样：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> React, &#123; useContext, useState &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> ExpensiveTree <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'somewhere/ExpensiveTree'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> ThemeContext = React.createContext()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> ConfigurationContext = React.createContext()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> ChildrenComponent = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> [themeContext] = useContext(ThemeContext)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;ExpensiveTree theme=&#123;themeContext&#125; /&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"hljs-regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">const App = () =&gt; &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  const [themeContext, setThemeContext] = useState(&#123; color: 'red' &#125;)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  const [configurationContext, setConfigurationContext] = useState(&#123; showTips: false &#125;)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  return (</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">    &lt;ThemeContext.Provider value=&#123;[themeContext, setThemeContext]&#125;&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">      &lt;ConfigurationContext.Provider value=&#123;[configurationContext, setConfigurationContext]&#125;&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">        &lt;ChildrenComponent /</span>&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;<span class=\"hljs-regexp\">/ConfigurationContext.Provider&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">    &lt;/</span>ThemeContext.Provider&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"hljs-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span>, document.getElementById('root'))</span></span></pre></td></tr></table></figure>\n<h6 id=\"拆分你的组件，使用memo来优化消耗性能的组件\"><a href=\"#拆分你的组件，使用memo来优化消耗性能的组件\" class=\"headerlink\" title=\"拆分你的组件，使用memo来优化消耗性能的组件\"></a>拆分你的组件，使用memo来优化消耗性能的组件</h6><p>如果出于某些原因你不能拆分<code>context</code>，你仍然可以通过将消耗性能的组件和父组件的其他部分分离开来，并且使用<code>memo</code>函数来优化消耗性能的组件。例如上面的代码可以改为：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> React, &#123; useContext, useState &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> ExpensiveTree <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'somewhere/ExpensiveTree'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> AppContext = React.createContext()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> ExpensiveComponentWrapper = React.memo(<span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; theme &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;ExpensiveTree theme=&#123;theme&#125; /&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> ChildrenComponent = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> [appContext] = useContext(AppContext)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> theme = appContext.theme</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;ExpensiveComponentWrapper theme=&#123;theme&#125; /&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"hljs-regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">const App = () =&gt; &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  const [appContext, setAppContext] = useState(&#123; theme: &#123; color: 'red' &#125;, configuration: &#123; showTips: false &#125;&#125;)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  return (</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">    &lt;AppContext.Provider value=&#123;[appContext, setAppContext]&#125;&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">      &lt;ChildrenComponent /</span>&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"hljs-regexp\">/AppContext.Provider&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">ReactDOM.render(&lt;App /</span>&gt;, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'root'</span>))</span></pre></td></tr></table></figure>\n<h6 id=\"不拆分组件，也可以使用useMemo来优化\"><a href=\"#不拆分组件，也可以使用useMemo来优化\" class=\"headerlink\" title=\"不拆分组件，也可以使用useMemo来优化\"></a>不拆分组件，也可以使用useMemo来优化</h6><p>当然我们也可以不拆分组件使用<code>useMemo</code>来将上面的代码进行优化，代码如下：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> React, &#123; useContext, useState, useMemo &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> ExpensiveTree <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'somewhere/ExpensiveTree'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> AppContext = React.createContext()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> ChildrenComponent = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> [appContext] = useContext(AppContext)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> theme = appContext.theme</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> useMemo(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &lt;ExpensiveTree theme=&#123;theme&#125; /&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;<span class=\"hljs-regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">    ),</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">    [theme]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">const App = () =&gt; &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  const [appContext, setAppContext] = useState(&#123; theme: &#123; color: 'red' &#125;, configuration: &#123; showTips: false &#125;&#125;)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  return (</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">    &lt;AppContext.Provider value=&#123;[appContext, setAppContext]&#125;&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">      &lt;ChildrenComponent /</span>&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"hljs-regexp\">/AppContext.Provider&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">ReactDOM.render(&lt;App /</span>&gt;, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'root'</span>))</span></pre></td></tr></table></figure>\n<h3 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a>useReducer</h3><h4 id=\"作用-6\"><a href=\"#作用-6\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p><code>useReducer</code>用最简单的话来说就是允许我们在Function Component里面像使用<a href=\"https://redux.js.org/\" target=\"_blank\" rel=\"noopener\">redux</a>一样通过<code>reducer</code>和<code>action</code>来管理我们组件状态的变换（state transition）。</p>\n<h4 id=\"用法-6\"><a href=\"#用法-6\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> [state, dispatch] = useReducer(reducer, initialArg, init?)</span></pre></td></tr></table></figure>\n<p><code>useReducer</code>和<code>useState</code>类似，都是用来管理组件状态的，只不过和<code>useState</code>的<code>setState</code>不一样的是，<code>useReducer</code>返回的<code>dispatch</code>函数是用来触发某些改变<code>state</code>的<code>action</code>而不是直接设置<code>state</code>的值，至于不同的<code>action</code>如何产生新的state的值则在<code>reducer</code>里面定义。<code>useReducer</code>接收的三个参数分别是：</p>\n<ul>\n<li>reducer: 这是一个函数，它的签名是<code>(currentState, action) =&gt; newState</code>，从它的函数签名可以看出它会接收当前的state和当前<code>dispatch</code>的<code>action</code>为参数，然后返回下一个state,也就是说它负责状态转换（state transition）的工作。</li>\n<li>initialArg：如果调用者没有提供第三个<code>init</code>参数，这个参数代表的是这个<code>reducer</code>的初始状态，如果<code>init</code>参数有被指定的话，<code>initialArg</code>会被作为参数传进<code>init</code>函数来生成初始状态。</li>\n<li>init: 这是一个用来生成初始状态的函数，它的函数签名是<code>(initialArg) =&gt; initialState</code>，从它的函数签名可以看出它会接收<code>useReducer</code>的第二个参数<code>initialArg</code>作为参数，并生成一个初始状态<code>initialState</code>。<br>下面是<code>useReducer</code>的一个简单的例子：<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> React, &#123; useState, useReducer &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> todoId = <span class=\"hljs-number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> reducer = <span class=\"hljs-function\">(<span class=\"hljs-params\">currentState, action</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">switch</span>(action.type) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'add'</span>:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">return</span> [...currentState, &#123;<span class=\"hljs-attr\">id</span>: todoId++, <span class=\"hljs-attr\">text</span>: action.text&#125;]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'delete'</span>:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">return</span> currentState.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; id &#125;</span>) =&gt;</span> action.id !== id)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">default</span>:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'Unsupported action type'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> Todo = <span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; id, text, onDelete &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;text&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;button</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">        onClick=&#123;() =&gt; onDelete(id)&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">        remove</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;<span class=\"hljs-regexp\">/button&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">    &lt;/</span>div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> [todos, dispatch] = useReducer(reducer, [])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> [text, setText] = useState(<span class=\"hljs-string\">''</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">        todos.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; id, text &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &lt;Todo</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">              text=&#123;text&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">              key=&#123;id&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">              id=&#123;id&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">              onDelete=&#123;id =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">                dispatch(&#123; <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'delete'</span>, id &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#125;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">            /&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">          )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;input onChange=&#123;event =&gt; setText(event.target.value)&#125; /&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;button</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">        onClick=&#123;() =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">          dispatch(&#123; <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'add'</span>, text &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">          setText(<span class=\"hljs-string\">''</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">        add todo</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;<span class=\"hljs-regexp\">/button&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">    &lt;/</span>&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"hljs-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span>, document.getElementById('root'))</span></span></pre></td></tr></table></figure>\n<h4 id=\"注意事项-6\"><a href=\"#注意事项-6\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><h5 id=\"useReducer-vs-useState\"><a href=\"#useReducer-vs-useState\" class=\"headerlink\" title=\"useReducer vs useState\"></a>useReducer vs useState</h5><code>useReducer</code>和<code>useState</code>都可以用来管理组件的状态，它们之间最大的区别就是，<code>useReducer</code>将状态和状态的变化统一管理在<code>reducer</code>函数里面，这样对于一些复杂的状态管理会十分方便我们debug，因为它对状态的改变是<code>封闭的</code>。而由于<code>useState</code>返回的<code>setState</code>可以直接在任意地方设置我们状态的值，当我们组件的状态转换逻辑十分复杂时，它将很难debug，因为它是<code>开放的</code>状态管理。总体的来说，在<code>useReducer</code>和<code>useState</code>如何进行选择的问题上我们可以参考以下这些原则：</li>\n<li>下列情况使用<code>useState</code><ul>\n<li><code>state</code>的值是JS原始数据类型（primitives），如<code>number</code>, <code>string</code>和<code>boolean</code>等</li>\n<li><code>state</code>的转换逻辑十分简单</li>\n<li>组件内不同的状态是没有关联的，它们可以使用多个独立的<code>useState</code>来单独管理</li>\n</ul>\n</li>\n<li>下列情况使用<code>useReducer</code><ul>\n<li><code>state</code>的值是<code>object</code>或者<code>array</code></li>\n<li><code>state</code>的转换逻辑十分复杂, 需要使用<code>reducer</code>函数来统一管理</li>\n<li>组件内多个<code>state</code>互相关联，改变一个状态时也需要改变另外一个，将他们放在同一个<code>state</code>内使用reducer来统一管理</li>\n<li>状态定义在父级组件，不过需要在深层次嵌套的子组件中使用和改变父组件的状态，可以同时使用<code>useReducer</code>和<code>useContext</code>两个hook，将<code>dispatch</code>方法放进context里面来避免组件的<code>props drilling</code></li>\n<li>如果你希望你的状态管理是可预测的（predictable）和可维护的（maintainable），请<code>useReducer</code></li>\n<li>如果你希望你的状态变化可以被测试，请使用<code>useReducer</code><h2 id=\"自定义Hook\"><a href=\"#自定义Hook\" class=\"headerlink\" title=\"自定义Hook\"></a>自定义Hook</h2>上面介绍了React内置的常用Hook的用法，接着我们看一下如何编写我们自己的Hook。<h3 id=\"作用-7\"><a href=\"#作用-7\" class=\"headerlink\" title=\"作用\"></a>作用</h3>自定义Hook的目的是让我们封装一些可以在不同组件之间<strong>共用的非UI逻辑</strong>来提高我们开发业务代码的效率。<h3 id=\"什么是自定义Hook\"><a href=\"#什么是自定义Hook\" class=\"headerlink\" title=\"什么是自定义Hook\"></a>什么是自定义Hook</h3>之前我们说过Hook其实就是一个函数，所以自定义Hook也是一个函数，只不过<code>它在内部使用了React的内置Hook或者其它的自定义Hook</code>。虽然我们可以任意命名我们的自定义Hook，可是为了另其它开发者更容易理解我们的代码以及方便一些开发工具例如<code>eslint-plugin-react-hooks</code>来给我们更好地提示，我们需要将我们的Hook以<code>use</code>作为开头，并且使用驼峰发进行命名，例如<code>useLocation</code>，<code>useLocalStorage</code>和<code>useQueryString</code>等等。<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3>下面举一个最简单的自定义hook的例子：<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> React, &#123; useState, useCallback &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> useCounter = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> [counter, setCounter] = useState(<span class=\"hljs-number\">0</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> increase = useCallback(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> setCounter(<span class=\"hljs-function\"><span class=\"hljs-params\">counter</span> =&gt;</span> ++counter), [])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> decrease = useCallback(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> setCounter(<span class=\"hljs-function\"><span class=\"hljs-params\">counter</span> =&gt;</span> --counter), [])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    counter,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    increase,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    decrease</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> App = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> &#123; counter, increase, decrease &#125; = useCounter()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;div&gt;Counter: &#123;counter&#125;&lt;<span class=\"hljs-regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">      &lt;button onClick=&#123;increase&#125;&gt;increase&lt;/</span>button&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;button onClick=&#123;decrease&#125;&gt;decrease&lt;<span class=\"hljs-regexp\">/button&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">    &lt;/</span>&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"hljs-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span>, document.getElementById('root'))</span></span></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2>在本篇文章中我给大家介绍了React一些常用的内置Hook以及如何定义我们自己的Hook。React Hook总的来说是一个十分强大的功能，合理地使用它可以提高我们代码的复用率和业务代码的开发效率，不过它也有很多隐藏的各式各样的坑，大家在使用中一定要多加防范，我的个人建议是大家尽量使用<code>eslint-plugin-react-hooks</code>插件来辅助开发，因为它真的可以在我们开发的过程中就帮我们发现代码存在的问题，不过有时候想方设法来去掉它的警告确实是很烦人的：）。</li>\n</ul>\n</li>\n</ul>\n<p>在这个系列的下一篇文章中我将教大家如何测试我们自定义的Hook来提高我们的代码质量，大家敬请期待。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://kentcdodds.com/blog/usememo-and-usecallback\" target=\"_blank\" rel=\"noopener\">When to useMemo and useCallback</a></li>\n<li><a href=\"https://github.com/facebook/react/issues/15156\" target=\"_blank\" rel=\"noopener\">Preventing rerenders with React.memo and useContext hook</a></li>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usereducer\" target=\"_blank\" rel=\"noopener\">React Hook Reference</a></li>\n<li><a href=\"https://www.robinwieruch.de/react-usereducer-vs-usestate\" target=\"_blank\" rel=\"noopener\">useReducer vs useState in React</a></li>\n</ul>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<p>在<a href=\"https://superseany.com/2020/04/29/React%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81Hook/\" target=\"_blank\" rel=\"noopener\">React为什么需要Hook</a>这篇文章中我们探讨了React开发团队为什么要为Function Component添加Hook的原因，在本篇文章中我将会为大家提供一份较为全面的React Hook实践指南，其中包括以下方面的内容：</p>\n<ul>\n<li><a href=\"#什么是react-hook\">什么是React Hook</a></li>\n<li><a href=\"#常用hook介绍\">常用Hook介绍</a><ul>\n<li><a href=\"#usestate\">useState</a></li>\n<li><a href=\"#useeffect\">useEffect</a></li>\n<li><a href=\"#useref\">useRef</a></li>\n<li><a href=\"#usecallback\">useCallback</a></li>\n<li><a href=\"#usememo\">useMemo</a></li>\n<li><a href=\"#usecontext\">useContext</a></li>\n<li><a href=\"#usereducer\">useReducer</a></li>\n</ul>\n</li>\n<li><a href=\"#自定义hook\">自定义Hook</a></li></ul>","more":"</li>\n</ul>\n<h2 id=\"什么是React-Hook\"><a href=\"#什么是React-Hook\" class=\"headerlink\" title=\"什么是React Hook\"></a>什么是React Hook</h2><p>React Hook是React 16.8版本之后添加的新属性，用最简单的话来说，<strong>React Hook就是一些React提供的内置函数，这些函数可以让Function Component和Class Component一样能够拥有组件状态（state）以及进行副作用（side effect）</strong>。</p>\n<h2 id=\"常用Hook介绍\"><a href=\"#常用Hook介绍\" class=\"headerlink\" title=\"常用Hook介绍\"></a>常用Hook介绍</h2><p>接下来我将会为大家介绍一些常用的Hook，对于每一个Hook，我都会覆盖以下方面的内容：</p>\n<ul>\n<li>作用</li>\n<li>用法</li>\n<li>注意事项</li>\n</ul>\n<h3 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h3><h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p><code>useState</code>理解起来非常简单，和Class Component的<code>this.state</code>一样，都是用来<strong>管理组件状态的</strong>。在React Hook没出来之前，Function Component也叫做Functional Stateless Component（FSC），这是因为Function Component每次执行的时候都会生成新的函数作用域所以同一个组件的不同渲染（render）之间是不能够共用状态的，因此开发者一旦需要在组件中引入状态就需要将原来的Function Component改成Class Component，这使得开发者的体验十分不好。<code>useState</code>就是用来解决这个问题的，<strong>它允许Function Component将自己的状态持久化到React运行时（runtime）的某个地方（memory cell），这样在组件每次重新渲染的时候都可以从这个地方拿到该状态，而且当该状态被更新的时候，组件也会重渲染</strong>。</p>\n<h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [state, setState] = useState(initialState)</span></pre></td></tr></table></figure>\n<p><code>useState</code>接收一个<code>initialState</code>变量作为状态的初始值，返回值是一个数组。返回数组的第一个元素代表当前<code>state</code>的最新值，第二个元素是一个用来更新<code>state</code>的函数。这里要注意的是<code>state</code>和<code>setState</code>这两个变量的命名不是固定的，应该根据你业务的实际情况选择不同的名字，可以是<code>text</code>和<code>setText</code>，也可以是<code>width</code>和<code>setWidth</code>这类的命名。（对上面数组解构赋值不熟悉的同学可以看下<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" target=\"_blank\" rel=\"noopener\">MDN</a>的介绍）。</p>\n<p>我们在实际开发中，一个组件可能不止一个state，如果组件有多个state，则可以在组件内部多次调用<code>useState</code>，以下是一个简单的例子：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> [counter, setCounter] = useState(<span class=\"number\">0</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> [text, setText] = useState(<span class=\"string\">''</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> handleTextChange = <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    setText(event.target.value)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;div&gt;Current counter: &#123;counter&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">      &lt;button</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">        onClick=&#123;() =&gt; setCounter(counter + 1)&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">      &gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">        Increase counter</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">      &lt;/</span>button&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;input</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">        onChange=&#123;handleTextChange&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">        value=&#123;text&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">      /&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"regexp\">/&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">ReactDOM.render(&lt;App /</span>&gt;, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>))</span></pre></td></tr></table></figure>\n<p>和Class Component的<a href=\"https://reactjs.org/docs/react-component.html#setstate\" target=\"_blank\" rel=\"noopener\">this.setState</a> API类似，<code>setCounter</code>和<code>setText</code>都可以接收一个函数为参数，这个函数叫做<code>updater</code>，<code>updater</code>接收的参数是当前状态的<strong>最新值</strong>，返回值是<strong>下一个状态</strong>。例如setCounter的参数可以改成一个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  onClick=&#123;() =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    setCounter(<span class=\"function\"><span class=\"params\">counter</span> =&gt;</span> counter + <span class=\"number\">1</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  Increase counter</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"regexp\">/button&gt;</span></span></pre></td></tr></table></figure>\n<p><code>useState</code>的<code>initialState</code>也可以是一个用来生成状态初始值的函数，这种做法主要是避免组件每次渲染的时候<code>initialState</code>需要被重复计算。下面是个简单的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [state, setState] = useState(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> initialState = someExpensiveComputation(props)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> initialState</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><h5 id=\"setState是全量替代\"><a href=\"#setState是全量替代\" class=\"headerlink\" title=\"setState是全量替代\"></a>setState是全量替代</h5><p>Function Component的<code>setState</code>和Class Component的<code>this.setState</code>函数的一个重要区别是<code>this.setState</code>函数是<strong>将当前设置的state浅归并（shallowly merge）到旧state的操作</strong>。而<code>setState</code>函数则是将<strong>新state直接替换旧的state（replace）</strong>。因此我们在编写Function Component的时候，就要合理划分state，避免将没有关系的状态放在一起管理，例如下面这个是不好的设计：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [state, setState] = useState(&#123; <span class=\"attr\">left</span>: <span class=\"number\">0</span>, <span class=\"attr\">top</span>: <span class=\"number\">0</span>, <span class=\"attr\">width</span>: <span class=\"number\">0</span>, <span class=\"attr\">height</span>: <span class=\"number\">0</span> &#125;)</span></pre></td></tr></table></figure>\n<p>在上面代码中，由于我们将互不关联的DOM位置信息<code>{left: 0, top: 0}</code>和大小信息<code>{width: 0, height: 0}</code>绑定在同一个<code>state</code>，所以我们在更新任意一个状态的时候也要维护一下另外一个状态：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleContainerResize = <span class=\"function\">(<span class=\"params\">&#123; width, height &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  setState(&#123;...state, width, height&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleContainerMove = <span class=\"function\">(<span class=\"params\">&#123; left, top &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  setState(&#123;...state, left, top&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>这种写法十分不方便而且容易引发bug，更加合理的做法应该是将位置信息和大小信息<strong>放在两个不同的state里面</strong>，这样可以避免更新某个状态的时候要手动维护另一个状态：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// separate state into position and size states</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [position, setPosition] = useState(&#123; <span class=\"attr\">left</span>: <span class=\"number\">0</span>, <span class=\"attr\">top</span>: <span class=\"number\">0</span> &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [size, setSize] = useState(&#123; <span class=\"attr\">width</span>: <span class=\"number\">0</span>, <span class=\"attr\">height</span>: <span class=\"number\">0</span>&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleContainerResize = <span class=\"function\">(<span class=\"params\">&#123; width, height &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  setSize(&#123;width, height&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> handleContainerMove = <span class=\"function\">(<span class=\"params\">&#123; left, top &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  setPosition(&#123;left, top&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>如果你确实要将多个互不关联的状态放在一起的话，建议你使用<a href=\"#usereducer\">useReducer</a>来管理你的状态，这样你的代码会更好维护。</p>\n<h5 id=\"设置相同的state值时setState会bailing-out-of-update\"><a href=\"#设置相同的state值时setState会bailing-out-of-update\" class=\"headerlink\" title=\"设置相同的state值时setState会bailing out of update\"></a>设置相同的state值时setState会<a href=\"https://reactjs.org/docs/hooks-reference.html#bailing-out-of-a-state-update\" target=\"_blank\" rel=\"noopener\">bailing out of update</a></h5><p>如果setState接收到的<code>新的state</code>和<code>当前的state</code>是一样的（判断方法是<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Description\" target=\"_blank\" rel=\"noopener\">Object.is</a>），React将不会重新渲染子组件或者触发<code>side effect</code>。这里要注意的是虽然React不会渲染子组件，不过它还是会重新渲染当前的组件的，如果你的组件渲染有些很耗性能的计算的话，可以考虑使用<a href=\"#usememo\">useMemo</a>来优化性能。</p>\n<h5 id=\"setState没有回调函数\"><a href=\"#setState没有回调函数\" class=\"headerlink\" title=\"setState没有回调函数\"></a>setState没有回调函数</h5><p>无论是<code>useState</code>还是Class Component的<code>this.setState</code>都是<strong>异步调用</strong>的，也就是说每次组件调用完它们之后都不能拿到最新的state值。为了解决这个问题，Class Component的<code>this.setState</code>允许你通过一个回调函数来获取到最新的state值，用法如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.setState(newState, state =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"I get new state\"</span>, state)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n<p>而Function Component的setState函数不存在这么一个可以拿到最新state的回调函数，不过我们可以使用<a href=\"#useeffect\">useEffect</a>来实现相同的效果，具体可以参见StackOverflow的这个<a href=\"https://stackoverflow.com/questions/54954091/how-to-use-callback-with-usestate-hook-in-react\" target=\"_blank\" rel=\"noopener\">讨论</a>。</p>\n<h3 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h3><h4 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p><code>useEffect</code>是用来使Function Component也可以进行副作用的。那么什么是副作用呢？我们可以先来看看维基百科的定义：</p>\n<blockquote>\n<p>In computer science, an operation, function or expression is said to have a side effect if it modifies some state variable value(s) outside its local environment, that is to say has an observable effect besides returning a value (the main effect) to the invoker of the operation.</p>\n</blockquote>\n<p>通俗来说，<strong>函数的副作用就是函数除了返回值外对外界环境造成的其它影响</strong>。举个例子，假如我们每次执行一个函数，该函数都会操作全局的一个变量，那么对全局变量的操作就是这个函数的副作用。而在React的世界里，我们的副作用大体可以分为两类，一类是<strong>调用浏览器的API</strong>，例如使用<code>addEventListener</code>来添加事件监听函数等，另外一类是<strong>发起获取服务器数据的请求</strong>，例如当用户卡片挂载的时候去异步获取用户的信息等。在Hook出来之前，如果我们需要在组件中进行副作用的话就需要将组件写成Class Component，然后在组件的生命周期函数里面写副作用，这其实会引起很多代码设计上的问题，具体大家可以查看我的上篇文章<a href=\"https://superseany.com/2020/04/29/React%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81Hook/\" target=\"_blank\" rel=\"noopener\">React为什么需要Hook</a>。Hook出来之后，开发者就可以在Function Component中使用<code>useEffect</code>来定义副作用了。虽然<code>useEffect</code>基本可以覆盖<code>componentDidMount</code>， <code>componentDidUpdate</code>，<code>componentWillUnmount</code>等生命周期函数组合起来使用的所有场景，但是<code>useEffect</code>和生命周期函数的设计理念还是存在本质上的区别的，如果一味用生命周期函数的思考方式去理解和使用<code>useEffect</code>的话，可能会引发一些奇怪的问题，大家有兴趣的话，可以看看React核心开发Dan写的这篇文章：<a href=\"https://overreacted.io/a-complete-guide-to-useeffect/\" target=\"_blank\" rel=\"noopener\">A Complete Guide to useEffect</a>，里面阐述了使用<code>useEffect</code>的一个比较正确的思考方式（mental model）。</p>\n<h4 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(effect, dependencies?)</span></pre></td></tr></table></figure>\n<p>useEffect的第一个参数effect是要执行的副作用函数，它可以是任意的用户自定义函数，用户可以在这个函数里面操作一些浏览器的API或者和外部环境进行交互，这个函数会在<strong>每次组件渲染完成之后</strong>被调用，例如下面是一个简单的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> UserDetail = <span class=\"function\">(<span class=\"params\">&#123; userId &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> [userDetail, setUserDetail] = useState(&#123;&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    fetch(<span class=\"string\">`https://myapi/users/<span class=\"subst\">$&#123;userId&#125;</span>`</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> setUserDetail(userDetail))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;div&gt;User Name: &#123;userDetail.name&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">UserDetail</span> /&gt;</span>, document.getElementById('root'))</span></span></pre></td></tr></table></figure>\n<p>上面定义的获取用户详情信息的副作用会在<code>UserDetail组件</code>每次<strong>完成渲染后</strong>执行，所以当该组件第一次挂载的时候就会向服务器发起获取用户详情信息的请求然后更新<code>userDetail</code>的值，这里的第一次挂载我们可以类比成Class Component的<code>componentDidMount</code>。可是如果试着运行一下上面的代码的话，你会发现代码进入了死循环：组件会不断向服务端发起请求。出现这个死循环的原因是<code>useEffect</code>里面调用了<code>setUserDetail</code>，这个函数会更新<code>userDetail</code>的值，从而使组件重渲染，而重渲染后<code>useEffect</code>的<code>effect</code>继续被执行，进而组件再次重渲染。。。为了避免重复的副作用执行，<code>useEffect</code>允许我们通过第二个参数<code>dependencies</code>来限制该副作用什么时候被执行：指明了<code>dependencies</code>的副作用，<strong>只有在<code>dependencies</code>数组里面的元素的值发生变化时才会被执行</strong>，因此如果要避免上面的代码进入死循环我们就要将<code>userId</code>指定为我们定义的副作用的<code>dependencies</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> UserDetail = <span class=\"function\">(<span class=\"params\">&#123; userId &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> [userDetail, setUserDetail] = useState(&#123;&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    fetch(<span class=\"string\">`https://myapi/users/<span class=\"subst\">$&#123;userId&#125;</span>`</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> setUserDetail(userDetail))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;, [userId])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;div&gt;User Name: $&#123;userDetail.name&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">UserDetail</span> /&gt;</span>, document.getElementById('root'))</span></span></pre></td></tr></table></figure>\n<p>除了发起服务端的请求外，我们往往还需要在<code>useEffect</code>里面调用浏览器的API，例如使用<code>addEventListener</code>来添加浏览器事件的监听函数等。我们一旦使用了<code>addEventListener</code>就必须在合适的时候调用<code>removeEventListener</code>来移除对事件的监听，否则会有性能问题，<code>useEffect</code>允许我们在副作用函数里面返回一个<code>cleanup</code>函数，这个函数会在组件<strong>重新渲染之前</strong>被执行，我们可以在这个返回的函数里面移除对事件的监听，下面是一个具体的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> WindowScrollListener = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> handleWindowScroll = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'yean, window is scrolling!'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, handleWindowScroll)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// this is clean up function</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"built_in\">window</span>.removeEventListener(handleWindowScroll)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;, [])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">      I can listen to the <span class=\"built_in\">window</span> scroll event!</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">ReactDOM.render(&lt;WindowScrollListener /</span>&gt;, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>))</span></pre></td></tr></table></figure>\n<p>上面的代码中我们会在<code>WindowScrollListener</code>组件首次渲染完成后注册一个监听页面滚动事件的函数，并在组件下一次渲染前移除该监听函数。由于我们指定了一个空数组作为这个副作用的<code>dependencies</code>，所以这个副作用只会在组件首次渲染时被执行一次，而它的cleanup函数只会在组件<code>unmount</code>时才被执行，这就避免了频繁注册页面监听函数从而影响页面的性能。</p>\n<h4 id=\"注意事项-1\"><a href=\"#注意事项-1\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><h5 id=\"避免使用“旧的”变量\"><a href=\"#避免使用“旧的”变量\" class=\"headerlink\" title=\"避免使用“旧的”变量\"></a>避免使用“旧的”变量</h5><p>我们在实际使用<code>useEffect</code>的过程中可能遇到最多的问题就是我们的effect函数被调用的时候，拿到的某些state, props或者是变量不是<strong>最新</strong>的变量而是之前<strong>旧的</strong>变量。出现这个问题的原因是：我们定义的副作用其实就是一个函数，而JS的作用域是词法作用域，所以函数使用到的变量值是它被<strong>定义时</strong>就确定的，用最简单的话来说就是，useEffect的effect会<strong>记住</strong>它被定义时的外部变量的值，所以它被调用时使用到的值可能不是<strong>最新</strong>的值。解决这个问题的办法有两种，一种是将那些你希望每次effect被调用时拿到的都是最新值的变量保存在一个ref里面，并且在每次组件渲染的时候更新该ref的值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [someState, setSomeState] = useState()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> someStateRef = useRef()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">someStateRef.current = someState</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> latestSomeState = someStateRef.current</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">console</span>.log(latestSomeState)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;, [otherDependencies...])</span></pre></td></tr></table></figure>\n<p>这种做法虽然不是很优雅，不过可以解决我们的问题，如果你没有了解过<code>useRef</code>用法的话，可以查看本篇文章<a href=\"#useref\">useRef</a>这部分内容。解决这个问题的另外一个做法是将副作用<strong>使用</strong>到的所有变量都加到effect的<code>dependencies</code>中去，这也是比较推荐的做法。在实际开发中我们可以使用facebook自家的<a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks#installation\" target=\"_blank\" rel=\"noopener\">eslint-plugin-react-hooks</a>的<a href=\"https://github.com/facebook/react/issues/14920\" target=\"_blank\" rel=\"noopener\">exhaustive-deps</a>规则来进行编码约束，在你的项目加上这个约束之后，在代码开发阶段eslint就会告诉你要将someState放到<code>useEffect</code>的<code>dependencies</code>中去，这样就可以不使用<code>useRef</code>来存储someState的值了，例如下面代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [someState, setSomeState] = useState()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">console</span>.log(someState)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;, [otherDependencies..., someState])</span></pre></td></tr></table></figure>\n<h3 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h3><h4 id=\"作用-2\"><a href=\"#作用-2\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p><code>useRef</code>是用来在组件不同渲染之间共用一些数据的，它的作用和我们在Class Component里面为<code>this</code>赋值是一样的。</p>\n<h4 id=\"用法-2\"><a href=\"#用法-2\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> refObject = useRef(initialValue)</span></pre></td></tr></table></figure>\n<p><code>useRef</code>接收<code>initialValue</code>作为初始值，它的返回值是一个<code>ref</code>对象，这个对象的<code>.current</code>属性就是该数据的最新值。使用<code>useRef</code>的一个最简单的情况就是在Function Component里面存储对DOM对象的引用，例如下面这个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useRef, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> AutoFocusInput = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> inputRef = useRef(<span class=\"literal\">null</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// auto focus when component mount</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    inputRef.current.focus()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;, [])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;input ref=&#123;inputRef&#125; type=<span class=\"string\">'text'</span> /&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">AutoFocusInput</span> /&gt;</span>, document.getElementById('root'))</span></span></pre></td></tr></table></figure>\n<p>在上面代码中inputRef其实就是一个<code>{current: inputDomInstance}</code>对象，只不过它可以保证在组件每次渲染的时候拿到的都是同一个对象。</p>\n<h4 id=\"注意事项-2\"><a href=\"#注意事项-2\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><h5 id=\"更新ref对象不会触发组件重渲染\"><a href=\"#更新ref对象不会触发组件重渲染\" class=\"headerlink\" title=\"更新ref对象不会触发组件重渲染\"></a>更新ref对象不会触发组件重渲染</h5><p><code>useRef</code>返回的ref object被重新赋值的时候不会引起组件的<strong>重渲染</strong>，如果你有这个需求的话请使用<code>useState</code>来存储数据。</p>\n<h3 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h3><h4 id=\"作用-3\"><a href=\"#作用-3\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p>随着Hook的出现，开发者开始越来越多地使用Function Component来开发需求。当开发者在定义Function Component的时候往往需要在函数体内定义一些内嵌函数（inline function），这些内嵌函数会在组件每次重新渲染的时候被重新定义，如果它们作为props传递给了子组件的话，即使其它props的值没有发生变化，它都会使子组件重新渲染，而无用的组件重渲染可能会产生一些性能问题。每次重新生成新的内嵌函数还有另外一个问题就是当我们把内嵌函数作为<code>dependency</code>传进<code>useEffect</code>的<code>dependencies</code>数组的话，因为该函数频繁被重新生成，所以<code>useEffect</code>里面的effect就会频繁被调用。为了解决上述问题，React允许我们使用<code>useCallback</code>来<strong>记住</strong>（memoize）当前定义的函数，并在下次组件渲染的时候返回之前定义的函数而不是使用新定义的函数。</p>\n<h4 id=\"用法-3\"><a href=\"#用法-3\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> memoizedCallback = useCallback(callback, dependencies)</span></pre></td></tr></table></figure>\n<p><code>useCallback</code>接收两个参数，第一个参数是需要被记住的函数，第二个参数是这个函数的<code>dependencies</code>，只有<code>dependencies</code>数组里面的元素的值发生变化时<code>useCallback</code>才会返回新定义的函数，否则<code>useCallback</code>都会返回之前定义的函数。下面是一个简单的使用<code>useCallback</code>来优化子组件频繁被渲染的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> useSearch <span class=\"keyword\">from</span> <span class=\"string\">'hooks/useSearch'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// this list may contain thousands of items, so each re-render is expensive</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> HugeList = <span class=\"function\">(<span class=\"params\">&#123; items, onClick &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">        items.map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &lt;div</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">            key=&#123;index&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">            onClick=&#123;() =&gt; onClick(index)&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#123;item&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &lt;<span class=\"regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">        ))</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">      &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MemoizedHugeList = React.memo(HugeList)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> SearchApp = <span class=\"function\">(<span class=\"params\">&#123; searchText &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> handleClick = useCallback(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'You clicked'</span>, item)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;, [])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> items = useSearch(searchText)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;MemoizedHugeList</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">      items=&#123;items&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">      onClick=&#123;handleClick&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">    /&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">SearchApp</span> /&gt;</span>, document.getElementById('root'))</span></span></pre></td></tr></table></figure>\n<p>上面的例子中我定义了一个<code>HugeList</code>组件，由于这个组件需要渲染一个大的列表（items），所以每次重渲染都是十分消耗性能的，因此我使用了<code>React.memo</code>函数来让该组件只有在<code>onClick</code>函数和<code>items</code>数组发生变化的时候才被渲染，如果大家对<code>React.memo</code>不是很熟悉的话，可以看看我写的<a href=\"https://juejin.im/post/5c8edf626fb9a0710d65c7fc\" target=\"_blank\" rel=\"noopener\">这篇文章</a>。接着我在<code>SearchApp</code>里面使用<code>MemoizedHugeList</code>，由于要避免该组件的重复渲染，所以我使用了<code>useCallback</code>来记住定义的<code>handleClick函数</code>，这样在组件后面渲染的时候，<code>handleClick</code>变量指向的都是同一个函数，所以<code>MemorizedHugeList</code>只有在items发生变化时才会重新渲染。这里要注意的是由于我的<code>handleClick</code>函数没有使用到任何的外部依赖所以它的<code>dependencies</code>才是个空数组，如果你的函数有使用到外面的依赖的话，记得一定要将该依赖放进<code>useCallback</code>的<code>dependencies</code>参数中，不然会有bug发生。</p>\n<h4 id=\"注意事项-3\"><a href=\"#注意事项-3\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><h5 id=\"避免在函数里面使用“旧的”变量\"><a href=\"#避免在函数里面使用“旧的”变量\" class=\"headerlink\" title=\"避免在函数里面使用“旧的”变量\"></a>避免在函数里面使用“旧的”变量</h5><p>和<code>useEffect</code>类似，我们也需要将所有在<code>useCallback</code>的callback中使用到的外部变量写到<code>dependencies</code>数组里面，不然我们可能会在<code>callback</code>调用的时候使用到“旧的”外部变量的值。</p>\n<h5 id=\"不是所有函数都要使用useCallback\"><a href=\"#不是所有函数都要使用useCallback\" class=\"headerlink\" title=\"不是所有函数都要使用useCallback\"></a>不是所有函数都要使用useCallback</h5><blockquote>\n<p>Performance optimizations are not free. They ALWAYS come with a cost but do NOT always come with a benefit to offset that cost.</p>\n</blockquote>\n<p><strong>任何优化都会有代价</strong>，<code>useCallback</code>也是一样的。当我们在Function Component里面调用<code>useCallback</code>函数的时候，React背后要做一系列计算才能保证当<code>dependencies</code>不发生变化的时候，我们拿到的是同一个函数，因此如果我们滥用<code>useCallback</code>的话，并不会带来想象中的性能优化，反而会影响到我们的性能，例如下面这个例子就是一个不好的使用<code>useCallback</code>的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> DummyButton = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> handleClick = useCallback(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'button is clicked'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;, [])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;button onClick=&#123;handleClick&#125;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">      I<span class=\"string\">'m super dummy</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">    &lt;/button&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">ReactDOM.render(&lt;DummyButton /&gt;, document.getElementById('</span>root<span class=\"string\">'))</span></span></pre></td></tr></table></figure>\n<p>上面例子使用的<code>useCallback</code>没有起到任何优化代码性能的作用，因为上面的代码执行起来其实相当于下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> DummyButton = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> inlineClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'button is clicked'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> handleClick = useCallback(inlineClick, [])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;button onClick=&#123;handleClick&#125;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      I<span class=\"string\">'m super dummy</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">    &lt;/button&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">ReactDOM.render(&lt;DummyButton /&gt;, document.getElementById('</span>root<span class=\"string\">'))</span></span></pre></td></tr></table></figure>\n<p>从上面的代码我们可以看出，即使我们使用了<code>useCallback</code>函数，浏览器在执行<code>DummyButton</code>这个函数的时候还是需要创建一个新的内嵌函数<code>inlineClick</code>，这和不使用<code>useCallback</code>的效果是一样的，而且除此之外，优化后的代码由于还调用了<code>useCallback</code>函数，所以它消耗的计算资源其实比没有优化之前还多，而且由于<code>useCallback</code>函数内部存储了一些额外的变量（例如之前的<code>dependencies</code>）所以它消耗的内存资源也会更多。因此我们并不能一味地将所有的内嵌函数使用<code>useCallback</code>来包裹，只对那些真正需要被记住的函数使用<code>useCallback</code>。</p>\n<h3 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a>useMemo</h3><h4 id=\"作用-4\"><a href=\"#作用-4\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p><code>useMemo</code>和<code>useCallback</code>的作用十分类似，只不过它允许你<code>记住</code>任何类型的变量（不只是函数）。</p>\n<h4 id=\"用法-4\"><a href=\"#用法-4\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> memoizedValue = useMemo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> valueNeededToBeMemoized, dependencies)</span></pre></td></tr></table></figure>\n<p><code>useMemo</code>接收一个函数，该函数的返回值就是需要被记住的变量，当<code>useMemo</code>的第二个参数<code>dependencies</code>数组里面的元素的值没有发生变化的时候，<code>memoizedValue</code>使用的就是上一次的值。下面是一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useMemo &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> RenderPrimes = <span class=\"function\">(<span class=\"params\">&#123; iterations, multiplier &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> primes = React.useMemo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> calculatePrimes(iterations, multiplier), [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    iterations,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    multiplier</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      Primes! &#123;primes&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">ReactDOM.render(&lt;RenderPrimes /</span>&gt;, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>))</span></pre></td></tr></table></figure>\n<p>上面的例子中<a href=\"https://developer.mozilla.org/en-US/docs/Tools/Performance/Scenarios/Intensive_JavaScript\" target=\"_blank\" rel=\"noopener\">calculatePrimes</a>是用来计算素数的，因此每次调用它都需要消耗大量的计算资源。为了提高组件渲染的性能，我们可以使用<code>useMemo</code>来记住计算的结果，当<code>iterations</code>和<code>multiplier</code>保持不变的时候，我们就不需要重新执行calculatePrimes函数来重新计算了，直接使用上一次的结果即可。</p>\n<h4 id=\"注意事项-4\"><a href=\"#注意事项-4\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><h5 id=\"不是所有的变量要包裹在useMemo里面\"><a href=\"#不是所有的变量要包裹在useMemo里面\" class=\"headerlink\" title=\"不是所有的变量要包裹在useMemo里面\"></a>不是所有的变量要包裹在useMemo里面</h5><p>和<code>useCallback</code>类似，我们只将那些确实有需要被记住的变量使用<code>useMemo</code>来封装，切记不能滥用<code>useMemo</code>，例如下面就是一个滥用<code>useMemo</code>的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useMemo &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> DummyDisplay = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> items = useMemo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> [<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>], [])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">        items.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"regexp\">/&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">ReactDOM.render(&lt;DummyDisplay /</span>&gt;, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>))</span></pre></td></tr></table></figure>\n<p>上面的例子中直接将items定义在组件外面会更好：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> items = [<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> DummyDisplay = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;  </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">        items.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"regexp\">/&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">ReactDOM.render(&lt;DummyDisplay /</span>&gt;, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>))</span></pre></td></tr></table></figure>\n\n<h3 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h3><h4 id=\"作用-5\"><a href=\"#作用-5\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p>我们知道React中组件之间传递参数的方式是props，假如我们在父级组件中定义了某些状态，而这些状态需要在该组件深层次嵌套的子组件中被使用的话就需要将这些状态以props的形式层层传递，这就造成了<code>props drilling</code>的问题。为了解决这个问题，React允许我们使用<code>Context</code>来在父级组件和底下任意层次的子组件之间传递状态。在Function Component中我们可以使用<code>useContext</code> Hook来使用<code>context</code>。</p>\n<h4 id=\"用法-5\"><a href=\"#用法-5\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> value = useContext(MyContext)</span></pre></td></tr></table></figure>\n<p><code>useContext</code>接收一个<code>context</code>对象为参数，该<code>context</code>对象是由<code>React.createContext</code>函数生成的。<code>useContext</code>的返回值是当前<code>context</code>的值，这个值是由最邻近的<code>&lt;MyContext.Provider&gt;</code>来决定的。一旦在某个组件里面使用了<code>useContext</code>这就相当于该组件订阅了这个<code>context</code>的变化，当最近的<code>&lt;MyContext.Provider&gt;</code>的<code>context</code>值发生变化时，使用到该<code>context</code>的子组件就会被触发重渲染，且它们会拿到<code>context</code>的最新值。下面是一个具体的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useContext, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// define context</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> NumberContext = React.createContext()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> NumberDisplay = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> [currentNumber, setCurrentNumber] = useContext(NumberContext)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> handleCurrentNumberChange = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    setCurrentNumber(<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">100</span>))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;div&gt;Current number is: &#123;currentNumber&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;handleCurrentNumberChange&#125;&gt;Change current number&lt;/</span>button&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"regexp\">/&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">const ParentComponent = () =&gt; &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  const [currentNumber, setCurrentNumber] = useState(&#123;&#125;)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  return (</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">    &lt;NumberContext.Provider value=&#123;[currentNumber, setCurrentNumber]&#125;&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">      &lt;NumberDisplay /</span>&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"regexp\">/NumberContext.Provider&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">ReactDOM.render(&lt;ParentComponent /</span>&gt;, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>))</span></pre></td></tr></table></figure>\n<h4 id=\"注意事项-5\"><a href=\"#注意事项-5\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><h5 id=\"避免无用渲染\"><a href=\"#避免无用渲染\" class=\"headerlink\" title=\"避免无用渲染\"></a>避免无用渲染</h5><p>我们在上面已经提到如果一个Function Component使用了<code>useContext(SomeContext)</code>的话它就订阅了这个<code>SomeContext</code>的变化，这样当<code>SomeContext.Provider</code>的<code>value</code>发生变化的时候，这个组件就会被重新渲染。这里有一个问题就是，我们可能会把很多不同的数据放在同一个<code>context</code>里面，而不同的子组件可能只关心这个<code>context</code>的某一部分数据，当<code>context</code>里面的任意值发生变化的时候，无论这些组件用不用到这些数据它们都会被重新渲染，这可能会造成一些性能问题。下面是一个简单的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useContext, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ExpensiveTree <span class=\"keyword\">from</span> <span class=\"string\">'somewhere/ExpensiveTree'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> AppContext = React.createContext()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ChildrenComponent = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> [appContext] = useContext(AppContext)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> theme = appContext.theme</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;ExpensiveTree theme=&#123;theme&#125; /&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">const App = () =&gt; &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  const [appContext, setAppContext] = useState(&#123; theme: &#123; color: 'red' &#125;, configuration: &#123; showTips: false &#125;&#125;)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  return (</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">    &lt;AppContext.Provider value=&#123;[appContext, setAppContext]&#125;&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">      &lt;ChildrenComponent /</span>&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"regexp\">/AppContext.Provider&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">ReactDOM.render(&lt;App /</span>&gt;, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>))</span></pre></td></tr></table></figure>\n<p>在上面的例子中，ChildrenComponent只使用到了appContext的<code>.theme</code>属性，可是当appContext其它属性例如configuration被更新时，ChildrenComponent也会被重新渲染，而ChildrenComponent调用了一个十分耗费性能的ExpensiveTree组件，所以这些无用的渲染会影响到我们页面的性能，解决上面这个问题的方法有下面三种：</p>\n<h6 id=\"拆分Context\"><a href=\"#拆分Context\" class=\"headerlink\" title=\"拆分Context\"></a>拆分Context</h6><p>这个方法是最被推荐的做法，和<code>useState</code>一样，我们可以将不需要同时改变的<code>context</code>拆分成不同的<code>context</code>，让它们的职责更加分明，这样子组件只会订阅那些它们需要订阅的<code>context</code>从而避免无用的重渲染。例如上面的代码可以改成这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useContext, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ExpensiveTree <span class=\"keyword\">from</span> <span class=\"string\">'somewhere/ExpensiveTree'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ThemeContext = React.createContext()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ConfigurationContext = React.createContext()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ChildrenComponent = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> [themeContext] = useContext(ThemeContext)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;ExpensiveTree theme=&#123;themeContext&#125; /&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">const App = () =&gt; &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  const [themeContext, setThemeContext] = useState(&#123; color: 'red' &#125;)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  const [configurationContext, setConfigurationContext] = useState(&#123; showTips: false &#125;)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  return (</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">    &lt;ThemeContext.Provider value=&#123;[themeContext, setThemeContext]&#125;&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">      &lt;ConfigurationContext.Provider value=&#123;[configurationContext, setConfigurationContext]&#125;&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">        &lt;ChildrenComponent /</span>&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;<span class=\"regexp\">/ConfigurationContext.Provider&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">    &lt;/</span>ThemeContext.Provider&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span>, document.getElementById('root'))</span></span></pre></td></tr></table></figure>\n<h6 id=\"拆分你的组件，使用memo来优化消耗性能的组件\"><a href=\"#拆分你的组件，使用memo来优化消耗性能的组件\" class=\"headerlink\" title=\"拆分你的组件，使用memo来优化消耗性能的组件\"></a>拆分你的组件，使用memo来优化消耗性能的组件</h6><p>如果出于某些原因你不能拆分<code>context</code>，你仍然可以通过将消耗性能的组件和父组件的其他部分分离开来，并且使用<code>memo</code>函数来优化消耗性能的组件。例如上面的代码可以改为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useContext, useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ExpensiveTree <span class=\"keyword\">from</span> <span class=\"string\">'somewhere/ExpensiveTree'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> AppContext = React.createContext()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ExpensiveComponentWrapper = React.memo(<span class=\"function\">(<span class=\"params\">&#123; theme &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;ExpensiveTree theme=&#123;theme&#125; /&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ChildrenComponent = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> [appContext] = useContext(AppContext)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> theme = appContext.theme</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;ExpensiveComponentWrapper theme=&#123;theme&#125; /&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">const App = () =&gt; &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  const [appContext, setAppContext] = useState(&#123; theme: &#123; color: 'red' &#125;, configuration: &#123; showTips: false &#125;&#125;)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  return (</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">    &lt;AppContext.Provider value=&#123;[appContext, setAppContext]&#125;&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">      &lt;ChildrenComponent /</span>&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"regexp\">/AppContext.Provider&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">ReactDOM.render(&lt;App /</span>&gt;, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>))</span></pre></td></tr></table></figure>\n<h6 id=\"不拆分组件，也可以使用useMemo来优化\"><a href=\"#不拆分组件，也可以使用useMemo来优化\" class=\"headerlink\" title=\"不拆分组件，也可以使用useMemo来优化\"></a>不拆分组件，也可以使用useMemo来优化</h6><p>当然我们也可以不拆分组件使用<code>useMemo</code>来将上面的代码进行优化，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useContext, useState, useMemo &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ExpensiveTree <span class=\"keyword\">from</span> <span class=\"string\">'somewhere/ExpensiveTree'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> AppContext = React.createContext()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ChildrenComponent = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> [appContext] = useContext(AppContext)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> theme = appContext.theme</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> useMemo(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &lt;ExpensiveTree theme=&#123;theme&#125; /&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">    ),</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">    [theme]</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">const App = () =&gt; &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  const [appContext, setAppContext] = useState(&#123; theme: &#123; color: 'red' &#125;, configuration: &#123; showTips: false &#125;&#125;)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  return (</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">    &lt;AppContext.Provider value=&#123;[appContext, setAppContext]&#125;&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">      &lt;ChildrenComponent /</span>&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;<span class=\"regexp\">/AppContext.Provider&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">  )</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">ReactDOM.render(&lt;App /</span>&gt;, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>))</span></pre></td></tr></table></figure>\n<h3 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a>useReducer</h3><h4 id=\"作用-6\"><a href=\"#作用-6\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p><code>useReducer</code>用最简单的话来说就是允许我们在Function Component里面像使用<a href=\"https://redux.js.org/\" target=\"_blank\" rel=\"noopener\">redux</a>一样通过<code>reducer</code>和<code>action</code>来管理我们组件状态的变换（state transition）。</p>\n<h4 id=\"用法-6\"><a href=\"#用法-6\" class=\"headerlink\" title=\"用法\"></a>用法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [state, dispatch] = useReducer(reducer, initialArg, init?)</span></pre></td></tr></table></figure>\n<p><code>useReducer</code>和<code>useState</code>类似，都是用来管理组件状态的，只不过和<code>useState</code>的<code>setState</code>不一样的是，<code>useReducer</code>返回的<code>dispatch</code>函数是用来触发某些改变<code>state</code>的<code>action</code>而不是直接设置<code>state</code>的值，至于不同的<code>action</code>如何产生新的state的值则在<code>reducer</code>里面定义。<code>useReducer</code>接收的三个参数分别是：</p>\n<ul>\n<li>reducer: 这是一个函数，它的签名是<code>(currentState, action) =&gt; newState</code>，从它的函数签名可以看出它会接收当前的state和当前<code>dispatch</code>的<code>action</code>为参数，然后返回下一个state,也就是说它负责状态转换（state transition）的工作。</li>\n<li>initialArg：如果调用者没有提供第三个<code>init</code>参数，这个参数代表的是这个<code>reducer</code>的初始状态，如果<code>init</code>参数有被指定的话，<code>initialArg</code>会被作为参数传进<code>init</code>函数来生成初始状态。</li>\n<li>init: 这是一个用来生成初始状态的函数，它的函数签名是<code>(initialArg) =&gt; initialState</code>，从它的函数签名可以看出它会接收<code>useReducer</code>的第二个参数<code>initialArg</code>作为参数，并生成一个初始状态<code>initialState</code>。<br>下面是<code>useReducer</code>的一个简单的例子：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState, useReducer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> todoId = <span class=\"number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">currentState, action</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">switch</span>(action.type) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'add'</span>:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> [...currentState, &#123;<span class=\"attr\">id</span>: todoId++, <span class=\"attr\">text</span>: action.text&#125;]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'delete'</span>:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> currentState.filter(<span class=\"function\">(<span class=\"params\">&#123; id &#125;</span>) =&gt;</span> action.id !== id)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">default</span>:</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Unsupported action type'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Todo = <span class=\"function\">(<span class=\"params\">&#123; id, text, onDelete &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;text&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;button</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">        onClick=&#123;() =&gt; onDelete(id)&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">        remove</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> [todos, dispatch] = useReducer(reducer, [])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> [text, setText] = useState(<span class=\"string\">''</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">        todos.map(<span class=\"function\">(<span class=\"params\">&#123; id, text &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &lt;Todo</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">              text=&#123;text&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">              key=&#123;id&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">              id=&#123;id&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">              onDelete=&#123;id =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">                dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'delete'</span>, id &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#125;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">            /&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">          )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;input onChange=&#123;event =&gt; setText(event.target.value)&#125; /&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;button</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">        onClick=&#123;() =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">          dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'add'</span>, text &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">          setText(<span class=\"string\">''</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">        add todo</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">    &lt;/</span>&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span>, document.getElementById('root'))</span></span></pre></td></tr></table></figure>\n<h4 id=\"注意事项-6\"><a href=\"#注意事项-6\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><h5 id=\"useReducer-vs-useState\"><a href=\"#useReducer-vs-useState\" class=\"headerlink\" title=\"useReducer vs useState\"></a>useReducer vs useState</h5><code>useReducer</code>和<code>useState</code>都可以用来管理组件的状态，它们之间最大的区别就是，<code>useReducer</code>将状态和状态的变化统一管理在<code>reducer</code>函数里面，这样对于一些复杂的状态管理会十分方便我们debug，因为它对状态的改变是<code>封闭的</code>。而由于<code>useState</code>返回的<code>setState</code>可以直接在任意地方设置我们状态的值，当我们组件的状态转换逻辑十分复杂时，它将很难debug，因为它是<code>开放的</code>状态管理。总体的来说，在<code>useReducer</code>和<code>useState</code>如何进行选择的问题上我们可以参考以下这些原则：</li>\n<li>下列情况使用<code>useState</code><ul>\n<li><code>state</code>的值是JS原始数据类型（primitives），如<code>number</code>, <code>string</code>和<code>boolean</code>等</li>\n<li><code>state</code>的转换逻辑十分简单</li>\n<li>组件内不同的状态是没有关联的，它们可以使用多个独立的<code>useState</code>来单独管理</li>\n</ul>\n</li>\n<li>下列情况使用<code>useReducer</code><ul>\n<li><code>state</code>的值是<code>object</code>或者<code>array</code></li>\n<li><code>state</code>的转换逻辑十分复杂, 需要使用<code>reducer</code>函数来统一管理</li>\n<li>组件内多个<code>state</code>互相关联，改变一个状态时也需要改变另外一个，将他们放在同一个<code>state</code>内使用reducer来统一管理</li>\n<li>状态定义在父级组件，不过需要在深层次嵌套的子组件中使用和改变父组件的状态，可以同时使用<code>useReducer</code>和<code>useContext</code>两个hook，将<code>dispatch</code>方法放进context里面来避免组件的<code>props drilling</code></li>\n<li>如果你希望你的状态管理是可预测的（predictable）和可维护的（maintainable），请<code>useReducer</code></li>\n<li>如果你希望你的状态变化可以被测试，请使用<code>useReducer</code><h2 id=\"自定义Hook\"><a href=\"#自定义Hook\" class=\"headerlink\" title=\"自定义Hook\"></a>自定义Hook</h2>上面介绍了React内置的常用Hook的用法，接着我们看一下如何编写我们自己的Hook。<h3 id=\"作用-7\"><a href=\"#作用-7\" class=\"headerlink\" title=\"作用\"></a>作用</h3>自定义Hook的目的是让我们封装一些可以在不同组件之间<strong>共用的非UI逻辑</strong>来提高我们开发业务代码的效率。<h3 id=\"什么是自定义Hook\"><a href=\"#什么是自定义Hook\" class=\"headerlink\" title=\"什么是自定义Hook\"></a>什么是自定义Hook</h3>之前我们说过Hook其实就是一个函数，所以自定义Hook也是一个函数，只不过<code>它在内部使用了React的内置Hook或者其它的自定义Hook</code>。虽然我们可以任意命名我们的自定义Hook，可是为了另其它开发者更容易理解我们的代码以及方便一些开发工具例如<code>eslint-plugin-react-hooks</code>来给我们更好地提示，我们需要将我们的Hook以<code>use</code>作为开头，并且使用驼峰发进行命名，例如<code>useLocation</code>，<code>useLocalStorage</code>和<code>useQueryString</code>等等。<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3>下面举一个最简单的自定义hook的例子：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState, useCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> useCounter = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> [counter, setCounter] = useState(<span class=\"number\">0</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> increase = useCallback(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> setCounter(<span class=\"function\"><span class=\"params\">counter</span> =&gt;</span> ++counter), [])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> decrease = useCallback(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> setCounter(<span class=\"function\"><span class=\"params\">counter</span> =&gt;</span> --counter), [])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    counter,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    increase,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    decrease</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> &#123; counter, increase, decrease &#125; = useCounter()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;div&gt;Counter: &#123;counter&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;increase&#125;&gt;increase&lt;/</span>button&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;button onClick=&#123;decrease&#125;&gt;decrease&lt;<span class=\"regexp\">/button&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">    &lt;/</span>&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span>, document.getElementById('root'))</span></span></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2>在本篇文章中我给大家介绍了React一些常用的内置Hook以及如何定义我们自己的Hook。React Hook总的来说是一个十分强大的功能，合理地使用它可以提高我们代码的复用率和业务代码的开发效率，不过它也有很多隐藏的各式各样的坑，大家在使用中一定要多加防范，我的个人建议是大家尽量使用<code>eslint-plugin-react-hooks</code>插件来辅助开发，因为它真的可以在我们开发的过程中就帮我们发现代码存在的问题，不过有时候想方设法来去掉它的警告确实是很烦人的：）。</li>\n</ul>\n</li>\n</ul>\n<p>在这个系列的下一篇文章中我将教大家如何测试我们自定义的Hook来提高我们的代码质量，大家敬请期待。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://kentcdodds.com/blog/usememo-and-usecallback\" target=\"_blank\" rel=\"noopener\">When to useMemo and useCallback</a></li>\n<li><a href=\"https://github.com/facebook/react/issues/15156\" target=\"_blank\" rel=\"noopener\">Preventing rerenders with React.memo and useContext hook</a></li>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usereducer\" target=\"_blank\" rel=\"noopener\">React Hook Reference</a></li>\n<li><a href=\"https://www.robinwieruch.de/react-usereducer-vs-usestate\" target=\"_blank\" rel=\"noopener\">useReducer vs useState in React</a></li>\n</ul>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt=\"\"></p>"},{"title":"Svelte 3 初学者完全指南","date":"2019-12-17T04:04:50.000Z","_content":"\nReact, Vue和Angular差不多占据了Web开发的大部分江山，可是最近半年[Svelte](!https://svelte.dev/)开始逐渐吸引越来越多人的眼球。这个Svelte框架到底有什么过人之处呢？本文将会为大家分析一下Svelte火起来的原因，并且通过使用Svelte去搭建一个简单的书店应用（bookshop）来帮助大家快速入门这门框架。\n\n# Svelte为什么会火?\n要想知道Svelte为什么会火，首先得看看React和Vue这些框架存在什么问题。\n<!-- more --> \n## big runtime - 大的运行时\nReact和Vue都是基于runtime的框架。所谓基于runtime的框架就是框架本身的代码也会被打包到最终的bundle.js并被发送到用户浏览器。当用户在你的页面进行各种操作改变组件的状态时，框架的runtime会根据新的组件状态（state）计算（diff）出哪些DOM节点需要被更新，从而更新视图。那么这些runtime代码到底有多大呢，可以看一些社区的[统计数据](https://gist.github.com/Restuta/cda69e50a853aa64912d):\n\n| Name                             | Size      |\n| -------------------------------- | --------- |\n| Ember 2.2.0                      | 435K      |\n| Ember 1.13.8                     | 486K      |\n| Angular 2                        | 566K      |\n| Angular 2 + Rx                   | **766K**  |\n| Angular 1.4.5                    | 143K      |\n| Vue 2.4.2                        | 58.8K     |\n| Inferno 1.2.2                    | 48K       |\n| Preact 7.2.0                     | **16K**   |\n| React 0.14.5 + React DOM         | **133K**  |\n| React 0.14.5 + React DOM + Redux | 139K      |\n| React 16.2.0 + React DOM         | **97.5K** |\n\n从上面的表格可以看出常用的框架中，最小的Vue都有58k，React更有97.5k。换句话说如果你使用了React作为开发的框架，即使你的业务代码很简单，你的首屏bundle size都要100k起步。当然100k不算很大，可是事物都是相对的，相对于大型的管理系统来说100k肯定不算什么，可是对于那些首屏加载时间敏感的应用（例如淘宝，京东主页），100k的bundle size在一些网络环境不好的情况或者手机端真的会影响用户体验。那么如何减少框架的runtime代码大小呢？要想减少runtime代码的最有效的方法就是压根不用runtime。其实回想一下Web开发的历史，很早之前在用Jquery和Bootstrap一把梭的时候，我们的代码不就是不包含runtime的吗？当数据变化时直接通过JavaScript去改变原生DOM节点，没有框架那一系列diff和调度（React Fiber）的过程。这时你可能会问，要减少bundle size真的要回到那个刀耕火种的时代吗？有没有那种既可以让我用接近React和Vue的语法编写代码，同时又不包含框架runtime的办法。这恰恰就是Svelte要做的东西，它采用了Compiler-as-framework的理念，将框架的概念放在编译时而不是运行时。你编写的应用代码在用诸如Webpack和Rollup等工具打包的时候会被直接转换为JavaScript对DOM节点的原生操作，从而让bundle.js不包含框架的runtime。那么Svelte到底可以将bundle size减少多少呢？以下是[RealWorld](https://www.freecodecamp.org/news/a-realworld-comparison-of-front-end-frameworks-with-benchmarks-2019-update-4be0d3c78075/)这个项目的统计：![](/images/svelte3-intro/bundle-size.png)\n由上面的图表可以看出实现相同功能的应用，Svelte的bundle size大小是Vue的1/4，是React的1/20！单纯从这个数据来看，Svelte这个框架对bundle size的优化真的很大。\n\n## 低效的Virtual DOM Diff\n什么？Virtual DOM不是一直都很高效的吗？其实Virtual DOM高效是一个误解。说Virtual DOM高效的一个理由就是它不会直接操作原生的DOM节点，因为这个很消耗性能。当组件状态变化时它会通过某些diff算法去计算出本次数据更新真实的视图变化，然后只改变“需要改变”的DOM节点。用过React的人可能都会体会到React并没有想象中那么高效，框架有时候会做很多无用功，这体现在很多组件会被“无缘无故”进行重渲染（re-render）。注意这里说的re-render和对原生DOM进行操作是两码事！所谓的re-render是你定义的class Component的render方法被重新执行，或者你的组件函数被重新执行。组件被重渲染是因为Vitual DOM的高效是建立在diff算法上的，而要有diff一定要将组件重渲染才能知道组件的新状态和旧状态有没有发生改变，从而才能计算出哪些DOM需要被更新。你可能会说React Fiber不是出来了吗，这个应该不是问题了吧？其实Fiber这个架构解决的问题是不让组件的重渲染和reconcile的过程阻塞主线程的执行，组件重渲染的问题依然存在，而且据反馈，React Hooks出来后组件的重渲染更加频繁了。正是因为框架本身很难避免无用的渲染，React才允许你使用一些诸如shouldComponentUpdate，PureComponent和useMemo的API去告诉框架哪些组件不需要被重渲染，可是这也就引入了很多模板代码（boilerplate）。如果大家想了解更多关于Virtual DOM存在的问题，可以看一下[virtual dom is pure overhead](https://svelte.dev/blog/virtual-dom-is-pure-overhead)这篇文章。\n\n那么如何解决Vitual DOM算法低效的问题呢？最有效的解决方案就是**不用Virtual DOM**！其实作为一个框架要解决的问题是当数据发生改变的时候相应的DOM节点会被更新（reactive），Virtual DOM需要比较新老组件的状态才能达到这个目的，而更加高效的办法其实是**数据变化的时候直接更新对应的DOM节点**：\n```javascript\nif (changed.name) {\n  text.data = name;\n}\n```\n这就是Svelte采用的办法。Svelte会在代码编译的时候将每一个状态的改变转换为对应DOM节点的操作，从而在组件状态变化的时候快速高效地对DOM节点进行更新。根据[js framework benchmark](https://krausest.github.io/js-framework-benchmark/current.html)的统计，Svelte在对一些大列表操作的时候性能比React和Vue都要好。\n\n# 什么是Svelte?\nSvelte是由[RollupJs](https://rollupjs.org/guide/en/)的作者Rich Harris编写的编译型框架，没了解过RollupJs的同学可以去它官网了解一下，它其实是一个类似于Webpack的打包工具。Svelte这个框架具有以下特点：\n* 和React，Vue等现代Web框架的用法很相似，它可以允许开发者快速开发出具有流畅用户体验的Web应用。\n* 不使用**Virtual DOM**，也不是一个runtime的库。\n* 基于Compiler as framework的理念，会在编译的时候将你的应用转换为原生的DOM操作。\n* 默认就支持类似于CSS modules的CSS scope功能，让你避免CSS样式冲突的困扰。\n* 原生支持CSS animation。\n* 极其容易的组件状态管理（state management），减少开发者的模板代码编写（boilerplate less）。\n* 支持反应式定义（Reactive statement）。\n* 极其容易的应用全局状态管理，框架本身自带全局状态，类似于React的Redux和Vue的Vuex。\n* 支持context，避免组件的props drilling。\n\nSvelte这个框架与Vue和React之间最大的区别是它除了管理组件的状态和追踪他们的渲染，还有很多其他有用的功能。例如它原生支持CSS scope和CSS animation。如果你用React或者Vue是需要引入第三方库来实现同样的功能的，而第三方依赖的引入会给开发者增加学习和维护的成本。\n\n# 用Svelte搭建一个Bookshop应用\n接下来我们会从头开始搭建一个基于Svelte框架的简单书店应用bookshop，通过这个demo，希望大家可以理解Svelte的一些基本概念和掌握它的一些基本用法并能够使用Svelte去搭建更加复杂的应用。\n## 应用功能\nBookshop应用支持以下功能：\n* 管理员录入新图书\n* 展示书店图书列表\n* 将图书加到购物车\n* 展示购物车的数据信息\n\n## 对学习者的技术要求\n* 掌握html，css和javascript的基础用法\n* 有过React或者Vue的相关开发经验最佳\n\n项目的源代码可以在我的[github仓库](https://github.com/XiaocongDong/svelte-bookshop)找到。\n\n## 项目搭建\n首先在我们的本地开发环境新建一个项目文件夹：\n```shell\nmkdir svelte-bookshop\n```\n接着用svelte官方的脚手架去初始化我们的应用：\n```shell\nnpx degit sveltejs/template svelte-bookshop\ncd svelte-bookshop\n\nyarn\nyarn dev\n```\n[degit](https://github.com/Rich-Harris/degit)这个命令会将github上面的项目文件直接拷贝到某个本地文件夹，这里使用到的svelte/tempalte模板项目的github地址是[这个](https://github.com/sveltejs/template)。以上命令成功运行后，访问[http://localhost:5000](http://localhost:5000/)你会看到如下界面：\n![](/images/svelte3-intro/bootstrap.png)\n界面很简单就是展示一个hello world，接着让我们看一下生成的项目目录结构：\n![](/images/svelte3-intro/bootstrap-structure.png)\n生成的代码主要包含以下文件目录结构：\n* rollup.config.js，这个是rollup的配置文件，类似于webpack.config.js，里面指定了项目的入口文件是src/main.js。\n* src文件夹，这个文件夹用来存储我们的项目源代码，现在只有一个项目的主入口文件main.js和一个组件文件App.svelte。\n* public文件夹，这个文件夹是用来存储项目的静态文件（index.html, global.css和favicon.png）和rollup编译生成的静态文件（build文件夹底下的bundle.js和bundle.css以及它们各自的source map）。\n\n接着让我们具体看一下src文件夹底下的各个文件内容\n### src/App.svelte\n```javascript\n<script>\n\texport let name;\n</script>\n\n<main>\n\t<h1>Hello {name}!</h1>\n\t<p>Visit the <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a> to learn how to build Svelte apps.</p>\n</main>\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>\n```\n这个文件定义了一个叫做App的Svelte组件，这里要注意App.svelte文件内并没有定义组件的名称，**组件的名称是由它的文件名确定的**。**Svelte组件的文件名都是以.svelte结尾的**，一个组件文件通常会包含以下三部分内容：\n* **\\<script\\>标签**，和组件相关的任何JavaScript代码都可以放在这里，例如组件的状态定义或者一些异步Ajax请求。在这个App.svelte文件里面没有定义局部的组件状态，而是定义并export了一个name变量。对于Svelte框架，export一个变量就是将这个变量指定为当前组件的一个外部参数 - props。这种做法和React里面的将props作为组件的第一个参数的区别很大，可能大家一开始有点不习惯，不过后面习惯了，你可能也会爱上这种写法的。\n* **\\<style\\>标签**，和组件相关的CSS代码会放在这里。注意这里的CSS是局部生效的（scope），也就是说App.svelte中的h1标签的样式只会对App组件内的h1标签生效，而对项目其他的包括这个组件的子节点的h1标签失效。具体可以用浏览器的调试工具看一下h1标签的实际样式就明白了: ![](/images/svelte3-intro/bootstrap-h1-css.png)由上图可以看出Svelte在生成代码的时候会用一些随机的哈希值将组件的样式和其它组件的样式区别开来。\n* **组件的HTML标签**。组件的HTML标签可以直接在文件中写出来，例如App组件的HTML部分是：\n```html\n<main>\n\t<h1>Hello {name}!</h1>\n\t<p>Visit the <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a> to learn how to build Svelte apps.</p>\n</main>\n```\nApp组件最外层是一个main标签，main标签里面有一个h1标签和p标签，其中h1标签里面是一个`Hello `字符串加一个用花括号包裹的插入字符串（interpolation），在React JSX里面的写法应该是`Hello ${name}`，它们都表示这个位置的字符串就是name这个变量的内容。至于这个name变量就是我们在上面用export定义的外部参数。\n\n总的来说Svelte会将所有和组件相关的JavaScript，CSS和HTML代码都放在同一个文件里面，这个做法有点像Vue，不过和Vue相比它的模板代码更少。\n\n### src/main.js\n```javascript\nimport App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\tname: 'world'\n\t}\n});\n\nexport default app;\n```\n这个文件内容很简单，就是将刚刚定义的App组件挂载到目标节点body上，而且为App组件提供了值为`world`的name参数。这段代码的作用和React中的ReactDOM.render函数一样。\n\n接着让我们看一下生成的静态代码是什么样子的。\n### public/build/bundle.js\n先看生成的JavaScript主文件bundle.js，由于原文件比较大，我只截取了其中比较关键的一部分：\n```javascript\n/* src/App.svelte generated by Svelte v3.16.4 */\n\nconst file = \"src/App.svelte\";\n\nfunction create_fragment(ctx) {\n  let main;\n  let h1;\n  let t0;\n  let t1;\n  let t2;\n  let t3;\n  let p;\n  let t4;\n  let a;\n  let t6;\n\n  const block = {\n    c: function create() {\n      main = element(\"main\");\n      h1 = element(\"h1\");\n      t0 = text(\"Hello \");\n      t1 = text(/*name*/ ctx[0]);\n      t2 = text(\"!\");\n      t3 = space();\n      p = element(\"p\");\n      t4 = text(\"Visit the \");\n      a = element(\"a\");\n      a.textContent = \"Svelte tutorial\";\n      t6 = text(\" to learn how to build Svelte apps.\");\n      attr_dev(h1, \"class\", \"svelte-1tky8bj\");\n      add_location(h1, file, 5, 1, 46);\n      attr_dev(a, \"href\", \"https://svelte.dev/tutorial\");\n      add_location(a, file, 6, 14, 83);\n      add_location(p, file, 6, 1, 70);\n      attr_dev(main, \"class\", \"svelte-1tky8bj\");\n      add_location(main, file, 4, 0, 38);\n    },\n    l: function claim(nodes) {\n      throw new Error(\"options.hydrate only works if the component was compiled with the `hydratable: true` option\");\n    },\n    m: function mount(target, anchor) {\n      insert_dev(target, main, anchor);\n      append_dev(main, h1);\n      append_dev(h1, t0);\n      append_dev(h1, t1);\n      append_dev(h1, t2);\n      append_dev(main, t3);\n      append_dev(main, p);\n      append_dev(p, t4);\n      append_dev(p, a);\n      append_dev(p, t6);\n    },\n    p: function update(ctx, dirty) {\n      if (dirty[0] & /*name*/ 1) set_data_dev(t1, /*name*/ ctx[0]);\n    },\n    i: noop,\n    o: noop,\n    d: function destroy(detaching) {\n      if (detaching) detach_dev(main);\n    }\n  };\n\n  dispatch_dev(\"SvelteRegisterBlock\", {\n    block,\n    id: create_fragment.name,\n    type: \"component\",\n    source: \"\",\n    ctx\n  });\n\n  return block;\n}\n```\n这段代码对应的就是我们刚刚定义的App组件，`create_fragment`方法会接受一个上下文对象`ctx`参数并返回一个代表组件的block对象。\n#### block\n这个对象主要包含以下四个重要的方法`c`（create），`m`（mount），`p`（update）和`d`（destroy）。\n#### c（create）\n```javascript\nfunction create() {\n  main = element(\"main\");\n  h1 = element(\"h1\");\n  t0 = text(\"Hello \");\n  t1 = text(/*name*/ ctx[0]);\n  t2 = text(\"!\");\n  t3 = space();\n  p = element(\"p\");\n  t4 = text(\"Visit the \");\n  a = element(\"a\");\n  a.textContent = \"Svelte tutorial\";\n  t6 = text(\" to learn how to build Svelte apps.\");\n  attr_dev(h1, \"class\", \"svelte-1tky8bj\");\n  add_location(h1, file, 5, 1, 46);\n  attr_dev(a, \"href\", \"https://svelte.dev/tutorial\");\n  add_location(a, file, 6, 14, 83);\n  add_location(p, file, 6, 1, 70);\n  attr_dev(main, \"class\", \"svelte-1tky8bj\");\n  add_location(main, file, 4, 0, 38);\n}\n```\n这个函数的功能是生成（create）和App组件相关的一些原生DOM节点，并为它们添加一些元数据（meta data）。\n#### m（mount）\n```javascript\nfunction mount(target, anchor) {\n  insert_dev(target, main, anchor);\n  append_dev(main, h1);\n  append_dev(h1, t0);\n  append_dev(h1, t1);\n  append_dev(h1, t2);\n  append_dev(main, t3);\n  append_dev(main, p);\n  append_dev(p, t4);\n  append_dev(p, a);\n  append_dev(p, t6);\n}\n```\n这个函数的功能是挂载c函数生成的那些DOM节点。\n#### p（update）\n```javascript\nfunction update(ctx, dirty) {\n  if (dirty[0] & /*name*/ 1) set_data_dev(t1, /*name*/ ctx[0]);\n}\n```\np函数会在ctx上下文更新的时候去更新对应DOM节点的属性。大概就是当上下文变化的时候，检查一下name这个变量有没有变化，如果发生变化则更新DOM节点。\n#### d（destroy）\n```javascript\nfunction destroy(detaching) {\n  if (detaching) detach_dev(main);\n}\n```\nd函数是用来删除App组件的。\n\n看完Svelte生成的代码后，我想你对我在文章开头说的Compiler-as-framework等概念应该有了更加深刻的认识，Svelte和React（Vue也类似）不一样的是，**React应用在打包完之后，还保留了如React.createElement，setState等框架函数的调用代码，而Svelte编译完之后，框架代码会被转化为操作原生DOM节点的代码。**\n\n大概了解了项目的组织结构后，让我们开始正式搭建书店bookshop应用。\n\n## 组件定义\n### HTML markup\n首先让我们创建一个展示书本具体信息的卡片组件，在src文件夹底下新建一个BookCard.svelte文件，里面定义一下卡片组件的HTML markup：\n```html\n// src/BookCard.svelte\n<div>\n  <h1>title</h1>\n  <div>price</div>\n  <div>description</div>\n  <button>添加到购物车</button>\n</div>\n```\n然后在App.svelte组件里面使用BookCard组件:\n```html\n// src/App.svelte\n<script>\n  import BookCard from \"./BookCard.svelte\";\n</script>\n\n<style>\n ...\n</style>\n\n<main>\n  <h1>Welcome to my online bookstore!</h1>\n  <section>\n    <BookCard />\n  </section>\n</main>\n```\n**使用自定义的组件的方法很简单：先在script标签里面导入新定义的组件BookCard，然后将该组件写在App组件的HTML markup里面，语法和JSX一样的。**这时候再查看页面的内容：![](/images/svelte3-intro/bookcard-markup.png)\n\n### CSS\nBookCard组件虽然出来了，我们得定义一些CSS让它变得更好看一点：\n```html\n// src/BookCard.svelte\n<style>\n  .card {\n    text-align: left;\n    border-radius: 5px;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);\n    padding: 10px;\n  }\n\n  h1 {\n    font-size: 20px;\n  }\n\n  h2 {\n    font-size: 15px;\n    color: #999;\n  }\n\n  button {\n    background-color: #ff3e00;\n    color: white;\n    border-radius: 5px;\n    cursor: pointer;\n    border: none;\n  }\n</style>\n\n<div class=\"card\">\n  <h1>title</h1>\n  <h2>price</h2>\n  <p>description</p>\n  <button>添加到购物车</button>\n</div>\n```\n**给组件定义样式的方法就是新建一个style标签然后把该组件相关的样式写在这个标签内，注意这里的样式只会对组件内的元素有效，不会影响到其他组件的样式的。**加完样式后，界面应该会变成这个样子：![](/images/svelte3-intro/bookcard-css.png)\n\n### props定义\n书本的具体信息应该是由传入的props指定的。**Svelte组件的props要用export来指明，指明的props变量可以直接被组件使用**：\n```html\n// src/BookCard.svelte\n<script>\n  export let title;\n  export let price;\n  export let description;\n</script>\n\n<style>\n...\n</style>\n\n<div class=\"card\">\n  <h1>title</h1>\n  <h2>price</h2>\n  <p>description</p>\n  <button>添加到购物车</button>\n</div>\n```\n### 变量使用\n定义和引入的变量可以在组件的HTML markup中直接使用，具体用法是在Markup中用花括号（curly braces）引用该变量，具体代码时：\n```html\n// src/BookCard.svelte\n<script>\n  export let title;\n  export let price;\n  export let description;\n</script>\n\n<style>\n...\n</style>\n\n<div class=\"card\">\n  <h1>{title}</h1>\n  <h2>${price}</h2>\n  <p>{description}</p>\n  <button>添加到购物车</button>\n</div>\n```\n### 组件参数传递\n然后在父级组件App中，将BookCard需要的参数传给该组件：\n```html\n// src/App.svelte\n<script>\n  ...\n  let title = \"JavaScript高级编程\";\n  let price = 99.0;\n  let description = \"一起来学习JavaScript啊\";\n</script>\n\n<style>\n  ...\n</style>\n\n<main>\n  <h1>Welcome to my online bookstore!</h1>\n  <section>\n    <BookCard title={title} price={price} description={description} />\n  </section>\n</main>\n```\n这时候书本卡片的内容应该是传入的参数了：![](/images/svelte3-intro/bookcard-props.png)\n对于组件参数传递，Svelte还提供了以下更加方便的写法：\n```html\n// src/App.svelte\n<main>\n  <h1>Welcome to my online bookstore!</h1>\n  <section>\n    <BookCard {title} {price} {description} />\n  </section>\n</main>\n```\n## 录入书本信息\n作为一个书店，管理员应该可以录入新的图书，所以我们给App组件添加一个简单的表单来让用户录入数据：\n```html\n// src/App.svelte\n<script>\n  ...\n</script>\n\n<style>\n  ....\n</style>\n\n<main>\n  <h1>Welcome to my online bookstore!</h1>\n  <section>\n    <h2>Add new book</h2>\n    <label for=\"title\">Title</label>\n    <input type=\"text\" id=\"title\" value={title} />\n    <label for=\"price\">Price</label>\n    <input type=\"number\" id=\"price\" value={price} />\n    <label for=\"description\">Description</label>\n    <textarea rows=\"3\" id=\"description\" value={description} />\n  </section>\n  <section>\n    <BookCard {title} {price} {description} />\n  </section>\n</main>\n```\n我们为App组件新建了一些input标签，并指定这些input标签的值为我们之前定义的变量，这时候我们试着改变输入框的内容：![](/images/svelte3-intro/book-input-not-bind.gif)\n虽然输入框的初始值是变量对应的值，可是变量的值并不会随着输入框的值的改变而改变，也就是它们的值没有”绑定起来“，要想实现双向数据绑定，我们可以给输入框添加一个监听事件。\n### 事件绑定\n**我们可以使用on关键字加事件名称给DOM添加事件监听器**，以下代码将会监听input输入框的`input`事件：\n```html\n<script>\n  ...\n  let title = \"JavaScript高级编程\";\n  ...\n\n  function handleTitleChange(event) {\n    title = event.target.value;\n  }\n</script>\n\n<style>\n  ...\n</style>\n\n<main>\n  <h1>Welcome to my online bookstore!</h1>\n  <section>\n    <h2>Add new book</h2>\n    <label for=\"title\">Title</label>\n    <input type=\"text\" id=\"title\" value={title} on:input={handleTitleChange} />\n    ...\n  </section>\n</main>\n```\n这时候我们再改变input的值，会发现卡片里面的内容也发生了改变，说明我们成功改变了`title`变量的值：![](/images/svelte3-intro/book-input-event-bind.gif)\n\n### 自动数据双向绑定\n可是如果每一个input标签都要手动添加一个事件监听的话我们的代码会有很多模板代码，为了解决这个问题，**Svelte允许我们直接用bind关键字加要绑定的属性进行双向数据绑定**：\n```html\n// src/App.svelte\n<script>\n  ...\n  let title = \"JavaScript高级编程\";\n  let price = 99.0;\n  let description = \"一起来学习JavaScript啊\";\n</script>\n\n<style>\n  ...\n</style>\n\n<main>\n  <h1>Welcome to my online bookstore!</h1>\n  <section>\n    <h2>Add new book</h2>\n    <label for=\"title\">Title</label>\n    <input type=\"text\" id=\"title\" bind:value={title} />\n    <label for=\"price\">Price</label>\n    <input type=\"number\" id=\"price\" bind:value={price} />\n    <label for=\"description\">Description</label>\n    <textarea rows=\"3\" id=\"description\" bind:value={description} />\n  </section>\n  ...\n</main>\n```\n这时候我们就可以把各个变量的初始值去掉：\n```html\n// src/App.svelte\n<script>\n  let title = \"\";\n  let price = 0;\n  let description = \"\";\n</script>\n```\n这时候我们页面的输入框和所有变量都”绑定“起来了：![](/images/svelte3-intro/book-input-bind.gif)\n## 展示书本列表\n我们的书店应该不止一本书，要用一个数组把所有的书本存起来：\n```html\n// src/App.svelte\n<script>\n  ...\n  let books = [];\n  ...\n</script>\n```\n接着我们再为刚刚新增的表单添加一个提交按钮，用户填完书本的信息后点击提交会新建一个book对象，新建的book对象会被加到books列表中去：\n```html\n<script>\n  ...\n  let books = [];\n\n  function handleAddBook() {\n    books = books.concat({ title, price, description });\n    title = \"\";\n    price = 0;\n    description = \"\";\n  }\n  ...\n</script>\n\n<style>\n  ...\n  button {\n    background-color: #ff3e00;\n    color: white;\n    border-radius: 5px;\n    cursor: pointer;\n    border: none;\n  }\n  ...\n</style>\n\n<main>\n  <h1>Welcome to my online bookstore!</h1>\n  <section>\n    <h2>Add new book</h2>\n    <label for=\"title\">Title</label>\n    <input type=\"text\" id=\"title\" bind:value={title} />\n    <label for=\"price\">Price</label>\n    <input type=\"number\" id=\"price\" bind:value={price} />\n    <label for=\"description\">Description</label>\n    <textarea rows=\"3\" id=\"description\" bind:value={description} />\n    <div>\n      <button on:click={handleAddBook}>add book</button>\n    </div>\n  </section>\n  ...\n</main>\n```\n### 展示列表数据\n**我们可以使用each语法块去展示books列表的数据**：\n```html\n// src/App.svelte\n<script>\n  ....\n\n  let books = [];\n\n  function handleAddBook() {\n    books = books.concat({ title, price, description });\n    title = \"\";\n    price = 0;\n    description = \"\";\n  }\n</script>\n\n<main>\n  ...\n  <section>\n    {#each books as book}\n      <BookCard\n        title={book.title}\n        price={book.price}\n        description={book.description} />\n    {/each}\n  </section>\n</main>\n```\n**你也可以直接在each块定义的时候解构出被递归对象里面的内容**，上面的代码变为：\n```html\n// src/App.svelte\n  ...\n  <section>\n    {#each books as { title, price, description }}\n      <BookCard {title} {price} {description} />\n    {/each}\n  </section>\n  ...\n```\n代码更改完后，你的页面就可以录入新书并展示书的列表了：![](/images/svelte3-intro/book-list.gif)\n## 购物车功能\n首先我们要为BookCard这个组件的按钮添加一个点击事件：用户点击书本卡片按钮的时候这本书会被加到购物车中。要实现这个效果我们可以为BookCard按钮定义一个**handleAddBook**的参数，这个参数由外面组件来提供，**handleAddBook**函数会在用户点击BookCard按钮的时候被调用并将该书添加购物车中。代码如下：\n```html\n// src/BookCard.svelte\n<script>\n  ...\n  export let handleAddToCart;\n</script>\n\n<style>\n  ...\n</style>\n\n<div class=\"card\">\n  <h1>{title}</h1>\n  <h2>${price}</h2>\n  <p>{description}</p>\n  <button on:click={() => handleAddToCart(title)}>添加到购物车</button>\n</div>\n```\n```html\n// src/App.svelte\n<script>\n  ...\n  let booksInCart = [];\n\n  function handleAddToCart(title) {\n    let bookNeededToBeAdded = books.find(book => book.title == title);\n    booksInCart = booksInCart.concat(bookNeededToBeAdded);\n  }\n</script>\n\n<style>\n  ...\n</style>\n\n<main>\n  ...\n  <section>\n    <h2>购物车</h2>\n    {#each booksInCart as { title, price }}\n      <div>名称: {title}, 价钱: {price}</div>\n    {/each}\n  </section>\n  <section>\n    <h2>书单</h2>\n    {#each books as { title, price, description }}\n      <BookCard {title} {price} {description} {handleAddToCart} />\n    {/each}\n  </section>\n</main>\n```\n这时候我们就可以看到我们的购物车了：![](/images/svelte3-intro/book-cart.gif)\n### 条件判断\n**Svelte可以用if语法块根据不同条件展示不同的内容**，我们可以在购物车为空的时候给用户展示一个空的状态：\n```html\n// src/App.svelte\n...\n<section>\n  <h2>购物车</h2>\n  {#if booksInCart.length === 0}\n    <p>购物车空的哦~</p>\n  {:else}\n    {#each booksInCart as { title, price }}\n      <div>名称: {title}, 价钱: {price}</div>\n    {/each}\n  {/if}\n</section>\n...\n```\n这时候界面变为：![](/images/svelte3-intro/book-cart-if.gif)\n\n## 展示购物车统计信息\n我们再为书店添加一个帮用户统计购物车的书本的功能，可以展示现在购物车里面的书本总数和总金额，代码如下:\n```html\n// src/App.svelte\n<script>\n  ...\n  let booksInCart = [];\n\n  let booksNumInCart = booksInCart.length;\n  let totalCheckoutPrice = booksInCart.reduce(\n    (sum, book) => sum + book.price,\n    0\n  );\n  ...\n</script>\n\n...\n<section>\n  <h2>购物车</h2>\n  <div>书本总数：{booksNumInCart}</div>\n  <div>订单金额：{totalCheckoutPrice}</div>\n  ...\n</section>\n...\n```\n这时候我们操作界面却发现购物车的数据变化时统计数据竟然没有变化：![](/images/svelte3-intro/book-cart-total.gif)\n数据没有变化的原因是我们每次添加书本到购物车的时候没有手动地去改变`booksNumInCart`和`totalCheckoutPrice`的值。不过如果需要在购物车数据发生变化的时候手动维护统计数据的话，代码会变得很丑陋。\n### 反应式定义\n对于这种情况，Svelte提供了**反应式定义（Reactive assignment）**的方法来表示这种联动的数据，**具体做法就是用`$`符号定义变量而不是let**，以下是代码：\n```html\n<script>\n  ...\n  let booksInCart = [];\n\n  $: booksNumInCart = booksInCart.length;\n  $: totalCheckoutPrice = booksInCart.reduce(\n    (sum, book) => sum + book.price,\n    0\n  );\n  ...\n</script>\n```\n这样当`booksInCart`这个数据发生改变的时候，`booksNumInCart`和`totalCheckoutPrice`这个两个变量就会自动被重新计算。\n这时候我们再对界面进行操作的话，会发现统计数据会随着购物车的数据变化而自动发生改变：![](/images/svelte3-intro/book-cart-reactive.gif)\n\n## 总结\n我们的简易书店系统（bookshop）大概就实现了这些功能，现在来总结一下在开发项目的时候覆盖到的Svelte框架基础知识：\n* 组件定义 - component definition\n* 变量使用 - using variables \n* props定义和参数传递 - props definition and passing\n* 事件监听 - event listening\n* 数据绑定 - data binding\n* 条件判断 - if condition\n* 列表数据展示 - each block\n\n其实Svelte框架还有很多我没有提到的有用的功能特性，例如：\n* 事件传递 - event forwarding\n* 生命周期函数 - life-cycle functions\n* 全局状态管理 - stores\n* 上下文管理 - context\n* CSS 动画 - css animation\n*  ...\n\n由于文章篇幅的限制我在这里没有覆盖Svelte所有的属性，大家兴趣可以看一下svelte的[官方教程](https://svelte.dev/tutorial/basics)。\n\n# 我个人对Svelte框架的一些看法\n个人觉得由于Virtual DOM的各种问题，Compiler as framework这个思路应该是前端框架发展的一个趋势。Svelte目前实现的功能虽然已经非常不错了，可是就目前来说我觉得它还有以下问题：\n* Scalability - 可扩展性。React和Vue等框架自带的runtime虽然会增加首屏加载的bundle.js，可是当项目变得越来越大的时候，框架的runtime在bundle.js里面占据的比例也会越来越小，相反由于Svelte生成的代码的封装性没有React和Vue的好，它在大型项目中会不会堆积很多重复的代码呢？这个时候我们就得考虑一下是不是存在一个Svelte生成的代码大于React和Vue生成的代码的阈值了。这个问题现在还没有具体的答案，只能等后人实践的时候给出答案了，大家有兴趣可以看一下作者在[github上面的讨论](https://github.com/sveltejs/svelte/issues/2546)。\n* Ecosystem - 生态。作为一个最近才火起来的框架，Svelte的生态还远远不及已经普及那么多年的React和Vue，这也是我觉得就目前来说Svelte还撼动不了React和Vue的地位的原因。不过Svelte会不会因为它的先进性而迎来生态大爆发呢？我们可以拭目以待。\n\n不过有一点可以肯定的是，Svelte由于在一些不复杂的项目中生成的代码远远比React，Vue和Angular小的优势会在一些性能不那么好的嵌入式操作系统中大放异彩。\n\n# 学习Svelte有用的链接\n* [作者的Rethinking reactivity演讲](https://www.youtube.com/watch?v=AdNJ3fydeao)\n* [Svelte官网](https://svelte.dev/)\n* [Svelte github仓库](https://github.com/sveltejs/svelte)\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","source":"_posts/Svelte-3-初学者完全指南.md","raw":"---\ntitle: Svelte 3 初学者完全指南\ntags: Svelte\ndate: 2019-12-17 12:04:50\n---\n\nReact, Vue和Angular差不多占据了Web开发的大部分江山，可是最近半年[Svelte](!https://svelte.dev/)开始逐渐吸引越来越多人的眼球。这个Svelte框架到底有什么过人之处呢？本文将会为大家分析一下Svelte火起来的原因，并且通过使用Svelte去搭建一个简单的书店应用（bookshop）来帮助大家快速入门这门框架。\n\n# Svelte为什么会火?\n要想知道Svelte为什么会火，首先得看看React和Vue这些框架存在什么问题。\n<!-- more --> \n## big runtime - 大的运行时\nReact和Vue都是基于runtime的框架。所谓基于runtime的框架就是框架本身的代码也会被打包到最终的bundle.js并被发送到用户浏览器。当用户在你的页面进行各种操作改变组件的状态时，框架的runtime会根据新的组件状态（state）计算（diff）出哪些DOM节点需要被更新，从而更新视图。那么这些runtime代码到底有多大呢，可以看一些社区的[统计数据](https://gist.github.com/Restuta/cda69e50a853aa64912d):\n\n| Name                             | Size      |\n| -------------------------------- | --------- |\n| Ember 2.2.0                      | 435K      |\n| Ember 1.13.8                     | 486K      |\n| Angular 2                        | 566K      |\n| Angular 2 + Rx                   | **766K**  |\n| Angular 1.4.5                    | 143K      |\n| Vue 2.4.2                        | 58.8K     |\n| Inferno 1.2.2                    | 48K       |\n| Preact 7.2.0                     | **16K**   |\n| React 0.14.5 + React DOM         | **133K**  |\n| React 0.14.5 + React DOM + Redux | 139K      |\n| React 16.2.0 + React DOM         | **97.5K** |\n\n从上面的表格可以看出常用的框架中，最小的Vue都有58k，React更有97.5k。换句话说如果你使用了React作为开发的框架，即使你的业务代码很简单，你的首屏bundle size都要100k起步。当然100k不算很大，可是事物都是相对的，相对于大型的管理系统来说100k肯定不算什么，可是对于那些首屏加载时间敏感的应用（例如淘宝，京东主页），100k的bundle size在一些网络环境不好的情况或者手机端真的会影响用户体验。那么如何减少框架的runtime代码大小呢？要想减少runtime代码的最有效的方法就是压根不用runtime。其实回想一下Web开发的历史，很早之前在用Jquery和Bootstrap一把梭的时候，我们的代码不就是不包含runtime的吗？当数据变化时直接通过JavaScript去改变原生DOM节点，没有框架那一系列diff和调度（React Fiber）的过程。这时你可能会问，要减少bundle size真的要回到那个刀耕火种的时代吗？有没有那种既可以让我用接近React和Vue的语法编写代码，同时又不包含框架runtime的办法。这恰恰就是Svelte要做的东西，它采用了Compiler-as-framework的理念，将框架的概念放在编译时而不是运行时。你编写的应用代码在用诸如Webpack和Rollup等工具打包的时候会被直接转换为JavaScript对DOM节点的原生操作，从而让bundle.js不包含框架的runtime。那么Svelte到底可以将bundle size减少多少呢？以下是[RealWorld](https://www.freecodecamp.org/news/a-realworld-comparison-of-front-end-frameworks-with-benchmarks-2019-update-4be0d3c78075/)这个项目的统计：![](/images/svelte3-intro/bundle-size.png)\n由上面的图表可以看出实现相同功能的应用，Svelte的bundle size大小是Vue的1/4，是React的1/20！单纯从这个数据来看，Svelte这个框架对bundle size的优化真的很大。\n\n## 低效的Virtual DOM Diff\n什么？Virtual DOM不是一直都很高效的吗？其实Virtual DOM高效是一个误解。说Virtual DOM高效的一个理由就是它不会直接操作原生的DOM节点，因为这个很消耗性能。当组件状态变化时它会通过某些diff算法去计算出本次数据更新真实的视图变化，然后只改变“需要改变”的DOM节点。用过React的人可能都会体会到React并没有想象中那么高效，框架有时候会做很多无用功，这体现在很多组件会被“无缘无故”进行重渲染（re-render）。注意这里说的re-render和对原生DOM进行操作是两码事！所谓的re-render是你定义的class Component的render方法被重新执行，或者你的组件函数被重新执行。组件被重渲染是因为Vitual DOM的高效是建立在diff算法上的，而要有diff一定要将组件重渲染才能知道组件的新状态和旧状态有没有发生改变，从而才能计算出哪些DOM需要被更新。你可能会说React Fiber不是出来了吗，这个应该不是问题了吧？其实Fiber这个架构解决的问题是不让组件的重渲染和reconcile的过程阻塞主线程的执行，组件重渲染的问题依然存在，而且据反馈，React Hooks出来后组件的重渲染更加频繁了。正是因为框架本身很难避免无用的渲染，React才允许你使用一些诸如shouldComponentUpdate，PureComponent和useMemo的API去告诉框架哪些组件不需要被重渲染，可是这也就引入了很多模板代码（boilerplate）。如果大家想了解更多关于Virtual DOM存在的问题，可以看一下[virtual dom is pure overhead](https://svelte.dev/blog/virtual-dom-is-pure-overhead)这篇文章。\n\n那么如何解决Vitual DOM算法低效的问题呢？最有效的解决方案就是**不用Virtual DOM**！其实作为一个框架要解决的问题是当数据发生改变的时候相应的DOM节点会被更新（reactive），Virtual DOM需要比较新老组件的状态才能达到这个目的，而更加高效的办法其实是**数据变化的时候直接更新对应的DOM节点**：\n```javascript\nif (changed.name) {\n  text.data = name;\n}\n```\n这就是Svelte采用的办法。Svelte会在代码编译的时候将每一个状态的改变转换为对应DOM节点的操作，从而在组件状态变化的时候快速高效地对DOM节点进行更新。根据[js framework benchmark](https://krausest.github.io/js-framework-benchmark/current.html)的统计，Svelte在对一些大列表操作的时候性能比React和Vue都要好。\n\n# 什么是Svelte?\nSvelte是由[RollupJs](https://rollupjs.org/guide/en/)的作者Rich Harris编写的编译型框架，没了解过RollupJs的同学可以去它官网了解一下，它其实是一个类似于Webpack的打包工具。Svelte这个框架具有以下特点：\n* 和React，Vue等现代Web框架的用法很相似，它可以允许开发者快速开发出具有流畅用户体验的Web应用。\n* 不使用**Virtual DOM**，也不是一个runtime的库。\n* 基于Compiler as framework的理念，会在编译的时候将你的应用转换为原生的DOM操作。\n* 默认就支持类似于CSS modules的CSS scope功能，让你避免CSS样式冲突的困扰。\n* 原生支持CSS animation。\n* 极其容易的组件状态管理（state management），减少开发者的模板代码编写（boilerplate less）。\n* 支持反应式定义（Reactive statement）。\n* 极其容易的应用全局状态管理，框架本身自带全局状态，类似于React的Redux和Vue的Vuex。\n* 支持context，避免组件的props drilling。\n\nSvelte这个框架与Vue和React之间最大的区别是它除了管理组件的状态和追踪他们的渲染，还有很多其他有用的功能。例如它原生支持CSS scope和CSS animation。如果你用React或者Vue是需要引入第三方库来实现同样的功能的，而第三方依赖的引入会给开发者增加学习和维护的成本。\n\n# 用Svelte搭建一个Bookshop应用\n接下来我们会从头开始搭建一个基于Svelte框架的简单书店应用bookshop，通过这个demo，希望大家可以理解Svelte的一些基本概念和掌握它的一些基本用法并能够使用Svelte去搭建更加复杂的应用。\n## 应用功能\nBookshop应用支持以下功能：\n* 管理员录入新图书\n* 展示书店图书列表\n* 将图书加到购物车\n* 展示购物车的数据信息\n\n## 对学习者的技术要求\n* 掌握html，css和javascript的基础用法\n* 有过React或者Vue的相关开发经验最佳\n\n项目的源代码可以在我的[github仓库](https://github.com/XiaocongDong/svelte-bookshop)找到。\n\n## 项目搭建\n首先在我们的本地开发环境新建一个项目文件夹：\n```shell\nmkdir svelte-bookshop\n```\n接着用svelte官方的脚手架去初始化我们的应用：\n```shell\nnpx degit sveltejs/template svelte-bookshop\ncd svelte-bookshop\n\nyarn\nyarn dev\n```\n[degit](https://github.com/Rich-Harris/degit)这个命令会将github上面的项目文件直接拷贝到某个本地文件夹，这里使用到的svelte/tempalte模板项目的github地址是[这个](https://github.com/sveltejs/template)。以上命令成功运行后，访问[http://localhost:5000](http://localhost:5000/)你会看到如下界面：\n![](/images/svelte3-intro/bootstrap.png)\n界面很简单就是展示一个hello world，接着让我们看一下生成的项目目录结构：\n![](/images/svelte3-intro/bootstrap-structure.png)\n生成的代码主要包含以下文件目录结构：\n* rollup.config.js，这个是rollup的配置文件，类似于webpack.config.js，里面指定了项目的入口文件是src/main.js。\n* src文件夹，这个文件夹用来存储我们的项目源代码，现在只有一个项目的主入口文件main.js和一个组件文件App.svelte。\n* public文件夹，这个文件夹是用来存储项目的静态文件（index.html, global.css和favicon.png）和rollup编译生成的静态文件（build文件夹底下的bundle.js和bundle.css以及它们各自的source map）。\n\n接着让我们具体看一下src文件夹底下的各个文件内容\n### src/App.svelte\n```javascript\n<script>\n\texport let name;\n</script>\n\n<main>\n\t<h1>Hello {name}!</h1>\n\t<p>Visit the <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a> to learn how to build Svelte apps.</p>\n</main>\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>\n```\n这个文件定义了一个叫做App的Svelte组件，这里要注意App.svelte文件内并没有定义组件的名称，**组件的名称是由它的文件名确定的**。**Svelte组件的文件名都是以.svelte结尾的**，一个组件文件通常会包含以下三部分内容：\n* **\\<script\\>标签**，和组件相关的任何JavaScript代码都可以放在这里，例如组件的状态定义或者一些异步Ajax请求。在这个App.svelte文件里面没有定义局部的组件状态，而是定义并export了一个name变量。对于Svelte框架，export一个变量就是将这个变量指定为当前组件的一个外部参数 - props。这种做法和React里面的将props作为组件的第一个参数的区别很大，可能大家一开始有点不习惯，不过后面习惯了，你可能也会爱上这种写法的。\n* **\\<style\\>标签**，和组件相关的CSS代码会放在这里。注意这里的CSS是局部生效的（scope），也就是说App.svelte中的h1标签的样式只会对App组件内的h1标签生效，而对项目其他的包括这个组件的子节点的h1标签失效。具体可以用浏览器的调试工具看一下h1标签的实际样式就明白了: ![](/images/svelte3-intro/bootstrap-h1-css.png)由上图可以看出Svelte在生成代码的时候会用一些随机的哈希值将组件的样式和其它组件的样式区别开来。\n* **组件的HTML标签**。组件的HTML标签可以直接在文件中写出来，例如App组件的HTML部分是：\n```html\n<main>\n\t<h1>Hello {name}!</h1>\n\t<p>Visit the <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a> to learn how to build Svelte apps.</p>\n</main>\n```\nApp组件最外层是一个main标签，main标签里面有一个h1标签和p标签，其中h1标签里面是一个`Hello `字符串加一个用花括号包裹的插入字符串（interpolation），在React JSX里面的写法应该是`Hello ${name}`，它们都表示这个位置的字符串就是name这个变量的内容。至于这个name变量就是我们在上面用export定义的外部参数。\n\n总的来说Svelte会将所有和组件相关的JavaScript，CSS和HTML代码都放在同一个文件里面，这个做法有点像Vue，不过和Vue相比它的模板代码更少。\n\n### src/main.js\n```javascript\nimport App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\tname: 'world'\n\t}\n});\n\nexport default app;\n```\n这个文件内容很简单，就是将刚刚定义的App组件挂载到目标节点body上，而且为App组件提供了值为`world`的name参数。这段代码的作用和React中的ReactDOM.render函数一样。\n\n接着让我们看一下生成的静态代码是什么样子的。\n### public/build/bundle.js\n先看生成的JavaScript主文件bundle.js，由于原文件比较大，我只截取了其中比较关键的一部分：\n```javascript\n/* src/App.svelte generated by Svelte v3.16.4 */\n\nconst file = \"src/App.svelte\";\n\nfunction create_fragment(ctx) {\n  let main;\n  let h1;\n  let t0;\n  let t1;\n  let t2;\n  let t3;\n  let p;\n  let t4;\n  let a;\n  let t6;\n\n  const block = {\n    c: function create() {\n      main = element(\"main\");\n      h1 = element(\"h1\");\n      t0 = text(\"Hello \");\n      t1 = text(/*name*/ ctx[0]);\n      t2 = text(\"!\");\n      t3 = space();\n      p = element(\"p\");\n      t4 = text(\"Visit the \");\n      a = element(\"a\");\n      a.textContent = \"Svelte tutorial\";\n      t6 = text(\" to learn how to build Svelte apps.\");\n      attr_dev(h1, \"class\", \"svelte-1tky8bj\");\n      add_location(h1, file, 5, 1, 46);\n      attr_dev(a, \"href\", \"https://svelte.dev/tutorial\");\n      add_location(a, file, 6, 14, 83);\n      add_location(p, file, 6, 1, 70);\n      attr_dev(main, \"class\", \"svelte-1tky8bj\");\n      add_location(main, file, 4, 0, 38);\n    },\n    l: function claim(nodes) {\n      throw new Error(\"options.hydrate only works if the component was compiled with the `hydratable: true` option\");\n    },\n    m: function mount(target, anchor) {\n      insert_dev(target, main, anchor);\n      append_dev(main, h1);\n      append_dev(h1, t0);\n      append_dev(h1, t1);\n      append_dev(h1, t2);\n      append_dev(main, t3);\n      append_dev(main, p);\n      append_dev(p, t4);\n      append_dev(p, a);\n      append_dev(p, t6);\n    },\n    p: function update(ctx, dirty) {\n      if (dirty[0] & /*name*/ 1) set_data_dev(t1, /*name*/ ctx[0]);\n    },\n    i: noop,\n    o: noop,\n    d: function destroy(detaching) {\n      if (detaching) detach_dev(main);\n    }\n  };\n\n  dispatch_dev(\"SvelteRegisterBlock\", {\n    block,\n    id: create_fragment.name,\n    type: \"component\",\n    source: \"\",\n    ctx\n  });\n\n  return block;\n}\n```\n这段代码对应的就是我们刚刚定义的App组件，`create_fragment`方法会接受一个上下文对象`ctx`参数并返回一个代表组件的block对象。\n#### block\n这个对象主要包含以下四个重要的方法`c`（create），`m`（mount），`p`（update）和`d`（destroy）。\n#### c（create）\n```javascript\nfunction create() {\n  main = element(\"main\");\n  h1 = element(\"h1\");\n  t0 = text(\"Hello \");\n  t1 = text(/*name*/ ctx[0]);\n  t2 = text(\"!\");\n  t3 = space();\n  p = element(\"p\");\n  t4 = text(\"Visit the \");\n  a = element(\"a\");\n  a.textContent = \"Svelte tutorial\";\n  t6 = text(\" to learn how to build Svelte apps.\");\n  attr_dev(h1, \"class\", \"svelte-1tky8bj\");\n  add_location(h1, file, 5, 1, 46);\n  attr_dev(a, \"href\", \"https://svelte.dev/tutorial\");\n  add_location(a, file, 6, 14, 83);\n  add_location(p, file, 6, 1, 70);\n  attr_dev(main, \"class\", \"svelte-1tky8bj\");\n  add_location(main, file, 4, 0, 38);\n}\n```\n这个函数的功能是生成（create）和App组件相关的一些原生DOM节点，并为它们添加一些元数据（meta data）。\n#### m（mount）\n```javascript\nfunction mount(target, anchor) {\n  insert_dev(target, main, anchor);\n  append_dev(main, h1);\n  append_dev(h1, t0);\n  append_dev(h1, t1);\n  append_dev(h1, t2);\n  append_dev(main, t3);\n  append_dev(main, p);\n  append_dev(p, t4);\n  append_dev(p, a);\n  append_dev(p, t6);\n}\n```\n这个函数的功能是挂载c函数生成的那些DOM节点。\n#### p（update）\n```javascript\nfunction update(ctx, dirty) {\n  if (dirty[0] & /*name*/ 1) set_data_dev(t1, /*name*/ ctx[0]);\n}\n```\np函数会在ctx上下文更新的时候去更新对应DOM节点的属性。大概就是当上下文变化的时候，检查一下name这个变量有没有变化，如果发生变化则更新DOM节点。\n#### d（destroy）\n```javascript\nfunction destroy(detaching) {\n  if (detaching) detach_dev(main);\n}\n```\nd函数是用来删除App组件的。\n\n看完Svelte生成的代码后，我想你对我在文章开头说的Compiler-as-framework等概念应该有了更加深刻的认识，Svelte和React（Vue也类似）不一样的是，**React应用在打包完之后，还保留了如React.createElement，setState等框架函数的调用代码，而Svelte编译完之后，框架代码会被转化为操作原生DOM节点的代码。**\n\n大概了解了项目的组织结构后，让我们开始正式搭建书店bookshop应用。\n\n## 组件定义\n### HTML markup\n首先让我们创建一个展示书本具体信息的卡片组件，在src文件夹底下新建一个BookCard.svelte文件，里面定义一下卡片组件的HTML markup：\n```html\n// src/BookCard.svelte\n<div>\n  <h1>title</h1>\n  <div>price</div>\n  <div>description</div>\n  <button>添加到购物车</button>\n</div>\n```\n然后在App.svelte组件里面使用BookCard组件:\n```html\n// src/App.svelte\n<script>\n  import BookCard from \"./BookCard.svelte\";\n</script>\n\n<style>\n ...\n</style>\n\n<main>\n  <h1>Welcome to my online bookstore!</h1>\n  <section>\n    <BookCard />\n  </section>\n</main>\n```\n**使用自定义的组件的方法很简单：先在script标签里面导入新定义的组件BookCard，然后将该组件写在App组件的HTML markup里面，语法和JSX一样的。**这时候再查看页面的内容：![](/images/svelte3-intro/bookcard-markup.png)\n\n### CSS\nBookCard组件虽然出来了，我们得定义一些CSS让它变得更好看一点：\n```html\n// src/BookCard.svelte\n<style>\n  .card {\n    text-align: left;\n    border-radius: 5px;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);\n    padding: 10px;\n  }\n\n  h1 {\n    font-size: 20px;\n  }\n\n  h2 {\n    font-size: 15px;\n    color: #999;\n  }\n\n  button {\n    background-color: #ff3e00;\n    color: white;\n    border-radius: 5px;\n    cursor: pointer;\n    border: none;\n  }\n</style>\n\n<div class=\"card\">\n  <h1>title</h1>\n  <h2>price</h2>\n  <p>description</p>\n  <button>添加到购物车</button>\n</div>\n```\n**给组件定义样式的方法就是新建一个style标签然后把该组件相关的样式写在这个标签内，注意这里的样式只会对组件内的元素有效，不会影响到其他组件的样式的。**加完样式后，界面应该会变成这个样子：![](/images/svelte3-intro/bookcard-css.png)\n\n### props定义\n书本的具体信息应该是由传入的props指定的。**Svelte组件的props要用export来指明，指明的props变量可以直接被组件使用**：\n```html\n// src/BookCard.svelte\n<script>\n  export let title;\n  export let price;\n  export let description;\n</script>\n\n<style>\n...\n</style>\n\n<div class=\"card\">\n  <h1>title</h1>\n  <h2>price</h2>\n  <p>description</p>\n  <button>添加到购物车</button>\n</div>\n```\n### 变量使用\n定义和引入的变量可以在组件的HTML markup中直接使用，具体用法是在Markup中用花括号（curly braces）引用该变量，具体代码时：\n```html\n// src/BookCard.svelte\n<script>\n  export let title;\n  export let price;\n  export let description;\n</script>\n\n<style>\n...\n</style>\n\n<div class=\"card\">\n  <h1>{title}</h1>\n  <h2>${price}</h2>\n  <p>{description}</p>\n  <button>添加到购物车</button>\n</div>\n```\n### 组件参数传递\n然后在父级组件App中，将BookCard需要的参数传给该组件：\n```html\n// src/App.svelte\n<script>\n  ...\n  let title = \"JavaScript高级编程\";\n  let price = 99.0;\n  let description = \"一起来学习JavaScript啊\";\n</script>\n\n<style>\n  ...\n</style>\n\n<main>\n  <h1>Welcome to my online bookstore!</h1>\n  <section>\n    <BookCard title={title} price={price} description={description} />\n  </section>\n</main>\n```\n这时候书本卡片的内容应该是传入的参数了：![](/images/svelte3-intro/bookcard-props.png)\n对于组件参数传递，Svelte还提供了以下更加方便的写法：\n```html\n// src/App.svelte\n<main>\n  <h1>Welcome to my online bookstore!</h1>\n  <section>\n    <BookCard {title} {price} {description} />\n  </section>\n</main>\n```\n## 录入书本信息\n作为一个书店，管理员应该可以录入新的图书，所以我们给App组件添加一个简单的表单来让用户录入数据：\n```html\n// src/App.svelte\n<script>\n  ...\n</script>\n\n<style>\n  ....\n</style>\n\n<main>\n  <h1>Welcome to my online bookstore!</h1>\n  <section>\n    <h2>Add new book</h2>\n    <label for=\"title\">Title</label>\n    <input type=\"text\" id=\"title\" value={title} />\n    <label for=\"price\">Price</label>\n    <input type=\"number\" id=\"price\" value={price} />\n    <label for=\"description\">Description</label>\n    <textarea rows=\"3\" id=\"description\" value={description} />\n  </section>\n  <section>\n    <BookCard {title} {price} {description} />\n  </section>\n</main>\n```\n我们为App组件新建了一些input标签，并指定这些input标签的值为我们之前定义的变量，这时候我们试着改变输入框的内容：![](/images/svelte3-intro/book-input-not-bind.gif)\n虽然输入框的初始值是变量对应的值，可是变量的值并不会随着输入框的值的改变而改变，也就是它们的值没有”绑定起来“，要想实现双向数据绑定，我们可以给输入框添加一个监听事件。\n### 事件绑定\n**我们可以使用on关键字加事件名称给DOM添加事件监听器**，以下代码将会监听input输入框的`input`事件：\n```html\n<script>\n  ...\n  let title = \"JavaScript高级编程\";\n  ...\n\n  function handleTitleChange(event) {\n    title = event.target.value;\n  }\n</script>\n\n<style>\n  ...\n</style>\n\n<main>\n  <h1>Welcome to my online bookstore!</h1>\n  <section>\n    <h2>Add new book</h2>\n    <label for=\"title\">Title</label>\n    <input type=\"text\" id=\"title\" value={title} on:input={handleTitleChange} />\n    ...\n  </section>\n</main>\n```\n这时候我们再改变input的值，会发现卡片里面的内容也发生了改变，说明我们成功改变了`title`变量的值：![](/images/svelte3-intro/book-input-event-bind.gif)\n\n### 自动数据双向绑定\n可是如果每一个input标签都要手动添加一个事件监听的话我们的代码会有很多模板代码，为了解决这个问题，**Svelte允许我们直接用bind关键字加要绑定的属性进行双向数据绑定**：\n```html\n// src/App.svelte\n<script>\n  ...\n  let title = \"JavaScript高级编程\";\n  let price = 99.0;\n  let description = \"一起来学习JavaScript啊\";\n</script>\n\n<style>\n  ...\n</style>\n\n<main>\n  <h1>Welcome to my online bookstore!</h1>\n  <section>\n    <h2>Add new book</h2>\n    <label for=\"title\">Title</label>\n    <input type=\"text\" id=\"title\" bind:value={title} />\n    <label for=\"price\">Price</label>\n    <input type=\"number\" id=\"price\" bind:value={price} />\n    <label for=\"description\">Description</label>\n    <textarea rows=\"3\" id=\"description\" bind:value={description} />\n  </section>\n  ...\n</main>\n```\n这时候我们就可以把各个变量的初始值去掉：\n```html\n// src/App.svelte\n<script>\n  let title = \"\";\n  let price = 0;\n  let description = \"\";\n</script>\n```\n这时候我们页面的输入框和所有变量都”绑定“起来了：![](/images/svelte3-intro/book-input-bind.gif)\n## 展示书本列表\n我们的书店应该不止一本书，要用一个数组把所有的书本存起来：\n```html\n// src/App.svelte\n<script>\n  ...\n  let books = [];\n  ...\n</script>\n```\n接着我们再为刚刚新增的表单添加一个提交按钮，用户填完书本的信息后点击提交会新建一个book对象，新建的book对象会被加到books列表中去：\n```html\n<script>\n  ...\n  let books = [];\n\n  function handleAddBook() {\n    books = books.concat({ title, price, description });\n    title = \"\";\n    price = 0;\n    description = \"\";\n  }\n  ...\n</script>\n\n<style>\n  ...\n  button {\n    background-color: #ff3e00;\n    color: white;\n    border-radius: 5px;\n    cursor: pointer;\n    border: none;\n  }\n  ...\n</style>\n\n<main>\n  <h1>Welcome to my online bookstore!</h1>\n  <section>\n    <h2>Add new book</h2>\n    <label for=\"title\">Title</label>\n    <input type=\"text\" id=\"title\" bind:value={title} />\n    <label for=\"price\">Price</label>\n    <input type=\"number\" id=\"price\" bind:value={price} />\n    <label for=\"description\">Description</label>\n    <textarea rows=\"3\" id=\"description\" bind:value={description} />\n    <div>\n      <button on:click={handleAddBook}>add book</button>\n    </div>\n  </section>\n  ...\n</main>\n```\n### 展示列表数据\n**我们可以使用each语法块去展示books列表的数据**：\n```html\n// src/App.svelte\n<script>\n  ....\n\n  let books = [];\n\n  function handleAddBook() {\n    books = books.concat({ title, price, description });\n    title = \"\";\n    price = 0;\n    description = \"\";\n  }\n</script>\n\n<main>\n  ...\n  <section>\n    {#each books as book}\n      <BookCard\n        title={book.title}\n        price={book.price}\n        description={book.description} />\n    {/each}\n  </section>\n</main>\n```\n**你也可以直接在each块定义的时候解构出被递归对象里面的内容**，上面的代码变为：\n```html\n// src/App.svelte\n  ...\n  <section>\n    {#each books as { title, price, description }}\n      <BookCard {title} {price} {description} />\n    {/each}\n  </section>\n  ...\n```\n代码更改完后，你的页面就可以录入新书并展示书的列表了：![](/images/svelte3-intro/book-list.gif)\n## 购物车功能\n首先我们要为BookCard这个组件的按钮添加一个点击事件：用户点击书本卡片按钮的时候这本书会被加到购物车中。要实现这个效果我们可以为BookCard按钮定义一个**handleAddBook**的参数，这个参数由外面组件来提供，**handleAddBook**函数会在用户点击BookCard按钮的时候被调用并将该书添加购物车中。代码如下：\n```html\n// src/BookCard.svelte\n<script>\n  ...\n  export let handleAddToCart;\n</script>\n\n<style>\n  ...\n</style>\n\n<div class=\"card\">\n  <h1>{title}</h1>\n  <h2>${price}</h2>\n  <p>{description}</p>\n  <button on:click={() => handleAddToCart(title)}>添加到购物车</button>\n</div>\n```\n```html\n// src/App.svelte\n<script>\n  ...\n  let booksInCart = [];\n\n  function handleAddToCart(title) {\n    let bookNeededToBeAdded = books.find(book => book.title == title);\n    booksInCart = booksInCart.concat(bookNeededToBeAdded);\n  }\n</script>\n\n<style>\n  ...\n</style>\n\n<main>\n  ...\n  <section>\n    <h2>购物车</h2>\n    {#each booksInCart as { title, price }}\n      <div>名称: {title}, 价钱: {price}</div>\n    {/each}\n  </section>\n  <section>\n    <h2>书单</h2>\n    {#each books as { title, price, description }}\n      <BookCard {title} {price} {description} {handleAddToCart} />\n    {/each}\n  </section>\n</main>\n```\n这时候我们就可以看到我们的购物车了：![](/images/svelte3-intro/book-cart.gif)\n### 条件判断\n**Svelte可以用if语法块根据不同条件展示不同的内容**，我们可以在购物车为空的时候给用户展示一个空的状态：\n```html\n// src/App.svelte\n...\n<section>\n  <h2>购物车</h2>\n  {#if booksInCart.length === 0}\n    <p>购物车空的哦~</p>\n  {:else}\n    {#each booksInCart as { title, price }}\n      <div>名称: {title}, 价钱: {price}</div>\n    {/each}\n  {/if}\n</section>\n...\n```\n这时候界面变为：![](/images/svelte3-intro/book-cart-if.gif)\n\n## 展示购物车统计信息\n我们再为书店添加一个帮用户统计购物车的书本的功能，可以展示现在购物车里面的书本总数和总金额，代码如下:\n```html\n// src/App.svelte\n<script>\n  ...\n  let booksInCart = [];\n\n  let booksNumInCart = booksInCart.length;\n  let totalCheckoutPrice = booksInCart.reduce(\n    (sum, book) => sum + book.price,\n    0\n  );\n  ...\n</script>\n\n...\n<section>\n  <h2>购物车</h2>\n  <div>书本总数：{booksNumInCart}</div>\n  <div>订单金额：{totalCheckoutPrice}</div>\n  ...\n</section>\n...\n```\n这时候我们操作界面却发现购物车的数据变化时统计数据竟然没有变化：![](/images/svelte3-intro/book-cart-total.gif)\n数据没有变化的原因是我们每次添加书本到购物车的时候没有手动地去改变`booksNumInCart`和`totalCheckoutPrice`的值。不过如果需要在购物车数据发生变化的时候手动维护统计数据的话，代码会变得很丑陋。\n### 反应式定义\n对于这种情况，Svelte提供了**反应式定义（Reactive assignment）**的方法来表示这种联动的数据，**具体做法就是用`$`符号定义变量而不是let**，以下是代码：\n```html\n<script>\n  ...\n  let booksInCart = [];\n\n  $: booksNumInCart = booksInCart.length;\n  $: totalCheckoutPrice = booksInCart.reduce(\n    (sum, book) => sum + book.price,\n    0\n  );\n  ...\n</script>\n```\n这样当`booksInCart`这个数据发生改变的时候，`booksNumInCart`和`totalCheckoutPrice`这个两个变量就会自动被重新计算。\n这时候我们再对界面进行操作的话，会发现统计数据会随着购物车的数据变化而自动发生改变：![](/images/svelte3-intro/book-cart-reactive.gif)\n\n## 总结\n我们的简易书店系统（bookshop）大概就实现了这些功能，现在来总结一下在开发项目的时候覆盖到的Svelte框架基础知识：\n* 组件定义 - component definition\n* 变量使用 - using variables \n* props定义和参数传递 - props definition and passing\n* 事件监听 - event listening\n* 数据绑定 - data binding\n* 条件判断 - if condition\n* 列表数据展示 - each block\n\n其实Svelte框架还有很多我没有提到的有用的功能特性，例如：\n* 事件传递 - event forwarding\n* 生命周期函数 - life-cycle functions\n* 全局状态管理 - stores\n* 上下文管理 - context\n* CSS 动画 - css animation\n*  ...\n\n由于文章篇幅的限制我在这里没有覆盖Svelte所有的属性，大家兴趣可以看一下svelte的[官方教程](https://svelte.dev/tutorial/basics)。\n\n# 我个人对Svelte框架的一些看法\n个人觉得由于Virtual DOM的各种问题，Compiler as framework这个思路应该是前端框架发展的一个趋势。Svelte目前实现的功能虽然已经非常不错了，可是就目前来说我觉得它还有以下问题：\n* Scalability - 可扩展性。React和Vue等框架自带的runtime虽然会增加首屏加载的bundle.js，可是当项目变得越来越大的时候，框架的runtime在bundle.js里面占据的比例也会越来越小，相反由于Svelte生成的代码的封装性没有React和Vue的好，它在大型项目中会不会堆积很多重复的代码呢？这个时候我们就得考虑一下是不是存在一个Svelte生成的代码大于React和Vue生成的代码的阈值了。这个问题现在还没有具体的答案，只能等后人实践的时候给出答案了，大家有兴趣可以看一下作者在[github上面的讨论](https://github.com/sveltejs/svelte/issues/2546)。\n* Ecosystem - 生态。作为一个最近才火起来的框架，Svelte的生态还远远不及已经普及那么多年的React和Vue，这也是我觉得就目前来说Svelte还撼动不了React和Vue的地位的原因。不过Svelte会不会因为它的先进性而迎来生态大爆发呢？我们可以拭目以待。\n\n不过有一点可以肯定的是，Svelte由于在一些不复杂的项目中生成的代码远远比React，Vue和Angular小的优势会在一些性能不那么好的嵌入式操作系统中大放异彩。\n\n# 学习Svelte有用的链接\n* [作者的Rethinking reactivity演讲](https://www.youtube.com/watch?v=AdNJ3fydeao)\n* [Svelte官网](https://svelte.dev/)\n* [Svelte github仓库](https://github.com/sveltejs/svelte)\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","slug":"Svelte-3-初学者完全指南","published":1,"updated":"2021-02-08T06:16:56.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0gqf6fg0007ucnxd2e5524n","content":"<p>React, Vue和Angular差不多占据了Web开发的大部分江山，可是最近半年<a href=\"!https://svelte.dev/\">Svelte</a>开始逐渐吸引越来越多人的眼球。这个Svelte框架到底有什么过人之处呢？本文将会为大家分析一下Svelte火起来的原因，并且通过使用Svelte去搭建一个简单的书店应用（bookshop）来帮助大家快速入门这门框架。</p>\n<h1 id=\"Svelte为什么会火\"><a href=\"#Svelte为什么会火\" class=\"headerlink\" title=\"Svelte为什么会火?\"></a>Svelte为什么会火?</h1><p>要想知道Svelte为什么会火，首先得看看React和Vue这些框架存在什么问题。</p>\n<a id=\"more\"></a> \n<h2 id=\"big-runtime-大的运行时\"><a href=\"#big-runtime-大的运行时\" class=\"headerlink\" title=\"big runtime - 大的运行时\"></a>big runtime - 大的运行时</h2><p>React和Vue都是基于runtime的框架。所谓基于runtime的框架就是框架本身的代码也会被打包到最终的bundle.js并被发送到用户浏览器。当用户在你的页面进行各种操作改变组件的状态时，框架的runtime会根据新的组件状态（state）计算（diff）出哪些DOM节点需要被更新，从而更新视图。那么这些runtime代码到底有多大呢，可以看一些社区的<a href=\"https://gist.github.com/Restuta/cda69e50a853aa64912d\" target=\"_blank\" rel=\"noopener\">统计数据</a>:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Size</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Ember 2.2.0</td>\n<td>435K</td>\n</tr>\n<tr>\n<td>Ember 1.13.8</td>\n<td>486K</td>\n</tr>\n<tr>\n<td>Angular 2</td>\n<td>566K</td>\n</tr>\n<tr>\n<td>Angular 2 + Rx</td>\n<td><strong>766K</strong></td>\n</tr>\n<tr>\n<td>Angular 1.4.5</td>\n<td>143K</td>\n</tr>\n<tr>\n<td>Vue 2.4.2</td>\n<td>58.8K</td>\n</tr>\n<tr>\n<td>Inferno 1.2.2</td>\n<td>48K</td>\n</tr>\n<tr>\n<td>Preact 7.2.0</td>\n<td><strong>16K</strong></td>\n</tr>\n<tr>\n<td>React 0.14.5 + React DOM</td>\n<td><strong>133K</strong></td>\n</tr>\n<tr>\n<td>React 0.14.5 + React DOM + Redux</td>\n<td>139K</td>\n</tr>\n<tr>\n<td>React 16.2.0 + React DOM</td>\n<td><strong>97.5K</strong></td>\n</tr>\n</tbody></table>\n<p>从上面的表格可以看出常用的框架中，最小的Vue都有58k，React更有97.5k。换句话说如果你使用了React作为开发的框架，即使你的业务代码很简单，你的首屏bundle size都要100k起步。当然100k不算很大，可是事物都是相对的，相对于大型的管理系统来说100k肯定不算什么，可是对于那些首屏加载时间敏感的应用（例如淘宝，京东主页），100k的bundle size在一些网络环境不好的情况或者手机端真的会影响用户体验。那么如何减少框架的runtime代码大小呢？要想减少runtime代码的最有效的方法就是压根不用runtime。其实回想一下Web开发的历史，很早之前在用Jquery和Bootstrap一把梭的时候，我们的代码不就是不包含runtime的吗？当数据变化时直接通过JavaScript去改变原生DOM节点，没有框架那一系列diff和调度（React Fiber）的过程。这时你可能会问，要减少bundle size真的要回到那个刀耕火种的时代吗？有没有那种既可以让我用接近React和Vue的语法编写代码，同时又不包含框架runtime的办法。这恰恰就是Svelte要做的东西，它采用了Compiler-as-framework的理念，将框架的概念放在编译时而不是运行时。你编写的应用代码在用诸如Webpack和Rollup等工具打包的时候会被直接转换为JavaScript对DOM节点的原生操作，从而让bundle.js不包含框架的runtime。那么Svelte到底可以将bundle size减少多少呢？以下是<a href=\"https://www.freecodecamp.org/news/a-realworld-comparison-of-front-end-frameworks-with-benchmarks-2019-update-4be0d3c78075/\" target=\"_blank\" rel=\"noopener\">RealWorld</a>这个项目的统计：<img src=\"/images/svelte3-intro/bundle-size.png\" alt><br>由上面的图表可以看出实现相同功能的应用，Svelte的bundle size大小是Vue的1/4，是React的1/20！单纯从这个数据来看，Svelte这个框架对bundle size的优化真的很大。</p>\n<h2 id=\"低效的Virtual-DOM-Diff\"><a href=\"#低效的Virtual-DOM-Diff\" class=\"headerlink\" title=\"低效的Virtual DOM Diff\"></a>低效的Virtual DOM Diff</h2><p>什么？Virtual DOM不是一直都很高效的吗？其实Virtual DOM高效是一个误解。说Virtual DOM高效的一个理由就是它不会直接操作原生的DOM节点，因为这个很消耗性能。当组件状态变化时它会通过某些diff算法去计算出本次数据更新真实的视图变化，然后只改变“需要改变”的DOM节点。用过React的人可能都会体会到React并没有想象中那么高效，框架有时候会做很多无用功，这体现在很多组件会被“无缘无故”进行重渲染（re-render）。注意这里说的re-render和对原生DOM进行操作是两码事！所谓的re-render是你定义的class Component的render方法被重新执行，或者你的组件函数被重新执行。组件被重渲染是因为Vitual DOM的高效是建立在diff算法上的，而要有diff一定要将组件重渲染才能知道组件的新状态和旧状态有没有发生改变，从而才能计算出哪些DOM需要被更新。你可能会说React Fiber不是出来了吗，这个应该不是问题了吧？其实Fiber这个架构解决的问题是不让组件的重渲染和reconcile的过程阻塞主线程的执行，组件重渲染的问题依然存在，而且据反馈，React Hooks出来后组件的重渲染更加频繁了。正是因为框架本身很难避免无用的渲染，React才允许你使用一些诸如shouldComponentUpdate，PureComponent和useMemo的API去告诉框架哪些组件不需要被重渲染，可是这也就引入了很多模板代码（boilerplate）。如果大家想了解更多关于Virtual DOM存在的问题，可以看一下<a href=\"https://svelte.dev/blog/virtual-dom-is-pure-overhead\" target=\"_blank\" rel=\"noopener\">virtual dom is pure overhead</a>这篇文章。</p>\n<p>那么如何解决Vitual DOM算法低效的问题呢？最有效的解决方案就是<strong>不用Virtual DOM</strong>！其实作为一个框架要解决的问题是当数据发生改变的时候相应的DOM节点会被更新（reactive），Virtual DOM需要比较新老组件的状态才能达到这个目的，而更加高效的办法其实是<strong>数据变化的时候直接更新对应的DOM节点</strong>：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">if</span> (changed.name) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  text.data = name;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>这就是Svelte采用的办法。Svelte会在代码编译的时候将每一个状态的改变转换为对应DOM节点的操作，从而在组件状态变化的时候快速高效地对DOM节点进行更新。根据<a href=\"https://krausest.github.io/js-framework-benchmark/current.html\" target=\"_blank\" rel=\"noopener\">js framework benchmark</a>的统计，Svelte在对一些大列表操作的时候性能比React和Vue都要好。</p>\n<h1 id=\"什么是Svelte\"><a href=\"#什么是Svelte\" class=\"headerlink\" title=\"什么是Svelte?\"></a>什么是Svelte?</h1><p>Svelte是由<a href=\"https://rollupjs.org/guide/en/\" target=\"_blank\" rel=\"noopener\">RollupJs</a>的作者Rich Harris编写的编译型框架，没了解过RollupJs的同学可以去它官网了解一下，它其实是一个类似于Webpack的打包工具。Svelte这个框架具有以下特点：</p>\n<ul>\n<li>和React，Vue等现代Web框架的用法很相似，它可以允许开发者快速开发出具有流畅用户体验的Web应用。</li>\n<li>不使用<strong>Virtual DOM</strong>，也不是一个runtime的库。</li>\n<li>基于Compiler as framework的理念，会在编译的时候将你的应用转换为原生的DOM操作。</li>\n<li>默认就支持类似于CSS modules的CSS scope功能，让你避免CSS样式冲突的困扰。</li>\n<li>原生支持CSS animation。</li>\n<li>极其容易的组件状态管理（state management），减少开发者的模板代码编写（boilerplate less）。</li>\n<li>支持反应式定义（Reactive statement）。</li>\n<li>极其容易的应用全局状态管理，框架本身自带全局状态，类似于React的Redux和Vue的Vuex。</li>\n<li>支持context，避免组件的props drilling。</li>\n</ul>\n<p>Svelte这个框架与Vue和React之间最大的区别是它除了管理组件的状态和追踪他们的渲染，还有很多其他有用的功能。例如它原生支持CSS scope和CSS animation。如果你用React或者Vue是需要引入第三方库来实现同样的功能的，而第三方依赖的引入会给开发者增加学习和维护的成本。</p>\n<h1 id=\"用Svelte搭建一个Bookshop应用\"><a href=\"#用Svelte搭建一个Bookshop应用\" class=\"headerlink\" title=\"用Svelte搭建一个Bookshop应用\"></a>用Svelte搭建一个Bookshop应用</h1><p>接下来我们会从头开始搭建一个基于Svelte框架的简单书店应用bookshop，通过这个demo，希望大家可以理解Svelte的一些基本概念和掌握它的一些基本用法并能够使用Svelte去搭建更加复杂的应用。</p>\n<h2 id=\"应用功能\"><a href=\"#应用功能\" class=\"headerlink\" title=\"应用功能\"></a>应用功能</h2><p>Bookshop应用支持以下功能：</p>\n<ul>\n<li>管理员录入新图书</li>\n<li>展示书店图书列表</li>\n<li>将图书加到购物车</li>\n<li>展示购物车的数据信息</li>\n</ul>\n<h2 id=\"对学习者的技术要求\"><a href=\"#对学习者的技术要求\" class=\"headerlink\" title=\"对学习者的技术要求\"></a>对学习者的技术要求</h2><ul>\n<li>掌握html，css和javascript的基础用法</li>\n<li>有过React或者Vue的相关开发经验最佳</li>\n</ul>\n<p>项目的源代码可以在我的<a href=\"https://github.com/XiaocongDong/svelte-bookshop\" target=\"_blank\" rel=\"noopener\">github仓库</a>找到。</p>\n<h2 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h2><p>首先在我们的本地开发环境新建一个项目文件夹：</p>\n<figure class=\"highlight shell hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir svelte-bookshop</span></pre></td></tr></table></figure>\n<p>接着用svelte官方的脚手架去初始化我们的应用：</p>\n<figure class=\"highlight shell hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">npx degit sveltejs/template svelte-bookshop</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">cd svelte-bookshop</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">yarn</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">yarn dev</span></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Rich-Harris/degit\" target=\"_blank\" rel=\"noopener\">degit</a>这个命令会将github上面的项目文件直接拷贝到某个本地文件夹，这里使用到的svelte/tempalte模板项目的github地址是<a href=\"https://github.com/sveltejs/template\" target=\"_blank\" rel=\"noopener\">这个</a>。以上命令成功运行后，访问<a href=\"http://localhost:5000/\" target=\"_blank\" rel=\"noopener\">http://localhost:5000</a>你会看到如下界面：<br><img src=\"/images/svelte3-intro/bootstrap.png\" alt><br>界面很简单就是展示一个hello world，接着让我们看一下生成的项目目录结构：<br><img src=\"/images/svelte3-intro/bootstrap-structure.png\" alt><br>生成的代码主要包含以下文件目录结构：</p>\n<ul>\n<li>rollup.config.js，这个是rollup的配置文件，类似于webpack.config.js，里面指定了项目的入口文件是src/main.js。</li>\n<li>src文件夹，这个文件夹用来存储我们的项目源代码，现在只有一个项目的主入口文件main.js和一个组件文件App.svelte。</li>\n<li>public文件夹，这个文件夹是用来存储项目的静态文件（index.html, global.css和favicon.png）和rollup编译生成的静态文件（build文件夹底下的bundle.js和bundle.css以及它们各自的source map）。</li>\n</ul>\n<p>接着让我们具体看一下src文件夹底下的各个文件内容</p>\n<h3 id=\"src-App-svelte\"><a href=\"#src-App-svelte\" class=\"headerlink\" title=\"src/App.svelte\"></a>src/App.svelte</h3><figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> name;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"hljs-regexp\">/script&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">&lt;main&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">\t&lt;h1&gt;Hello &#123;name&#125;!&lt;/</span>h1&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t&lt;p&gt;Visit the &lt;a href=<span class=\"hljs-string\">\"https://svelte.dev/tutorial\"</span>&gt;Svelte tutorial&lt;<span class=\"hljs-regexp\">/a&gt; to learn how to build Svelte apps.&lt;/</span>p&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"hljs-regexp\">/main&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">&lt;style&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">\tmain &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">\t\ttext-align: center;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">\t\tpadding: 1em;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">\t\tmax-width: 240px;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">\t\tmargin: 0 auto;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">\t&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">\th1 &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">\t\tcolor: #ff3e00;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">\t\ttext-transform: uppercase;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">\t\tfont-size: 4em;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">\t\tfont-weight: 100;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">\t&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">\t@media (min-width: 640px) &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">\t\tmain &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">\t\t\tmax-width: none;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">\t\t&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">\t&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-regexp\">&lt;/</span>style&gt;</span></pre></td></tr></table></figure>\n<p>这个文件定义了一个叫做App的Svelte组件，这里要注意App.svelte文件内并没有定义组件的名称，<strong>组件的名称是由它的文件名确定的</strong>。<strong>Svelte组件的文件名都是以.svelte结尾的</strong>，一个组件文件通常会包含以下三部分内容：</p>\n<ul>\n<li><strong>&lt;script&gt;标签</strong>，和组件相关的任何JavaScript代码都可以放在这里，例如组件的状态定义或者一些异步Ajax请求。在这个App.svelte文件里面没有定义局部的组件状态，而是定义并export了一个name变量。对于Svelte框架，export一个变量就是将这个变量指定为当前组件的一个外部参数 - props。这种做法和React里面的将props作为组件的第一个参数的区别很大，可能大家一开始有点不习惯，不过后面习惯了，你可能也会爱上这种写法的。</li>\n<li><strong>&lt;style&gt;标签</strong>，和组件相关的CSS代码会放在这里。注意这里的CSS是局部生效的（scope），也就是说App.svelte中的h1标签的样式只会对App组件内的h1标签生效，而对项目其他的包括这个组件的子节点的h1标签失效。具体可以用浏览器的调试工具看一下h1标签的实际样式就明白了: <img src=\"/images/svelte3-intro/bootstrap-h1-css.png\" alt>由上图可以看出Svelte在生成代码的时候会用一些随机的哈希值将组件的样式和其它组件的样式区别开来。</li>\n<li><strong>组件的HTML标签</strong>。组件的HTML标签可以直接在文件中写出来，例如App组件的HTML部分是：<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello &#123;name&#125;!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Visit the <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://svelte.dev/tutorial\"</span>&gt;</span>Svelte tutorial<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span> to learn how to build Svelte apps.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span></span></pre></td></tr></table></figure>\nApp组件最外层是一个main标签，main标签里面有一个h1标签和p标签，其中h1标签里面是一个<code>Hello</code>字符串加一个用花括号包裹的插入字符串（interpolation），在React JSX里面的写法应该是<code>Hello ${name}</code>，它们都表示这个位置的字符串就是name这个变量的内容。至于这个name变量就是我们在上面用export定义的外部参数。</li>\n</ul>\n<p>总的来说Svelte会将所有和组件相关的JavaScript，CSS和HTML代码都放在同一个文件里面，这个做法有点像Vue，不过和Vue相比它的模板代码更少。</p>\n<h3 id=\"src-main-js\"><a href=\"#src-main-js\" class=\"headerlink\" title=\"src/main.js\"></a>src/main.js</h3><figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./App.svelte'</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> App(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">\ttarget: <span class=\"hljs-built_in\">document</span>.body,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tprops: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tname: <span class=\"hljs-string\">'world'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> app;</span></pre></td></tr></table></figure>\n<p>这个文件内容很简单，就是将刚刚定义的App组件挂载到目标节点body上，而且为App组件提供了值为<code>world</code>的name参数。这段代码的作用和React中的ReactDOM.render函数一样。</p>\n<p>接着让我们看一下生成的静态代码是什么样子的。</p>\n<h3 id=\"public-build-bundle-js\"><a href=\"#public-build-bundle-js\" class=\"headerlink\" title=\"public/build/bundle.js\"></a>public/build/bundle.js</h3><p>先看生成的JavaScript主文件bundle.js，由于原文件比较大，我只截取了其中比较关键的一部分：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">/* src/App.svelte generated by Svelte v3.16.4 */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> file = <span class=\"hljs-string\">\"src/App.svelte\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">create_fragment</span>(<span class=\"hljs-params\">ctx</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">let</span> main;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">let</span> h1;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">let</span> t0;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">let</span> t1;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">let</span> t2;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">let</span> t3;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">let</span> p;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">let</span> t4;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">let</span> a;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">let</span> t6;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> block = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    c: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">create</span>(<span class=\"hljs-params\"></span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      main = element(<span class=\"hljs-string\">\"main\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      h1 = element(<span class=\"hljs-string\">\"h1\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">      t0 = text(<span class=\"hljs-string\">\"Hello \"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">      t1 = text(<span class=\"hljs-comment\">/*name*/</span> ctx[<span class=\"hljs-number\">0</span>]);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">      t2 = text(<span class=\"hljs-string\">\"!\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      t3 = space();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">      p = element(<span class=\"hljs-string\">\"p\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">      t4 = text(<span class=\"hljs-string\">\"Visit the \"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">      a = element(<span class=\"hljs-string\">\"a\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">      a.textContent = <span class=\"hljs-string\">\"Svelte tutorial\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">      t6 = text(<span class=\"hljs-string\">\" to learn how to build Svelte apps.\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">      attr_dev(h1, <span class=\"hljs-string\">\"class\"</span>, <span class=\"hljs-string\">\"svelte-1tky8bj\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">      add_location(h1, file, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">46</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">      attr_dev(a, <span class=\"hljs-string\">\"href\"</span>, <span class=\"hljs-string\">\"https://svelte.dev/tutorial\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">      add_location(a, file, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">83</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">      add_location(p, file, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">70</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">      attr_dev(main, <span class=\"hljs-string\">\"class\"</span>, <span class=\"hljs-string\">\"svelte-1tky8bj\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">      add_location(main, file, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">38</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">    l: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">claim</span>(<span class=\"hljs-params\">nodes</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"options.hydrate only works if the component was compiled with the `hydratable: true` option\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">    m: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mount</span>(<span class=\"hljs-params\">target, anchor</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">      insert_dev(target, main, anchor);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">      append_dev(main, h1);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">      append_dev(h1, t0);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">      append_dev(h1, t1);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">      append_dev(h1, t2);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">      append_dev(main, t3);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">      append_dev(main, p);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">      append_dev(p, t4);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">      append_dev(p, a);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">      append_dev(p, t6);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">    p: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">update</span>(<span class=\"hljs-params\">ctx, dirty</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">if</span> (dirty[<span class=\"hljs-number\">0</span>] &amp; <span class=\"hljs-comment\">/*name*/</span> <span class=\"hljs-number\">1</span>) set_data_dev(t1, <span class=\"hljs-comment\">/*name*/</span> ctx[<span class=\"hljs-number\">0</span>]);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">    i: noop,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">    o: noop,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">    d: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">destroy</span>(<span class=\"hljs-params\">detaching</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">if</span> (detaching) detach_dev(main);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">  dispatch_dev(<span class=\"hljs-string\">\"SvelteRegisterBlock\"</span>, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">    block,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\">    id: create_fragment.name,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">    type: <span class=\"hljs-string\">\"component\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">    source: <span class=\"hljs-string\">\"\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ctx</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> block;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>这段代码对应的就是我们刚刚定义的App组件，<code>create_fragment</code>方法会接受一个上下文对象<code>ctx</code>参数并返回一个代表组件的block对象。</p>\n<h4 id=\"block\"><a href=\"#block\" class=\"headerlink\" title=\"block\"></a>block</h4><p>这个对象主要包含以下四个重要的方法<code>c</code>（create），<code>m</code>（mount），<code>p</code>（update）和<code>d</code>（destroy）。</p>\n<h4 id=\"c（create）\"><a href=\"#c（create）\" class=\"headerlink\" title=\"c（create）\"></a>c（create）</h4><figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">create</span>(<span class=\"hljs-params\"></span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  main = element(<span class=\"hljs-string\">\"main\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  h1 = element(<span class=\"hljs-string\">\"h1\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  t0 = text(<span class=\"hljs-string\">\"Hello \"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  t1 = text(<span class=\"hljs-comment\">/*name*/</span> ctx[<span class=\"hljs-number\">0</span>]);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  t2 = text(<span class=\"hljs-string\">\"!\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  t3 = space();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  p = element(<span class=\"hljs-string\">\"p\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  t4 = text(<span class=\"hljs-string\">\"Visit the \"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  a = element(<span class=\"hljs-string\">\"a\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  a.textContent = <span class=\"hljs-string\">\"Svelte tutorial\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  t6 = text(<span class=\"hljs-string\">\" to learn how to build Svelte apps.\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  attr_dev(h1, <span class=\"hljs-string\">\"class\"</span>, <span class=\"hljs-string\">\"svelte-1tky8bj\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  add_location(h1, file, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">46</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  attr_dev(a, <span class=\"hljs-string\">\"href\"</span>, <span class=\"hljs-string\">\"https://svelte.dev/tutorial\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  add_location(a, file, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">83</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  add_location(p, file, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">70</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  attr_dev(main, <span class=\"hljs-string\">\"class\"</span>, <span class=\"hljs-string\">\"svelte-1tky8bj\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  add_location(main, file, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">38</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>这个函数的功能是生成（create）和App组件相关的一些原生DOM节点，并为它们添加一些元数据（meta data）。</p>\n<h4 id=\"m（mount）\"><a href=\"#m（mount）\" class=\"headerlink\" title=\"m（mount）\"></a>m（mount）</h4><figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mount</span>(<span class=\"hljs-params\">target, anchor</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  insert_dev(target, main, anchor);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  append_dev(main, h1);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  append_dev(h1, t0);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  append_dev(h1, t1);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  append_dev(h1, t2);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  append_dev(main, t3);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  append_dev(main, p);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  append_dev(p, t4);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  append_dev(p, a);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  append_dev(p, t6);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>这个函数的功能是挂载c函数生成的那些DOM节点。</p>\n<h4 id=\"p（update）\"><a href=\"#p（update）\" class=\"headerlink\" title=\"p（update）\"></a>p（update）</h4><figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">update</span>(<span class=\"hljs-params\">ctx, dirty</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (dirty[<span class=\"hljs-number\">0</span>] &amp; <span class=\"hljs-comment\">/*name*/</span> <span class=\"hljs-number\">1</span>) set_data_dev(t1, <span class=\"hljs-comment\">/*name*/</span> ctx[<span class=\"hljs-number\">0</span>]);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>p函数会在ctx上下文更新的时候去更新对应DOM节点的属性。大概就是当上下文变化的时候，检查一下name这个变量有没有变化，如果发生变化则更新DOM节点。</p>\n<h4 id=\"d（destroy）\"><a href=\"#d（destroy）\" class=\"headerlink\" title=\"d（destroy）\"></a>d（destroy）</h4><figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">destroy</span>(<span class=\"hljs-params\">detaching</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (detaching) detach_dev(main);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>d函数是用来删除App组件的。</p>\n<p>看完Svelte生成的代码后，我想你对我在文章开头说的Compiler-as-framework等概念应该有了更加深刻的认识，Svelte和React（Vue也类似）不一样的是，<strong>React应用在打包完之后，还保留了如React.createElement，setState等框架函数的调用代码，而Svelte编译完之后，框架代码会被转化为操作原生DOM节点的代码。</strong></p>\n<p>大概了解了项目的组织结构后，让我们开始正式搭建书店bookshop应用。</p>\n<h2 id=\"组件定义\"><a href=\"#组件定义\" class=\"headerlink\" title=\"组件定义\"></a>组件定义</h2><h3 id=\"HTML-markup\"><a href=\"#HTML-markup\" class=\"headerlink\" title=\"HTML markup\"></a>HTML markup</h3><p>首先让我们创建一个展示书本具体信息的卡片组件，在src文件夹底下新建一个BookCard.svelte文件，里面定义一下卡片组件的HTML markup：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/BookCard.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>price<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>description<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>添加到购物车<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></pre></td></tr></table></figure>\n<p>然后在App.svelte组件里面使用BookCard组件:</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">import</span> BookCard <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./BookCard.svelte\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"> ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Welcome to my online bookstore!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BookCard</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span></span></pre></td></tr></table></figure>\n<p><strong>使用自定义的组件的方法很简单：先在script标签里面导入新定义的组件BookCard，然后将该组件写在App组件的HTML markup里面，语法和JSX一样的。</strong>这时候再查看页面的内容：<img src=\"/images/svelte3-intro/bookcard-markup.png\" alt></p>\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><p>BookCard组件虽然出来了，我们得定义一些CSS让它变得更好看一点：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/BookCard.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-css\">  <span class=\"hljs-selector-class\">.card</span> &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    text-align: left;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    border-radius: 5px;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-css\">    <span class=\"hljs-selector-tag\">box-shadow</span>: 0 2<span class=\"hljs-selector-tag\">px</span> 8<span class=\"hljs-selector-tag\">px</span> <span class=\"hljs-selector-tag\">rgba</span>(0, 0, 0, 0<span class=\"hljs-selector-class\">.26</span>);</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    padding: 10px;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  h1 &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    font-size: 20px;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  h2 &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    font-size: 15px;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-css\">    <span class=\"hljs-selector-tag\">color</span>: <span class=\"hljs-selector-id\">#999</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  button &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-css\">    <span class=\"hljs-selector-tag\">background-color</span>: <span class=\"hljs-selector-id\">#ff3e00</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    color: white;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    border-radius: 5px;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    cursor: pointer;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    border: none;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card\"</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>price<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>description<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>添加到购物车<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></pre></td></tr></table></figure>\n<p><strong>给组件定义样式的方法就是新建一个style标签然后把该组件相关的样式写在这个标签内，注意这里的样式只会对组件内的元素有效，不会影响到其他组件的样式的。</strong>加完样式后，界面应该会变成这个样子：<img src=\"/images/svelte3-intro/bookcard-css.png\" alt></p>\n<h3 id=\"props定义\"><a href=\"#props定义\" class=\"headerlink\" title=\"props定义\"></a>props定义</h3><p>书本的具体信息应该是由传入的props指定的。<strong>Svelte组件的props要用export来指明，指明的props变量可以直接被组件使用</strong>：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/BookCard.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> title;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> price;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> description;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card\"</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>price<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>description<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>添加到购物车<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></pre></td></tr></table></figure>\n<h3 id=\"变量使用\"><a href=\"#变量使用\" class=\"headerlink\" title=\"变量使用\"></a>变量使用</h3><p>定义和引入的变量可以在组件的HTML markup中直接使用，具体用法是在Markup中用花括号（curly braces）引用该变量，具体代码时：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/BookCard.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> title;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> price;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> description;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card\"</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>&#123;title&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>$&#123;price&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;description&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>添加到购物车<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></pre></td></tr></table></figure>\n<h3 id=\"组件参数传递\"><a href=\"#组件参数传递\" class=\"headerlink\" title=\"组件参数传递\"></a>组件参数传递</h3><p>然后在父级组件App中，将BookCard需要的参数传给该组件：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">let</span> title = <span class=\"hljs-string\">\"JavaScript高级编程\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">let</span> price = <span class=\"hljs-number\">99.0</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">let</span> description = <span class=\"hljs-string\">\"一起来学习JavaScript啊\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Welcome to my online bookstore!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BookCard</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&#123;title&#125;</span> <span class=\"hljs-attr\">price</span>=<span class=\"hljs-string\">&#123;price&#125;</span> <span class=\"hljs-attr\">description</span>=<span class=\"hljs-string\">&#123;description&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span></span></pre></td></tr></table></figure>\n<p>这时候书本卡片的内容应该是传入的参数了：<img src=\"/images/svelte3-intro/bookcard-props.png\" alt><br>对于组件参数传递，Svelte还提供了以下更加方便的写法：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Welcome to my online bookstore!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BookCard</span> &#123;<span class=\"hljs-attr\">title</span>&#125; &#123;<span class=\"hljs-attr\">price</span>&#125; &#123;<span class=\"hljs-attr\">description</span>&#125; /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span></span></pre></td></tr></table></figure>\n<h2 id=\"录入书本信息\"><a href=\"#录入书本信息\" class=\"headerlink\" title=\"录入书本信息\"></a>录入书本信息</h2><p>作为一个书店，管理员应该可以录入新的图书，所以我们给App组件添加一个简单的表单来让用户录入数据：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ....</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Welcome to my online bookstore!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Add new book<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"title\"</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"title\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&#123;title&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"price\"</span>&gt;</span>Price<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"number\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"price\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&#123;price&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"description\"</span>&gt;</span>Description<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">rows</span>=<span class=\"hljs-string\">\"3\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"description\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&#123;description&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BookCard</span> &#123;<span class=\"hljs-attr\">title</span>&#125; &#123;<span class=\"hljs-attr\">price</span>&#125; &#123;<span class=\"hljs-attr\">description</span>&#125; /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span></span></pre></td></tr></table></figure>\n<p>我们为App组件新建了一些input标签，并指定这些input标签的值为我们之前定义的变量，这时候我们试着改变输入框的内容：<img src=\"/images/svelte3-intro/book-input-not-bind.gif\" alt><br>虽然输入框的初始值是变量对应的值，可是变量的值并不会随着输入框的值的改变而改变，也就是它们的值没有”绑定起来“，要想实现双向数据绑定，我们可以给输入框添加一个监听事件。</p>\n<h3 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h3><p><strong>我们可以使用on关键字加事件名称给DOM添加事件监听器</strong>，以下代码将会监听input输入框的<code>input</code>事件：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">let</span> title = <span class=\"hljs-string\">\"JavaScript高级编程\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-actionscript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">handleTitleChange</span><span class=\"hljs-params\">(event)</span> </span>&#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    title = event.target.value;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Welcome to my online bookstore!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Add new book<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"title\"</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"title\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&#123;title&#125;</span> <span class=\"hljs-attr\">on:input</span>=<span class=\"hljs-string\">&#123;handleTitleChange&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span></span></pre></td></tr></table></figure>\n<p>这时候我们再改变input的值，会发现卡片里面的内容也发生了改变，说明我们成功改变了<code>title</code>变量的值：<img src=\"/images/svelte3-intro/book-input-event-bind.gif\" alt></p>\n<h3 id=\"自动数据双向绑定\"><a href=\"#自动数据双向绑定\" class=\"headerlink\" title=\"自动数据双向绑定\"></a>自动数据双向绑定</h3><p>可是如果每一个input标签都要手动添加一个事件监听的话我们的代码会有很多模板代码，为了解决这个问题，<strong>Svelte允许我们直接用bind关键字加要绑定的属性进行双向数据绑定</strong>：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">let</span> title = <span class=\"hljs-string\">\"JavaScript高级编程\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">let</span> price = <span class=\"hljs-number\">99.0</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">let</span> description = <span class=\"hljs-string\">\"一起来学习JavaScript啊\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Welcome to my online bookstore!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Add new book<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"title\"</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"title\"</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">&#123;title&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"price\"</span>&gt;</span>Price<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"number\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"price\"</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">&#123;price&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"description\"</span>&gt;</span>Description<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">rows</span>=<span class=\"hljs-string\">\"3\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"description\"</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">&#123;description&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span></span></pre></td></tr></table></figure>\n<p>这时候我们就可以把各个变量的初始值去掉：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">let</span> title = <span class=\"hljs-string\">\"\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">let</span> price = <span class=\"hljs-number\">0</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">let</span> description = <span class=\"hljs-string\">\"\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr></table></figure>\n<p>这时候我们页面的输入框和所有变量都”绑定“起来了：<img src=\"/images/svelte3-intro/book-input-bind.gif\" alt></p>\n<h2 id=\"展示书本列表\"><a href=\"#展示书本列表\" class=\"headerlink\" title=\"展示书本列表\"></a>展示书本列表</h2><p>我们的书店应该不止一本书，要用一个数组把所有的书本存起来：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">let</span> books = [];</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr></table></figure>\n<p>接着我们再为刚刚新增的表单添加一个提交按钮，用户填完书本的信息后点击提交会新建一个book对象，新建的book对象会被加到books列表中去：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">let</span> books = [];</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-actionscript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">handleAddBook</span><span class=\"hljs-params\">()</span> </span>&#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    books = books.concat(&#123; title, price, description &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-actionscript\">    title = <span class=\"hljs-string\">\"\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    price = 0;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-actionscript\">    description = <span class=\"hljs-string\">\"\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  button &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-css\">    <span class=\"hljs-selector-tag\">background-color</span>: <span class=\"hljs-selector-id\">#ff3e00</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    color: white;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    border-radius: 5px;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    cursor: pointer;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    border: none;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Welcome to my online bookstore!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Add new book<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"title\"</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"title\"</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">&#123;title&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"price\"</span>&gt;</span>Price<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"number\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"price\"</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">&#123;price&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"description\"</span>&gt;</span>Description<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">rows</span>=<span class=\"hljs-string\">\"3\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"description\"</span> <span class=\"hljs-attr\">bind:value</span>=<span class=\"hljs-string\">&#123;description&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">on:click</span>=<span class=\"hljs-string\">&#123;handleAddBook&#125;</span>&gt;</span>add book<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span></span></pre></td></tr></table></figure>\n<h3 id=\"展示列表数据\"><a href=\"#展示列表数据\" class=\"headerlink\" title=\"展示列表数据\"></a>展示列表数据</h3><p><strong>我们可以使用each语法块去展示books列表的数据</strong>：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ....</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">let</span> books = [];</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-actionscript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">handleAddBook</span><span class=\"hljs-params\">()</span> </span>&#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    books = books.concat(&#123; title, price, description &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-actionscript\">    title = <span class=\"hljs-string\">\"\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    price = 0;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-actionscript\">    description = <span class=\"hljs-string\">\"\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;#each books as book&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BookCard</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">        <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&#123;book.title&#125;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">        <span class=\"hljs-attr\">price</span>=<span class=\"hljs-string\">&#123;book.price&#125;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">        <span class=\"hljs-attr\">description</span>=<span class=\"hljs-string\">&#123;book.description&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;/each&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span></span></pre></td></tr></table></figure>\n<p><strong>你也可以直接在each块定义的时候解构出被递归对象里面的内容</strong>，上面的代码变为：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;#each books as &#123; title, price, description &#125;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BookCard</span> &#123;<span class=\"hljs-attr\">title</span>&#125; &#123;<span class=\"hljs-attr\">price</span>&#125; &#123;<span class=\"hljs-attr\">description</span>&#125; /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;/each&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr></table></figure>\n<p>代码更改完后，你的页面就可以录入新书并展示书的列表了：<img src=\"/images/svelte3-intro/book-list.gif\" alt></p>\n<h2 id=\"购物车功能\"><a href=\"#购物车功能\" class=\"headerlink\" title=\"购物车功能\"></a>购物车功能</h2><p>首先我们要为BookCard这个组件的按钮添加一个点击事件：用户点击书本卡片按钮的时候这本书会被加到购物车中。要实现这个效果我们可以为BookCard按钮定义一个<strong>handleAddBook</strong>的参数，这个参数由外面组件来提供，<strong>handleAddBook</strong>函数会在用户点击BookCard按钮的时候被调用并将该书添加购物车中。代码如下：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/BookCard.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> handleAddToCart;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card\"</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>&#123;title&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>$&#123;price&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&#123;description&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">on:click</span>=<span class=\"hljs-string\">&#123;()</span> =&gt;</span> handleAddToCart(title)&#125;&gt;添加到购物车<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></pre></td></tr></table></figure>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">let</span> booksInCart = [];</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-actionscript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">handleAddToCart</span><span class=\"hljs-params\">(title)</span> </span>&#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">    <span class=\"hljs-keyword\">let</span> bookNeededToBeAdded = books.find(<span class=\"hljs-function\"><span class=\"hljs-params\">book</span> =&gt;</span> book.title == title);</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    booksInCart = booksInCart.concat(bookNeededToBeAdded);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>购物车<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;#each booksInCart as &#123; title, price &#125;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>名称: &#123;title&#125;, 价钱: &#123;price&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;/each&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>书单<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;#each books as &#123; title, price, description &#125;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">BookCard</span> &#123;<span class=\"hljs-attr\">title</span>&#125; &#123;<span class=\"hljs-attr\">price</span>&#125; &#123;<span class=\"hljs-attr\">description</span>&#125; &#123;<span class=\"hljs-attr\">handleAddToCart</span>&#125; /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;/each&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span></span></pre></td></tr></table></figure>\n<p>这时候我们就可以看到我们的购物车了：<img src=\"/images/svelte3-intro/book-cart.gif\" alt></p>\n<h3 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h3><p><strong>Svelte可以用if语法块根据不同条件展示不同的内容</strong>，我们可以在购物车为空的时候给用户展示一个空的状态：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>购物车<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;#if booksInCart.length === 0&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>购物车空的哦~<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;:else&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;#each booksInCart as &#123; title, price &#125;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>名称: &#123;title&#125;, 价钱: &#123;price&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;/each&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;/if&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">...</span></pre></td></tr></table></figure>\n<p>这时候界面变为：<img src=\"/images/svelte3-intro/book-cart-if.gif\" alt></p>\n<h2 id=\"展示购物车统计信息\"><a href=\"#展示购物车统计信息\" class=\"headerlink\" title=\"展示购物车统计信息\"></a>展示购物车统计信息</h2><p>我们再为书店添加一个帮用户统计购物车的书本的功能，可以展示现在购物车里面的书本总数和总金额，代码如下:</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">let</span> booksInCart = [];</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">let</span> booksNumInCart = booksInCart.length;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">let</span> totalCheckoutPrice = booksInCart.reduce(</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    (sum, book) =&gt; sum + book.price,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    0</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  );</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>购物车<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>书本总数：&#123;booksNumInCart&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>订单金额：&#123;totalCheckoutPrice&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">...</span></pre></td></tr></table></figure>\n<p>这时候我们操作界面却发现购物车的数据变化时统计数据竟然没有变化：<img src=\"/images/svelte3-intro/book-cart-total.gif\" alt><br>数据没有变化的原因是我们每次添加书本到购物车的时候没有手动地去改变<code>booksNumInCart</code>和<code>totalCheckoutPrice</code>的值。不过如果需要在购物车数据发生变化的时候手动维护统计数据的话，代码会变得很丑陋。</p>\n<h3 id=\"反应式定义\"><a href=\"#反应式定义\" class=\"headerlink\" title=\"反应式定义\"></a>反应式定义</h3><p>对于这种情况，Svelte提供了<strong>反应式定义（Reactive assignment）</strong>的方法来表示这种联动的数据，<strong>具体做法就是用<code>$</code>符号定义变量而不是let</strong>，以下是代码：</p>\n<figure class=\"highlight html hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-javascript\">  <span class=\"hljs-keyword\">let</span> booksInCart = [];</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  $: booksNumInCart = booksInCart.length;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  $: totalCheckoutPrice = booksInCart.reduce(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    (sum, book) =&gt; sum + book.price,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    0</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  );</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span></pre></td></tr></table></figure>\n<p>这样当<code>booksInCart</code>这个数据发生改变的时候，<code>booksNumInCart</code>和<code>totalCheckoutPrice</code>这个两个变量就会自动被重新计算。<br>这时候我们再对界面进行操作的话，会发现统计数据会随着购物车的数据变化而自动发生改变：<img src=\"/images/svelte3-intro/book-cart-reactive.gif\" alt></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我们的简易书店系统（bookshop）大概就实现了这些功能，现在来总结一下在开发项目的时候覆盖到的Svelte框架基础知识：</p>\n<ul>\n<li>组件定义 - component definition</li>\n<li>变量使用 - using variables </li>\n<li>props定义和参数传递 - props definition and passing</li>\n<li>事件监听 - event listening</li>\n<li>数据绑定 - data binding</li>\n<li>条件判断 - if condition</li>\n<li>列表数据展示 - each block</li>\n</ul>\n<p>其实Svelte框架还有很多我没有提到的有用的功能特性，例如：</p>\n<ul>\n<li>事件传递 - event forwarding</li>\n<li>生命周期函数 - life-cycle functions</li>\n<li>全局状态管理 - stores</li>\n<li>上下文管理 - context</li>\n<li>CSS 动画 - css animation</li>\n<li>…</li>\n</ul>\n<p>由于文章篇幅的限制我在这里没有覆盖Svelte所有的属性，大家兴趣可以看一下svelte的<a href=\"https://svelte.dev/tutorial/basics\" target=\"_blank\" rel=\"noopener\">官方教程</a>。</p>\n<h1 id=\"我个人对Svelte框架的一些看法\"><a href=\"#我个人对Svelte框架的一些看法\" class=\"headerlink\" title=\"我个人对Svelte框架的一些看法\"></a>我个人对Svelte框架的一些看法</h1><p>个人觉得由于Virtual DOM的各种问题，Compiler as framework这个思路应该是前端框架发展的一个趋势。Svelte目前实现的功能虽然已经非常不错了，可是就目前来说我觉得它还有以下问题：</p>\n<ul>\n<li>Scalability - 可扩展性。React和Vue等框架自带的runtime虽然会增加首屏加载的bundle.js，可是当项目变得越来越大的时候，框架的runtime在bundle.js里面占据的比例也会越来越小，相反由于Svelte生成的代码的封装性没有React和Vue的好，它在大型项目中会不会堆积很多重复的代码呢？这个时候我们就得考虑一下是不是存在一个Svelte生成的代码大于React和Vue生成的代码的阈值了。这个问题现在还没有具体的答案，只能等后人实践的时候给出答案了，大家有兴趣可以看一下作者在<a href=\"https://github.com/sveltejs/svelte/issues/2546\" target=\"_blank\" rel=\"noopener\">github上面的讨论</a>。</li>\n<li>Ecosystem - 生态。作为一个最近才火起来的框架，Svelte的生态还远远不及已经普及那么多年的React和Vue，这也是我觉得就目前来说Svelte还撼动不了React和Vue的地位的原因。不过Svelte会不会因为它的先进性而迎来生态大爆发呢？我们可以拭目以待。</li>\n</ul>\n<p>不过有一点可以肯定的是，Svelte由于在一些不复杂的项目中生成的代码远远比React，Vue和Angular小的优势会在一些性能不那么好的嵌入式操作系统中大放异彩。</p>\n<h1 id=\"学习Svelte有用的链接\"><a href=\"#学习Svelte有用的链接\" class=\"headerlink\" title=\"学习Svelte有用的链接\"></a>学习Svelte有用的链接</h1><ul>\n<li><a href=\"https://www.youtube.com/watch?v=AdNJ3fydeao\" target=\"_blank\" rel=\"noopener\">作者的Rethinking reactivity演讲</a></li>\n<li><a href=\"https://svelte.dev/\" target=\"_blank\" rel=\"noopener\">Svelte官网</a></li>\n<li><a href=\"https://github.com/sveltejs/svelte\" target=\"_blank\" rel=\"noopener\">Svelte github仓库</a></li>\n</ul>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<p>React, Vue和Angular差不多占据了Web开发的大部分江山，可是最近半年<a href=\"!https://svelte.dev/\">Svelte</a>开始逐渐吸引越来越多人的眼球。这个Svelte框架到底有什么过人之处呢？本文将会为大家分析一下Svelte火起来的原因，并且通过使用Svelte去搭建一个简单的书店应用（bookshop）来帮助大家快速入门这门框架。</p>\n<h1 id=\"Svelte为什么会火\"><a href=\"#Svelte为什么会火\" class=\"headerlink\" title=\"Svelte为什么会火?\"></a>Svelte为什么会火?</h1><p>要想知道Svelte为什么会火，首先得看看React和Vue这些框架存在什么问题。</p>","more":"<h2 id=\"big-runtime-大的运行时\"><a href=\"#big-runtime-大的运行时\" class=\"headerlink\" title=\"big runtime - 大的运行时\"></a>big runtime - 大的运行时</h2><p>React和Vue都是基于runtime的框架。所谓基于runtime的框架就是框架本身的代码也会被打包到最终的bundle.js并被发送到用户浏览器。当用户在你的页面进行各种操作改变组件的状态时，框架的runtime会根据新的组件状态（state）计算（diff）出哪些DOM节点需要被更新，从而更新视图。那么这些runtime代码到底有多大呢，可以看一些社区的<a href=\"https://gist.github.com/Restuta/cda69e50a853aa64912d\" target=\"_blank\" rel=\"noopener\">统计数据</a>:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Size</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Ember 2.2.0</td>\n<td>435K</td>\n</tr>\n<tr>\n<td>Ember 1.13.8</td>\n<td>486K</td>\n</tr>\n<tr>\n<td>Angular 2</td>\n<td>566K</td>\n</tr>\n<tr>\n<td>Angular 2 + Rx</td>\n<td><strong>766K</strong></td>\n</tr>\n<tr>\n<td>Angular 1.4.5</td>\n<td>143K</td>\n</tr>\n<tr>\n<td>Vue 2.4.2</td>\n<td>58.8K</td>\n</tr>\n<tr>\n<td>Inferno 1.2.2</td>\n<td>48K</td>\n</tr>\n<tr>\n<td>Preact 7.2.0</td>\n<td><strong>16K</strong></td>\n</tr>\n<tr>\n<td>React 0.14.5 + React DOM</td>\n<td><strong>133K</strong></td>\n</tr>\n<tr>\n<td>React 0.14.5 + React DOM + Redux</td>\n<td>139K</td>\n</tr>\n<tr>\n<td>React 16.2.0 + React DOM</td>\n<td><strong>97.5K</strong></td>\n</tr>\n</tbody></table>\n<p>从上面的表格可以看出常用的框架中，最小的Vue都有58k，React更有97.5k。换句话说如果你使用了React作为开发的框架，即使你的业务代码很简单，你的首屏bundle size都要100k起步。当然100k不算很大，可是事物都是相对的，相对于大型的管理系统来说100k肯定不算什么，可是对于那些首屏加载时间敏感的应用（例如淘宝，京东主页），100k的bundle size在一些网络环境不好的情况或者手机端真的会影响用户体验。那么如何减少框架的runtime代码大小呢？要想减少runtime代码的最有效的方法就是压根不用runtime。其实回想一下Web开发的历史，很早之前在用Jquery和Bootstrap一把梭的时候，我们的代码不就是不包含runtime的吗？当数据变化时直接通过JavaScript去改变原生DOM节点，没有框架那一系列diff和调度（React Fiber）的过程。这时你可能会问，要减少bundle size真的要回到那个刀耕火种的时代吗？有没有那种既可以让我用接近React和Vue的语法编写代码，同时又不包含框架runtime的办法。这恰恰就是Svelte要做的东西，它采用了Compiler-as-framework的理念，将框架的概念放在编译时而不是运行时。你编写的应用代码在用诸如Webpack和Rollup等工具打包的时候会被直接转换为JavaScript对DOM节点的原生操作，从而让bundle.js不包含框架的runtime。那么Svelte到底可以将bundle size减少多少呢？以下是<a href=\"https://www.freecodecamp.org/news/a-realworld-comparison-of-front-end-frameworks-with-benchmarks-2019-update-4be0d3c78075/\" target=\"_blank\" rel=\"noopener\">RealWorld</a>这个项目的统计：<img src=\"/images/svelte3-intro/bundle-size.png\" alt=\"\"><br>由上面的图表可以看出实现相同功能的应用，Svelte的bundle size大小是Vue的1/4，是React的1/20！单纯从这个数据来看，Svelte这个框架对bundle size的优化真的很大。</p>\n<h2 id=\"低效的Virtual-DOM-Diff\"><a href=\"#低效的Virtual-DOM-Diff\" class=\"headerlink\" title=\"低效的Virtual DOM Diff\"></a>低效的Virtual DOM Diff</h2><p>什么？Virtual DOM不是一直都很高效的吗？其实Virtual DOM高效是一个误解。说Virtual DOM高效的一个理由就是它不会直接操作原生的DOM节点，因为这个很消耗性能。当组件状态变化时它会通过某些diff算法去计算出本次数据更新真实的视图变化，然后只改变“需要改变”的DOM节点。用过React的人可能都会体会到React并没有想象中那么高效，框架有时候会做很多无用功，这体现在很多组件会被“无缘无故”进行重渲染（re-render）。注意这里说的re-render和对原生DOM进行操作是两码事！所谓的re-render是你定义的class Component的render方法被重新执行，或者你的组件函数被重新执行。组件被重渲染是因为Vitual DOM的高效是建立在diff算法上的，而要有diff一定要将组件重渲染才能知道组件的新状态和旧状态有没有发生改变，从而才能计算出哪些DOM需要被更新。你可能会说React Fiber不是出来了吗，这个应该不是问题了吧？其实Fiber这个架构解决的问题是不让组件的重渲染和reconcile的过程阻塞主线程的执行，组件重渲染的问题依然存在，而且据反馈，React Hooks出来后组件的重渲染更加频繁了。正是因为框架本身很难避免无用的渲染，React才允许你使用一些诸如shouldComponentUpdate，PureComponent和useMemo的API去告诉框架哪些组件不需要被重渲染，可是这也就引入了很多模板代码（boilerplate）。如果大家想了解更多关于Virtual DOM存在的问题，可以看一下<a href=\"https://svelte.dev/blog/virtual-dom-is-pure-overhead\" target=\"_blank\" rel=\"noopener\">virtual dom is pure overhead</a>这篇文章。</p>\n<p>那么如何解决Vitual DOM算法低效的问题呢？最有效的解决方案就是<strong>不用Virtual DOM</strong>！其实作为一个框架要解决的问题是当数据发生改变的时候相应的DOM节点会被更新（reactive），Virtual DOM需要比较新老组件的状态才能达到这个目的，而更加高效的办法其实是<strong>数据变化的时候直接更新对应的DOM节点</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (changed.name) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  text.data = name;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>这就是Svelte采用的办法。Svelte会在代码编译的时候将每一个状态的改变转换为对应DOM节点的操作，从而在组件状态变化的时候快速高效地对DOM节点进行更新。根据<a href=\"https://krausest.github.io/js-framework-benchmark/current.html\" target=\"_blank\" rel=\"noopener\">js framework benchmark</a>的统计，Svelte在对一些大列表操作的时候性能比React和Vue都要好。</p>\n<h1 id=\"什么是Svelte\"><a href=\"#什么是Svelte\" class=\"headerlink\" title=\"什么是Svelte?\"></a>什么是Svelte?</h1><p>Svelte是由<a href=\"https://rollupjs.org/guide/en/\" target=\"_blank\" rel=\"noopener\">RollupJs</a>的作者Rich Harris编写的编译型框架，没了解过RollupJs的同学可以去它官网了解一下，它其实是一个类似于Webpack的打包工具。Svelte这个框架具有以下特点：</p>\n<ul>\n<li>和React，Vue等现代Web框架的用法很相似，它可以允许开发者快速开发出具有流畅用户体验的Web应用。</li>\n<li>不使用<strong>Virtual DOM</strong>，也不是一个runtime的库。</li>\n<li>基于Compiler as framework的理念，会在编译的时候将你的应用转换为原生的DOM操作。</li>\n<li>默认就支持类似于CSS modules的CSS scope功能，让你避免CSS样式冲突的困扰。</li>\n<li>原生支持CSS animation。</li>\n<li>极其容易的组件状态管理（state management），减少开发者的模板代码编写（boilerplate less）。</li>\n<li>支持反应式定义（Reactive statement）。</li>\n<li>极其容易的应用全局状态管理，框架本身自带全局状态，类似于React的Redux和Vue的Vuex。</li>\n<li>支持context，避免组件的props drilling。</li>\n</ul>\n<p>Svelte这个框架与Vue和React之间最大的区别是它除了管理组件的状态和追踪他们的渲染，还有很多其他有用的功能。例如它原生支持CSS scope和CSS animation。如果你用React或者Vue是需要引入第三方库来实现同样的功能的，而第三方依赖的引入会给开发者增加学习和维护的成本。</p>\n<h1 id=\"用Svelte搭建一个Bookshop应用\"><a href=\"#用Svelte搭建一个Bookshop应用\" class=\"headerlink\" title=\"用Svelte搭建一个Bookshop应用\"></a>用Svelte搭建一个Bookshop应用</h1><p>接下来我们会从头开始搭建一个基于Svelte框架的简单书店应用bookshop，通过这个demo，希望大家可以理解Svelte的一些基本概念和掌握它的一些基本用法并能够使用Svelte去搭建更加复杂的应用。</p>\n<h2 id=\"应用功能\"><a href=\"#应用功能\" class=\"headerlink\" title=\"应用功能\"></a>应用功能</h2><p>Bookshop应用支持以下功能：</p>\n<ul>\n<li>管理员录入新图书</li>\n<li>展示书店图书列表</li>\n<li>将图书加到购物车</li>\n<li>展示购物车的数据信息</li>\n</ul>\n<h2 id=\"对学习者的技术要求\"><a href=\"#对学习者的技术要求\" class=\"headerlink\" title=\"对学习者的技术要求\"></a>对学习者的技术要求</h2><ul>\n<li>掌握html，css和javascript的基础用法</li>\n<li>有过React或者Vue的相关开发经验最佳</li>\n</ul>\n<p>项目的源代码可以在我的<a href=\"https://github.com/XiaocongDong/svelte-bookshop\" target=\"_blank\" rel=\"noopener\">github仓库</a>找到。</p>\n<h2 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h2><p>首先在我们的本地开发环境新建一个项目文件夹：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir svelte-bookshop</span></pre></td></tr></table></figure>\n<p>接着用svelte官方的脚手架去初始化我们的应用：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">npx degit sveltejs/template svelte-bookshop</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">cd svelte-bookshop</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">yarn</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">yarn dev</span></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Rich-Harris/degit\" target=\"_blank\" rel=\"noopener\">degit</a>这个命令会将github上面的项目文件直接拷贝到某个本地文件夹，这里使用到的svelte/tempalte模板项目的github地址是<a href=\"https://github.com/sveltejs/template\" target=\"_blank\" rel=\"noopener\">这个</a>。以上命令成功运行后，访问<a href=\"http://localhost:5000/\" target=\"_blank\" rel=\"noopener\">http://localhost:5000</a>你会看到如下界面：<br><img src=\"/images/svelte3-intro/bootstrap.png\" alt=\"\"><br>界面很简单就是展示一个hello world，接着让我们看一下生成的项目目录结构：<br><img src=\"/images/svelte3-intro/bootstrap-structure.png\" alt=\"\"><br>生成的代码主要包含以下文件目录结构：</p>\n<ul>\n<li>rollup.config.js，这个是rollup的配置文件，类似于webpack.config.js，里面指定了项目的入口文件是src/main.js。</li>\n<li>src文件夹，这个文件夹用来存储我们的项目源代码，现在只有一个项目的主入口文件main.js和一个组件文件App.svelte。</li>\n<li>public文件夹，这个文件夹是用来存储项目的静态文件（index.html, global.css和favicon.png）和rollup编译生成的静态文件（build文件夹底下的bundle.js和bundle.css以及它们各自的source map）。</li>\n</ul>\n<p>接着让我们具体看一下src文件夹底下的各个文件内容</p>\n<h3 id=\"src-App-svelte\"><a href=\"#src-App-svelte\" class=\"headerlink\" title=\"src/App.svelte\"></a>src/App.svelte</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">let</span> name;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&lt;main&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">\t&lt;h1&gt;Hello &#123;name&#125;!&lt;/</span>h1&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t&lt;p&gt;Visit the &lt;a href=<span class=\"string\">\"https://svelte.dev/tutorial\"</span>&gt;Svelte tutorial&lt;<span class=\"regexp\">/a&gt; to learn how to build Svelte apps.&lt;/</span>p&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"regexp\">/main&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&lt;style&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">\tmain &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">\t\ttext-align: center;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">\t\tpadding: 1em;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">\t\tmax-width: 240px;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">\t\tmargin: 0 auto;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">\th1 &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">\t\tcolor: #ff3e00;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">\t\ttext-transform: uppercase;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">\t\tfont-size: 4em;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">\t\tfont-weight: 100;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\"></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">\t@media (min-width: 640px) &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">\t\tmain &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">\t\t\tmax-width: none;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">\t\t&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">&lt;/</span>style&gt;</span></pre></td></tr></table></figure>\n<p>这个文件定义了一个叫做App的Svelte组件，这里要注意App.svelte文件内并没有定义组件的名称，<strong>组件的名称是由它的文件名确定的</strong>。<strong>Svelte组件的文件名都是以.svelte结尾的</strong>，一个组件文件通常会包含以下三部分内容：</p>\n<ul>\n<li><strong>&lt;script&gt;标签</strong>，和组件相关的任何JavaScript代码都可以放在这里，例如组件的状态定义或者一些异步Ajax请求。在这个App.svelte文件里面没有定义局部的组件状态，而是定义并export了一个name变量。对于Svelte框架，export一个变量就是将这个变量指定为当前组件的一个外部参数 - props。这种做法和React里面的将props作为组件的第一个参数的区别很大，可能大家一开始有点不习惯，不过后面习惯了，你可能也会爱上这种写法的。</li>\n<li><strong>&lt;style&gt;标签</strong>，和组件相关的CSS代码会放在这里。注意这里的CSS是局部生效的（scope），也就是说App.svelte中的h1标签的样式只会对App组件内的h1标签生效，而对项目其他的包括这个组件的子节点的h1标签失效。具体可以用浏览器的调试工具看一下h1标签的实际样式就明白了: <img src=\"/images/svelte3-intro/bootstrap-h1-css.png\" alt=\"\">由上图可以看出Svelte在生成代码的时候会用一些随机的哈希值将组件的样式和其它组件的样式区别开来。</li>\n<li><strong>组件的HTML标签</strong>。组件的HTML标签可以直接在文件中写出来，例如App组件的HTML部分是：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello &#123;name&#125;!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Visit the <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://svelte.dev/tutorial\"</span>&gt;</span>Svelte tutorial<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> to learn how to build Svelte apps.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span></pre></td></tr></table></figure>\nApp组件最外层是一个main标签，main标签里面有一个h1标签和p标签，其中h1标签里面是一个<code>Hello</code>字符串加一个用花括号包裹的插入字符串（interpolation），在React JSX里面的写法应该是<code>Hello ${name}</code>，它们都表示这个位置的字符串就是name这个变量的内容。至于这个name变量就是我们在上面用export定义的外部参数。</li>\n</ul>\n<p>总的来说Svelte会将所有和组件相关的JavaScript，CSS和HTML代码都放在同一个文件里面，这个做法有点像Vue，不过和Vue相比它的模板代码更少。</p>\n<h3 id=\"src-main-js\"><a href=\"#src-main-js\" class=\"headerlink\" title=\"src/main.js\"></a>src/main.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.svelte'</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> App(&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">\ttarget: <span class=\"built_in\">document</span>.body,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">\tprops: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t\tname: <span class=\"string\">'world'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">\t&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> app;</span></pre></td></tr></table></figure>\n<p>这个文件内容很简单，就是将刚刚定义的App组件挂载到目标节点body上，而且为App组件提供了值为<code>world</code>的name参数。这段代码的作用和React中的ReactDOM.render函数一样。</p>\n<p>接着让我们看一下生成的静态代码是什么样子的。</p>\n<h3 id=\"public-build-bundle-js\"><a href=\"#public-build-bundle-js\" class=\"headerlink\" title=\"public/build/bundle.js\"></a>public/build/bundle.js</h3><p>先看生成的JavaScript主文件bundle.js，由于原文件比较大，我只截取了其中比较关键的一部分：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* src/App.svelte generated by Svelte v3.16.4 */</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> file = <span class=\"string\">\"src/App.svelte\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create_fragment</span>(<span class=\"params\">ctx</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">let</span> main;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">let</span> h1;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">let</span> t0;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">let</span> t1;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">let</span> t2;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">let</span> t3;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">let</span> p;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">let</span> t4;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">let</span> a;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">let</span> t6;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> block = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    c: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>(<span class=\"params\"></span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      main = element(<span class=\"string\">\"main\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      h1 = element(<span class=\"string\">\"h1\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">      t0 = text(<span class=\"string\">\"Hello \"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">      t1 = text(<span class=\"comment\">/*name*/</span> ctx[<span class=\"number\">0</span>]);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">      t2 = text(<span class=\"string\">\"!\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      t3 = space();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">      p = element(<span class=\"string\">\"p\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">      t4 = text(<span class=\"string\">\"Visit the \"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">      a = element(<span class=\"string\">\"a\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">      a.textContent = <span class=\"string\">\"Svelte tutorial\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">      t6 = text(<span class=\"string\">\" to learn how to build Svelte apps.\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">      attr_dev(h1, <span class=\"string\">\"class\"</span>, <span class=\"string\">\"svelte-1tky8bj\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">      add_location(h1, file, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">46</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">      attr_dev(a, <span class=\"string\">\"href\"</span>, <span class=\"string\">\"https://svelte.dev/tutorial\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">      add_location(a, file, <span class=\"number\">6</span>, <span class=\"number\">14</span>, <span class=\"number\">83</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">      add_location(p, file, <span class=\"number\">6</span>, <span class=\"number\">1</span>, <span class=\"number\">70</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">      attr_dev(main, <span class=\"string\">\"class\"</span>, <span class=\"string\">\"svelte-1tky8bj\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">      add_location(main, file, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">38</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">    l: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">claim</span>(<span class=\"params\">nodes</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"options.hydrate only works if the component was compiled with the `hydratable: true` option\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">    m: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mount</span>(<span class=\"params\">target, anchor</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">      insert_dev(target, main, anchor);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">      append_dev(main, h1);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">      append_dev(h1, t0);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">      append_dev(h1, t1);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">      append_dev(h1, t2);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">      append_dev(main, t3);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">      append_dev(main, p);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">      append_dev(p, t4);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">      append_dev(p, a);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">      append_dev(p, t6);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">    p: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span>(<span class=\"params\">ctx, dirty</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">if</span> (dirty[<span class=\"number\">0</span>] &amp; <span class=\"comment\">/*name*/</span> <span class=\"number\">1</span>) set_data_dev(t1, <span class=\"comment\">/*name*/</span> ctx[<span class=\"number\">0</span>]);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">    i: noop,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">    o: noop,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">    d: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">destroy</span>(<span class=\"params\">detaching</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">if</span> (detaching) detach_dev(main);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">  dispatch_dev(<span class=\"string\">\"SvelteRegisterBlock\"</span>, &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">    block,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\">    id: create_fragment.name,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">    type: <span class=\"string\">\"component\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">    source: <span class=\"string\">\"\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ctx</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> block;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>这段代码对应的就是我们刚刚定义的App组件，<code>create_fragment</code>方法会接受一个上下文对象<code>ctx</code>参数并返回一个代表组件的block对象。</p>\n<h4 id=\"block\"><a href=\"#block\" class=\"headerlink\" title=\"block\"></a>block</h4><p>这个对象主要包含以下四个重要的方法<code>c</code>（create），<code>m</code>（mount），<code>p</code>（update）和<code>d</code>（destroy）。</p>\n<h4 id=\"c（create）\"><a href=\"#c（create）\" class=\"headerlink\" title=\"c（create）\"></a>c（create）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>(<span class=\"params\"></span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  main = element(<span class=\"string\">\"main\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  h1 = element(<span class=\"string\">\"h1\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  t0 = text(<span class=\"string\">\"Hello \"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  t1 = text(<span class=\"comment\">/*name*/</span> ctx[<span class=\"number\">0</span>]);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  t2 = text(<span class=\"string\">\"!\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  t3 = space();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  p = element(<span class=\"string\">\"p\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  t4 = text(<span class=\"string\">\"Visit the \"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  a = element(<span class=\"string\">\"a\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  a.textContent = <span class=\"string\">\"Svelte tutorial\"</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  t6 = text(<span class=\"string\">\" to learn how to build Svelte apps.\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  attr_dev(h1, <span class=\"string\">\"class\"</span>, <span class=\"string\">\"svelte-1tky8bj\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  add_location(h1, file, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">46</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  attr_dev(a, <span class=\"string\">\"href\"</span>, <span class=\"string\">\"https://svelte.dev/tutorial\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  add_location(a, file, <span class=\"number\">6</span>, <span class=\"number\">14</span>, <span class=\"number\">83</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  add_location(p, file, <span class=\"number\">6</span>, <span class=\"number\">1</span>, <span class=\"number\">70</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  attr_dev(main, <span class=\"string\">\"class\"</span>, <span class=\"string\">\"svelte-1tky8bj\"</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  add_location(main, file, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">38</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>这个函数的功能是生成（create）和App组件相关的一些原生DOM节点，并为它们添加一些元数据（meta data）。</p>\n<h4 id=\"m（mount）\"><a href=\"#m（mount）\" class=\"headerlink\" title=\"m（mount）\"></a>m（mount）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mount</span>(<span class=\"params\">target, anchor</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  insert_dev(target, main, anchor);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  append_dev(main, h1);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  append_dev(h1, t0);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  append_dev(h1, t1);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  append_dev(h1, t2);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  append_dev(main, t3);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  append_dev(main, p);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  append_dev(p, t4);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  append_dev(p, a);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  append_dev(p, t6);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>这个函数的功能是挂载c函数生成的那些DOM节点。</p>\n<h4 id=\"p（update）\"><a href=\"#p（update）\" class=\"headerlink\" title=\"p（update）\"></a>p（update）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span>(<span class=\"params\">ctx, dirty</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (dirty[<span class=\"number\">0</span>] &amp; <span class=\"comment\">/*name*/</span> <span class=\"number\">1</span>) set_data_dev(t1, <span class=\"comment\">/*name*/</span> ctx[<span class=\"number\">0</span>]);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>p函数会在ctx上下文更新的时候去更新对应DOM节点的属性。大概就是当上下文变化的时候，检查一下name这个变量有没有变化，如果发生变化则更新DOM节点。</p>\n<h4 id=\"d（destroy）\"><a href=\"#d（destroy）\" class=\"headerlink\" title=\"d（destroy）\"></a>d（destroy）</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">destroy</span>(<span class=\"params\">detaching</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (detaching) detach_dev(main);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>d函数是用来删除App组件的。</p>\n<p>看完Svelte生成的代码后，我想你对我在文章开头说的Compiler-as-framework等概念应该有了更加深刻的认识，Svelte和React（Vue也类似）不一样的是，<strong>React应用在打包完之后，还保留了如React.createElement，setState等框架函数的调用代码，而Svelte编译完之后，框架代码会被转化为操作原生DOM节点的代码。</strong></p>\n<p>大概了解了项目的组织结构后，让我们开始正式搭建书店bookshop应用。</p>\n<h2 id=\"组件定义\"><a href=\"#组件定义\" class=\"headerlink\" title=\"组件定义\"></a>组件定义</h2><h3 id=\"HTML-markup\"><a href=\"#HTML-markup\" class=\"headerlink\" title=\"HTML markup\"></a>HTML markup</h3><p>首先让我们创建一个展示书本具体信息的卡片组件，在src文件夹底下新建一个BookCard.svelte文件，里面定义一下卡片组件的HTML markup：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/BookCard.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>price<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>description<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>添加到购物车<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td></tr></table></figure>\n<p>然后在App.svelte组件里面使用BookCard组件:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> BookCard <span class=\"keyword\">from</span> <span class=\"string\">\"./BookCard.svelte\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"> ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to my online bookstore!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">BookCard</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span></pre></td></tr></table></figure>\n<p><strong>使用自定义的组件的方法很简单：先在script标签里面导入新定义的组件BookCard，然后将该组件写在App组件的HTML markup里面，语法和JSX一样的。</strong>这时候再查看页面的内容：<img src=\"/images/svelte3-intro/bookcard-markup.png\" alt=\"\"></p>\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><p>BookCard组件虽然出来了，我们得定义一些CSS让它变得更好看一点：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/BookCard.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.card</span> &#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    text-align: left;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    border-radius: 5px;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">box-shadow</span>: 0 2<span class=\"selector-tag\">px</span> 8<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">rgba</span>(0, 0, 0, 0<span class=\"selector-class\">.26</span>);</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    padding: 10px;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  h1 &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    font-size: 20px;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  h2 &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    font-size: 15px;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#999</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  button &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#ff3e00</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    color: white;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    border-radius: 5px;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    cursor: pointer;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">    border: none;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"card\"</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>price<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>description<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>添加到购物车<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td></tr></table></figure>\n<p><strong>给组件定义样式的方法就是新建一个style标签然后把该组件相关的样式写在这个标签内，注意这里的样式只会对组件内的元素有效，不会影响到其他组件的样式的。</strong>加完样式后，界面应该会变成这个样子：<img src=\"/images/svelte3-intro/bookcard-css.png\" alt=\"\"></p>\n<h3 id=\"props定义\"><a href=\"#props定义\" class=\"headerlink\" title=\"props定义\"></a>props定义</h3><p>书本的具体信息应该是由传入的props指定的。<strong>Svelte组件的props要用export来指明，指明的props变量可以直接被组件使用</strong>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/BookCard.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">let</span> title;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">let</span> price;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">let</span> description;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"card\"</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>price<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>description<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>添加到购物车<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td></tr></table></figure>\n<h3 id=\"变量使用\"><a href=\"#变量使用\" class=\"headerlink\" title=\"变量使用\"></a>变量使用</h3><p>定义和引入的变量可以在组件的HTML markup中直接使用，具体用法是在Markup中用花括号（curly braces）引用该变量，具体代码时：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/BookCard.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">let</span> title;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">let</span> price;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">let</span> description;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"card\"</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;title&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>$&#123;price&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;description&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>添加到购物车<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td></tr></table></figure>\n<h3 id=\"组件参数传递\"><a href=\"#组件参数传递\" class=\"headerlink\" title=\"组件参数传递\"></a>组件参数传递</h3><p>然后在父级组件App中，将BookCard需要的参数传给该组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> title = <span class=\"string\">\"JavaScript高级编程\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> price = <span class=\"number\">99.0</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> description = <span class=\"string\">\"一起来学习JavaScript啊\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to my online bookstore!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">BookCard</span> <span class=\"attr\">title</span>=<span class=\"string\">&#123;title&#125;</span> <span class=\"attr\">price</span>=<span class=\"string\">&#123;price&#125;</span> <span class=\"attr\">description</span>=<span class=\"string\">&#123;description&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span></pre></td></tr></table></figure>\n<p>这时候书本卡片的内容应该是传入的参数了：<img src=\"/images/svelte3-intro/bookcard-props.png\" alt=\"\"><br>对于组件参数传递，Svelte还提供了以下更加方便的写法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to my online bookstore!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">BookCard</span> &#123;<span class=\"attr\">title</span>&#125; &#123;<span class=\"attr\">price</span>&#125; &#123;<span class=\"attr\">description</span>&#125; /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span></pre></td></tr></table></figure>\n<h2 id=\"录入书本信息\"><a href=\"#录入书本信息\" class=\"headerlink\" title=\"录入书本信息\"></a>录入书本信息</h2><p>作为一个书店，管理员应该可以录入新的图书，所以我们给App组件添加一个简单的表单来让用户录入数据：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ....</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to my online bookstore!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Add new book<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"title\"</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"title\"</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;title&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"price\"</span>&gt;</span>Price<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"price\"</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;price&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"description\"</span>&gt;</span>Description<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;description&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">BookCard</span> &#123;<span class=\"attr\">title</span>&#125; &#123;<span class=\"attr\">price</span>&#125; &#123;<span class=\"attr\">description</span>&#125; /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span></pre></td></tr></table></figure>\n<p>我们为App组件新建了一些input标签，并指定这些input标签的值为我们之前定义的变量，这时候我们试着改变输入框的内容：<img src=\"/images/svelte3-intro/book-input-not-bind.gif\" alt=\"\"><br>虽然输入框的初始值是变量对应的值，可是变量的值并不会随着输入框的值的改变而改变，也就是它们的值没有”绑定起来“，要想实现双向数据绑定，我们可以给输入框添加一个监听事件。</p>\n<h3 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h3><p><strong>我们可以使用on关键字加事件名称给DOM添加事件监听器</strong>，以下代码将会监听input输入框的<code>input</code>事件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> title = <span class=\"string\">\"JavaScript高级编程\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"actionscript\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleTitleChange</span><span class=\"params\">(event)</span> </span>&#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    title = event.target.value;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to my online bookstore!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Add new book<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"title\"</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"title\"</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;title&#125;</span> <span class=\"attr\">on:input</span>=<span class=\"string\">&#123;handleTitleChange&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span></pre></td></tr></table></figure>\n<p>这时候我们再改变input的值，会发现卡片里面的内容也发生了改变，说明我们成功改变了<code>title</code>变量的值：<img src=\"/images/svelte3-intro/book-input-event-bind.gif\" alt=\"\"></p>\n<h3 id=\"自动数据双向绑定\"><a href=\"#自动数据双向绑定\" class=\"headerlink\" title=\"自动数据双向绑定\"></a>自动数据双向绑定</h3><p>可是如果每一个input标签都要手动添加一个事件监听的话我们的代码会有很多模板代码，为了解决这个问题，<strong>Svelte允许我们直接用bind关键字加要绑定的属性进行双向数据绑定</strong>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> title = <span class=\"string\">\"JavaScript高级编程\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> price = <span class=\"number\">99.0</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> description = <span class=\"string\">\"一起来学习JavaScript啊\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to my online bookstore!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Add new book<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"title\"</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"title\"</span> <span class=\"attr\">bind:value</span>=<span class=\"string\">&#123;title&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"price\"</span>&gt;</span>Price<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"price\"</span> <span class=\"attr\">bind:value</span>=<span class=\"string\">&#123;price&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"description\"</span>&gt;</span>Description<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">bind:value</span>=<span class=\"string\">&#123;description&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span></pre></td></tr></table></figure>\n<p>这时候我们就可以把各个变量的初始值去掉：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> title = <span class=\"string\">\"\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> price = <span class=\"number\">0</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> description = <span class=\"string\">\"\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></pre></td></tr></table></figure>\n<p>这时候我们页面的输入框和所有变量都”绑定“起来了：<img src=\"/images/svelte3-intro/book-input-bind.gif\" alt=\"\"></p>\n<h2 id=\"展示书本列表\"><a href=\"#展示书本列表\" class=\"headerlink\" title=\"展示书本列表\"></a>展示书本列表</h2><p>我们的书店应该不止一本书，要用一个数组把所有的书本存起来：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> books = [];</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></pre></td></tr></table></figure>\n<p>接着我们再为刚刚新增的表单添加一个提交按钮，用户填完书本的信息后点击提交会新建一个book对象，新建的book对象会被加到books列表中去：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> books = [];</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"actionscript\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleAddBook</span><span class=\"params\">()</span> </span>&#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    books = books.concat(&#123; title, price, description &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"actionscript\">    title = <span class=\"string\">\"\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    price = 0;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"actionscript\">    description = <span class=\"string\">\"\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  button &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#ff3e00</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    color: white;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    border-radius: 5px;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    cursor: pointer;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    border: none;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to my online bookstore!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Add new book<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"title\"</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"title\"</span> <span class=\"attr\">bind:value</span>=<span class=\"string\">&#123;title&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"price\"</span>&gt;</span>Price<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"price\"</span> <span class=\"attr\">bind:value</span>=<span class=\"string\">&#123;price&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"description\"</span>&gt;</span>Description<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">bind:value</span>=<span class=\"string\">&#123;description&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">on:click</span>=<span class=\"string\">&#123;handleAddBook&#125;</span>&gt;</span>add book<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span></pre></td></tr></table></figure>\n<h3 id=\"展示列表数据\"><a href=\"#展示列表数据\" class=\"headerlink\" title=\"展示列表数据\"></a>展示列表数据</h3><p><strong>我们可以使用each语法块去展示books列表的数据</strong>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ....</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> books = [];</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"actionscript\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleAddBook</span><span class=\"params\">()</span> </span>&#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    books = books.concat(&#123; title, price, description &#125;);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"actionscript\">    title = <span class=\"string\">\"\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    price = 0;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"actionscript\">    description = <span class=\"string\">\"\"</span>;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;#each books as book&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">BookCard</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">title</span>=<span class=\"string\">&#123;book.title&#125;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">price</span>=<span class=\"string\">&#123;book.price&#125;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">description</span>=<span class=\"string\">&#123;book.description&#125;</span> /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;/each&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span></pre></td></tr></table></figure>\n<p><strong>你也可以直接在each块定义的时候解构出被递归对象里面的内容</strong>，上面的代码变为：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;#each books as &#123; title, price, description &#125;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">BookCard</span> &#123;<span class=\"attr\">title</span>&#125; &#123;<span class=\"attr\">price</span>&#125; &#123;<span class=\"attr\">description</span>&#125; /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;/each&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr></table></figure>\n<p>代码更改完后，你的页面就可以录入新书并展示书的列表了：<img src=\"/images/svelte3-intro/book-list.gif\" alt=\"\"></p>\n<h2 id=\"购物车功能\"><a href=\"#购物车功能\" class=\"headerlink\" title=\"购物车功能\"></a>购物车功能</h2><p>首先我们要为BookCard这个组件的按钮添加一个点击事件：用户点击书本卡片按钮的时候这本书会被加到购物车中。要实现这个效果我们可以为BookCard按钮定义一个<strong>handleAddBook</strong>的参数，这个参数由外面组件来提供，<strong>handleAddBook</strong>函数会在用户点击BookCard按钮的时候被调用并将该书添加购物车中。代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/BookCard.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">let</span> handleAddToCart;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"card\"</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;title&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>$&#123;price&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;description&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">on:click</span>=<span class=\"string\">&#123;()</span> =&gt;</span> handleAddToCart(title)&#125;&gt;添加到购物车<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> booksInCart = [];</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"actionscript\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleAddToCart</span><span class=\"params\">(title)</span> </span>&#123;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> bookNeededToBeAdded = books.find(<span class=\"function\"><span class=\"params\">book</span> =&gt;</span> book.title == title);</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    booksInCart = booksInCart.concat(bookNeededToBeAdded);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>购物车<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;#each booksInCart as &#123; title, price &#125;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>名称: &#123;title&#125;, 价钱: &#123;price&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;/each&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>书单<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;#each books as &#123; title, price, description &#125;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">BookCard</span> &#123;<span class=\"attr\">title</span>&#125; &#123;<span class=\"attr\">price</span>&#125; &#123;<span class=\"attr\">description</span>&#125; &#123;<span class=\"attr\">handleAddToCart</span>&#125; /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;/each&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span></pre></td></tr></table></figure>\n<p>这时候我们就可以看到我们的购物车了：<img src=\"/images/svelte3-intro/book-cart.gif\" alt=\"\"></p>\n<h3 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h3><p><strong>Svelte可以用if语法块根据不同条件展示不同的内容</strong>，我们可以在购物车为空的时候给用户展示一个空的状态：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>购物车<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;#if booksInCart.length === 0&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>购物车空的哦~<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;:else&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;#each booksInCart as &#123; title, price &#125;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>名称: &#123;title&#125;, 价钱: &#123;price&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;/each&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;/if&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">...</span></pre></td></tr></table></figure>\n<p>这时候界面变为：<img src=\"/images/svelte3-intro/book-cart-if.gif\" alt=\"\"></p>\n<h2 id=\"展示购物车统计信息\"><a href=\"#展示购物车统计信息\" class=\"headerlink\" title=\"展示购物车统计信息\"></a>展示购物车统计信息</h2><p>我们再为书店添加一个帮用户统计购物车的书本的功能，可以展示现在购物车里面的书本总数和总金额，代码如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">// src/App.svelte</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> booksInCart = [];</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> booksNumInCart = booksInCart.length;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> totalCheckoutPrice = booksInCart.reduce(</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    (sum, book) =&gt; sum + book.price,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    0</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  );</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>购物车<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>书本总数：&#123;booksNumInCart&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>订单金额：&#123;totalCheckoutPrice&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">...</span></pre></td></tr></table></figure>\n<p>这时候我们操作界面却发现购物车的数据变化时统计数据竟然没有变化：<img src=\"/images/svelte3-intro/book-cart-total.gif\" alt=\"\"><br>数据没有变化的原因是我们每次添加书本到购物车的时候没有手动地去改变<code>booksNumInCart</code>和<code>totalCheckoutPrice</code>的值。不过如果需要在购物车数据发生变化的时候手动维护统计数据的话，代码会变得很丑陋。</p>\n<h3 id=\"反应式定义\"><a href=\"#反应式定义\" class=\"headerlink\" title=\"反应式定义\"></a>反应式定义</h3><p>对于这种情况，Svelte提供了<strong>反应式定义（Reactive assignment）</strong>的方法来表示这种联动的数据，<strong>具体做法就是用<code>$</code>符号定义变量而不是let</strong>，以下是代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> booksInCart = [];</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  $: booksNumInCart = booksInCart.length;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  $: totalCheckoutPrice = booksInCart.reduce(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    (sum, book) =&gt; sum + book.price,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    0</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  );</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></pre></td></tr></table></figure>\n<p>这样当<code>booksInCart</code>这个数据发生改变的时候，<code>booksNumInCart</code>和<code>totalCheckoutPrice</code>这个两个变量就会自动被重新计算。<br>这时候我们再对界面进行操作的话，会发现统计数据会随着购物车的数据变化而自动发生改变：<img src=\"/images/svelte3-intro/book-cart-reactive.gif\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我们的简易书店系统（bookshop）大概就实现了这些功能，现在来总结一下在开发项目的时候覆盖到的Svelte框架基础知识：</p>\n<ul>\n<li>组件定义 - component definition</li>\n<li>变量使用 - using variables </li>\n<li>props定义和参数传递 - props definition and passing</li>\n<li>事件监听 - event listening</li>\n<li>数据绑定 - data binding</li>\n<li>条件判断 - if condition</li>\n<li>列表数据展示 - each block</li>\n</ul>\n<p>其实Svelte框架还有很多我没有提到的有用的功能特性，例如：</p>\n<ul>\n<li>事件传递 - event forwarding</li>\n<li>生命周期函数 - life-cycle functions</li>\n<li>全局状态管理 - stores</li>\n<li>上下文管理 - context</li>\n<li>CSS 动画 - css animation</li>\n<li>…</li>\n</ul>\n<p>由于文章篇幅的限制我在这里没有覆盖Svelte所有的属性，大家兴趣可以看一下svelte的<a href=\"https://svelte.dev/tutorial/basics\" target=\"_blank\" rel=\"noopener\">官方教程</a>。</p>\n<h1 id=\"我个人对Svelte框架的一些看法\"><a href=\"#我个人对Svelte框架的一些看法\" class=\"headerlink\" title=\"我个人对Svelte框架的一些看法\"></a>我个人对Svelte框架的一些看法</h1><p>个人觉得由于Virtual DOM的各种问题，Compiler as framework这个思路应该是前端框架发展的一个趋势。Svelte目前实现的功能虽然已经非常不错了，可是就目前来说我觉得它还有以下问题：</p>\n<ul>\n<li>Scalability - 可扩展性。React和Vue等框架自带的runtime虽然会增加首屏加载的bundle.js，可是当项目变得越来越大的时候，框架的runtime在bundle.js里面占据的比例也会越来越小，相反由于Svelte生成的代码的封装性没有React和Vue的好，它在大型项目中会不会堆积很多重复的代码呢？这个时候我们就得考虑一下是不是存在一个Svelte生成的代码大于React和Vue生成的代码的阈值了。这个问题现在还没有具体的答案，只能等后人实践的时候给出答案了，大家有兴趣可以看一下作者在<a href=\"https://github.com/sveltejs/svelte/issues/2546\" target=\"_blank\" rel=\"noopener\">github上面的讨论</a>。</li>\n<li>Ecosystem - 生态。作为一个最近才火起来的框架，Svelte的生态还远远不及已经普及那么多年的React和Vue，这也是我觉得就目前来说Svelte还撼动不了React和Vue的地位的原因。不过Svelte会不会因为它的先进性而迎来生态大爆发呢？我们可以拭目以待。</li>\n</ul>\n<p>不过有一点可以肯定的是，Svelte由于在一些不复杂的项目中生成的代码远远比React，Vue和Angular小的优势会在一些性能不那么好的嵌入式操作系统中大放异彩。</p>\n<h1 id=\"学习Svelte有用的链接\"><a href=\"#学习Svelte有用的链接\" class=\"headerlink\" title=\"学习Svelte有用的链接\"></a>学习Svelte有用的链接</h1><ul>\n<li><a href=\"https://www.youtube.com/watch?v=AdNJ3fydeao\" target=\"_blank\" rel=\"noopener\">作者的Rethinking reactivity演讲</a></li>\n<li><a href=\"https://svelte.dev/\" target=\"_blank\" rel=\"noopener\">Svelte官网</a></li>\n<li><a href=\"https://github.com/sveltejs/svelte\" target=\"_blank\" rel=\"noopener\">Svelte github仓库</a></li>\n</ul>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt=\"\"></p>"},{"title":"React为什么需要Hook","date":"2020-04-29T03:58:29.000Z","thumbnail":"/gallery/thumbnails/react-hook.jpg","_content":"\n自从React 16.8发布Hook之后，笔者已经在实际项目中使用Hook快一年了，虽然Hook在使用中存在着一些坑，但是总的来说它是一个很好的功能，特别是在减少模板代码和提高代码复用率这些方面特别有用。为了让更多的人了解和使用Hook，我决定写一系列和Hook相关的文章，**本篇文章就是这个系列的第一篇**，主要和大家聊一下**React为什么需要Hook**。\n\n<!-- more -->\n## Hook解决的问题\n### Component非UI逻辑复用困难\n对于React或者其它的基于Component的框架来说，页面是由一个个UI组件构成的。独立的组件可以在同一个项目中甚至不同项目中进行复用，这十分有利于前端开发效率的提高。可是除了UI层面上的复用，一些**状态相关**（stateful）或者**副作用相关**（side effect）的**非UI逻辑**在不同组件之间复用起来却十分困难。对于React来说，你可以使用[高阶组件](https://reactjs.org/docs/higher-order-components.html)（High-order Component）或者[renderProps](https://reactjs.org/docs/render-props.html)的方法来复用这些逻辑，可是这两种方法都不是很好，存在各种各样的问题。如果你之前没有复用过这些非UI逻辑的话，我们可以先来看一个高阶组件的例子。\n\n假如你在开发一个社交App的个人详情页，在这个页面中你需要获取并展示当前用户的在线状态，于是你写了一个叫做UserDetail的组件：\n```javascript\nclass UserDetail extends React.Component {\n  state = {\n    isOnline: false\n  }\n\n  handleUserStatusUpdate = (isOnline) => {\n    this.setState({ isOnline })\n  }\n\n  componentDidMount() {\n    // 组件挂载的时候订阅用户的在线状态\n    userService.subscribeUserStatus(this.props.userId, this.handleUserStatusUpdate)\n  }\n\n  componentDidUpdate(prevProps) {\n    // 用户信息发生了变化\n    if (prevProps.userId != this.props.userId) {\n      // 取消上一个用户的状态订阅\n      userService.unSubscribeUserStatus(this.props.userId, this.handleUserStatusUpdate)\n      // 订阅下一个用户的状态\n      userService.subscribeUserStatus(this.props.userId, this.handleUserStatusUpdate)\n    }\n  }\n\n  componentWillUnmount() {\n    // 组件卸载的时候取消状态订阅\n    userService.unSubscribeUserStatus(this.props.userId, this.handleUserStatusUpdate)\n  }\n\n  render() {\n    return (\n      <UserStatus isOnline={this.state.isOnline}>\n    )\n  }\n}\n```\n从上面的代码可以看出其实在UserDetail组件里面维护用户状态信息并不是一件简单的事情，我们既要在组件挂载和卸载的时候订阅和取消订阅用户的在线状态，而且还要在用户id发生变化的时候更新订阅内容。因此如果另外一个组件也需要用到用户在线状态信息的话，作为一个优秀如你的程序员肯定不想简单地对这部分逻辑进行复制和粘贴，因为**重复的代码逻辑十分不利于代码的维护和重构**。接着让我们看一下如何使用高阶组件的方法来复用这部分逻辑：\n```js\n// withUserStatus.jsx\nconst withUserStatus = (DecoratedComponent) => {\n  class WrapperComponent extends React.Component {\n   state = {\n      isOnline: false\n    }\n\n    handleUserStatusUpdate = (isOnline) => {\n      this.setState({ isOnline })\n    }\n\n    componentDidMount() {\n      // 组件挂载的时候订阅用户的在线状态\n      userService.subscribeUserStatus(this.props.userId, this.handleUserStatusUpdate)\n    }\n\n    componentDidUpdate(prevProps) {\n      // 用户信息发生了变化\n      if (prevProps.userId != this.props.userId) {\n        // 取消上个用户的状态订阅\n        userService.unSubscribeUserStatus(this.props.userId, this.handleUserStatusUpdate)\n        // 订阅下个用户的状态\n        userService.subscribeUserStatus(this.props.userId, this.handleUserStatusUpdate)\n      }\n    }\n\n    componentWillUnmount() {\n      // 组件卸载的时候取消状态订阅\n      userService.unSubscribeUserStatus(this.props.userId, this.handleUserStatusUpdate)\n    }\n\n    render() {\n      return <DecoratedComponent\n        isOnline={this.stateIsOnline}\n        {...this.props}\n      />\n    }\n  }\n\n  return WrapperComponent\n}\n```\n在上面的代码中我们定义了用来获取用户在线状态的高阶组件，它维护了当前用户的在线状态信息并把它作为参数传递给被装饰的组件。接着我们就可以使用这个高阶组件来重构UserDetail组件的代码了：\n```js\nimport withUserStatus from 'somewhere'\n\nclass UserDetail {\n  render() {\n    return <UserStatus isOnline={this.props.isOnline}>\n  }\n}\n\nexport default withUserStatus(UserDetail)\n```\n我们可以看到使用了withUserStatus高阶组件后，UserDetail组件的代码一下子变得少了很多，现在它只需要从父级组件中获取到isOnline参数进行展示就好。而且这个高阶组件可以套用在其它任何需要获取用户在线状态信息的组件上，你再也不需要在前端维护一样的代码了。\n\n这里要注意的是上面的高阶组件封装的逻辑和UI展示没有太大关系，它维护的是用户在线状态信息的获取和更新这些和**外面世界交互的side effect**，以及**用户状态的存储**这些和**组件状态相关**的逻辑。虽然看起来似乎代码很优雅，不过使用高阶组件来封装组件的这些逻辑其实会有以下的问题：\n* **高阶组件的开发对开发者不友好**：开发者（特别是初级开发者）需要花费一段时间才能搞懂其中的原理并且适应它的写法。如果你使用高阶组件已经很久了，你看到这个说法可能会有些不以为然。可是我相信你在最开始接触高阶组件的时候肯定也花了一段时间才能搞懂它的原理，而且从上面的例子来看高阶组件其实是十分笨重的。试想一下，某天你的项目来了一个React新手，估计他也得花费一段时间才能理解你写的那些高阶组件代码吧。\n* **高阶组件之间组合性差**：使用过高阶组件的同学一定试过由于要为组件添加不同的功能，我们要为同一个组件嵌套多个高阶组件，例如这样的代码：`withAuth(withRouter(withUserStatus(UserDetail)))`。这种嵌套写法的高阶组件可能会导致很多问题，其中一个就是props丢失的问题，例如withAuth传递给UserDetail的某个prop可能在withUserStatus组件里面丢失或者被覆盖了。如果你使用的高阶组件都是自己写的话还好，因为调试和修改起来都比较简单，如果你使用的是第三方的库的话就很头痛了。\n* **容易发生wrapper hell**：这个问题在上面嵌套多重高阶组件的时候就会出现，具体会造成我们在React Devtools查看和调试某个组件的时候十分困难。我们可以看幅图片来感受一下：\n![](/images/react-hook/wrapper-hell.jpg)\n这真是高阶组件一时爽，出问题就火葬场的感觉有没有。\n\n和高阶组件类似，renderProps也会存在同样的问题。基于这些原因，React需要一个**新的用来复用组件之间非UI逻辑的方法**，所以Hook就这么诞生了。总的来说，Hook相对于高阶组件和renderProps在复用代码逻辑方面有以下的优势：\n* **写法简单**：每一个Hook都是一个函数，因此它的写法十分简单，而且开发者更容易理解。\n* **组合简单**：Hook组合起来十分简单，组件只需要同时使用多个hook就可以使用到它们所有的功能。\n* **容易扩展**：Hook具有很高的可扩展性，你可以通过自定义Hook来扩展某个Hook的功能。\n* **没有wrapper hell**：Hook不会改变组件的层级结构，也就不会有wrapper hell问题的产生。\n\n除了用来替代难用的HOC和renderProps来解决组件非UI逻辑复用的问题之外，其实Hook还解决了以下这些问题。\n\n### 组件的生命周期函数不适合side effect逻辑的管理\n在上面UserDetail组件中我们将`获取用户的在线状态`这个side effect的相关逻辑分散到了`componentDidMount`，`componentWillUnmount`，`componentDidUpdate`三个生命周期函数中，**这些互相关联的逻辑被分散到不同的函数中会导致bug的发生和产生数据不一致的情况**。除了这个，**我们还可能会在组件的同一个生命周期函数放置很多互不关联的side effect逻辑**。举个例子，如果我们想在用户查看某个用户的详情页面的时候将浏览器当前标签页的title改为当前用户名的话，就需要在组件的componentDidMount生命周期函数里面添加`document.title = this.props.userName`这段代码，可是这段代码和之前订阅用户状态的逻辑是互不关联的，而且随着组件的功能变得越来越复杂，这些不关联而又放在一起的代码只会变得越来越多，于是你的组件逐渐变得难以测试。由此可见Class Component的生命周期函数并不适合用来管理组件的side effect逻辑。\n\n那么这个问题Hook又是如何解决的呢？由于每个Hook都是一个函数，所以你可以**将和某个side effect相关的逻辑都放在同一个函数（Hook）里面**（useEffect Hook）。这种做法有很多好处，首先关联的代码都放在一起，可以十分方便代码的维护，其次实现了某个side effect的Hook还可以被不同的组件进行复用来提高开发效率。举个例子，我们就可以将改变标签页title的逻辑封装在一个自定的Hook中，如果其它组件有相同逻辑的话就可以使用这个Hook了：\n```js\n// 自定义Hook\nfunction useTabTitle(title) {\n  React.useEffect(() => {\n    document.title = title\n  }, [title])\n}\n\n// UserDetail中使用useTabTitle Hook\nfunction UserDetail = (props) => {\n  useTabTitle(props.userName)\n  ...\n}\n```\n这个复用side effect的功能其实是一个十分强大的功能，你可以检查一下你现在写的项目代码，肯定有很多组件的side effect是可以封装成Hook的。封装成Hook的side effect不仅仅可以在某一个项目中使用，还可以在不同项目中复用，这对我们的开发效率肯定会有很大的提升。\n\n### 不友好的Class Component\n其实Class Component除了生命周期函数不适合side effect的管理之外，还有一些其它的问题。\n\n首先Class Component对开发者不友好。如果你要使用Class Component首先你得理解JS里面的this是怎么使用的，它的使用方法其实和其他语言有很大的区别。由于JS本身的原因，在Class Component中你要手动为注册的event listener绑定this，不然就会报`this is undefined`的错误，早期的React玩家肯定体验过每个事件监听函数都要手动绑定this的酸爽感觉，乏味而且容易引发bug，这个问题直到[class properties](https://babeljs.io/docs/en/babel-plugin-proposal-class-properties)出来之后才有所改善。\n```js\nclass UserDetail extends React.Component {\n  constructor(props) {\n    super(props)\n    this.handlerUserStatusUpdate = this.handleUserStatusUpdate.bind(this)\n    ...\n  }\n}\n```\n\n除了对开发者不友好，Class Component对机器也很不友好。例如Class Component的生命周期函数很难被minified。其次，Class Component的存在可能会阻碍React后面的发展。举个例子，随着新的理念 - Compiler as Framework的兴起，一些诸如[Svelte](https://svelte.dev/), [Angular](https://angular.io/)和[Glimmer](https://glimmerjs.com/)的框架将框架的概念放到了编译时以去除production code里面的runtime代码来加快应用的首屏加载速度，这个方案已经开始被逐渐采纳了，而且未来有可能会成为潮流。如果大家不是很了解Compiler as Framework理念的话，可以看我的另外一篇文章：[Svelte 3 初学者完全指南](https://superseany.com/2019/12/17/Svelte-3-%E5%88%9D%E5%AD%A6%E8%80%85%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/)。React已经存在了5年，它如果想要继续存在多五年的话也要跟上这个潮流，出于这个原因，React团队和[Prepack](https://prepack.io/)团队进行了一些和Compiler as Framework相关的尝试，而且就目前实验的结果来说这个思路有很大的想象空间。不过在这个过程中React的开发者也发现了一个严重的问题，那就是开发者可能会以一种非常规的模式来使用Class Component，而这些模式会降低这个方案带来的优化效果。\n\n因此React要想得到进一步的发展的话，就必须让开发者更多地使用Function Component而不是Class Component。而开发者偏向于使用Class Component而不是Function Component的一个主要原因是Function Component没有状态管理和生命周期函数等功能。Hook出来后这个问题就不存在了，因为开发者可以使用**useState** Hook来在Function Component使用**state**以及**useEffect** Hook来实现一些和**生命周期函数类似的功能**。最重要的是，React将所有复杂的实现都封装在框架里面了，开发者无需学习函数式编程和响应式编程的概念也可以很好地使用Hook来进行开发。\n\n## 总结\n本篇文章我主要论述了React为啥要有Hook，总的来说是以下三个原因：\n* Component非UI逻辑复用困难。\n* 组件的生命周期函数不适合side effect逻辑的管理。\n* 不友好的Class Component。\n\n如果你有其他的补充或者觉得我有什么地方说得不对的话可以在评论区和我一起探讨，在后面一篇文章中我将会为大家深入介绍一些常用的Hook。\n\n## 参考文献\n* [React Today and Tomorrow and 90% Cleaner React With Hooks](https://www.youtube.com/watch?v=dpw9EHDh2bM)\n* [React Hook RFC](https://github.com/reactjs/rfcs/pull/68)\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","source":"_posts/React为什么需要Hook.md","raw":"---\ntitle: React为什么需要Hook\ntags:\n  - React\n  - Hook\ncategories:\n  - 前端\ndate: 2020-04-29 11:58:29\nthumbnail: /gallery/thumbnails/react-hook.jpg\n---\n\n自从React 16.8发布Hook之后，笔者已经在实际项目中使用Hook快一年了，虽然Hook在使用中存在着一些坑，但是总的来说它是一个很好的功能，特别是在减少模板代码和提高代码复用率这些方面特别有用。为了让更多的人了解和使用Hook，我决定写一系列和Hook相关的文章，**本篇文章就是这个系列的第一篇**，主要和大家聊一下**React为什么需要Hook**。\n\n<!-- more -->\n## Hook解决的问题\n### Component非UI逻辑复用困难\n对于React或者其它的基于Component的框架来说，页面是由一个个UI组件构成的。独立的组件可以在同一个项目中甚至不同项目中进行复用，这十分有利于前端开发效率的提高。可是除了UI层面上的复用，一些**状态相关**（stateful）或者**副作用相关**（side effect）的**非UI逻辑**在不同组件之间复用起来却十分困难。对于React来说，你可以使用[高阶组件](https://reactjs.org/docs/higher-order-components.html)（High-order Component）或者[renderProps](https://reactjs.org/docs/render-props.html)的方法来复用这些逻辑，可是这两种方法都不是很好，存在各种各样的问题。如果你之前没有复用过这些非UI逻辑的话，我们可以先来看一个高阶组件的例子。\n\n假如你在开发一个社交App的个人详情页，在这个页面中你需要获取并展示当前用户的在线状态，于是你写了一个叫做UserDetail的组件：\n```javascript\nclass UserDetail extends React.Component {\n  state = {\n    isOnline: false\n  }\n\n  handleUserStatusUpdate = (isOnline) => {\n    this.setState({ isOnline })\n  }\n\n  componentDidMount() {\n    // 组件挂载的时候订阅用户的在线状态\n    userService.subscribeUserStatus(this.props.userId, this.handleUserStatusUpdate)\n  }\n\n  componentDidUpdate(prevProps) {\n    // 用户信息发生了变化\n    if (prevProps.userId != this.props.userId) {\n      // 取消上一个用户的状态订阅\n      userService.unSubscribeUserStatus(this.props.userId, this.handleUserStatusUpdate)\n      // 订阅下一个用户的状态\n      userService.subscribeUserStatus(this.props.userId, this.handleUserStatusUpdate)\n    }\n  }\n\n  componentWillUnmount() {\n    // 组件卸载的时候取消状态订阅\n    userService.unSubscribeUserStatus(this.props.userId, this.handleUserStatusUpdate)\n  }\n\n  render() {\n    return (\n      <UserStatus isOnline={this.state.isOnline}>\n    )\n  }\n}\n```\n从上面的代码可以看出其实在UserDetail组件里面维护用户状态信息并不是一件简单的事情，我们既要在组件挂载和卸载的时候订阅和取消订阅用户的在线状态，而且还要在用户id发生变化的时候更新订阅内容。因此如果另外一个组件也需要用到用户在线状态信息的话，作为一个优秀如你的程序员肯定不想简单地对这部分逻辑进行复制和粘贴，因为**重复的代码逻辑十分不利于代码的维护和重构**。接着让我们看一下如何使用高阶组件的方法来复用这部分逻辑：\n```js\n// withUserStatus.jsx\nconst withUserStatus = (DecoratedComponent) => {\n  class WrapperComponent extends React.Component {\n   state = {\n      isOnline: false\n    }\n\n    handleUserStatusUpdate = (isOnline) => {\n      this.setState({ isOnline })\n    }\n\n    componentDidMount() {\n      // 组件挂载的时候订阅用户的在线状态\n      userService.subscribeUserStatus(this.props.userId, this.handleUserStatusUpdate)\n    }\n\n    componentDidUpdate(prevProps) {\n      // 用户信息发生了变化\n      if (prevProps.userId != this.props.userId) {\n        // 取消上个用户的状态订阅\n        userService.unSubscribeUserStatus(this.props.userId, this.handleUserStatusUpdate)\n        // 订阅下个用户的状态\n        userService.subscribeUserStatus(this.props.userId, this.handleUserStatusUpdate)\n      }\n    }\n\n    componentWillUnmount() {\n      // 组件卸载的时候取消状态订阅\n      userService.unSubscribeUserStatus(this.props.userId, this.handleUserStatusUpdate)\n    }\n\n    render() {\n      return <DecoratedComponent\n        isOnline={this.stateIsOnline}\n        {...this.props}\n      />\n    }\n  }\n\n  return WrapperComponent\n}\n```\n在上面的代码中我们定义了用来获取用户在线状态的高阶组件，它维护了当前用户的在线状态信息并把它作为参数传递给被装饰的组件。接着我们就可以使用这个高阶组件来重构UserDetail组件的代码了：\n```js\nimport withUserStatus from 'somewhere'\n\nclass UserDetail {\n  render() {\n    return <UserStatus isOnline={this.props.isOnline}>\n  }\n}\n\nexport default withUserStatus(UserDetail)\n```\n我们可以看到使用了withUserStatus高阶组件后，UserDetail组件的代码一下子变得少了很多，现在它只需要从父级组件中获取到isOnline参数进行展示就好。而且这个高阶组件可以套用在其它任何需要获取用户在线状态信息的组件上，你再也不需要在前端维护一样的代码了。\n\n这里要注意的是上面的高阶组件封装的逻辑和UI展示没有太大关系，它维护的是用户在线状态信息的获取和更新这些和**外面世界交互的side effect**，以及**用户状态的存储**这些和**组件状态相关**的逻辑。虽然看起来似乎代码很优雅，不过使用高阶组件来封装组件的这些逻辑其实会有以下的问题：\n* **高阶组件的开发对开发者不友好**：开发者（特别是初级开发者）需要花费一段时间才能搞懂其中的原理并且适应它的写法。如果你使用高阶组件已经很久了，你看到这个说法可能会有些不以为然。可是我相信你在最开始接触高阶组件的时候肯定也花了一段时间才能搞懂它的原理，而且从上面的例子来看高阶组件其实是十分笨重的。试想一下，某天你的项目来了一个React新手，估计他也得花费一段时间才能理解你写的那些高阶组件代码吧。\n* **高阶组件之间组合性差**：使用过高阶组件的同学一定试过由于要为组件添加不同的功能，我们要为同一个组件嵌套多个高阶组件，例如这样的代码：`withAuth(withRouter(withUserStatus(UserDetail)))`。这种嵌套写法的高阶组件可能会导致很多问题，其中一个就是props丢失的问题，例如withAuth传递给UserDetail的某个prop可能在withUserStatus组件里面丢失或者被覆盖了。如果你使用的高阶组件都是自己写的话还好，因为调试和修改起来都比较简单，如果你使用的是第三方的库的话就很头痛了。\n* **容易发生wrapper hell**：这个问题在上面嵌套多重高阶组件的时候就会出现，具体会造成我们在React Devtools查看和调试某个组件的时候十分困难。我们可以看幅图片来感受一下：\n![](/images/react-hook/wrapper-hell.jpg)\n这真是高阶组件一时爽，出问题就火葬场的感觉有没有。\n\n和高阶组件类似，renderProps也会存在同样的问题。基于这些原因，React需要一个**新的用来复用组件之间非UI逻辑的方法**，所以Hook就这么诞生了。总的来说，Hook相对于高阶组件和renderProps在复用代码逻辑方面有以下的优势：\n* **写法简单**：每一个Hook都是一个函数，因此它的写法十分简单，而且开发者更容易理解。\n* **组合简单**：Hook组合起来十分简单，组件只需要同时使用多个hook就可以使用到它们所有的功能。\n* **容易扩展**：Hook具有很高的可扩展性，你可以通过自定义Hook来扩展某个Hook的功能。\n* **没有wrapper hell**：Hook不会改变组件的层级结构，也就不会有wrapper hell问题的产生。\n\n除了用来替代难用的HOC和renderProps来解决组件非UI逻辑复用的问题之外，其实Hook还解决了以下这些问题。\n\n### 组件的生命周期函数不适合side effect逻辑的管理\n在上面UserDetail组件中我们将`获取用户的在线状态`这个side effect的相关逻辑分散到了`componentDidMount`，`componentWillUnmount`，`componentDidUpdate`三个生命周期函数中，**这些互相关联的逻辑被分散到不同的函数中会导致bug的发生和产生数据不一致的情况**。除了这个，**我们还可能会在组件的同一个生命周期函数放置很多互不关联的side effect逻辑**。举个例子，如果我们想在用户查看某个用户的详情页面的时候将浏览器当前标签页的title改为当前用户名的话，就需要在组件的componentDidMount生命周期函数里面添加`document.title = this.props.userName`这段代码，可是这段代码和之前订阅用户状态的逻辑是互不关联的，而且随着组件的功能变得越来越复杂，这些不关联而又放在一起的代码只会变得越来越多，于是你的组件逐渐变得难以测试。由此可见Class Component的生命周期函数并不适合用来管理组件的side effect逻辑。\n\n那么这个问题Hook又是如何解决的呢？由于每个Hook都是一个函数，所以你可以**将和某个side effect相关的逻辑都放在同一个函数（Hook）里面**（useEffect Hook）。这种做法有很多好处，首先关联的代码都放在一起，可以十分方便代码的维护，其次实现了某个side effect的Hook还可以被不同的组件进行复用来提高开发效率。举个例子，我们就可以将改变标签页title的逻辑封装在一个自定的Hook中，如果其它组件有相同逻辑的话就可以使用这个Hook了：\n```js\n// 自定义Hook\nfunction useTabTitle(title) {\n  React.useEffect(() => {\n    document.title = title\n  }, [title])\n}\n\n// UserDetail中使用useTabTitle Hook\nfunction UserDetail = (props) => {\n  useTabTitle(props.userName)\n  ...\n}\n```\n这个复用side effect的功能其实是一个十分强大的功能，你可以检查一下你现在写的项目代码，肯定有很多组件的side effect是可以封装成Hook的。封装成Hook的side effect不仅仅可以在某一个项目中使用，还可以在不同项目中复用，这对我们的开发效率肯定会有很大的提升。\n\n### 不友好的Class Component\n其实Class Component除了生命周期函数不适合side effect的管理之外，还有一些其它的问题。\n\n首先Class Component对开发者不友好。如果你要使用Class Component首先你得理解JS里面的this是怎么使用的，它的使用方法其实和其他语言有很大的区别。由于JS本身的原因，在Class Component中你要手动为注册的event listener绑定this，不然就会报`this is undefined`的错误，早期的React玩家肯定体验过每个事件监听函数都要手动绑定this的酸爽感觉，乏味而且容易引发bug，这个问题直到[class properties](https://babeljs.io/docs/en/babel-plugin-proposal-class-properties)出来之后才有所改善。\n```js\nclass UserDetail extends React.Component {\n  constructor(props) {\n    super(props)\n    this.handlerUserStatusUpdate = this.handleUserStatusUpdate.bind(this)\n    ...\n  }\n}\n```\n\n除了对开发者不友好，Class Component对机器也很不友好。例如Class Component的生命周期函数很难被minified。其次，Class Component的存在可能会阻碍React后面的发展。举个例子，随着新的理念 - Compiler as Framework的兴起，一些诸如[Svelte](https://svelte.dev/), [Angular](https://angular.io/)和[Glimmer](https://glimmerjs.com/)的框架将框架的概念放到了编译时以去除production code里面的runtime代码来加快应用的首屏加载速度，这个方案已经开始被逐渐采纳了，而且未来有可能会成为潮流。如果大家不是很了解Compiler as Framework理念的话，可以看我的另外一篇文章：[Svelte 3 初学者完全指南](https://superseany.com/2019/12/17/Svelte-3-%E5%88%9D%E5%AD%A6%E8%80%85%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/)。React已经存在了5年，它如果想要继续存在多五年的话也要跟上这个潮流，出于这个原因，React团队和[Prepack](https://prepack.io/)团队进行了一些和Compiler as Framework相关的尝试，而且就目前实验的结果来说这个思路有很大的想象空间。不过在这个过程中React的开发者也发现了一个严重的问题，那就是开发者可能会以一种非常规的模式来使用Class Component，而这些模式会降低这个方案带来的优化效果。\n\n因此React要想得到进一步的发展的话，就必须让开发者更多地使用Function Component而不是Class Component。而开发者偏向于使用Class Component而不是Function Component的一个主要原因是Function Component没有状态管理和生命周期函数等功能。Hook出来后这个问题就不存在了，因为开发者可以使用**useState** Hook来在Function Component使用**state**以及**useEffect** Hook来实现一些和**生命周期函数类似的功能**。最重要的是，React将所有复杂的实现都封装在框架里面了，开发者无需学习函数式编程和响应式编程的概念也可以很好地使用Hook来进行开发。\n\n## 总结\n本篇文章我主要论述了React为啥要有Hook，总的来说是以下三个原因：\n* Component非UI逻辑复用困难。\n* 组件的生命周期函数不适合side effect逻辑的管理。\n* 不友好的Class Component。\n\n如果你有其他的补充或者觉得我有什么地方说得不对的话可以在评论区和我一起探讨，在后面一篇文章中我将会为大家深入介绍一些常用的Hook。\n\n## 参考文献\n* [React Today and Tomorrow and 90% Cleaner React With Hooks](https://www.youtube.com/watch?v=dpw9EHDh2bM)\n* [React Hook RFC](https://github.com/reactjs/rfcs/pull/68)\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","slug":"React为什么需要Hook","published":1,"updated":"2021-02-08T06:16:56.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0gqf6fh0009ucnx53gk9icz","content":"<p>自从React 16.8发布Hook之后，笔者已经在实际项目中使用Hook快一年了，虽然Hook在使用中存在着一些坑，但是总的来说它是一个很好的功能，特别是在减少模板代码和提高代码复用率这些方面特别有用。为了让更多的人了解和使用Hook，我决定写一系列和Hook相关的文章，<strong>本篇文章就是这个系列的第一篇</strong>，主要和大家聊一下<strong>React为什么需要Hook</strong>。</p>\n<a id=\"more\"></a>\n<h2 id=\"Hook解决的问题\"><a href=\"#Hook解决的问题\" class=\"headerlink\" title=\"Hook解决的问题\"></a>Hook解决的问题</h2><h3 id=\"Component非UI逻辑复用困难\"><a href=\"#Component非UI逻辑复用困难\" class=\"headerlink\" title=\"Component非UI逻辑复用困难\"></a>Component非UI逻辑复用困难</h3><p>对于React或者其它的基于Component的框架来说，页面是由一个个UI组件构成的。独立的组件可以在同一个项目中甚至不同项目中进行复用，这十分有利于前端开发效率的提高。可是除了UI层面上的复用，一些<strong>状态相关</strong>（stateful）或者<strong>副作用相关</strong>（side effect）的<strong>非UI逻辑</strong>在不同组件之间复用起来却十分困难。对于React来说，你可以使用<a href=\"https://reactjs.org/docs/higher-order-components.html\" target=\"_blank\" rel=\"noopener\">高阶组件</a>（High-order Component）或者<a href=\"https://reactjs.org/docs/render-props.html\" target=\"_blank\" rel=\"noopener\">renderProps</a>的方法来复用这些逻辑，可是这两种方法都不是很好，存在各种各样的问题。如果你之前没有复用过这些非UI逻辑的话，我们可以先来看一个高阶组件的例子。</p>\n<p>假如你在开发一个社交App的个人详情页，在这个页面中你需要获取并展示当前用户的在线状态，于是你写了一个叫做UserDetail的组件：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserDetail</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  state = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    isOnline: <span class=\"hljs-literal\">false</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  handleUserStatusUpdate = <span class=\"hljs-function\">(<span class=\"hljs-params\">isOnline</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.setState(&#123; isOnline &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  componentDidMount() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 组件挂载的时候订阅用户的在线状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    userService.subscribeUserStatus(<span class=\"hljs-keyword\">this</span>.props.userId, <span class=\"hljs-keyword\">this</span>.handleUserStatusUpdate)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  componentDidUpdate(prevProps) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 用户信息发生了变化</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (prevProps.userId != <span class=\"hljs-keyword\">this</span>.props.userId) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-comment\">// 取消上一个用户的状态订阅</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      userService.unSubscribeUserStatus(<span class=\"hljs-keyword\">this</span>.props.userId, <span class=\"hljs-keyword\">this</span>.handleUserStatusUpdate)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-comment\">// 订阅下一个用户的状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">      userService.subscribeUserStatus(<span class=\"hljs-keyword\">this</span>.props.userId, <span class=\"hljs-keyword\">this</span>.handleUserStatusUpdate)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">  componentWillUnmount() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 组件卸载的时候取消状态订阅</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">    userService.unSubscribeUserStatus(<span class=\"hljs-keyword\">this</span>.props.userId, <span class=\"hljs-keyword\">this</span>.handleUserStatusUpdate)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">  render() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;UserStatus isOnline=&#123;<span class=\"hljs-keyword\">this</span>.state.isOnline&#125;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">    )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>从上面的代码可以看出其实在UserDetail组件里面维护用户状态信息并不是一件简单的事情，我们既要在组件挂载和卸载的时候订阅和取消订阅用户的在线状态，而且还要在用户id发生变化的时候更新订阅内容。因此如果另外一个组件也需要用到用户在线状态信息的话，作为一个优秀如你的程序员肯定不想简单地对这部分逻辑进行复制和粘贴，因为<strong>重复的代码逻辑十分不利于代码的维护和重构</strong>。接着让我们看一下如何使用高阶组件的方法来复用这部分逻辑：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// withUserStatus.jsx</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> withUserStatus = <span class=\"hljs-function\">(<span class=\"hljs-params\">DecoratedComponent</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WrapperComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">   state = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">      isOnline: <span class=\"hljs-literal\">false</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    handleUserStatusUpdate = <span class=\"hljs-function\">(<span class=\"hljs-params\">isOnline</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.setState(&#123; isOnline &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    componentDidMount() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-comment\">// 组件挂载的时候订阅用户的在线状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      userService.subscribeUserStatus(<span class=\"hljs-keyword\">this</span>.props.userId, <span class=\"hljs-keyword\">this</span>.handleUserStatusUpdate)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    componentDidUpdate(prevProps) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-comment\">// 用户信息发生了变化</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">if</span> (prevProps.userId != <span class=\"hljs-keyword\">this</span>.props.userId) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-comment\">// 取消上个用户的状态订阅</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">        userService.unSubscribeUserStatus(<span class=\"hljs-keyword\">this</span>.props.userId, <span class=\"hljs-keyword\">this</span>.handleUserStatusUpdate)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-comment\">// 订阅下个用户的状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">        userService.subscribeUserStatus(<span class=\"hljs-keyword\">this</span>.props.userId, <span class=\"hljs-keyword\">this</span>.handleUserStatusUpdate)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">    componentWillUnmount() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-comment\">// 组件卸载的时候取消状态订阅</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">      userService.unSubscribeUserStatus(<span class=\"hljs-keyword\">this</span>.props.userId, <span class=\"hljs-keyword\">this</span>.handleUserStatusUpdate)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">    render() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DecoratedComponent</span></span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-xml\">        isOnline=&#123;this.stateIsOnline&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-xml\">        &#123;...this.props&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-xml\">      /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-xml\">    &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-xml\">  &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-xml\">  return WrapperComponent</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-xml\">&#125;</span></span></pre></td></tr></table></figure>\n<p>在上面的代码中我们定义了用来获取用户在线状态的高阶组件，它维护了当前用户的在线状态信息并把它作为参数传递给被装饰的组件。接着我们就可以使用这个高阶组件来重构UserDetail组件的代码了：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> withUserStatus <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'somewhere'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserDetail</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  render() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">UserStatus</span> <span class=\"hljs-attr\">isOnline</span>=<span class=\"hljs-string\">&#123;this.props.isOnline&#125;</span>&gt;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-xml\">  &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-xml\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-xml\">export default withUserStatus(UserDetail)</span></span></pre></td></tr></table></figure>\n<p>我们可以看到使用了withUserStatus高阶组件后，UserDetail组件的代码一下子变得少了很多，现在它只需要从父级组件中获取到isOnline参数进行展示就好。而且这个高阶组件可以套用在其它任何需要获取用户在线状态信息的组件上，你再也不需要在前端维护一样的代码了。</p>\n<p>这里要注意的是上面的高阶组件封装的逻辑和UI展示没有太大关系，它维护的是用户在线状态信息的获取和更新这些和<strong>外面世界交互的side effect</strong>，以及<strong>用户状态的存储</strong>这些和<strong>组件状态相关</strong>的逻辑。虽然看起来似乎代码很优雅，不过使用高阶组件来封装组件的这些逻辑其实会有以下的问题：</p>\n<ul>\n<li><strong>高阶组件的开发对开发者不友好</strong>：开发者（特别是初级开发者）需要花费一段时间才能搞懂其中的原理并且适应它的写法。如果你使用高阶组件已经很久了，你看到这个说法可能会有些不以为然。可是我相信你在最开始接触高阶组件的时候肯定也花了一段时间才能搞懂它的原理，而且从上面的例子来看高阶组件其实是十分笨重的。试想一下，某天你的项目来了一个React新手，估计他也得花费一段时间才能理解你写的那些高阶组件代码吧。</li>\n<li><strong>高阶组件之间组合性差</strong>：使用过高阶组件的同学一定试过由于要为组件添加不同的功能，我们要为同一个组件嵌套多个高阶组件，例如这样的代码：<code>withAuth(withRouter(withUserStatus(UserDetail)))</code>。这种嵌套写法的高阶组件可能会导致很多问题，其中一个就是props丢失的问题，例如withAuth传递给UserDetail的某个prop可能在withUserStatus组件里面丢失或者被覆盖了。如果你使用的高阶组件都是自己写的话还好，因为调试和修改起来都比较简单，如果你使用的是第三方的库的话就很头痛了。</li>\n<li><strong>容易发生wrapper hell</strong>：这个问题在上面嵌套多重高阶组件的时候就会出现，具体会造成我们在React Devtools查看和调试某个组件的时候十分困难。我们可以看幅图片来感受一下：<br><img src=\"/images/react-hook/wrapper-hell.jpg\" alt><br>这真是高阶组件一时爽，出问题就火葬场的感觉有没有。</li>\n</ul>\n<p>和高阶组件类似，renderProps也会存在同样的问题。基于这些原因，React需要一个<strong>新的用来复用组件之间非UI逻辑的方法</strong>，所以Hook就这么诞生了。总的来说，Hook相对于高阶组件和renderProps在复用代码逻辑方面有以下的优势：</p>\n<ul>\n<li><strong>写法简单</strong>：每一个Hook都是一个函数，因此它的写法十分简单，而且开发者更容易理解。</li>\n<li><strong>组合简单</strong>：Hook组合起来十分简单，组件只需要同时使用多个hook就可以使用到它们所有的功能。</li>\n<li><strong>容易扩展</strong>：Hook具有很高的可扩展性，你可以通过自定义Hook来扩展某个Hook的功能。</li>\n<li><strong>没有wrapper hell</strong>：Hook不会改变组件的层级结构，也就不会有wrapper hell问题的产生。</li>\n</ul>\n<p>除了用来替代难用的HOC和renderProps来解决组件非UI逻辑复用的问题之外，其实Hook还解决了以下这些问题。</p>\n<h3 id=\"组件的生命周期函数不适合side-effect逻辑的管理\"><a href=\"#组件的生命周期函数不适合side-effect逻辑的管理\" class=\"headerlink\" title=\"组件的生命周期函数不适合side effect逻辑的管理\"></a>组件的生命周期函数不适合side effect逻辑的管理</h3><p>在上面UserDetail组件中我们将<code>获取用户的在线状态</code>这个side effect的相关逻辑分散到了<code>componentDidMount</code>，<code>componentWillUnmount</code>，<code>componentDidUpdate</code>三个生命周期函数中，<strong>这些互相关联的逻辑被分散到不同的函数中会导致bug的发生和产生数据不一致的情况</strong>。除了这个，<strong>我们还可能会在组件的同一个生命周期函数放置很多互不关联的side effect逻辑</strong>。举个例子，如果我们想在用户查看某个用户的详情页面的时候将浏览器当前标签页的title改为当前用户名的话，就需要在组件的componentDidMount生命周期函数里面添加<code>document.title = this.props.userName</code>这段代码，可是这段代码和之前订阅用户状态的逻辑是互不关联的，而且随着组件的功能变得越来越复杂，这些不关联而又放在一起的代码只会变得越来越多，于是你的组件逐渐变得难以测试。由此可见Class Component的生命周期函数并不适合用来管理组件的side effect逻辑。</p>\n<p>那么这个问题Hook又是如何解决的呢？由于每个Hook都是一个函数，所以你可以<strong>将和某个side effect相关的逻辑都放在同一个函数（Hook）里面</strong>（useEffect Hook）。这种做法有很多好处，首先关联的代码都放在一起，可以十分方便代码的维护，其次实现了某个side effect的Hook还可以被不同的组件进行复用来提高开发效率。举个例子，我们就可以将改变标签页title的逻辑封装在一个自定的Hook中，如果其它组件有相同逻辑的话就可以使用这个Hook了：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 自定义Hook</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">useTabTitle</span>(<span class=\"hljs-params\">title</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  React.useEffect(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-built_in\">document</span>.title = title</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;, [title])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// UserDetail中使用useTabTitle Hook</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">UserDetail</span> = (<span class=\"hljs-params\">props</span>) =&gt; </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  useTabTitle(props.userName)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>这个复用side effect的功能其实是一个十分强大的功能，你可以检查一下你现在写的项目代码，肯定有很多组件的side effect是可以封装成Hook的。封装成Hook的side effect不仅仅可以在某一个项目中使用，还可以在不同项目中复用，这对我们的开发效率肯定会有很大的提升。</p>\n<h3 id=\"不友好的Class-Component\"><a href=\"#不友好的Class-Component\" class=\"headerlink\" title=\"不友好的Class Component\"></a>不友好的Class Component</h3><p>其实Class Component除了生命周期函数不适合side effect的管理之外，还有一些其它的问题。</p>\n<p>首先Class Component对开发者不友好。如果你要使用Class Component首先你得理解JS里面的this是怎么使用的，它的使用方法其实和其他语言有很大的区别。由于JS本身的原因，在Class Component中你要手动为注册的event listener绑定this，不然就会报<code>this is undefined</code>的错误，早期的React玩家肯定体验过每个事件监听函数都要手动绑定this的酸爽感觉，乏味而且容易引发bug，这个问题直到<a href=\"https://babeljs.io/docs/en/babel-plugin-proposal-class-properties\" target=\"_blank\" rel=\"noopener\">class properties</a>出来之后才有所改善。</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserDetail</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">constructor</span>(props) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">super</span>(props)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.handlerUserStatusUpdate = <span class=\"hljs-keyword\">this</span>.handleUserStatusUpdate.bind(<span class=\"hljs-keyword\">this</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>除了对开发者不友好，Class Component对机器也很不友好。例如Class Component的生命周期函数很难被minified。其次，Class Component的存在可能会阻碍React后面的发展。举个例子，随着新的理念 - Compiler as Framework的兴起，一些诸如<a href=\"https://svelte.dev/\" target=\"_blank\" rel=\"noopener\">Svelte</a>, <a href=\"https://angular.io/\" target=\"_blank\" rel=\"noopener\">Angular</a>和<a href=\"https://glimmerjs.com/\" target=\"_blank\" rel=\"noopener\">Glimmer</a>的框架将框架的概念放到了编译时以去除production code里面的runtime代码来加快应用的首屏加载速度，这个方案已经开始被逐渐采纳了，而且未来有可能会成为潮流。如果大家不是很了解Compiler as Framework理念的话，可以看我的另外一篇文章：<a href=\"https://superseany.com/2019/12/17/Svelte-3-%E5%88%9D%E5%AD%A6%E8%80%85%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/\" target=\"_blank\" rel=\"noopener\">Svelte 3 初学者完全指南</a>。React已经存在了5年，它如果想要继续存在多五年的话也要跟上这个潮流，出于这个原因，React团队和<a href=\"https://prepack.io/\" target=\"_blank\" rel=\"noopener\">Prepack</a>团队进行了一些和Compiler as Framework相关的尝试，而且就目前实验的结果来说这个思路有很大的想象空间。不过在这个过程中React的开发者也发现了一个严重的问题，那就是开发者可能会以一种非常规的模式来使用Class Component，而这些模式会降低这个方案带来的优化效果。</p>\n<p>因此React要想得到进一步的发展的话，就必须让开发者更多地使用Function Component而不是Class Component。而开发者偏向于使用Class Component而不是Function Component的一个主要原因是Function Component没有状态管理和生命周期函数等功能。Hook出来后这个问题就不存在了，因为开发者可以使用<strong>useState</strong> Hook来在Function Component使用<strong>state</strong>以及<strong>useEffect</strong> Hook来实现一些和<strong>生命周期函数类似的功能</strong>。最重要的是，React将所有复杂的实现都封装在框架里面了，开发者无需学习函数式编程和响应式编程的概念也可以很好地使用Hook来进行开发。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本篇文章我主要论述了React为啥要有Hook，总的来说是以下三个原因：</p>\n<ul>\n<li>Component非UI逻辑复用困难。</li>\n<li>组件的生命周期函数不适合side effect逻辑的管理。</li>\n<li>不友好的Class Component。</li>\n</ul>\n<p>如果你有其他的补充或者觉得我有什么地方说得不对的话可以在评论区和我一起探讨，在后面一篇文章中我将会为大家深入介绍一些常用的Hook。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://www.youtube.com/watch?v=dpw9EHDh2bM\" target=\"_blank\" rel=\"noopener\">React Today and Tomorrow and 90% Cleaner React With Hooks</a></li>\n<li><a href=\"https://github.com/reactjs/rfcs/pull/68\" target=\"_blank\" rel=\"noopener\">React Hook RFC</a></li>\n</ul>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<p>自从React 16.8发布Hook之后，笔者已经在实际项目中使用Hook快一年了，虽然Hook在使用中存在着一些坑，但是总的来说它是一个很好的功能，特别是在减少模板代码和提高代码复用率这些方面特别有用。为了让更多的人了解和使用Hook，我决定写一系列和Hook相关的文章，<strong>本篇文章就是这个系列的第一篇</strong>，主要和大家聊一下<strong>React为什么需要Hook</strong>。</p>","more":"<h2 id=\"Hook解决的问题\"><a href=\"#Hook解决的问题\" class=\"headerlink\" title=\"Hook解决的问题\"></a>Hook解决的问题</h2><h3 id=\"Component非UI逻辑复用困难\"><a href=\"#Component非UI逻辑复用困难\" class=\"headerlink\" title=\"Component非UI逻辑复用困难\"></a>Component非UI逻辑复用困难</h3><p>对于React或者其它的基于Component的框架来说，页面是由一个个UI组件构成的。独立的组件可以在同一个项目中甚至不同项目中进行复用，这十分有利于前端开发效率的提高。可是除了UI层面上的复用，一些<strong>状态相关</strong>（stateful）或者<strong>副作用相关</strong>（side effect）的<strong>非UI逻辑</strong>在不同组件之间复用起来却十分困难。对于React来说，你可以使用<a href=\"https://reactjs.org/docs/higher-order-components.html\" target=\"_blank\" rel=\"noopener\">高阶组件</a>（High-order Component）或者<a href=\"https://reactjs.org/docs/render-props.html\" target=\"_blank\" rel=\"noopener\">renderProps</a>的方法来复用这些逻辑，可是这两种方法都不是很好，存在各种各样的问题。如果你之前没有复用过这些非UI逻辑的话，我们可以先来看一个高阶组件的例子。</p>\n<p>假如你在开发一个社交App的个人详情页，在这个页面中你需要获取并展示当前用户的在线状态，于是你写了一个叫做UserDetail的组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDetail</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  state = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    isOnline: <span class=\"literal\">false</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  handleUserStatusUpdate = <span class=\"function\">(<span class=\"params\">isOnline</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; isOnline &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  componentDidMount() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 组件挂载的时候订阅用户的在线状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    userService.subscribeUserStatus(<span class=\"keyword\">this</span>.props.userId, <span class=\"keyword\">this</span>.handleUserStatusUpdate)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  componentDidUpdate(prevProps) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 用户信息发生了变化</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (prevProps.userId != <span class=\"keyword\">this</span>.props.userId) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">// 取消上一个用户的状态订阅</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      userService.unSubscribeUserStatus(<span class=\"keyword\">this</span>.props.userId, <span class=\"keyword\">this</span>.handleUserStatusUpdate)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">// 订阅下一个用户的状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">      userService.subscribeUserStatus(<span class=\"keyword\">this</span>.props.userId, <span class=\"keyword\">this</span>.handleUserStatusUpdate)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">  componentWillUnmount() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 组件卸载的时候取消状态订阅</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">    userService.unSubscribeUserStatus(<span class=\"keyword\">this</span>.props.userId, <span class=\"keyword\">this</span>.handleUserStatusUpdate)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">  render() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> (</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &lt;UserStatus isOnline=&#123;<span class=\"keyword\">this</span>.state.isOnline&#125;&gt;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">    )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>从上面的代码可以看出其实在UserDetail组件里面维护用户状态信息并不是一件简单的事情，我们既要在组件挂载和卸载的时候订阅和取消订阅用户的在线状态，而且还要在用户id发生变化的时候更新订阅内容。因此如果另外一个组件也需要用到用户在线状态信息的话，作为一个优秀如你的程序员肯定不想简单地对这部分逻辑进行复制和粘贴，因为<strong>重复的代码逻辑十分不利于代码的维护和重构</strong>。接着让我们看一下如何使用高阶组件的方法来复用这部分逻辑：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// withUserStatus.jsx</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> withUserStatus = <span class=\"function\">(<span class=\"params\">DecoratedComponent</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WrapperComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">   state = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">      isOnline: <span class=\"literal\">false</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    handleUserStatusUpdate = <span class=\"function\">(<span class=\"params\">isOnline</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123; isOnline &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    componentDidMount() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">// 组件挂载的时候订阅用户的在线状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      userService.subscribeUserStatus(<span class=\"keyword\">this</span>.props.userId, <span class=\"keyword\">this</span>.handleUserStatusUpdate)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    componentDidUpdate(prevProps) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">// 用户信息发生了变化</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">if</span> (prevProps.userId != <span class=\"keyword\">this</span>.props.userId) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"comment\">// 取消上个用户的状态订阅</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">        userService.unSubscribeUserStatus(<span class=\"keyword\">this</span>.props.userId, <span class=\"keyword\">this</span>.handleUserStatusUpdate)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"comment\">// 订阅下个用户的状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">        userService.subscribeUserStatus(<span class=\"keyword\">this</span>.props.userId, <span class=\"keyword\">this</span>.handleUserStatusUpdate)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">    componentWillUnmount() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">// 组件卸载的时候取消状态订阅</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">      userService.unSubscribeUserStatus(<span class=\"keyword\">this</span>.props.userId, <span class=\"keyword\">this</span>.handleUserStatusUpdate)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">    render() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">DecoratedComponent</span></span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">        isOnline=&#123;this.stateIsOnline&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">        &#123;...this.props&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">      /&gt;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">    &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">  &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">  return WrapperComponent</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">&#125;</span></span></pre></td></tr></table></figure>\n<p>在上面的代码中我们定义了用来获取用户在线状态的高阶组件，它维护了当前用户的在线状态信息并把它作为参数传递给被装饰的组件。接着我们就可以使用这个高阶组件来重构UserDetail组件的代码了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> withUserStatus <span class=\"keyword\">from</span> <span class=\"string\">'somewhere'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDetail</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  render() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">UserStatus</span> <span class=\"attr\">isOnline</span>=<span class=\"string\">&#123;this.props.isOnline&#125;</span>&gt;</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">  &#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">&#125;</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">export default withUserStatus(UserDetail)</span></span></pre></td></tr></table></figure>\n<p>我们可以看到使用了withUserStatus高阶组件后，UserDetail组件的代码一下子变得少了很多，现在它只需要从父级组件中获取到isOnline参数进行展示就好。而且这个高阶组件可以套用在其它任何需要获取用户在线状态信息的组件上，你再也不需要在前端维护一样的代码了。</p>\n<p>这里要注意的是上面的高阶组件封装的逻辑和UI展示没有太大关系，它维护的是用户在线状态信息的获取和更新这些和<strong>外面世界交互的side effect</strong>，以及<strong>用户状态的存储</strong>这些和<strong>组件状态相关</strong>的逻辑。虽然看起来似乎代码很优雅，不过使用高阶组件来封装组件的这些逻辑其实会有以下的问题：</p>\n<ul>\n<li><strong>高阶组件的开发对开发者不友好</strong>：开发者（特别是初级开发者）需要花费一段时间才能搞懂其中的原理并且适应它的写法。如果你使用高阶组件已经很久了，你看到这个说法可能会有些不以为然。可是我相信你在最开始接触高阶组件的时候肯定也花了一段时间才能搞懂它的原理，而且从上面的例子来看高阶组件其实是十分笨重的。试想一下，某天你的项目来了一个React新手，估计他也得花费一段时间才能理解你写的那些高阶组件代码吧。</li>\n<li><strong>高阶组件之间组合性差</strong>：使用过高阶组件的同学一定试过由于要为组件添加不同的功能，我们要为同一个组件嵌套多个高阶组件，例如这样的代码：<code>withAuth(withRouter(withUserStatus(UserDetail)))</code>。这种嵌套写法的高阶组件可能会导致很多问题，其中一个就是props丢失的问题，例如withAuth传递给UserDetail的某个prop可能在withUserStatus组件里面丢失或者被覆盖了。如果你使用的高阶组件都是自己写的话还好，因为调试和修改起来都比较简单，如果你使用的是第三方的库的话就很头痛了。</li>\n<li><strong>容易发生wrapper hell</strong>：这个问题在上面嵌套多重高阶组件的时候就会出现，具体会造成我们在React Devtools查看和调试某个组件的时候十分困难。我们可以看幅图片来感受一下：<br><img src=\"/images/react-hook/wrapper-hell.jpg\" alt=\"\"><br>这真是高阶组件一时爽，出问题就火葬场的感觉有没有。</li>\n</ul>\n<p>和高阶组件类似，renderProps也会存在同样的问题。基于这些原因，React需要一个<strong>新的用来复用组件之间非UI逻辑的方法</strong>，所以Hook就这么诞生了。总的来说，Hook相对于高阶组件和renderProps在复用代码逻辑方面有以下的优势：</p>\n<ul>\n<li><strong>写法简单</strong>：每一个Hook都是一个函数，因此它的写法十分简单，而且开发者更容易理解。</li>\n<li><strong>组合简单</strong>：Hook组合起来十分简单，组件只需要同时使用多个hook就可以使用到它们所有的功能。</li>\n<li><strong>容易扩展</strong>：Hook具有很高的可扩展性，你可以通过自定义Hook来扩展某个Hook的功能。</li>\n<li><strong>没有wrapper hell</strong>：Hook不会改变组件的层级结构，也就不会有wrapper hell问题的产生。</li>\n</ul>\n<p>除了用来替代难用的HOC和renderProps来解决组件非UI逻辑复用的问题之外，其实Hook还解决了以下这些问题。</p>\n<h3 id=\"组件的生命周期函数不适合side-effect逻辑的管理\"><a href=\"#组件的生命周期函数不适合side-effect逻辑的管理\" class=\"headerlink\" title=\"组件的生命周期函数不适合side effect逻辑的管理\"></a>组件的生命周期函数不适合side effect逻辑的管理</h3><p>在上面UserDetail组件中我们将<code>获取用户的在线状态</code>这个side effect的相关逻辑分散到了<code>componentDidMount</code>，<code>componentWillUnmount</code>，<code>componentDidUpdate</code>三个生命周期函数中，<strong>这些互相关联的逻辑被分散到不同的函数中会导致bug的发生和产生数据不一致的情况</strong>。除了这个，<strong>我们还可能会在组件的同一个生命周期函数放置很多互不关联的side effect逻辑</strong>。举个例子，如果我们想在用户查看某个用户的详情页面的时候将浏览器当前标签页的title改为当前用户名的话，就需要在组件的componentDidMount生命周期函数里面添加<code>document.title = this.props.userName</code>这段代码，可是这段代码和之前订阅用户状态的逻辑是互不关联的，而且随着组件的功能变得越来越复杂，这些不关联而又放在一起的代码只会变得越来越多，于是你的组件逐渐变得难以测试。由此可见Class Component的生命周期函数并不适合用来管理组件的side effect逻辑。</p>\n<p>那么这个问题Hook又是如何解决的呢？由于每个Hook都是一个函数，所以你可以<strong>将和某个side effect相关的逻辑都放在同一个函数（Hook）里面</strong>（useEffect Hook）。这种做法有很多好处，首先关联的代码都放在一起，可以十分方便代码的维护，其次实现了某个side effect的Hook还可以被不同的组件进行复用来提高开发效率。举个例子，我们就可以将改变标签页title的逻辑封装在一个自定的Hook中，如果其它组件有相同逻辑的话就可以使用这个Hook了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义Hook</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useTabTitle</span>(<span class=\"params\">title</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  React.useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">document</span>.title = title</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;, [title])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// UserDetail中使用useTabTitle Hook</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UserDetail</span> = (<span class=\"params\">props</span>) =&gt; </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  useTabTitle(props.userName)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>这个复用side effect的功能其实是一个十分强大的功能，你可以检查一下你现在写的项目代码，肯定有很多组件的side effect是可以封装成Hook的。封装成Hook的side effect不仅仅可以在某一个项目中使用，还可以在不同项目中复用，这对我们的开发效率肯定会有很大的提升。</p>\n<h3 id=\"不友好的Class-Component\"><a href=\"#不友好的Class-Component\" class=\"headerlink\" title=\"不友好的Class Component\"></a>不友好的Class Component</h3><p>其实Class Component除了生命周期函数不适合side effect的管理之外，还有一些其它的问题。</p>\n<p>首先Class Component对开发者不友好。如果你要使用Class Component首先你得理解JS里面的this是怎么使用的，它的使用方法其实和其他语言有很大的区别。由于JS本身的原因，在Class Component中你要手动为注册的event listener绑定this，不然就会报<code>this is undefined</code>的错误，早期的React玩家肯定体验过每个事件监听函数都要手动绑定this的酸爽感觉，乏味而且容易引发bug，这个问题直到<a href=\"https://babeljs.io/docs/en/babel-plugin-proposal-class-properties\" target=\"_blank\" rel=\"noopener\">class properties</a>出来之后才有所改善。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDetail</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">super</span>(props)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">this</span>.handlerUserStatusUpdate = <span class=\"keyword\">this</span>.handleUserStatusUpdate.bind(<span class=\"keyword\">this</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<p>除了对开发者不友好，Class Component对机器也很不友好。例如Class Component的生命周期函数很难被minified。其次，Class Component的存在可能会阻碍React后面的发展。举个例子，随着新的理念 - Compiler as Framework的兴起，一些诸如<a href=\"https://svelte.dev/\" target=\"_blank\" rel=\"noopener\">Svelte</a>, <a href=\"https://angular.io/\" target=\"_blank\" rel=\"noopener\">Angular</a>和<a href=\"https://glimmerjs.com/\" target=\"_blank\" rel=\"noopener\">Glimmer</a>的框架将框架的概念放到了编译时以去除production code里面的runtime代码来加快应用的首屏加载速度，这个方案已经开始被逐渐采纳了，而且未来有可能会成为潮流。如果大家不是很了解Compiler as Framework理念的话，可以看我的另外一篇文章：<a href=\"https://superseany.com/2019/12/17/Svelte-3-%E5%88%9D%E5%AD%A6%E8%80%85%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/\" target=\"_blank\" rel=\"noopener\">Svelte 3 初学者完全指南</a>。React已经存在了5年，它如果想要继续存在多五年的话也要跟上这个潮流，出于这个原因，React团队和<a href=\"https://prepack.io/\" target=\"_blank\" rel=\"noopener\">Prepack</a>团队进行了一些和Compiler as Framework相关的尝试，而且就目前实验的结果来说这个思路有很大的想象空间。不过在这个过程中React的开发者也发现了一个严重的问题，那就是开发者可能会以一种非常规的模式来使用Class Component，而这些模式会降低这个方案带来的优化效果。</p>\n<p>因此React要想得到进一步的发展的话，就必须让开发者更多地使用Function Component而不是Class Component。而开发者偏向于使用Class Component而不是Function Component的一个主要原因是Function Component没有状态管理和生命周期函数等功能。Hook出来后这个问题就不存在了，因为开发者可以使用<strong>useState</strong> Hook来在Function Component使用<strong>state</strong>以及<strong>useEffect</strong> Hook来实现一些和<strong>生命周期函数类似的功能</strong>。最重要的是，React将所有复杂的实现都封装在框架里面了，开发者无需学习函数式编程和响应式编程的概念也可以很好地使用Hook来进行开发。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本篇文章我主要论述了React为啥要有Hook，总的来说是以下三个原因：</p>\n<ul>\n<li>Component非UI逻辑复用困难。</li>\n<li>组件的生命周期函数不适合side effect逻辑的管理。</li>\n<li>不友好的Class Component。</li>\n</ul>\n<p>如果你有其他的补充或者觉得我有什么地方说得不对的话可以在评论区和我一起探讨，在后面一篇文章中我将会为大家深入介绍一些常用的Hook。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://www.youtube.com/watch?v=dpw9EHDh2bM\" target=\"_blank\" rel=\"noopener\">React Today and Tomorrow and 90% Cleaner React With Hooks</a></li>\n<li><a href=\"https://github.com/reactjs/rfcs/pull/68\" target=\"_blank\" rel=\"noopener\">React Hook RFC</a></li>\n</ul>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt=\"\"></p>"},{"title":"React Hook测试指南","thumbnail":"/gallery/thumbnails/react-hook.jpg","date":"2020-07-22T06:15:38.000Z","_content":"\n在[React为什么需要Hook](https://superseany.com/2020/04/29/React%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81Hook/)中我们探讨了React为什么需要引入Hook这个属性，在[React Hook实战指南](https://superseany.com/2020/07/15/React-Hook%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/)中我们深入了解了各种Hook的详细用法以及会遇到的问题，在本篇文章中我将带大家了解一下如何通过为自定义hook编写单元测试来提高我们的代码质量，它会包含下面的内容：\n* 什么是单元测试\n  * 单元测试的定义\n  * 为什么需要编写单元测试\n  * 单元测试需要注意什么\n* 如何对自定义Hook进行单元测试\n  * Jest\n  * React-hooks-testing-library\n  * 例子\n\n<!-- more -->\n\n## 什么是单元测试\n### 单元测试的定义\n要理解单元测试，我们先来给测试下个定义。用最简单的话来说测试就是：**我们给被测试对象一些输入（input），然后看看这个对象的输出结果（output）是不是符合我们的预期（match with expected result）**。而在软件工程里面有很多不同类型的测试，例如单元测试（unit test），功能测试（functional test），性能测试（performance test）和集成测试（integration test）等。不同种类的测试的主要区别是被测试的对象和评判指标不一样。对于单元测试，被测试的对象是我们源代码的`独立单元`（individual unit），在面向过程编程语言（procedural programming）里面，单元就是我们封装的方法（function），在面向对象的编程语言（object-oriented programming）里面单元是类（class）的方法（method），我们一般不推荐将某个类或者某个模块直接作为单元测试的单元，因为这会使被测试的逻辑过于庞大，而且问题出现时不容易进行定位。\n\n### 为什么需要编写单元测试\n了解了单元测试的定义后，我们再来探讨一下为什么我们要在代码里面进行单元测试。\n\n我们之所以要在项目中编写单元测试，主要是因为对代码进行单元测试有下面这些好处：\n#### 提高代码质量\n单元测试可以提高我们的代码质量主要体现在它可以在我们开发某个功能的时候**提前帮我们发现自己编写的代码的bug**。举个例子，假如A同学写了一个叫做`useOptions`的hook它接受一个叫做`options`的参数，这个参数既可以是一个对象也可以是一个数组。A同学自己开发的过程中他只试过给`useOptions`传对象而没有试过给它传数组。同一个项目的B同学在使用`useOptions`的时候给它传了个数组发现代码挂了，这个时候B同学就得找A同学确认并等待A同学修复这个问题，这不但会影响B同学的开发进度而且还会让B同学觉得A同学`不靠谱`，或者觉得A同学的`代码很烂`。如果A同学有对`useOptions`进行单元测试的话，这个`悲剧`可能就不会发生了，因为A同学在为`useOptions`编写单元测试的时候就考虑了`options`为数组的情况，并且在B同学使用之前就修复了这个问题。因此编写单元测试可以让我们在开发的过程中提前考虑到很多后面使用才会发现的问题，进而提高我们的代码质量。\n\n#### 方便代码重构和新功能添加\n编写单元测试的过程其实是我们给代码编写`使用说明书的过程`（specification）。这个`使用说明书`十分重要，它相当于`代码生产者`（producer）与`代码消费者`（consumer）之间的`合约`（contract），生产者需要保证**在消费者使用代码没错的前提下**代码要有`使用说明书`上面的效果。这其实会对代码生产者起到一定的制约作用，因为生产者必须保证无论是给原来的代码添加新的功能还是对它进行重构，它都要满足原来`使用说明书`上的要求。\n\n继续上面那个例子，A同学和B同学都在项目的`1.0.0`版本中使用了`useOptions`这个hook，虽然`useOptions`没有编写单元测试，可是代码是没有bug的（最起码没有被发现）。后面项目需要进行`2.0.0`版本的升级了，这时候A同学需要为`useOptions`添加新的功能，A同学在改动了`useOptions`的代码后，在自己使用到的地方（对象作为参数的地方）做了测试，没有发现bug。在A同学自测完代码后，并将这个更改集成（integration）到了项目的`master`分支上。后面B同学在更新完A同学的代码后，发现自己的代码出现了一些问题，这个时候B同学很可能就会手忙脚乱，并且可能需要花费一段时间才能定位到原来是A同学对`useOptions`的改动影响到他的功能，这除了会影响到项目的进度外还会让A同学和B同学的关系进一步恶化。这个悲剧同样也是可以通过编写单元测试来避免的，试想一下假如A同学有给`useOptions`编写配套的`使用说明书`（单元测试），A同学在改动完代码后，它的代码是通过不了`使用说明书`的检查的，因为它的改动改变了`useOptions`之前定义好的外部行为，这个时候A同学就会提前修复自己的代码进而避免了B同学后面的苦恼。通过这个例子大家可能还是没有体会到单元测试对于我们平时产品迭代或者代码重构的重要性，可是你试想一下在一个比较大的项目中是有很多个A同学和B同学的，也有成千上万个`useOptions`函数，当真的发生类似问题的时候bug将会更难被定位和修复，如果我们大部分的代码都有单元测试的话，无论是对代码增加新的功能还是对原来的代码进行重构我们都会更有信心。\n\n#### 完善我们代码的设计\n在软件工程里面有个概念叫做`测试驱动开发`（Test-driven Development），它鼓励我们在**实际开始编码之前先为我们的代码编写测试用例**。这样做的目的是让我们在开发之前就以`代码使用者`的角度去评判我们的代码设计。如果我们的代码设计很糟糕，我们就会发现我们很难为它们编写详尽的单元测试用例，相反如果我们的代码设计得很好（低耦合高内聚），各个函数的参数和功能都设计得十分合理，我们就十分容易就为它们编写对应的单元测试。我们要记住一句话：**高质量的代码一定是可以被测试的（testable）**。那么为什么是在还没开始写代码之前就编写测试用例呢？这是因为如果我们在代码写完之后再编写测试的话，即使我们发现代码设计得再不合理，我们也没有动力去改了，因为对设计的改动可能会让我们重写所有的代码，所以我们需要在实际编码之前进行单元测试的编写，因为这个时候的`改代码阻力`是最小的。\n\n#### 提供文档功能\n我们在为代码编写单元测试的时候实际上是在为代码编写一个个`使用例子`，因此别的开发者在使用我们代码的时候可以通过我们的单元测试来快速掌握我们定义的各种函数的用法。另外教大家一个实用的技巧：如果我们发现某个库的文档不是很全面的话，可以通过查看这个库的单元测试来快速掌握这个库的用法。\n\n### 单元测试需要注意的问题\n#### 隔离性\n上面我们说到单元测试是对代码独立的单元进行测试，这个独立的意思不是说这个函数（单元）不会调用另外一个函数（单元），而是说我们在测试这个函数的时候如果它有调用到其它的函数我们就需要mock它们，从而将我们的测试逻辑**只放在被测试函数的逻辑上**，不会受到其它依赖函数的影响。举个例子我们现在要测试以下函数：\n```javascript\nasync function fetchUserDetails(userId) {\n  const userDetail = await fetch(`https://myserver.com/users/${userId}`)\n  return userDetail\n}\n```\n在测试`fetchUserDetails`时我们就需要mock `fetch`这个函数了，因为我们现在测试的函数是`fetchUserDetails`，我们只需要确定在外界调用`fetchUserDetails`的时候`fetch`会被调用，并且调用的参数是`“https://myserver.com/users/${userId}”`就行了，至于`fetch`函数如何发请求和处理返回来的数据都是`fetch`函数自己的事，我们不应该在测试`fetchUserDetails`的时候关心这个问题。\n\n单元测试要注意隔离性的另外一个原因是它可以保证当测试案例失败的时候我们可以十分容易定位到问题的所在。以上面的代码为例，如果我们没有mock `fetch`函数，一旦我们的测试失败，我们很难分清是`fetchUserDetails`逻辑错了还是`fetch`的逻辑错了。\n\n#### 可重复性\n我们编写的所有单元测试用例一定不能依赖外部的运行环境，否则我们的单元测试将不具备`可重复性`（repeatable）。所谓的`可重复性`就是：如果我们的单元测试用例现在是可以通过的，那么**在代码不发生变动和测试用例没有改变的前提下**它将是一直可以通过的。举个测试用例不具备可重复性的例子，假如你将项目的单元测试数据全部放在数据库里面，你今天运行项目的测试用例是可以通过的，而第二天其他人无意改了数据库的数据，这个时候你的测试用例就通过不了了，我们就说这些测试用例不具备可重复性，出现这个问题的主要原因是`它们使用了外部的依赖作为测试条件`。由此可见要使我们的测试用例具备可重复性的一个关键点是在编写单元测试的时候避免外部依赖，这些外部依赖包括`数据库`，`网络请求`和`本地文件系统`等。\n\n另外一个影响到测试用例可重复性的一个重要的却容易被忽略的因素是：不同单元测试用例之间共用了一些测试数据，某个测试用例对测试数据的更改可能会影响其它测试用例的正确执行。因此我们在编写单元测试用例的时候一定要**避免不同测试用例之间共用一些测试数据**，尽量将每个测试用例`隔离`起来。\n\n#### 提高代码覆盖率\n在单元测试里面有个概念叫做代码覆盖率（test coverage），它表明我们代码`被测试的程度`。举个例子假如我们有一个100行的函数，在我们运行完所有的为这个函数编写的单元测试用例之后，如果测试框架告诉我们这个函数的覆盖率是80%，这表明我们的测试用例代码只覆盖了这个函数的80行代码，还有一些代码分支（if/else, switch, while）没有被执行到。如果我们想通过单元测试来提高我们代码质量的话，我们就需要保证我们代码的覆盖率足够大，尽量让被测试的函数的每一种被执行情况都被覆盖到（覆盖率100%），特别是一些异常的情况应该也要被覆盖到（例如参数错误，调用第三方依赖报错等），这样我们才能及早地发现代码的bug并进行修复。\n\n#### 测试用例运行时间要短\n我在上面说到单元测试是可以帮助我们更好地进行代码迭代和重构的，要做到这点其实要求我们在每次代码归并的时候对被`merge`的代码进行一些自动化检测（CI），这就包括项目单元测试用例的运行。试想一下在一个比较大型的项目里面单元测试用例的数量往往是很多的，少则几百个，多则上千个，如果全部运行所有测试用例的时间需要十几分钟甚至一两小时，这就会影响到代码集成的进度。为了避免这个问题，我们就需要确保每个单元测试用例执行的时间不能过长，例如避免在测试代码里面进行一些耗时的计算等。\n\n## 如何对自定义Hook进行单元测试\n在[React Hook实战指南](https://superseany.com/2020/07/15/React-Hook%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/)中我们提到Hook就是一些函数，所以对Hook进行单元测试其实是对一个函数进行测试，只不过这个函数和普通函数的区别是它拥有React给它赋予的特殊功能。在讲如何对Hook进行测试之前我们先来了解一下我们要用到的测试框架[Jest](https://jestjs.io/)和hook测试库[react-hook-testing-library](https://github.com/testing-library/react-hooks-testing-library)。\n### Jest\nJest是Facebook开源的一个单元测试框架，它的使用率和知名度都非常高，一些著名的开源项目例如webpack, babel和react等都是使用Jest来进行单元测试的，由于这篇文章的重点不是Jest的使用，所以我在这里将不为大家做具体的介绍，这里主要介绍一下我们常用到的Jest API：\n#### 常用API\n##### it/test\n`it/test`函数是用来定义`测试用例`（test case）的，它的函数签名是`it(description, fn?, timeout?)`，`description`参数是对这个测试用例的一个简短的描述，`fn`是一个运行我们实际测试逻辑的函数，而timeout则是这个测试用例的超时时间。下面是一个简单的例子：\n```javascript\nimport sum from 'somewhere/sum'\n\nit('test if sum work for positive numbers', () => {\n  const result = sum(1, 2)\n  expect(result).toEqual(3)\n})\n```\n##### describe\n`describe`函数是用来给测试用例`分组`用的，它的函数签名是`describe(description, fn)`，description是用来描述这个分组的，而`fn`函数里面则可以定义内嵌的分组（nested）或者是一些测试用例（it），下面是一个简单的例子：\n```javascript\nimport sum from 'somewhere/sum'\n\ndescribe('test sum', () => {\n  it('work for positive numbers', () => {\n    const result = sum(1, 2)\n    expect(result).toEqual(3)\n  })\n\n  it('work for negative numbers', () => {\n    const result = sum(-1, -2)\n    expect(result).toEqual(-3)\n  })\n})\n```\n##### expect\n我们在刚开始的时候就提到所谓的测试就是要**比较被测试对象的输出和我们期待的输出是不是一致的**，也就涉及到一个比较的过程，在Jest框架中我们可以通过`expect`函数来访问一系列`matcher`来进行这个`比较的过程`，例如上面的`expect(sum).toEqual(3)`就是一个用matcher来判断输出结果是不是我们想要的值的过程。关于更加详细的matcher信息大家可以参考[jest的官方文档](https://jestjs.io/docs/en/expect)。\n##### mock\n在Jest框架中用来进行mock的方法有很多，主要用到的是`jest.fn()`和`jest.spyOn()`。\n##### jest.fn\n`jest.fn`会生成一个mock函数，这个函数可以用来代替源代码中被使用的第三方函数。`jest.fn`生成的函数上面有很多属性，我们也可以通过一些`matcher`来对这个函数的调用情况进行一些断言，下面是一个简单的例子：\n```javascript\n// somewhere/functionWithCallback.js\nexport const functionWithCallback = (callback) => {\n  callback(1, 2, 3)\n}\n\n// somewhere/functionWithCallback.spec.js\nimport { functionWithCallback } from 'somewhere/functionWithCallback'\n\ndescribe('Test functionWithCallback', () => {\n  it('if callback is invoked', () => {\n    const callback = jest.fn()\n    functionWithCallback(callback)\n\n    expect(callback.mock.calls.length).toEqual(1)\n  })\n})\n```\n##### jest.spyOn\n我们源代码中的函数可能使用了另外一个文件或者`node_modules`中安装的一些依赖，这些依赖可以使用`jest.spyOn`来进行mock，下面是一个简单的例子：\n```javascript\n// somewhere/sum.js\nimport { validateNumber } from 'somewhere/validates'\n\nexport default (n1, n2) => {\n  validateNumber(n1)\n  validateNumber(n2)\n\n  return n1 + n2\n}\n\n// somewhere/sum.spec.js\nimport sum from 'somewhere/sum'\nimport * as validates from 'somewhere/validates'\n\nit('work for positive numbers', () => {\n  // mock validateNumber\n  const validateNumberMock = jest.spyOn(validates, 'validateNumber')\n  \n  const result = sum(1, 2)\n  expect(result).toEqual(3)\n\n  // restore original implementation\n  validateNumberMock.mockRestore()\n})\n```\n我们在上面测试代码中引入了源代码使用到的依赖`somewhere/validates`，这个时候就可以通过`jest.spyOn`来mock这个依赖`export`的一些方法了，例如`validateNumber`。被mock的函数会在源代码被执行的时候使用，例如上面`sum`执行的时候使用到的`validateNumber`就是我们在`sum.spec.js`里面定义的`validateNumberMock`。这样我们除了可以保证`validateNumber`不会影响到我们对`sum`函数逻辑的测试，还可以在外面对`validateNumberMock`进行一些断言（assertion）来验证`sum`逻辑的正确性。还有一点需要注意的是，我在测试用例执行完之后调用了`mockRestore`这个函数，这个函数会恢复`validateNumber`函数原来的实现，从而避免这个测试用例对`validate`文件的更改影响到其它测试用例的正确执行。\n\n### 项目引入jest\n了解完jest的一些基本API之后我们再来看一下如何在我们的项目里面引入jest。\n#### 安装依赖\n首先使用下面命令安装jest\n```shell\nyarn add -D jest\n```\n如果你项目使用的是Typescript，则还需要安装`ts-jest`作为依赖：\n```\nyarn add -D ts-jest\n```\n#### 配置jest\n安装完jest后需要在package.json文件里面配置一下:\n```json\n{ \n  \"jest\": {\n    \"transform\": {\n      \"^.+\\\\.tsx?$\": \"ts-jest\"\n    },\n    \"testRegex\": \"(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.(jsx?|tsx?)$\",\n    \"moduleDirectories\": [\n      \"node_modules\",\n      \"src\"\n    ],\n    \"moduleFileExtensions\": [\n      \"ts\",\n      \"tsx\",\n      \"js\",\n      \"jsx\",\n      \"json\",\n      \"node\"\n    ]\n  }\n}\n```\n上面各个配置项的意思分别是：\n* transform: 告诉jest，你的ts或者tsx文件需要使用ts-jest来进行转换。\n* testRegex: 告诉jest哪些文件是需要被作为测试代码进行执行的，从上面的正则表达式我们可以看出文件名中有test和spec的文件将会被作为测试用例执行。\n* moduleDirectories: 告诉jest在执行测试用例代码的时候，代码用到的dependencies应该去哪些目录进行resolve，在这里jest会去`node_modules`和`src`（或者你自己的源代码根目录）里面进行resolve，这个应该要和你项目的webpack.config.js的resolve部分配置保持一致。\n* moduleFileExtensions: 告诉jest在找不到对应文件的时候应该尝试哪些文件后缀。\n\n### React hooks testing library\n[React-hooks-testing-library](https://github.com/testing-library/react-hooks-testing-library)，是一个专门用来测试React hook的库。我们知道虽然hook是一个函数，可是我们却不能用测试普通函数的方法来测试它们，因为它们的实际运行会涉及到很多React运行时（runtime）的东西，因此很多人为了测试自己的hook会编写一些`TestComponent`来运行它们，这种方法十分不方便而且很难覆盖到所有的情景。为了简化开发者测试hook的流程，React社区有人开发了这个叫做`react-hooks-testing-library`的库来允许我们像测试普通函数一样测试我们定义的hook，这个库其实背后也是将我们定义的hook运行在一个`TestComponent`里面，只不过它封装了一些简易的API来简化我们的测试。在开始使用这个库之前，我们先来看一下它对外暴露的一些常用的API。\n#### 常用API\n##### renderHook\n`renderHook`这个函数顾名思义就是用来渲染hook的，它会在调用的时候渲染一个专门用来测试的`TestComponent`来使用我们的hook。renderHook的函数签名是`renderHook(callback, options?)`，它的第一个参数是一个`callback`函数，这个函数会在`TestComponent`每次被重新渲染的时候调用，因此我们可以在这个函数里面调用我们想要测试的hook。`renderHook`的第二个参数是一个可选的`options`，这个`options`可以带两个属性，一个是`initialProps`，它是`TestComponent`的初始props参数，并且会被传递给`callback`函数用来调用hook。options的另外一个属性是`wrapper`，它用来指定`TestComponent`的父级组件（Wrapper Component），这个组件可以是一些`ContextProvider`等用来为`TestComponent`的hook提供测试数据的东西。\n\n`renderHook`的返回值是`RenderHookResult`对象，这个对象会有下面这些属性：\n* result：`result`是一个对象，它包含两个属性，一个是`current`，它保存的是`renderHook` `callback`的返回值，另外一个属性是`error`，它用来存储hook在render过程中出现的任何错误。\n* rerender: `rerender`函数是用来重新渲染`TestComponent`的，它可以接收一个newProps作为参数，这个参数会作为组件重新渲染时的props值，同样`renderHook`的`callback`函数也会使用这个新的props来重新调用。\n* unmount: `unmount`函数是用来卸载`TestComponent`的，它主要用来覆盖一些`useEffect cleanup`函数的场景。\n\n##### act\n这函数和React自带的test-utils的[act函数](https://reactjs.org/docs/test-utils.html#act)是同一个函数，我们知道组件状态更新的时候（setState），组件需要被重新渲染，而这个重渲染是需要React进行调度的，因此是个异步的过程，我们可以通过使用`act`函数将所有会更新到组件状态的操作封装在它的`callback`里面来保证`act`函数执行完之后我们定义的组件已经完成了重新渲染。\n\n### 安装\n直接把`react-hooks-testing-library`作为我们的项目`devDependencies`：\n```shell\nyarn add -D @testing-library/react-hooks\n```\n注意：要使用`react-hooks-testing-library`我们要确保我们安装了`16.9.0`版本及其以上的`react`和`react-test-renderer`：\n```\nyarn add react@^16.9.0\nyarn add -D react-test-renderer@^16.9.0\n```\n## 例子\n现在就让我们看一个简单的同时使用`Jest`和`react-hooks-testing-library`来测试hook的例子，假如我们在项目里面定义了一个叫做`useCounter`的Hook:\n```javascript\n// somewhere/useCounter.js\nimport { useState, useCallback } from 'react'\n\nfunction useCounter() {\n  const [count, setCount] = useState(0)\n\n  const increment = useCallback(() => setCount(x => x + 1), [])\n  const decrement = useCallback(() => setCount(x => x - 1), [])\n\n  return {count, increment, decrease}\n}\n```\n在上面的代码中我定义了一个叫做`useCounter`的hook，这个hook是用来封装一个叫做count的状态并且对外暴露对count进行操作的一些updater包括`increment`和`decrement`。如果大家对`useState`和`useCallback`不够熟悉的话可以看一下我的上一篇文章[React Hook实战指南]()。接着就让我们编写这个hook的测试用例：\n\n```javascript\n// somewhere/useCounter.spec.js\nimport { renderHook, act } from '@testing-library/react-hooks'\nimport useCounter from 'somewhere/useCounter'\n\ndescribe('Test useCounter', () => {\n  describe('increment', () => {\n     it('increase counter by 1', () => {\n      const { result } = renderHook(() => useCounter())\n\n      act(() => {\n        result.current.increment()\n      })\n\n      expect(result.current.count).toBe(1)\n    })\n  })\n\n  describe('decrement', () => {\n    it('decrease counter by 1', () => {\n      const { result } = renderHook(() => useCounter())\n\n      act(() => {\n        result.current.decrement()\n      })\n\n      expect(result.current.count).toBe(-1)\n    })\n})\n})\n```\n上面的代码中我们写了一个测试大组（describe）`Test useCounter`并在这个大组里面定义了两个测试小组分别用来测试`useCounter`返回的`increment`和`decrement`方法。我们具体看一下描述为`increase counter by 1`的测试用例的代码，首先我们要用`renderHook`函数来渲染要被测试的hook，这里我们需要将`useCounter`的返回值作为`callback`函数的返回值，这是因为我们需要在外面拿到这个hook的返回结果`{count, increment, decrement}`。接着我们使用`act`函数来调用改变组件状态`count`的`increment`函数，`act`函数完成之后我们的组件也就完成了重渲染，后面就可以判断更新后的`count`是不是我们想要的结果了。\n\n## 总结\n在本篇文章中我给大家介绍了什么叫做单元测试，为什么我们需要在自己的项目里面引入单元测试以及教大家如何使用`Jest`和`react-hooks-testing-library`来测试我们自定义的hook。\n\n这篇文章是我的React hook系列文章的最后一篇了，后面我还会持续为大家分享一些和hook相关的内容，大家敬请期待。\n\n## 参考文献\n* https://jestjs.io/\n* https://react-hooks-testing-library.com/\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","source":"_posts/React-Hook测试指南.md","raw":"---\ntitle: React Hook测试指南\ntags:\n  - testing\n  - react\n  - hook\ncategories:\n  - 前端\nthumbnail: /gallery/thumbnails/react-hook.jpg\ndate: 2020-07-22 14:15:38\n---\n\n在[React为什么需要Hook](https://superseany.com/2020/04/29/React%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81Hook/)中我们探讨了React为什么需要引入Hook这个属性，在[React Hook实战指南](https://superseany.com/2020/07/15/React-Hook%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/)中我们深入了解了各种Hook的详细用法以及会遇到的问题，在本篇文章中我将带大家了解一下如何通过为自定义hook编写单元测试来提高我们的代码质量，它会包含下面的内容：\n* 什么是单元测试\n  * 单元测试的定义\n  * 为什么需要编写单元测试\n  * 单元测试需要注意什么\n* 如何对自定义Hook进行单元测试\n  * Jest\n  * React-hooks-testing-library\n  * 例子\n\n<!-- more -->\n\n## 什么是单元测试\n### 单元测试的定义\n要理解单元测试，我们先来给测试下个定义。用最简单的话来说测试就是：**我们给被测试对象一些输入（input），然后看看这个对象的输出结果（output）是不是符合我们的预期（match with expected result）**。而在软件工程里面有很多不同类型的测试，例如单元测试（unit test），功能测试（functional test），性能测试（performance test）和集成测试（integration test）等。不同种类的测试的主要区别是被测试的对象和评判指标不一样。对于单元测试，被测试的对象是我们源代码的`独立单元`（individual unit），在面向过程编程语言（procedural programming）里面，单元就是我们封装的方法（function），在面向对象的编程语言（object-oriented programming）里面单元是类（class）的方法（method），我们一般不推荐将某个类或者某个模块直接作为单元测试的单元，因为这会使被测试的逻辑过于庞大，而且问题出现时不容易进行定位。\n\n### 为什么需要编写单元测试\n了解了单元测试的定义后，我们再来探讨一下为什么我们要在代码里面进行单元测试。\n\n我们之所以要在项目中编写单元测试，主要是因为对代码进行单元测试有下面这些好处：\n#### 提高代码质量\n单元测试可以提高我们的代码质量主要体现在它可以在我们开发某个功能的时候**提前帮我们发现自己编写的代码的bug**。举个例子，假如A同学写了一个叫做`useOptions`的hook它接受一个叫做`options`的参数，这个参数既可以是一个对象也可以是一个数组。A同学自己开发的过程中他只试过给`useOptions`传对象而没有试过给它传数组。同一个项目的B同学在使用`useOptions`的时候给它传了个数组发现代码挂了，这个时候B同学就得找A同学确认并等待A同学修复这个问题，这不但会影响B同学的开发进度而且还会让B同学觉得A同学`不靠谱`，或者觉得A同学的`代码很烂`。如果A同学有对`useOptions`进行单元测试的话，这个`悲剧`可能就不会发生了，因为A同学在为`useOptions`编写单元测试的时候就考虑了`options`为数组的情况，并且在B同学使用之前就修复了这个问题。因此编写单元测试可以让我们在开发的过程中提前考虑到很多后面使用才会发现的问题，进而提高我们的代码质量。\n\n#### 方便代码重构和新功能添加\n编写单元测试的过程其实是我们给代码编写`使用说明书的过程`（specification）。这个`使用说明书`十分重要，它相当于`代码生产者`（producer）与`代码消费者`（consumer）之间的`合约`（contract），生产者需要保证**在消费者使用代码没错的前提下**代码要有`使用说明书`上面的效果。这其实会对代码生产者起到一定的制约作用，因为生产者必须保证无论是给原来的代码添加新的功能还是对它进行重构，它都要满足原来`使用说明书`上的要求。\n\n继续上面那个例子，A同学和B同学都在项目的`1.0.0`版本中使用了`useOptions`这个hook，虽然`useOptions`没有编写单元测试，可是代码是没有bug的（最起码没有被发现）。后面项目需要进行`2.0.0`版本的升级了，这时候A同学需要为`useOptions`添加新的功能，A同学在改动了`useOptions`的代码后，在自己使用到的地方（对象作为参数的地方）做了测试，没有发现bug。在A同学自测完代码后，并将这个更改集成（integration）到了项目的`master`分支上。后面B同学在更新完A同学的代码后，发现自己的代码出现了一些问题，这个时候B同学很可能就会手忙脚乱，并且可能需要花费一段时间才能定位到原来是A同学对`useOptions`的改动影响到他的功能，这除了会影响到项目的进度外还会让A同学和B同学的关系进一步恶化。这个悲剧同样也是可以通过编写单元测试来避免的，试想一下假如A同学有给`useOptions`编写配套的`使用说明书`（单元测试），A同学在改动完代码后，它的代码是通过不了`使用说明书`的检查的，因为它的改动改变了`useOptions`之前定义好的外部行为，这个时候A同学就会提前修复自己的代码进而避免了B同学后面的苦恼。通过这个例子大家可能还是没有体会到单元测试对于我们平时产品迭代或者代码重构的重要性，可是你试想一下在一个比较大的项目中是有很多个A同学和B同学的，也有成千上万个`useOptions`函数，当真的发生类似问题的时候bug将会更难被定位和修复，如果我们大部分的代码都有单元测试的话，无论是对代码增加新的功能还是对原来的代码进行重构我们都会更有信心。\n\n#### 完善我们代码的设计\n在软件工程里面有个概念叫做`测试驱动开发`（Test-driven Development），它鼓励我们在**实际开始编码之前先为我们的代码编写测试用例**。这样做的目的是让我们在开发之前就以`代码使用者`的角度去评判我们的代码设计。如果我们的代码设计很糟糕，我们就会发现我们很难为它们编写详尽的单元测试用例，相反如果我们的代码设计得很好（低耦合高内聚），各个函数的参数和功能都设计得十分合理，我们就十分容易就为它们编写对应的单元测试。我们要记住一句话：**高质量的代码一定是可以被测试的（testable）**。那么为什么是在还没开始写代码之前就编写测试用例呢？这是因为如果我们在代码写完之后再编写测试的话，即使我们发现代码设计得再不合理，我们也没有动力去改了，因为对设计的改动可能会让我们重写所有的代码，所以我们需要在实际编码之前进行单元测试的编写，因为这个时候的`改代码阻力`是最小的。\n\n#### 提供文档功能\n我们在为代码编写单元测试的时候实际上是在为代码编写一个个`使用例子`，因此别的开发者在使用我们代码的时候可以通过我们的单元测试来快速掌握我们定义的各种函数的用法。另外教大家一个实用的技巧：如果我们发现某个库的文档不是很全面的话，可以通过查看这个库的单元测试来快速掌握这个库的用法。\n\n### 单元测试需要注意的问题\n#### 隔离性\n上面我们说到单元测试是对代码独立的单元进行测试，这个独立的意思不是说这个函数（单元）不会调用另外一个函数（单元），而是说我们在测试这个函数的时候如果它有调用到其它的函数我们就需要mock它们，从而将我们的测试逻辑**只放在被测试函数的逻辑上**，不会受到其它依赖函数的影响。举个例子我们现在要测试以下函数：\n```javascript\nasync function fetchUserDetails(userId) {\n  const userDetail = await fetch(`https://myserver.com/users/${userId}`)\n  return userDetail\n}\n```\n在测试`fetchUserDetails`时我们就需要mock `fetch`这个函数了，因为我们现在测试的函数是`fetchUserDetails`，我们只需要确定在外界调用`fetchUserDetails`的时候`fetch`会被调用，并且调用的参数是`“https://myserver.com/users/${userId}”`就行了，至于`fetch`函数如何发请求和处理返回来的数据都是`fetch`函数自己的事，我们不应该在测试`fetchUserDetails`的时候关心这个问题。\n\n单元测试要注意隔离性的另外一个原因是它可以保证当测试案例失败的时候我们可以十分容易定位到问题的所在。以上面的代码为例，如果我们没有mock `fetch`函数，一旦我们的测试失败，我们很难分清是`fetchUserDetails`逻辑错了还是`fetch`的逻辑错了。\n\n#### 可重复性\n我们编写的所有单元测试用例一定不能依赖外部的运行环境，否则我们的单元测试将不具备`可重复性`（repeatable）。所谓的`可重复性`就是：如果我们的单元测试用例现在是可以通过的，那么**在代码不发生变动和测试用例没有改变的前提下**它将是一直可以通过的。举个测试用例不具备可重复性的例子，假如你将项目的单元测试数据全部放在数据库里面，你今天运行项目的测试用例是可以通过的，而第二天其他人无意改了数据库的数据，这个时候你的测试用例就通过不了了，我们就说这些测试用例不具备可重复性，出现这个问题的主要原因是`它们使用了外部的依赖作为测试条件`。由此可见要使我们的测试用例具备可重复性的一个关键点是在编写单元测试的时候避免外部依赖，这些外部依赖包括`数据库`，`网络请求`和`本地文件系统`等。\n\n另外一个影响到测试用例可重复性的一个重要的却容易被忽略的因素是：不同单元测试用例之间共用了一些测试数据，某个测试用例对测试数据的更改可能会影响其它测试用例的正确执行。因此我们在编写单元测试用例的时候一定要**避免不同测试用例之间共用一些测试数据**，尽量将每个测试用例`隔离`起来。\n\n#### 提高代码覆盖率\n在单元测试里面有个概念叫做代码覆盖率（test coverage），它表明我们代码`被测试的程度`。举个例子假如我们有一个100行的函数，在我们运行完所有的为这个函数编写的单元测试用例之后，如果测试框架告诉我们这个函数的覆盖率是80%，这表明我们的测试用例代码只覆盖了这个函数的80行代码，还有一些代码分支（if/else, switch, while）没有被执行到。如果我们想通过单元测试来提高我们代码质量的话，我们就需要保证我们代码的覆盖率足够大，尽量让被测试的函数的每一种被执行情况都被覆盖到（覆盖率100%），特别是一些异常的情况应该也要被覆盖到（例如参数错误，调用第三方依赖报错等），这样我们才能及早地发现代码的bug并进行修复。\n\n#### 测试用例运行时间要短\n我在上面说到单元测试是可以帮助我们更好地进行代码迭代和重构的，要做到这点其实要求我们在每次代码归并的时候对被`merge`的代码进行一些自动化检测（CI），这就包括项目单元测试用例的运行。试想一下在一个比较大型的项目里面单元测试用例的数量往往是很多的，少则几百个，多则上千个，如果全部运行所有测试用例的时间需要十几分钟甚至一两小时，这就会影响到代码集成的进度。为了避免这个问题，我们就需要确保每个单元测试用例执行的时间不能过长，例如避免在测试代码里面进行一些耗时的计算等。\n\n## 如何对自定义Hook进行单元测试\n在[React Hook实战指南](https://superseany.com/2020/07/15/React-Hook%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/)中我们提到Hook就是一些函数，所以对Hook进行单元测试其实是对一个函数进行测试，只不过这个函数和普通函数的区别是它拥有React给它赋予的特殊功能。在讲如何对Hook进行测试之前我们先来了解一下我们要用到的测试框架[Jest](https://jestjs.io/)和hook测试库[react-hook-testing-library](https://github.com/testing-library/react-hooks-testing-library)。\n### Jest\nJest是Facebook开源的一个单元测试框架，它的使用率和知名度都非常高，一些著名的开源项目例如webpack, babel和react等都是使用Jest来进行单元测试的，由于这篇文章的重点不是Jest的使用，所以我在这里将不为大家做具体的介绍，这里主要介绍一下我们常用到的Jest API：\n#### 常用API\n##### it/test\n`it/test`函数是用来定义`测试用例`（test case）的，它的函数签名是`it(description, fn?, timeout?)`，`description`参数是对这个测试用例的一个简短的描述，`fn`是一个运行我们实际测试逻辑的函数，而timeout则是这个测试用例的超时时间。下面是一个简单的例子：\n```javascript\nimport sum from 'somewhere/sum'\n\nit('test if sum work for positive numbers', () => {\n  const result = sum(1, 2)\n  expect(result).toEqual(3)\n})\n```\n##### describe\n`describe`函数是用来给测试用例`分组`用的，它的函数签名是`describe(description, fn)`，description是用来描述这个分组的，而`fn`函数里面则可以定义内嵌的分组（nested）或者是一些测试用例（it），下面是一个简单的例子：\n```javascript\nimport sum from 'somewhere/sum'\n\ndescribe('test sum', () => {\n  it('work for positive numbers', () => {\n    const result = sum(1, 2)\n    expect(result).toEqual(3)\n  })\n\n  it('work for negative numbers', () => {\n    const result = sum(-1, -2)\n    expect(result).toEqual(-3)\n  })\n})\n```\n##### expect\n我们在刚开始的时候就提到所谓的测试就是要**比较被测试对象的输出和我们期待的输出是不是一致的**，也就涉及到一个比较的过程，在Jest框架中我们可以通过`expect`函数来访问一系列`matcher`来进行这个`比较的过程`，例如上面的`expect(sum).toEqual(3)`就是一个用matcher来判断输出结果是不是我们想要的值的过程。关于更加详细的matcher信息大家可以参考[jest的官方文档](https://jestjs.io/docs/en/expect)。\n##### mock\n在Jest框架中用来进行mock的方法有很多，主要用到的是`jest.fn()`和`jest.spyOn()`。\n##### jest.fn\n`jest.fn`会生成一个mock函数，这个函数可以用来代替源代码中被使用的第三方函数。`jest.fn`生成的函数上面有很多属性，我们也可以通过一些`matcher`来对这个函数的调用情况进行一些断言，下面是一个简单的例子：\n```javascript\n// somewhere/functionWithCallback.js\nexport const functionWithCallback = (callback) => {\n  callback(1, 2, 3)\n}\n\n// somewhere/functionWithCallback.spec.js\nimport { functionWithCallback } from 'somewhere/functionWithCallback'\n\ndescribe('Test functionWithCallback', () => {\n  it('if callback is invoked', () => {\n    const callback = jest.fn()\n    functionWithCallback(callback)\n\n    expect(callback.mock.calls.length).toEqual(1)\n  })\n})\n```\n##### jest.spyOn\n我们源代码中的函数可能使用了另外一个文件或者`node_modules`中安装的一些依赖，这些依赖可以使用`jest.spyOn`来进行mock，下面是一个简单的例子：\n```javascript\n// somewhere/sum.js\nimport { validateNumber } from 'somewhere/validates'\n\nexport default (n1, n2) => {\n  validateNumber(n1)\n  validateNumber(n2)\n\n  return n1 + n2\n}\n\n// somewhere/sum.spec.js\nimport sum from 'somewhere/sum'\nimport * as validates from 'somewhere/validates'\n\nit('work for positive numbers', () => {\n  // mock validateNumber\n  const validateNumberMock = jest.spyOn(validates, 'validateNumber')\n  \n  const result = sum(1, 2)\n  expect(result).toEqual(3)\n\n  // restore original implementation\n  validateNumberMock.mockRestore()\n})\n```\n我们在上面测试代码中引入了源代码使用到的依赖`somewhere/validates`，这个时候就可以通过`jest.spyOn`来mock这个依赖`export`的一些方法了，例如`validateNumber`。被mock的函数会在源代码被执行的时候使用，例如上面`sum`执行的时候使用到的`validateNumber`就是我们在`sum.spec.js`里面定义的`validateNumberMock`。这样我们除了可以保证`validateNumber`不会影响到我们对`sum`函数逻辑的测试，还可以在外面对`validateNumberMock`进行一些断言（assertion）来验证`sum`逻辑的正确性。还有一点需要注意的是，我在测试用例执行完之后调用了`mockRestore`这个函数，这个函数会恢复`validateNumber`函数原来的实现，从而避免这个测试用例对`validate`文件的更改影响到其它测试用例的正确执行。\n\n### 项目引入jest\n了解完jest的一些基本API之后我们再来看一下如何在我们的项目里面引入jest。\n#### 安装依赖\n首先使用下面命令安装jest\n```shell\nyarn add -D jest\n```\n如果你项目使用的是Typescript，则还需要安装`ts-jest`作为依赖：\n```\nyarn add -D ts-jest\n```\n#### 配置jest\n安装完jest后需要在package.json文件里面配置一下:\n```json\n{ \n  \"jest\": {\n    \"transform\": {\n      \"^.+\\\\.tsx?$\": \"ts-jest\"\n    },\n    \"testRegex\": \"(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.(jsx?|tsx?)$\",\n    \"moduleDirectories\": [\n      \"node_modules\",\n      \"src\"\n    ],\n    \"moduleFileExtensions\": [\n      \"ts\",\n      \"tsx\",\n      \"js\",\n      \"jsx\",\n      \"json\",\n      \"node\"\n    ]\n  }\n}\n```\n上面各个配置项的意思分别是：\n* transform: 告诉jest，你的ts或者tsx文件需要使用ts-jest来进行转换。\n* testRegex: 告诉jest哪些文件是需要被作为测试代码进行执行的，从上面的正则表达式我们可以看出文件名中有test和spec的文件将会被作为测试用例执行。\n* moduleDirectories: 告诉jest在执行测试用例代码的时候，代码用到的dependencies应该去哪些目录进行resolve，在这里jest会去`node_modules`和`src`（或者你自己的源代码根目录）里面进行resolve，这个应该要和你项目的webpack.config.js的resolve部分配置保持一致。\n* moduleFileExtensions: 告诉jest在找不到对应文件的时候应该尝试哪些文件后缀。\n\n### React hooks testing library\n[React-hooks-testing-library](https://github.com/testing-library/react-hooks-testing-library)，是一个专门用来测试React hook的库。我们知道虽然hook是一个函数，可是我们却不能用测试普通函数的方法来测试它们，因为它们的实际运行会涉及到很多React运行时（runtime）的东西，因此很多人为了测试自己的hook会编写一些`TestComponent`来运行它们，这种方法十分不方便而且很难覆盖到所有的情景。为了简化开发者测试hook的流程，React社区有人开发了这个叫做`react-hooks-testing-library`的库来允许我们像测试普通函数一样测试我们定义的hook，这个库其实背后也是将我们定义的hook运行在一个`TestComponent`里面，只不过它封装了一些简易的API来简化我们的测试。在开始使用这个库之前，我们先来看一下它对外暴露的一些常用的API。\n#### 常用API\n##### renderHook\n`renderHook`这个函数顾名思义就是用来渲染hook的，它会在调用的时候渲染一个专门用来测试的`TestComponent`来使用我们的hook。renderHook的函数签名是`renderHook(callback, options?)`，它的第一个参数是一个`callback`函数，这个函数会在`TestComponent`每次被重新渲染的时候调用，因此我们可以在这个函数里面调用我们想要测试的hook。`renderHook`的第二个参数是一个可选的`options`，这个`options`可以带两个属性，一个是`initialProps`，它是`TestComponent`的初始props参数，并且会被传递给`callback`函数用来调用hook。options的另外一个属性是`wrapper`，它用来指定`TestComponent`的父级组件（Wrapper Component），这个组件可以是一些`ContextProvider`等用来为`TestComponent`的hook提供测试数据的东西。\n\n`renderHook`的返回值是`RenderHookResult`对象，这个对象会有下面这些属性：\n* result：`result`是一个对象，它包含两个属性，一个是`current`，它保存的是`renderHook` `callback`的返回值，另外一个属性是`error`，它用来存储hook在render过程中出现的任何错误。\n* rerender: `rerender`函数是用来重新渲染`TestComponent`的，它可以接收一个newProps作为参数，这个参数会作为组件重新渲染时的props值，同样`renderHook`的`callback`函数也会使用这个新的props来重新调用。\n* unmount: `unmount`函数是用来卸载`TestComponent`的，它主要用来覆盖一些`useEffect cleanup`函数的场景。\n\n##### act\n这函数和React自带的test-utils的[act函数](https://reactjs.org/docs/test-utils.html#act)是同一个函数，我们知道组件状态更新的时候（setState），组件需要被重新渲染，而这个重渲染是需要React进行调度的，因此是个异步的过程，我们可以通过使用`act`函数将所有会更新到组件状态的操作封装在它的`callback`里面来保证`act`函数执行完之后我们定义的组件已经完成了重新渲染。\n\n### 安装\n直接把`react-hooks-testing-library`作为我们的项目`devDependencies`：\n```shell\nyarn add -D @testing-library/react-hooks\n```\n注意：要使用`react-hooks-testing-library`我们要确保我们安装了`16.9.0`版本及其以上的`react`和`react-test-renderer`：\n```\nyarn add react@^16.9.0\nyarn add -D react-test-renderer@^16.9.0\n```\n## 例子\n现在就让我们看一个简单的同时使用`Jest`和`react-hooks-testing-library`来测试hook的例子，假如我们在项目里面定义了一个叫做`useCounter`的Hook:\n```javascript\n// somewhere/useCounter.js\nimport { useState, useCallback } from 'react'\n\nfunction useCounter() {\n  const [count, setCount] = useState(0)\n\n  const increment = useCallback(() => setCount(x => x + 1), [])\n  const decrement = useCallback(() => setCount(x => x - 1), [])\n\n  return {count, increment, decrease}\n}\n```\n在上面的代码中我定义了一个叫做`useCounter`的hook，这个hook是用来封装一个叫做count的状态并且对外暴露对count进行操作的一些updater包括`increment`和`decrement`。如果大家对`useState`和`useCallback`不够熟悉的话可以看一下我的上一篇文章[React Hook实战指南]()。接着就让我们编写这个hook的测试用例：\n\n```javascript\n// somewhere/useCounter.spec.js\nimport { renderHook, act } from '@testing-library/react-hooks'\nimport useCounter from 'somewhere/useCounter'\n\ndescribe('Test useCounter', () => {\n  describe('increment', () => {\n     it('increase counter by 1', () => {\n      const { result } = renderHook(() => useCounter())\n\n      act(() => {\n        result.current.increment()\n      })\n\n      expect(result.current.count).toBe(1)\n    })\n  })\n\n  describe('decrement', () => {\n    it('decrease counter by 1', () => {\n      const { result } = renderHook(() => useCounter())\n\n      act(() => {\n        result.current.decrement()\n      })\n\n      expect(result.current.count).toBe(-1)\n    })\n})\n})\n```\n上面的代码中我们写了一个测试大组（describe）`Test useCounter`并在这个大组里面定义了两个测试小组分别用来测试`useCounter`返回的`increment`和`decrement`方法。我们具体看一下描述为`increase counter by 1`的测试用例的代码，首先我们要用`renderHook`函数来渲染要被测试的hook，这里我们需要将`useCounter`的返回值作为`callback`函数的返回值，这是因为我们需要在外面拿到这个hook的返回结果`{count, increment, decrement}`。接着我们使用`act`函数来调用改变组件状态`count`的`increment`函数，`act`函数完成之后我们的组件也就完成了重渲染，后面就可以判断更新后的`count`是不是我们想要的结果了。\n\n## 总结\n在本篇文章中我给大家介绍了什么叫做单元测试，为什么我们需要在自己的项目里面引入单元测试以及教大家如何使用`Jest`和`react-hooks-testing-library`来测试我们自定义的hook。\n\n这篇文章是我的React hook系列文章的最后一篇了，后面我还会持续为大家分享一些和hook相关的内容，大家敬请期待。\n\n## 参考文献\n* https://jestjs.io/\n* https://react-hooks-testing-library.com/\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","slug":"React-Hook测试指南","published":1,"updated":"2021-02-08T06:16:56.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0gqf6fi000aucnx1dg3bko4","content":"<p>在<a href=\"https://superseany.com/2020/04/29/React%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81Hook/\" target=\"_blank\" rel=\"noopener\">React为什么需要Hook</a>中我们探讨了React为什么需要引入Hook这个属性，在<a href=\"https://superseany.com/2020/07/15/React-Hook%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/\" target=\"_blank\" rel=\"noopener\">React Hook实战指南</a>中我们深入了解了各种Hook的详细用法以及会遇到的问题，在本篇文章中我将带大家了解一下如何通过为自定义hook编写单元测试来提高我们的代码质量，它会包含下面的内容：</p>\n<ul>\n<li>什么是单元测试<ul>\n<li>单元测试的定义</li>\n<li>为什么需要编写单元测试</li>\n<li>单元测试需要注意什么</li>\n</ul>\n</li>\n<li>如何对自定义Hook进行单元测试<ul>\n<li>Jest</li>\n<li>React-hooks-testing-library</li>\n<li>例子</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"什么是单元测试\"><a href=\"#什么是单元测试\" class=\"headerlink\" title=\"什么是单元测试\"></a>什么是单元测试</h2><h3 id=\"单元测试的定义\"><a href=\"#单元测试的定义\" class=\"headerlink\" title=\"单元测试的定义\"></a>单元测试的定义</h3><p>要理解单元测试，我们先来给测试下个定义。用最简单的话来说测试就是：<strong>我们给被测试对象一些输入（input），然后看看这个对象的输出结果（output）是不是符合我们的预期（match with expected result）</strong>。而在软件工程里面有很多不同类型的测试，例如单元测试（unit test），功能测试（functional test），性能测试（performance test）和集成测试（integration test）等。不同种类的测试的主要区别是被测试的对象和评判指标不一样。对于单元测试，被测试的对象是我们源代码的<code>独立单元</code>（individual unit），在面向过程编程语言（procedural programming）里面，单元就是我们封装的方法（function），在面向对象的编程语言（object-oriented programming）里面单元是类（class）的方法（method），我们一般不推荐将某个类或者某个模块直接作为单元测试的单元，因为这会使被测试的逻辑过于庞大，而且问题出现时不容易进行定位。</p>\n<h3 id=\"为什么需要编写单元测试\"><a href=\"#为什么需要编写单元测试\" class=\"headerlink\" title=\"为什么需要编写单元测试\"></a>为什么需要编写单元测试</h3><p>了解了单元测试的定义后，我们再来探讨一下为什么我们要在代码里面进行单元测试。</p>\n<p>我们之所以要在项目中编写单元测试，主要是因为对代码进行单元测试有下面这些好处：</p>\n<h4 id=\"提高代码质量\"><a href=\"#提高代码质量\" class=\"headerlink\" title=\"提高代码质量\"></a>提高代码质量</h4><p>单元测试可以提高我们的代码质量主要体现在它可以在我们开发某个功能的时候<strong>提前帮我们发现自己编写的代码的bug</strong>。举个例子，假如A同学写了一个叫做<code>useOptions</code>的hook它接受一个叫做<code>options</code>的参数，这个参数既可以是一个对象也可以是一个数组。A同学自己开发的过程中他只试过给<code>useOptions</code>传对象而没有试过给它传数组。同一个项目的B同学在使用<code>useOptions</code>的时候给它传了个数组发现代码挂了，这个时候B同学就得找A同学确认并等待A同学修复这个问题，这不但会影响B同学的开发进度而且还会让B同学觉得A同学<code>不靠谱</code>，或者觉得A同学的<code>代码很烂</code>。如果A同学有对<code>useOptions</code>进行单元测试的话，这个<code>悲剧</code>可能就不会发生了，因为A同学在为<code>useOptions</code>编写单元测试的时候就考虑了<code>options</code>为数组的情况，并且在B同学使用之前就修复了这个问题。因此编写单元测试可以让我们在开发的过程中提前考虑到很多后面使用才会发现的问题，进而提高我们的代码质量。</p>\n<h4 id=\"方便代码重构和新功能添加\"><a href=\"#方便代码重构和新功能添加\" class=\"headerlink\" title=\"方便代码重构和新功能添加\"></a>方便代码重构和新功能添加</h4><p>编写单元测试的过程其实是我们给代码编写<code>使用说明书的过程</code>（specification）。这个<code>使用说明书</code>十分重要，它相当于<code>代码生产者</code>（producer）与<code>代码消费者</code>（consumer）之间的<code>合约</code>（contract），生产者需要保证<strong>在消费者使用代码没错的前提下</strong>代码要有<code>使用说明书</code>上面的效果。这其实会对代码生产者起到一定的制约作用，因为生产者必须保证无论是给原来的代码添加新的功能还是对它进行重构，它都要满足原来<code>使用说明书</code>上的要求。</p>\n<p>继续上面那个例子，A同学和B同学都在项目的<code>1.0.0</code>版本中使用了<code>useOptions</code>这个hook，虽然<code>useOptions</code>没有编写单元测试，可是代码是没有bug的（最起码没有被发现）。后面项目需要进行<code>2.0.0</code>版本的升级了，这时候A同学需要为<code>useOptions</code>添加新的功能，A同学在改动了<code>useOptions</code>的代码后，在自己使用到的地方（对象作为参数的地方）做了测试，没有发现bug。在A同学自测完代码后，并将这个更改集成（integration）到了项目的<code>master</code>分支上。后面B同学在更新完A同学的代码后，发现自己的代码出现了一些问题，这个时候B同学很可能就会手忙脚乱，并且可能需要花费一段时间才能定位到原来是A同学对<code>useOptions</code>的改动影响到他的功能，这除了会影响到项目的进度外还会让A同学和B同学的关系进一步恶化。这个悲剧同样也是可以通过编写单元测试来避免的，试想一下假如A同学有给<code>useOptions</code>编写配套的<code>使用说明书</code>（单元测试），A同学在改动完代码后，它的代码是通过不了<code>使用说明书</code>的检查的，因为它的改动改变了<code>useOptions</code>之前定义好的外部行为，这个时候A同学就会提前修复自己的代码进而避免了B同学后面的苦恼。通过这个例子大家可能还是没有体会到单元测试对于我们平时产品迭代或者代码重构的重要性，可是你试想一下在一个比较大的项目中是有很多个A同学和B同学的，也有成千上万个<code>useOptions</code>函数，当真的发生类似问题的时候bug将会更难被定位和修复，如果我们大部分的代码都有单元测试的话，无论是对代码增加新的功能还是对原来的代码进行重构我们都会更有信心。</p>\n<h4 id=\"完善我们代码的设计\"><a href=\"#完善我们代码的设计\" class=\"headerlink\" title=\"完善我们代码的设计\"></a>完善我们代码的设计</h4><p>在软件工程里面有个概念叫做<code>测试驱动开发</code>（Test-driven Development），它鼓励我们在<strong>实际开始编码之前先为我们的代码编写测试用例</strong>。这样做的目的是让我们在开发之前就以<code>代码使用者</code>的角度去评判我们的代码设计。如果我们的代码设计很糟糕，我们就会发现我们很难为它们编写详尽的单元测试用例，相反如果我们的代码设计得很好（低耦合高内聚），各个函数的参数和功能都设计得十分合理，我们就十分容易就为它们编写对应的单元测试。我们要记住一句话：<strong>高质量的代码一定是可以被测试的（testable）</strong>。那么为什么是在还没开始写代码之前就编写测试用例呢？这是因为如果我们在代码写完之后再编写测试的话，即使我们发现代码设计得再不合理，我们也没有动力去改了，因为对设计的改动可能会让我们重写所有的代码，所以我们需要在实际编码之前进行单元测试的编写，因为这个时候的<code>改代码阻力</code>是最小的。</p>\n<h4 id=\"提供文档功能\"><a href=\"#提供文档功能\" class=\"headerlink\" title=\"提供文档功能\"></a>提供文档功能</h4><p>我们在为代码编写单元测试的时候实际上是在为代码编写一个个<code>使用例子</code>，因此别的开发者在使用我们代码的时候可以通过我们的单元测试来快速掌握我们定义的各种函数的用法。另外教大家一个实用的技巧：如果我们发现某个库的文档不是很全面的话，可以通过查看这个库的单元测试来快速掌握这个库的用法。</p>\n<h3 id=\"单元测试需要注意的问题\"><a href=\"#单元测试需要注意的问题\" class=\"headerlink\" title=\"单元测试需要注意的问题\"></a>单元测试需要注意的问题</h3><h4 id=\"隔离性\"><a href=\"#隔离性\" class=\"headerlink\" title=\"隔离性\"></a>隔离性</h4><p>上面我们说到单元测试是对代码独立的单元进行测试，这个独立的意思不是说这个函数（单元）不会调用另外一个函数（单元），而是说我们在测试这个函数的时候如果它有调用到其它的函数我们就需要mock它们，从而将我们的测试逻辑<strong>只放在被测试函数的逻辑上</strong>，不会受到其它依赖函数的影响。举个例子我们现在要测试以下函数：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fetchUserDetails</span>(<span class=\"hljs-params\">userId</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> userDetail = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">`https://myserver.com/users/<span class=\"hljs-subst\">$&#123;userId&#125;</span>`</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> userDetail</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>在测试<code>fetchUserDetails</code>时我们就需要mock <code>fetch</code>这个函数了，因为我们现在测试的函数是<code>fetchUserDetails</code>，我们只需要确定在外界调用<code>fetchUserDetails</code>的时候<code>fetch</code>会被调用，并且调用的参数是<code>“https://myserver.com/users/${userId}”</code>就行了，至于<code>fetch</code>函数如何发请求和处理返回来的数据都是<code>fetch</code>函数自己的事，我们不应该在测试<code>fetchUserDetails</code>的时候关心这个问题。</p>\n<p>单元测试要注意隔离性的另外一个原因是它可以保证当测试案例失败的时候我们可以十分容易定位到问题的所在。以上面的代码为例，如果我们没有mock <code>fetch</code>函数，一旦我们的测试失败，我们很难分清是<code>fetchUserDetails</code>逻辑错了还是<code>fetch</code>的逻辑错了。</p>\n<h4 id=\"可重复性\"><a href=\"#可重复性\" class=\"headerlink\" title=\"可重复性\"></a>可重复性</h4><p>我们编写的所有单元测试用例一定不能依赖外部的运行环境，否则我们的单元测试将不具备<code>可重复性</code>（repeatable）。所谓的<code>可重复性</code>就是：如果我们的单元测试用例现在是可以通过的，那么<strong>在代码不发生变动和测试用例没有改变的前提下</strong>它将是一直可以通过的。举个测试用例不具备可重复性的例子，假如你将项目的单元测试数据全部放在数据库里面，你今天运行项目的测试用例是可以通过的，而第二天其他人无意改了数据库的数据，这个时候你的测试用例就通过不了了，我们就说这些测试用例不具备可重复性，出现这个问题的主要原因是<code>它们使用了外部的依赖作为测试条件</code>。由此可见要使我们的测试用例具备可重复性的一个关键点是在编写单元测试的时候避免外部依赖，这些外部依赖包括<code>数据库</code>，<code>网络请求</code>和<code>本地文件系统</code>等。</p>\n<p>另外一个影响到测试用例可重复性的一个重要的却容易被忽略的因素是：不同单元测试用例之间共用了一些测试数据，某个测试用例对测试数据的更改可能会影响其它测试用例的正确执行。因此我们在编写单元测试用例的时候一定要<strong>避免不同测试用例之间共用一些测试数据</strong>，尽量将每个测试用例<code>隔离</code>起来。</p>\n<h4 id=\"提高代码覆盖率\"><a href=\"#提高代码覆盖率\" class=\"headerlink\" title=\"提高代码覆盖率\"></a>提高代码覆盖率</h4><p>在单元测试里面有个概念叫做代码覆盖率（test coverage），它表明我们代码<code>被测试的程度</code>。举个例子假如我们有一个100行的函数，在我们运行完所有的为这个函数编写的单元测试用例之后，如果测试框架告诉我们这个函数的覆盖率是80%，这表明我们的测试用例代码只覆盖了这个函数的80行代码，还有一些代码分支（if/else, switch, while）没有被执行到。如果我们想通过单元测试来提高我们代码质量的话，我们就需要保证我们代码的覆盖率足够大，尽量让被测试的函数的每一种被执行情况都被覆盖到（覆盖率100%），特别是一些异常的情况应该也要被覆盖到（例如参数错误，调用第三方依赖报错等），这样我们才能及早地发现代码的bug并进行修复。</p>\n<h4 id=\"测试用例运行时间要短\"><a href=\"#测试用例运行时间要短\" class=\"headerlink\" title=\"测试用例运行时间要短\"></a>测试用例运行时间要短</h4><p>我在上面说到单元测试是可以帮助我们更好地进行代码迭代和重构的，要做到这点其实要求我们在每次代码归并的时候对被<code>merge</code>的代码进行一些自动化检测（CI），这就包括项目单元测试用例的运行。试想一下在一个比较大型的项目里面单元测试用例的数量往往是很多的，少则几百个，多则上千个，如果全部运行所有测试用例的时间需要十几分钟甚至一两小时，这就会影响到代码集成的进度。为了避免这个问题，我们就需要确保每个单元测试用例执行的时间不能过长，例如避免在测试代码里面进行一些耗时的计算等。</p>\n<h2 id=\"如何对自定义Hook进行单元测试\"><a href=\"#如何对自定义Hook进行单元测试\" class=\"headerlink\" title=\"如何对自定义Hook进行单元测试\"></a>如何对自定义Hook进行单元测试</h2><p>在<a href=\"https://superseany.com/2020/07/15/React-Hook%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/\" target=\"_blank\" rel=\"noopener\">React Hook实战指南</a>中我们提到Hook就是一些函数，所以对Hook进行单元测试其实是对一个函数进行测试，只不过这个函数和普通函数的区别是它拥有React给它赋予的特殊功能。在讲如何对Hook进行测试之前我们先来了解一下我们要用到的测试框架<a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener\">Jest</a>和hook测试库<a href=\"https://github.com/testing-library/react-hooks-testing-library\" target=\"_blank\" rel=\"noopener\">react-hook-testing-library</a>。</p>\n<h3 id=\"Jest\"><a href=\"#Jest\" class=\"headerlink\" title=\"Jest\"></a>Jest</h3><p>Jest是Facebook开源的一个单元测试框架，它的使用率和知名度都非常高，一些著名的开源项目例如webpack, babel和react等都是使用Jest来进行单元测试的，由于这篇文章的重点不是Jest的使用，所以我在这里将不为大家做具体的介绍，这里主要介绍一下我们常用到的Jest API：</p>\n<h4 id=\"常用API\"><a href=\"#常用API\" class=\"headerlink\" title=\"常用API\"></a>常用API</h4><h5 id=\"it-test\"><a href=\"#it-test\" class=\"headerlink\" title=\"it/test\"></a>it/test</h5><p><code>it/test</code>函数是用来定义<code>测试用例</code>（test case）的，它的函数签名是<code>it(description, fn?, timeout?)</code>，<code>description</code>参数是对这个测试用例的一个简短的描述，<code>fn</code>是一个运行我们实际测试逻辑的函数，而timeout则是这个测试用例的超时时间。下面是一个简单的例子：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> sum <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'somewhere/sum'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">it(<span class=\"hljs-string\">'test if sum work for positive numbers'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> result = sum(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  expect(result).toEqual(<span class=\"hljs-number\">3</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n<h5 id=\"describe\"><a href=\"#describe\" class=\"headerlink\" title=\"describe\"></a>describe</h5><p><code>describe</code>函数是用来给测试用例<code>分组</code>用的，它的函数签名是<code>describe(description, fn)</code>，description是用来描述这个分组的，而<code>fn</code>函数里面则可以定义内嵌的分组（nested）或者是一些测试用例（it），下面是一个简单的例子：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> sum <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'somewhere/sum'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"hljs-string\">'test sum'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  it(<span class=\"hljs-string\">'work for positive numbers'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">const</span> result = sum(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    expect(result).toEqual(<span class=\"hljs-number\">3</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  it(<span class=\"hljs-string\">'work for negative numbers'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">const</span> result = sum(<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-2</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    expect(result).toEqual(<span class=\"hljs-number\">-3</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n<h5 id=\"expect\"><a href=\"#expect\" class=\"headerlink\" title=\"expect\"></a>expect</h5><p>我们在刚开始的时候就提到所谓的测试就是要<strong>比较被测试对象的输出和我们期待的输出是不是一致的</strong>，也就涉及到一个比较的过程，在Jest框架中我们可以通过<code>expect</code>函数来访问一系列<code>matcher</code>来进行这个<code>比较的过程</code>，例如上面的<code>expect(sum).toEqual(3)</code>就是一个用matcher来判断输出结果是不是我们想要的值的过程。关于更加详细的matcher信息大家可以参考<a href=\"https://jestjs.io/docs/en/expect\" target=\"_blank\" rel=\"noopener\">jest的官方文档</a>。</p>\n<h5 id=\"mock\"><a href=\"#mock\" class=\"headerlink\" title=\"mock\"></a>mock</h5><p>在Jest框架中用来进行mock的方法有很多，主要用到的是<code>jest.fn()</code>和<code>jest.spyOn()</code>。</p>\n<h5 id=\"jest-fn\"><a href=\"#jest-fn\" class=\"headerlink\" title=\"jest.fn\"></a>jest.fn</h5><p><code>jest.fn</code>会生成一个mock函数，这个函数可以用来代替源代码中被使用的第三方函数。<code>jest.fn</code>生成的函数上面有很多属性，我们也可以通过一些<code>matcher</code>来对这个函数的调用情况进行一些断言，下面是一个简单的例子：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// somewhere/functionWithCallback.js</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> functionWithCallback = <span class=\"hljs-function\">(<span class=\"hljs-params\">callback</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  callback(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// somewhere/functionWithCallback.spec.js</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> &#123; functionWithCallback &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'somewhere/functionWithCallback'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"hljs-string\">'Test functionWithCallback'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  it(<span class=\"hljs-string\">'if callback is invoked'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">const</span> callback = jest.fn()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    functionWithCallback(callback)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    expect(callback.mock.calls.length).toEqual(<span class=\"hljs-number\">1</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n<h5 id=\"jest-spyOn\"><a href=\"#jest-spyOn\" class=\"headerlink\" title=\"jest.spyOn\"></a>jest.spyOn</h5><p>我们源代码中的函数可能使用了另外一个文件或者<code>node_modules</code>中安装的一些依赖，这些依赖可以使用<code>jest.spyOn</code>来进行mock，下面是一个简单的例子：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// somewhere/sum.js</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> &#123; validateNumber &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'somewhere/validates'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> (n1, n2) =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  validateNumber(n1)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  validateNumber(n2)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> n1 + n2</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// somewhere/sum.spec.js</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> sum <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'somewhere/sum'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> validates <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'somewhere/validates'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">it(<span class=\"hljs-string\">'work for positive numbers'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// mock validateNumber</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> validateNumberMock = jest.spyOn(validates, <span class=\"hljs-string\">'validateNumber'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> result = sum(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  expect(result).toEqual(<span class=\"hljs-number\">3</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// restore original implementation</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  validateNumberMock.mockRestore()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n<p>我们在上面测试代码中引入了源代码使用到的依赖<code>somewhere/validates</code>，这个时候就可以通过<code>jest.spyOn</code>来mock这个依赖<code>export</code>的一些方法了，例如<code>validateNumber</code>。被mock的函数会在源代码被执行的时候使用，例如上面<code>sum</code>执行的时候使用到的<code>validateNumber</code>就是我们在<code>sum.spec.js</code>里面定义的<code>validateNumberMock</code>。这样我们除了可以保证<code>validateNumber</code>不会影响到我们对<code>sum</code>函数逻辑的测试，还可以在外面对<code>validateNumberMock</code>进行一些断言（assertion）来验证<code>sum</code>逻辑的正确性。还有一点需要注意的是，我在测试用例执行完之后调用了<code>mockRestore</code>这个函数，这个函数会恢复<code>validateNumber</code>函数原来的实现，从而避免这个测试用例对<code>validate</code>文件的更改影响到其它测试用例的正确执行。</p>\n<h3 id=\"项目引入jest\"><a href=\"#项目引入jest\" class=\"headerlink\" title=\"项目引入jest\"></a>项目引入jest</h3><p>了解完jest的一些基本API之后我们再来看一下如何在我们的项目里面引入jest。</p>\n<h4 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h4><p>首先使用下面命令安装jest</p>\n<figure class=\"highlight shell hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D jest</span></pre></td></tr></table></figure>\n<p>如果你项目使用的是Typescript，则还需要安装<code>ts-jest</code>作为依赖：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D ts-jest</span></pre></td></tr></table></figure>\n<h4 id=\"配置jest\"><a href=\"#配置jest\" class=\"headerlink\" title=\"配置jest\"></a>配置jest</h4><p>安装完jest后需要在package.json文件里面配置一下:</p>\n<figure class=\"highlight json hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attr\">\"jest\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"transform\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"^.+\\\\.tsx?$\"</span>: <span class=\"hljs-string\">\"ts-jest\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"testRegex\"</span>: <span class=\"hljs-string\">\"(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.(jsx?|tsx?)$\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"moduleDirectories\"</span>: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-string\">\"node_modules\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-string\">\"src\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"moduleFileExtensions\"</span>: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-string\">\"ts\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-string\">\"tsx\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-string\">\"js\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-string\">\"jsx\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-string\">\"json\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-string\">\"node\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>上面各个配置项的意思分别是：</p>\n<ul>\n<li>transform: 告诉jest，你的ts或者tsx文件需要使用ts-jest来进行转换。</li>\n<li>testRegex: 告诉jest哪些文件是需要被作为测试代码进行执行的，从上面的正则表达式我们可以看出文件名中有test和spec的文件将会被作为测试用例执行。</li>\n<li>moduleDirectories: 告诉jest在执行测试用例代码的时候，代码用到的dependencies应该去哪些目录进行resolve，在这里jest会去<code>node_modules</code>和<code>src</code>（或者你自己的源代码根目录）里面进行resolve，这个应该要和你项目的webpack.config.js的resolve部分配置保持一致。</li>\n<li>moduleFileExtensions: 告诉jest在找不到对应文件的时候应该尝试哪些文件后缀。</li>\n</ul>\n<h3 id=\"React-hooks-testing-library\"><a href=\"#React-hooks-testing-library\" class=\"headerlink\" title=\"React hooks testing library\"></a>React hooks testing library</h3><p><a href=\"https://github.com/testing-library/react-hooks-testing-library\" target=\"_blank\" rel=\"noopener\">React-hooks-testing-library</a>，是一个专门用来测试React hook的库。我们知道虽然hook是一个函数，可是我们却不能用测试普通函数的方法来测试它们，因为它们的实际运行会涉及到很多React运行时（runtime）的东西，因此很多人为了测试自己的hook会编写一些<code>TestComponent</code>来运行它们，这种方法十分不方便而且很难覆盖到所有的情景。为了简化开发者测试hook的流程，React社区有人开发了这个叫做<code>react-hooks-testing-library</code>的库来允许我们像测试普通函数一样测试我们定义的hook，这个库其实背后也是将我们定义的hook运行在一个<code>TestComponent</code>里面，只不过它封装了一些简易的API来简化我们的测试。在开始使用这个库之前，我们先来看一下它对外暴露的一些常用的API。</p>\n<h4 id=\"常用API-1\"><a href=\"#常用API-1\" class=\"headerlink\" title=\"常用API\"></a>常用API</h4><h5 id=\"renderHook\"><a href=\"#renderHook\" class=\"headerlink\" title=\"renderHook\"></a>renderHook</h5><p><code>renderHook</code>这个函数顾名思义就是用来渲染hook的，它会在调用的时候渲染一个专门用来测试的<code>TestComponent</code>来使用我们的hook。renderHook的函数签名是<code>renderHook(callback, options?)</code>，它的第一个参数是一个<code>callback</code>函数，这个函数会在<code>TestComponent</code>每次被重新渲染的时候调用，因此我们可以在这个函数里面调用我们想要测试的hook。<code>renderHook</code>的第二个参数是一个可选的<code>options</code>，这个<code>options</code>可以带两个属性，一个是<code>initialProps</code>，它是<code>TestComponent</code>的初始props参数，并且会被传递给<code>callback</code>函数用来调用hook。options的另外一个属性是<code>wrapper</code>，它用来指定<code>TestComponent</code>的父级组件（Wrapper Component），这个组件可以是一些<code>ContextProvider</code>等用来为<code>TestComponent</code>的hook提供测试数据的东西。</p>\n<p><code>renderHook</code>的返回值是<code>RenderHookResult</code>对象，这个对象会有下面这些属性：</p>\n<ul>\n<li>result：<code>result</code>是一个对象，它包含两个属性，一个是<code>current</code>，它保存的是<code>renderHook</code> <code>callback</code>的返回值，另外一个属性是<code>error</code>，它用来存储hook在render过程中出现的任何错误。</li>\n<li>rerender: <code>rerender</code>函数是用来重新渲染<code>TestComponent</code>的，它可以接收一个newProps作为参数，这个参数会作为组件重新渲染时的props值，同样<code>renderHook</code>的<code>callback</code>函数也会使用这个新的props来重新调用。</li>\n<li>unmount: <code>unmount</code>函数是用来卸载<code>TestComponent</code>的，它主要用来覆盖一些<code>useEffect cleanup</code>函数的场景。</li>\n</ul>\n<h5 id=\"act\"><a href=\"#act\" class=\"headerlink\" title=\"act\"></a>act</h5><p>这函数和React自带的test-utils的<a href=\"https://reactjs.org/docs/test-utils.html#act\" target=\"_blank\" rel=\"noopener\">act函数</a>是同一个函数，我们知道组件状态更新的时候（setState），组件需要被重新渲染，而这个重渲染是需要React进行调度的，因此是个异步的过程，我们可以通过使用<code>act</code>函数将所有会更新到组件状态的操作封装在它的<code>callback</code>里面来保证<code>act</code>函数执行完之后我们定义的组件已经完成了重新渲染。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>直接把<code>react-hooks-testing-library</code>作为我们的项目<code>devDependencies</code>：</p>\n<figure class=\"highlight shell hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D @testing-library/react-hooks</span></pre></td></tr></table></figure>\n<p>注意：要使用<code>react-hooks-testing-library</code>我们要确保我们安装了<code>16.9.0</code>版本及其以上的<code>react</code>和<code>react-test-renderer</code>：</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react@^16.9.0</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D react-test-renderer@^16.9.0</span></pre></td></tr></table></figure>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>现在就让我们看一个简单的同时使用<code>Jest</code>和<code>react-hooks-testing-library</code>来测试hook的例子，假如我们在项目里面定义了一个叫做<code>useCounter</code>的Hook:</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// somewhere/useCounter.js</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> &#123; useState, useCallback &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">useCounter</span>(<span class=\"hljs-params\"></span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> [count, setCount] = useState(<span class=\"hljs-number\">0</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> increment = useCallback(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> setCount(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x + <span class=\"hljs-number\">1</span>), [])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> decrement = useCallback(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> setCount(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x - <span class=\"hljs-number\">1</span>), [])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> &#123;count, increment, decrease&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>在上面的代码中我定义了一个叫做<code>useCounter</code>的hook，这个hook是用来封装一个叫做count的状态并且对外暴露对count进行操作的一些updater包括<code>increment</code>和<code>decrement</code>。如果大家对<code>useState</code>和<code>useCallback</code>不够熟悉的话可以看一下我的上一篇文章<a href>React Hook实战指南</a>。接着就让我们编写这个hook的测试用例：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// somewhere/useCounter.spec.js</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> &#123; renderHook, act &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@testing-library/react-hooks'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> useCounter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'somewhere/useCounter'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"hljs-string\">'Test useCounter'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  describe(<span class=\"hljs-string\">'increment'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">     it(<span class=\"hljs-string\">'increase counter by 1'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">const</span> &#123; result &#125; = renderHook(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> useCounter())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      act(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">        result.current.increment()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      expect(result.current.count).toBe(<span class=\"hljs-number\">1</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  describe(<span class=\"hljs-string\">'decrement'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    it(<span class=\"hljs-string\">'decrease counter by 1'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">const</span> &#123; result &#125; = renderHook(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> useCounter())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">      act(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">        result.current.decrement()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">      expect(result.current.count).toBe(<span class=\"hljs-number\">-1</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n<p>上面的代码中我们写了一个测试大组（describe）<code>Test useCounter</code>并在这个大组里面定义了两个测试小组分别用来测试<code>useCounter</code>返回的<code>increment</code>和<code>decrement</code>方法。我们具体看一下描述为<code>increase counter by 1</code>的测试用例的代码，首先我们要用<code>renderHook</code>函数来渲染要被测试的hook，这里我们需要将<code>useCounter</code>的返回值作为<code>callback</code>函数的返回值，这是因为我们需要在外面拿到这个hook的返回结果<code>{count, increment, decrement}</code>。接着我们使用<code>act</code>函数来调用改变组件状态<code>count</code>的<code>increment</code>函数，<code>act</code>函数完成之后我们的组件也就完成了重渲染，后面就可以判断更新后的<code>count</code>是不是我们想要的结果了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在本篇文章中我给大家介绍了什么叫做单元测试，为什么我们需要在自己的项目里面引入单元测试以及教大家如何使用<code>Jest</code>和<code>react-hooks-testing-library</code>来测试我们自定义的hook。</p>\n<p>这篇文章是我的React hook系列文章的最后一篇了，后面我还会持续为大家分享一些和hook相关的内容，大家敬请期待。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener\">https://jestjs.io/</a></li>\n<li><a href=\"https://react-hooks-testing-library.com/\" target=\"_blank\" rel=\"noopener\">https://react-hooks-testing-library.com/</a></li>\n</ul>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<p>在<a href=\"https://superseany.com/2020/04/29/React%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81Hook/\" target=\"_blank\" rel=\"noopener\">React为什么需要Hook</a>中我们探讨了React为什么需要引入Hook这个属性，在<a href=\"https://superseany.com/2020/07/15/React-Hook%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/\" target=\"_blank\" rel=\"noopener\">React Hook实战指南</a>中我们深入了解了各种Hook的详细用法以及会遇到的问题，在本篇文章中我将带大家了解一下如何通过为自定义hook编写单元测试来提高我们的代码质量，它会包含下面的内容：</p>\n<ul>\n<li>什么是单元测试<ul>\n<li>单元测试的定义</li>\n<li>为什么需要编写单元测试</li>\n<li>单元测试需要注意什么</li>\n</ul>\n</li>\n<li>如何对自定义Hook进行单元测试<ul>\n<li>Jest</li>\n<li>React-hooks-testing-library</li>\n<li>例子</li>\n</ul>\n</li>\n</ul>","more":"<h2 id=\"什么是单元测试\"><a href=\"#什么是单元测试\" class=\"headerlink\" title=\"什么是单元测试\"></a>什么是单元测试</h2><h3 id=\"单元测试的定义\"><a href=\"#单元测试的定义\" class=\"headerlink\" title=\"单元测试的定义\"></a>单元测试的定义</h3><p>要理解单元测试，我们先来给测试下个定义。用最简单的话来说测试就是：<strong>我们给被测试对象一些输入（input），然后看看这个对象的输出结果（output）是不是符合我们的预期（match with expected result）</strong>。而在软件工程里面有很多不同类型的测试，例如单元测试（unit test），功能测试（functional test），性能测试（performance test）和集成测试（integration test）等。不同种类的测试的主要区别是被测试的对象和评判指标不一样。对于单元测试，被测试的对象是我们源代码的<code>独立单元</code>（individual unit），在面向过程编程语言（procedural programming）里面，单元就是我们封装的方法（function），在面向对象的编程语言（object-oriented programming）里面单元是类（class）的方法（method），我们一般不推荐将某个类或者某个模块直接作为单元测试的单元，因为这会使被测试的逻辑过于庞大，而且问题出现时不容易进行定位。</p>\n<h3 id=\"为什么需要编写单元测试\"><a href=\"#为什么需要编写单元测试\" class=\"headerlink\" title=\"为什么需要编写单元测试\"></a>为什么需要编写单元测试</h3><p>了解了单元测试的定义后，我们再来探讨一下为什么我们要在代码里面进行单元测试。</p>\n<p>我们之所以要在项目中编写单元测试，主要是因为对代码进行单元测试有下面这些好处：</p>\n<h4 id=\"提高代码质量\"><a href=\"#提高代码质量\" class=\"headerlink\" title=\"提高代码质量\"></a>提高代码质量</h4><p>单元测试可以提高我们的代码质量主要体现在它可以在我们开发某个功能的时候<strong>提前帮我们发现自己编写的代码的bug</strong>。举个例子，假如A同学写了一个叫做<code>useOptions</code>的hook它接受一个叫做<code>options</code>的参数，这个参数既可以是一个对象也可以是一个数组。A同学自己开发的过程中他只试过给<code>useOptions</code>传对象而没有试过给它传数组。同一个项目的B同学在使用<code>useOptions</code>的时候给它传了个数组发现代码挂了，这个时候B同学就得找A同学确认并等待A同学修复这个问题，这不但会影响B同学的开发进度而且还会让B同学觉得A同学<code>不靠谱</code>，或者觉得A同学的<code>代码很烂</code>。如果A同学有对<code>useOptions</code>进行单元测试的话，这个<code>悲剧</code>可能就不会发生了，因为A同学在为<code>useOptions</code>编写单元测试的时候就考虑了<code>options</code>为数组的情况，并且在B同学使用之前就修复了这个问题。因此编写单元测试可以让我们在开发的过程中提前考虑到很多后面使用才会发现的问题，进而提高我们的代码质量。</p>\n<h4 id=\"方便代码重构和新功能添加\"><a href=\"#方便代码重构和新功能添加\" class=\"headerlink\" title=\"方便代码重构和新功能添加\"></a>方便代码重构和新功能添加</h4><p>编写单元测试的过程其实是我们给代码编写<code>使用说明书的过程</code>（specification）。这个<code>使用说明书</code>十分重要，它相当于<code>代码生产者</code>（producer）与<code>代码消费者</code>（consumer）之间的<code>合约</code>（contract），生产者需要保证<strong>在消费者使用代码没错的前提下</strong>代码要有<code>使用说明书</code>上面的效果。这其实会对代码生产者起到一定的制约作用，因为生产者必须保证无论是给原来的代码添加新的功能还是对它进行重构，它都要满足原来<code>使用说明书</code>上的要求。</p>\n<p>继续上面那个例子，A同学和B同学都在项目的<code>1.0.0</code>版本中使用了<code>useOptions</code>这个hook，虽然<code>useOptions</code>没有编写单元测试，可是代码是没有bug的（最起码没有被发现）。后面项目需要进行<code>2.0.0</code>版本的升级了，这时候A同学需要为<code>useOptions</code>添加新的功能，A同学在改动了<code>useOptions</code>的代码后，在自己使用到的地方（对象作为参数的地方）做了测试，没有发现bug。在A同学自测完代码后，并将这个更改集成（integration）到了项目的<code>master</code>分支上。后面B同学在更新完A同学的代码后，发现自己的代码出现了一些问题，这个时候B同学很可能就会手忙脚乱，并且可能需要花费一段时间才能定位到原来是A同学对<code>useOptions</code>的改动影响到他的功能，这除了会影响到项目的进度外还会让A同学和B同学的关系进一步恶化。这个悲剧同样也是可以通过编写单元测试来避免的，试想一下假如A同学有给<code>useOptions</code>编写配套的<code>使用说明书</code>（单元测试），A同学在改动完代码后，它的代码是通过不了<code>使用说明书</code>的检查的，因为它的改动改变了<code>useOptions</code>之前定义好的外部行为，这个时候A同学就会提前修复自己的代码进而避免了B同学后面的苦恼。通过这个例子大家可能还是没有体会到单元测试对于我们平时产品迭代或者代码重构的重要性，可是你试想一下在一个比较大的项目中是有很多个A同学和B同学的，也有成千上万个<code>useOptions</code>函数，当真的发生类似问题的时候bug将会更难被定位和修复，如果我们大部分的代码都有单元测试的话，无论是对代码增加新的功能还是对原来的代码进行重构我们都会更有信心。</p>\n<h4 id=\"完善我们代码的设计\"><a href=\"#完善我们代码的设计\" class=\"headerlink\" title=\"完善我们代码的设计\"></a>完善我们代码的设计</h4><p>在软件工程里面有个概念叫做<code>测试驱动开发</code>（Test-driven Development），它鼓励我们在<strong>实际开始编码之前先为我们的代码编写测试用例</strong>。这样做的目的是让我们在开发之前就以<code>代码使用者</code>的角度去评判我们的代码设计。如果我们的代码设计很糟糕，我们就会发现我们很难为它们编写详尽的单元测试用例，相反如果我们的代码设计得很好（低耦合高内聚），各个函数的参数和功能都设计得十分合理，我们就十分容易就为它们编写对应的单元测试。我们要记住一句话：<strong>高质量的代码一定是可以被测试的（testable）</strong>。那么为什么是在还没开始写代码之前就编写测试用例呢？这是因为如果我们在代码写完之后再编写测试的话，即使我们发现代码设计得再不合理，我们也没有动力去改了，因为对设计的改动可能会让我们重写所有的代码，所以我们需要在实际编码之前进行单元测试的编写，因为这个时候的<code>改代码阻力</code>是最小的。</p>\n<h4 id=\"提供文档功能\"><a href=\"#提供文档功能\" class=\"headerlink\" title=\"提供文档功能\"></a>提供文档功能</h4><p>我们在为代码编写单元测试的时候实际上是在为代码编写一个个<code>使用例子</code>，因此别的开发者在使用我们代码的时候可以通过我们的单元测试来快速掌握我们定义的各种函数的用法。另外教大家一个实用的技巧：如果我们发现某个库的文档不是很全面的话，可以通过查看这个库的单元测试来快速掌握这个库的用法。</p>\n<h3 id=\"单元测试需要注意的问题\"><a href=\"#单元测试需要注意的问题\" class=\"headerlink\" title=\"单元测试需要注意的问题\"></a>单元测试需要注意的问题</h3><h4 id=\"隔离性\"><a href=\"#隔离性\" class=\"headerlink\" title=\"隔离性\"></a>隔离性</h4><p>上面我们说到单元测试是对代码独立的单元进行测试，这个独立的意思不是说这个函数（单元）不会调用另外一个函数（单元），而是说我们在测试这个函数的时候如果它有调用到其它的函数我们就需要mock它们，从而将我们的测试逻辑<strong>只放在被测试函数的逻辑上</strong>，不会受到其它依赖函数的影响。举个例子我们现在要测试以下函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchUserDetails</span>(<span class=\"params\">userId</span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> userDetail = <span class=\"keyword\">await</span> fetch(<span class=\"string\">`https://myserver.com/users/<span class=\"subst\">$&#123;userId&#125;</span>`</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> userDetail</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>在测试<code>fetchUserDetails</code>时我们就需要mock <code>fetch</code>这个函数了，因为我们现在测试的函数是<code>fetchUserDetails</code>，我们只需要确定在外界调用<code>fetchUserDetails</code>的时候<code>fetch</code>会被调用，并且调用的参数是<code>“https://myserver.com/users/${userId}”</code>就行了，至于<code>fetch</code>函数如何发请求和处理返回来的数据都是<code>fetch</code>函数自己的事，我们不应该在测试<code>fetchUserDetails</code>的时候关心这个问题。</p>\n<p>单元测试要注意隔离性的另外一个原因是它可以保证当测试案例失败的时候我们可以十分容易定位到问题的所在。以上面的代码为例，如果我们没有mock <code>fetch</code>函数，一旦我们的测试失败，我们很难分清是<code>fetchUserDetails</code>逻辑错了还是<code>fetch</code>的逻辑错了。</p>\n<h4 id=\"可重复性\"><a href=\"#可重复性\" class=\"headerlink\" title=\"可重复性\"></a>可重复性</h4><p>我们编写的所有单元测试用例一定不能依赖外部的运行环境，否则我们的单元测试将不具备<code>可重复性</code>（repeatable）。所谓的<code>可重复性</code>就是：如果我们的单元测试用例现在是可以通过的，那么<strong>在代码不发生变动和测试用例没有改变的前提下</strong>它将是一直可以通过的。举个测试用例不具备可重复性的例子，假如你将项目的单元测试数据全部放在数据库里面，你今天运行项目的测试用例是可以通过的，而第二天其他人无意改了数据库的数据，这个时候你的测试用例就通过不了了，我们就说这些测试用例不具备可重复性，出现这个问题的主要原因是<code>它们使用了外部的依赖作为测试条件</code>。由此可见要使我们的测试用例具备可重复性的一个关键点是在编写单元测试的时候避免外部依赖，这些外部依赖包括<code>数据库</code>，<code>网络请求</code>和<code>本地文件系统</code>等。</p>\n<p>另外一个影响到测试用例可重复性的一个重要的却容易被忽略的因素是：不同单元测试用例之间共用了一些测试数据，某个测试用例对测试数据的更改可能会影响其它测试用例的正确执行。因此我们在编写单元测试用例的时候一定要<strong>避免不同测试用例之间共用一些测试数据</strong>，尽量将每个测试用例<code>隔离</code>起来。</p>\n<h4 id=\"提高代码覆盖率\"><a href=\"#提高代码覆盖率\" class=\"headerlink\" title=\"提高代码覆盖率\"></a>提高代码覆盖率</h4><p>在单元测试里面有个概念叫做代码覆盖率（test coverage），它表明我们代码<code>被测试的程度</code>。举个例子假如我们有一个100行的函数，在我们运行完所有的为这个函数编写的单元测试用例之后，如果测试框架告诉我们这个函数的覆盖率是80%，这表明我们的测试用例代码只覆盖了这个函数的80行代码，还有一些代码分支（if/else, switch, while）没有被执行到。如果我们想通过单元测试来提高我们代码质量的话，我们就需要保证我们代码的覆盖率足够大，尽量让被测试的函数的每一种被执行情况都被覆盖到（覆盖率100%），特别是一些异常的情况应该也要被覆盖到（例如参数错误，调用第三方依赖报错等），这样我们才能及早地发现代码的bug并进行修复。</p>\n<h4 id=\"测试用例运行时间要短\"><a href=\"#测试用例运行时间要短\" class=\"headerlink\" title=\"测试用例运行时间要短\"></a>测试用例运行时间要短</h4><p>我在上面说到单元测试是可以帮助我们更好地进行代码迭代和重构的，要做到这点其实要求我们在每次代码归并的时候对被<code>merge</code>的代码进行一些自动化检测（CI），这就包括项目单元测试用例的运行。试想一下在一个比较大型的项目里面单元测试用例的数量往往是很多的，少则几百个，多则上千个，如果全部运行所有测试用例的时间需要十几分钟甚至一两小时，这就会影响到代码集成的进度。为了避免这个问题，我们就需要确保每个单元测试用例执行的时间不能过长，例如避免在测试代码里面进行一些耗时的计算等。</p>\n<h2 id=\"如何对自定义Hook进行单元测试\"><a href=\"#如何对自定义Hook进行单元测试\" class=\"headerlink\" title=\"如何对自定义Hook进行单元测试\"></a>如何对自定义Hook进行单元测试</h2><p>在<a href=\"https://superseany.com/2020/07/15/React-Hook%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/\" target=\"_blank\" rel=\"noopener\">React Hook实战指南</a>中我们提到Hook就是一些函数，所以对Hook进行单元测试其实是对一个函数进行测试，只不过这个函数和普通函数的区别是它拥有React给它赋予的特殊功能。在讲如何对Hook进行测试之前我们先来了解一下我们要用到的测试框架<a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener\">Jest</a>和hook测试库<a href=\"https://github.com/testing-library/react-hooks-testing-library\" target=\"_blank\" rel=\"noopener\">react-hook-testing-library</a>。</p>\n<h3 id=\"Jest\"><a href=\"#Jest\" class=\"headerlink\" title=\"Jest\"></a>Jest</h3><p>Jest是Facebook开源的一个单元测试框架，它的使用率和知名度都非常高，一些著名的开源项目例如webpack, babel和react等都是使用Jest来进行单元测试的，由于这篇文章的重点不是Jest的使用，所以我在这里将不为大家做具体的介绍，这里主要介绍一下我们常用到的Jest API：</p>\n<h4 id=\"常用API\"><a href=\"#常用API\" class=\"headerlink\" title=\"常用API\"></a>常用API</h4><h5 id=\"it-test\"><a href=\"#it-test\" class=\"headerlink\" title=\"it/test\"></a>it/test</h5><p><code>it/test</code>函数是用来定义<code>测试用例</code>（test case）的，它的函数签名是<code>it(description, fn?, timeout?)</code>，<code>description</code>参数是对这个测试用例的一个简短的描述，<code>fn</code>是一个运行我们实际测试逻辑的函数，而timeout则是这个测试用例的超时时间。下面是一个简单的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sum <span class=\"keyword\">from</span> <span class=\"string\">'somewhere/sum'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'test if sum work for positive numbers'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> result = sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  expect(result).toEqual(<span class=\"number\">3</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n<h5 id=\"describe\"><a href=\"#describe\" class=\"headerlink\" title=\"describe\"></a>describe</h5><p><code>describe</code>函数是用来给测试用例<code>分组</code>用的，它的函数签名是<code>describe(description, fn)</code>，description是用来描述这个分组的，而<code>fn</code>函数里面则可以定义内嵌的分组（nested）或者是一些测试用例（it），下面是一个简单的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sum <span class=\"keyword\">from</span> <span class=\"string\">'somewhere/sum'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'test sum'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  it(<span class=\"string\">'work for positive numbers'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> result = sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    expect(result).toEqual(<span class=\"number\">3</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  it(<span class=\"string\">'work for negative numbers'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> result = sum(<span class=\"number\">-1</span>, <span class=\"number\">-2</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    expect(result).toEqual(<span class=\"number\">-3</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n<h5 id=\"expect\"><a href=\"#expect\" class=\"headerlink\" title=\"expect\"></a>expect</h5><p>我们在刚开始的时候就提到所谓的测试就是要<strong>比较被测试对象的输出和我们期待的输出是不是一致的</strong>，也就涉及到一个比较的过程，在Jest框架中我们可以通过<code>expect</code>函数来访问一系列<code>matcher</code>来进行这个<code>比较的过程</code>，例如上面的<code>expect(sum).toEqual(3)</code>就是一个用matcher来判断输出结果是不是我们想要的值的过程。关于更加详细的matcher信息大家可以参考<a href=\"https://jestjs.io/docs/en/expect\" target=\"_blank\" rel=\"noopener\">jest的官方文档</a>。</p>\n<h5 id=\"mock\"><a href=\"#mock\" class=\"headerlink\" title=\"mock\"></a>mock</h5><p>在Jest框架中用来进行mock的方法有很多，主要用到的是<code>jest.fn()</code>和<code>jest.spyOn()</code>。</p>\n<h5 id=\"jest-fn\"><a href=\"#jest-fn\" class=\"headerlink\" title=\"jest.fn\"></a>jest.fn</h5><p><code>jest.fn</code>会生成一个mock函数，这个函数可以用来代替源代码中被使用的第三方函数。<code>jest.fn</code>生成的函数上面有很多属性，我们也可以通过一些<code>matcher</code>来对这个函数的调用情况进行一些断言，下面是一个简单的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// somewhere/functionWithCallback.js</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> functionWithCallback = <span class=\"function\">(<span class=\"params\">callback</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  callback(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// somewhere/functionWithCallback.spec.js</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; functionWithCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">'somewhere/functionWithCallback'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'Test functionWithCallback'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  it(<span class=\"string\">'if callback is invoked'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> callback = jest.fn()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    functionWithCallback(callback)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    expect(callback.mock.calls.length).toEqual(<span class=\"number\">1</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n<h5 id=\"jest-spyOn\"><a href=\"#jest-spyOn\" class=\"headerlink\" title=\"jest.spyOn\"></a>jest.spyOn</h5><p>我们源代码中的函数可能使用了另外一个文件或者<code>node_modules</code>中安装的一些依赖，这些依赖可以使用<code>jest.spyOn</code>来进行mock，下面是一个简单的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// somewhere/sum.js</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; validateNumber &#125; <span class=\"keyword\">from</span> <span class=\"string\">'somewhere/validates'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (n1, n2) =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  validateNumber(n1)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  validateNumber(n2)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> n1 + n2</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// somewhere/sum.spec.js</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sum <span class=\"keyword\">from</span> <span class=\"string\">'somewhere/sum'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> validates <span class=\"keyword\">from</span> <span class=\"string\">'somewhere/validates'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">it(<span class=\"string\">'work for positive numbers'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// mock validateNumber</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> validateNumberMock = jest.spyOn(validates, <span class=\"string\">'validateNumber'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> result = sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  expect(result).toEqual(<span class=\"number\">3</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// restore original implementation</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  validateNumberMock.mockRestore()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n<p>我们在上面测试代码中引入了源代码使用到的依赖<code>somewhere/validates</code>，这个时候就可以通过<code>jest.spyOn</code>来mock这个依赖<code>export</code>的一些方法了，例如<code>validateNumber</code>。被mock的函数会在源代码被执行的时候使用，例如上面<code>sum</code>执行的时候使用到的<code>validateNumber</code>就是我们在<code>sum.spec.js</code>里面定义的<code>validateNumberMock</code>。这样我们除了可以保证<code>validateNumber</code>不会影响到我们对<code>sum</code>函数逻辑的测试，还可以在外面对<code>validateNumberMock</code>进行一些断言（assertion）来验证<code>sum</code>逻辑的正确性。还有一点需要注意的是，我在测试用例执行完之后调用了<code>mockRestore</code>这个函数，这个函数会恢复<code>validateNumber</code>函数原来的实现，从而避免这个测试用例对<code>validate</code>文件的更改影响到其它测试用例的正确执行。</p>\n<h3 id=\"项目引入jest\"><a href=\"#项目引入jest\" class=\"headerlink\" title=\"项目引入jest\"></a>项目引入jest</h3><p>了解完jest的一些基本API之后我们再来看一下如何在我们的项目里面引入jest。</p>\n<h4 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h4><p>首先使用下面命令安装jest</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D jest</span></pre></td></tr></table></figure>\n<p>如果你项目使用的是Typescript，则还需要安装<code>ts-jest</code>作为依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D ts-jest</span></pre></td></tr></table></figure>\n<h4 id=\"配置jest\"><a href=\"#配置jest\" class=\"headerlink\" title=\"配置jest\"></a>配置jest</h4><p>安装完jest后需要在package.json文件里面配置一下:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">\"jest\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"transform\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"^.+\\\\.tsx?$\"</span>: <span class=\"string\">\"ts-jest\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"testRegex\"</span>: <span class=\"string\">\"(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.(jsx?|tsx?)$\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"moduleDirectories\"</span>: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"string\">\"node_modules\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"string\">\"src\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"moduleFileExtensions\"</span>: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"string\">\"ts\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"string\">\"tsx\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"string\">\"js\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"string\">\"jsx\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"string\">\"json\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"string\">\"node\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>上面各个配置项的意思分别是：</p>\n<ul>\n<li>transform: 告诉jest，你的ts或者tsx文件需要使用ts-jest来进行转换。</li>\n<li>testRegex: 告诉jest哪些文件是需要被作为测试代码进行执行的，从上面的正则表达式我们可以看出文件名中有test和spec的文件将会被作为测试用例执行。</li>\n<li>moduleDirectories: 告诉jest在执行测试用例代码的时候，代码用到的dependencies应该去哪些目录进行resolve，在这里jest会去<code>node_modules</code>和<code>src</code>（或者你自己的源代码根目录）里面进行resolve，这个应该要和你项目的webpack.config.js的resolve部分配置保持一致。</li>\n<li>moduleFileExtensions: 告诉jest在找不到对应文件的时候应该尝试哪些文件后缀。</li>\n</ul>\n<h3 id=\"React-hooks-testing-library\"><a href=\"#React-hooks-testing-library\" class=\"headerlink\" title=\"React hooks testing library\"></a>React hooks testing library</h3><p><a href=\"https://github.com/testing-library/react-hooks-testing-library\" target=\"_blank\" rel=\"noopener\">React-hooks-testing-library</a>，是一个专门用来测试React hook的库。我们知道虽然hook是一个函数，可是我们却不能用测试普通函数的方法来测试它们，因为它们的实际运行会涉及到很多React运行时（runtime）的东西，因此很多人为了测试自己的hook会编写一些<code>TestComponent</code>来运行它们，这种方法十分不方便而且很难覆盖到所有的情景。为了简化开发者测试hook的流程，React社区有人开发了这个叫做<code>react-hooks-testing-library</code>的库来允许我们像测试普通函数一样测试我们定义的hook，这个库其实背后也是将我们定义的hook运行在一个<code>TestComponent</code>里面，只不过它封装了一些简易的API来简化我们的测试。在开始使用这个库之前，我们先来看一下它对外暴露的一些常用的API。</p>\n<h4 id=\"常用API-1\"><a href=\"#常用API-1\" class=\"headerlink\" title=\"常用API\"></a>常用API</h4><h5 id=\"renderHook\"><a href=\"#renderHook\" class=\"headerlink\" title=\"renderHook\"></a>renderHook</h5><p><code>renderHook</code>这个函数顾名思义就是用来渲染hook的，它会在调用的时候渲染一个专门用来测试的<code>TestComponent</code>来使用我们的hook。renderHook的函数签名是<code>renderHook(callback, options?)</code>，它的第一个参数是一个<code>callback</code>函数，这个函数会在<code>TestComponent</code>每次被重新渲染的时候调用，因此我们可以在这个函数里面调用我们想要测试的hook。<code>renderHook</code>的第二个参数是一个可选的<code>options</code>，这个<code>options</code>可以带两个属性，一个是<code>initialProps</code>，它是<code>TestComponent</code>的初始props参数，并且会被传递给<code>callback</code>函数用来调用hook。options的另外一个属性是<code>wrapper</code>，它用来指定<code>TestComponent</code>的父级组件（Wrapper Component），这个组件可以是一些<code>ContextProvider</code>等用来为<code>TestComponent</code>的hook提供测试数据的东西。</p>\n<p><code>renderHook</code>的返回值是<code>RenderHookResult</code>对象，这个对象会有下面这些属性：</p>\n<ul>\n<li>result：<code>result</code>是一个对象，它包含两个属性，一个是<code>current</code>，它保存的是<code>renderHook</code> <code>callback</code>的返回值，另外一个属性是<code>error</code>，它用来存储hook在render过程中出现的任何错误。</li>\n<li>rerender: <code>rerender</code>函数是用来重新渲染<code>TestComponent</code>的，它可以接收一个newProps作为参数，这个参数会作为组件重新渲染时的props值，同样<code>renderHook</code>的<code>callback</code>函数也会使用这个新的props来重新调用。</li>\n<li>unmount: <code>unmount</code>函数是用来卸载<code>TestComponent</code>的，它主要用来覆盖一些<code>useEffect cleanup</code>函数的场景。</li>\n</ul>\n<h5 id=\"act\"><a href=\"#act\" class=\"headerlink\" title=\"act\"></a>act</h5><p>这函数和React自带的test-utils的<a href=\"https://reactjs.org/docs/test-utils.html#act\" target=\"_blank\" rel=\"noopener\">act函数</a>是同一个函数，我们知道组件状态更新的时候（setState），组件需要被重新渲染，而这个重渲染是需要React进行调度的，因此是个异步的过程，我们可以通过使用<code>act</code>函数将所有会更新到组件状态的操作封装在它的<code>callback</code>里面来保证<code>act</code>函数执行完之后我们定义的组件已经完成了重新渲染。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>直接把<code>react-hooks-testing-library</code>作为我们的项目<code>devDependencies</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D @testing-library/react-hooks</span></pre></td></tr></table></figure>\n<p>注意：要使用<code>react-hooks-testing-library</code>我们要确保我们安装了<code>16.9.0</code>版本及其以上的<code>react</code>和<code>react-test-renderer</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react@^16.9.0</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D react-test-renderer@^16.9.0</span></pre></td></tr></table></figure>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>现在就让我们看一个简单的同时使用<code>Jest</code>和<code>react-hooks-testing-library</code>来测试hook的例子，假如我们在项目里面定义了一个叫做<code>useCounter</code>的Hook:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// somewhere/useCounter.js</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState, useCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useCounter</span>(<span class=\"params\"></span>) </span>&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"number\">0</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> increment = useCallback(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> setCount(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span>), [])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> decrement = useCallback(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> setCount(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x - <span class=\"number\">1</span>), [])</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> &#123;count, increment, decrease&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>在上面的代码中我定义了一个叫做<code>useCounter</code>的hook，这个hook是用来封装一个叫做count的状态并且对外暴露对count进行操作的一些updater包括<code>increment</code>和<code>decrement</code>。如果大家对<code>useState</code>和<code>useCallback</code>不够熟悉的话可以看一下我的上一篇文章<a href=\"\">React Hook实战指南</a>。接着就让我们编写这个hook的测试用例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// somewhere/useCounter.spec.js</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; renderHook, act &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@testing-library/react-hooks'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> useCounter <span class=\"keyword\">from</span> <span class=\"string\">'somewhere/useCounter'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'Test useCounter'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  describe(<span class=\"string\">'increment'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">     it(<span class=\"string\">'increase counter by 1'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> &#123; result &#125; = renderHook(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> useCounter())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      act(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">        result.current.increment()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      expect(result.current.count).toBe(<span class=\"number\">1</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  describe(<span class=\"string\">'decrement'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    it(<span class=\"string\">'decrease counter by 1'</span>, () =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> &#123; result &#125; = renderHook(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> useCounter())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">      act(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">        result.current.decrement()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">      expect(result.current.count).toBe(<span class=\"number\">-1</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n<p>上面的代码中我们写了一个测试大组（describe）<code>Test useCounter</code>并在这个大组里面定义了两个测试小组分别用来测试<code>useCounter</code>返回的<code>increment</code>和<code>decrement</code>方法。我们具体看一下描述为<code>increase counter by 1</code>的测试用例的代码，首先我们要用<code>renderHook</code>函数来渲染要被测试的hook，这里我们需要将<code>useCounter</code>的返回值作为<code>callback</code>函数的返回值，这是因为我们需要在外面拿到这个hook的返回结果<code>{count, increment, decrement}</code>。接着我们使用<code>act</code>函数来调用改变组件状态<code>count</code>的<code>increment</code>函数，<code>act</code>函数完成之后我们的组件也就完成了重渲染，后面就可以判断更新后的<code>count</code>是不是我们想要的结果了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在本篇文章中我给大家介绍了什么叫做单元测试，为什么我们需要在自己的项目里面引入单元测试以及教大家如何使用<code>Jest</code>和<code>react-hooks-testing-library</code>来测试我们自定义的hook。</p>\n<p>这篇文章是我的React hook系列文章的最后一篇了，后面我还会持续为大家分享一些和hook相关的内容，大家敬请期待。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ul>\n<li><a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener\">https://jestjs.io/</a></li>\n<li><a href=\"https://react-hooks-testing-library.com/\" target=\"_blank\" rel=\"noopener\">https://react-hooks-testing-library.com/</a></li>\n</ul>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt=\"\"></p>"},{"title":"几个提高效率的console APIs","date":"2019-12-23T04:41:49.000Z","_content":"\n`console.log`我相信写过JavaScript人一定都有接触过，它可谓是我们debug的灵丹妙药。可是除了log方法，你知道console还有很多可以帮你快速提高代码debug效率（逼格）的方法吗？\n## console.log | console.info | console.debug | console.warn | console.error\n### 使用场景\n输出`不同类型`（level）的内容。\n### 用法\n这几个方法用起来都差不多，只不过输出结果可能会存在颜色上的区别：\n![](/images/console/level.png)\n注意console.debug如果没有输出可以将log level中的verbose选上（chrome）:\n![](/images/console/level-verbose.png)\n<!-- more --> \n## 替换字符串 - string substitution\n### 使用场景\n呈现输出时的上下文信息（context）。\n### 用法\n现在支持以下替换字符串：\n\n| 替换字符串     |                                                描述 |\n| -------------- | --------------------------------------------------: |\n| `%o` 或者 `%O` | JavaScript 对象，可以是整数、字符串或是 JSON 数据。 |\n| `%d`或者`%i`   |                                              整数。 |\n| `%s`           |                                            字符串。 |\n| `%f`           |                                            浮点数。 |\n\n![](/images/console/string-substitution.png)\n\n## 为输出添加CSS样式\n### 使用场景\n让内容更加结构化而且可以极大地提高逼格。\n### 用法\n使用`%c`为某部分的输出内容定义样式：\n![](/images/console/css.png)\n\n## console.assert\n### 使用场景\n条件性输出。有些信息你可能只想在某些条件不满足的时候才进行输出，这个时候你可以用这种方法而不是加多个if判断。\n### 用法\n```javascript\nconsole.assert(condition, ...data)\n```\n注意只有condition是false的时候data才会被输出：\n![](/images/console/assert.png)\n\n## console.table\n### 使用情景\n以表格的形式输出数据。这个方法最适用的场景我觉得是对象的数组，因为他可以让你一目了然地看到数组内对象各个属性的值。\n### 用法\n![](/images/console/table.png)\n\n## console.group\n### 使用情景\n当你有大量的内容要输出到界面上时，可以使用console.group方法为输出的内容添加一定的缩进来更好地整理这些内容。\n### 用法\n![](/images/console/group.png)\n这里要记住的是每个group都需要手动地调用groupEnd来退出。\n\n## console.trace\n### 使用情景\n追踪函数的执行栈。当你想知道一个函数具体是怎样被调用的时，可以使用console.trace这个函数去追踪它的执行栈。\n### 用法\n![](/images/console/trace.png)\n\n## console.count\n### 使用场景\n统计代码的执行次数。\n### 用法\n![](/images/console/count.png)\n你还可以使用label去区分不同的统计类型：\n![](/images/console/label-count.png)\n\n## console.time\n### 使用场景\n记录代码执行的耗时，以毫秒（ms）为单位。\n### 用法\n```\nconsole.time(timerName)\n```\n![](/images/console/time.png)\n\n## 参考网站\n* https://developer.mozilla.org/en-US/docs/Web/API/Console\n* https://medium.com/javascript-in-plain-english/mastering-js-console-log-like-a-pro-1c634e6393f9\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","source":"_posts/几个提高效率的consoleAPIs.md","raw":"---\ntitle: 几个提高效率的console APIs\ntags:\n  - 前端开发技巧\n  - JavaScript\ndate: 2019-12-23 12:41:49\n---\n\n`console.log`我相信写过JavaScript人一定都有接触过，它可谓是我们debug的灵丹妙药。可是除了log方法，你知道console还有很多可以帮你快速提高代码debug效率（逼格）的方法吗？\n## console.log | console.info | console.debug | console.warn | console.error\n### 使用场景\n输出`不同类型`（level）的内容。\n### 用法\n这几个方法用起来都差不多，只不过输出结果可能会存在颜色上的区别：\n![](/images/console/level.png)\n注意console.debug如果没有输出可以将log level中的verbose选上（chrome）:\n![](/images/console/level-verbose.png)\n<!-- more --> \n## 替换字符串 - string substitution\n### 使用场景\n呈现输出时的上下文信息（context）。\n### 用法\n现在支持以下替换字符串：\n\n| 替换字符串     |                                                描述 |\n| -------------- | --------------------------------------------------: |\n| `%o` 或者 `%O` | JavaScript 对象，可以是整数、字符串或是 JSON 数据。 |\n| `%d`或者`%i`   |                                              整数。 |\n| `%s`           |                                            字符串。 |\n| `%f`           |                                            浮点数。 |\n\n![](/images/console/string-substitution.png)\n\n## 为输出添加CSS样式\n### 使用场景\n让内容更加结构化而且可以极大地提高逼格。\n### 用法\n使用`%c`为某部分的输出内容定义样式：\n![](/images/console/css.png)\n\n## console.assert\n### 使用场景\n条件性输出。有些信息你可能只想在某些条件不满足的时候才进行输出，这个时候你可以用这种方法而不是加多个if判断。\n### 用法\n```javascript\nconsole.assert(condition, ...data)\n```\n注意只有condition是false的时候data才会被输出：\n![](/images/console/assert.png)\n\n## console.table\n### 使用情景\n以表格的形式输出数据。这个方法最适用的场景我觉得是对象的数组，因为他可以让你一目了然地看到数组内对象各个属性的值。\n### 用法\n![](/images/console/table.png)\n\n## console.group\n### 使用情景\n当你有大量的内容要输出到界面上时，可以使用console.group方法为输出的内容添加一定的缩进来更好地整理这些内容。\n### 用法\n![](/images/console/group.png)\n这里要记住的是每个group都需要手动地调用groupEnd来退出。\n\n## console.trace\n### 使用情景\n追踪函数的执行栈。当你想知道一个函数具体是怎样被调用的时，可以使用console.trace这个函数去追踪它的执行栈。\n### 用法\n![](/images/console/trace.png)\n\n## console.count\n### 使用场景\n统计代码的执行次数。\n### 用法\n![](/images/console/count.png)\n你还可以使用label去区分不同的统计类型：\n![](/images/console/label-count.png)\n\n## console.time\n### 使用场景\n记录代码执行的耗时，以毫秒（ms）为单位。\n### 用法\n```\nconsole.time(timerName)\n```\n![](/images/console/time.png)\n\n## 参考网站\n* https://developer.mozilla.org/en-US/docs/Web/API/Console\n* https://medium.com/javascript-in-plain-english/mastering-js-console-log-like-a-pro-1c634e6393f9\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","slug":"几个提高效率的consoleAPIs","published":1,"updated":"2021-02-08T06:16:56.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0gqf6fk000ducnx73m7cncu","content":"<p><code>console.log</code>我相信写过JavaScript人一定都有接触过，它可谓是我们debug的灵丹妙药。可是除了log方法，你知道console还有很多可以帮你快速提高代码debug效率（逼格）的方法吗？</p>\n<h2 id=\"console-log-console-info-console-debug-console-warn-console-error\"><a href=\"#console-log-console-info-console-debug-console-warn-console-error\" class=\"headerlink\" title=\"console.log | console.info | console.debug | console.warn | console.error\"></a>console.log | console.info | console.debug | console.warn | console.error</h2><h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>输出<code>不同类型</code>（level）的内容。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>这几个方法用起来都差不多，只不过输出结果可能会存在颜色上的区别：<br><img src=\"/images/console/level.png\" alt><br>注意console.debug如果没有输出可以将log level中的verbose选上（chrome）:<br><img src=\"/images/console/level-verbose.png\" alt></p>\n<a id=\"more\"></a> \n<h2 id=\"替换字符串-string-substitution\"><a href=\"#替换字符串-string-substitution\" class=\"headerlink\" title=\"替换字符串 - string substitution\"></a>替换字符串 - string substitution</h2><h3 id=\"使用场景-1\"><a href=\"#使用场景-1\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>呈现输出时的上下文信息（context）。</p>\n<h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>现在支持以下替换字符串：</p>\n<table>\n<thead>\n<tr>\n<th>替换字符串</th>\n<th align=\"right\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>%o</code> 或者 <code>%O</code></td>\n<td align=\"right\">JavaScript 对象，可以是整数、字符串或是 JSON 数据。</td>\n</tr>\n<tr>\n<td><code>%d</code>或者<code>%i</code></td>\n<td align=\"right\">整数。</td>\n</tr>\n<tr>\n<td><code>%s</code></td>\n<td align=\"right\">字符串。</td>\n</tr>\n<tr>\n<td><code>%f</code></td>\n<td align=\"right\">浮点数。</td>\n</tr>\n</tbody></table>\n<p><img src=\"/images/console/string-substitution.png\" alt></p>\n<h2 id=\"为输出添加CSS样式\"><a href=\"#为输出添加CSS样式\" class=\"headerlink\" title=\"为输出添加CSS样式\"></a>为输出添加CSS样式</h2><h3 id=\"使用场景-2\"><a href=\"#使用场景-2\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>让内容更加结构化而且可以极大地提高逼格。</p>\n<h3 id=\"用法-2\"><a href=\"#用法-2\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>使用<code>%c</code>为某部分的输出内容定义样式：<br><img src=\"/images/console/css.png\" alt></p>\n<h2 id=\"console-assert\"><a href=\"#console-assert\" class=\"headerlink\" title=\"console.assert\"></a>console.assert</h2><h3 id=\"使用场景-3\"><a href=\"#使用场景-3\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>条件性输出。有些信息你可能只想在某些条件不满足的时候才进行输出，这个时候你可以用这种方法而不是加多个if判断。</p>\n<h3 id=\"用法-3\"><a href=\"#用法-3\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">console</span>.assert(condition, ...data)</span></pre></td></tr></table></figure>\n<p>注意只有condition是false的时候data才会被输出：<br><img src=\"/images/console/assert.png\" alt></p>\n<h2 id=\"console-table\"><a href=\"#console-table\" class=\"headerlink\" title=\"console.table\"></a>console.table</h2><h3 id=\"使用情景\"><a href=\"#使用情景\" class=\"headerlink\" title=\"使用情景\"></a>使用情景</h3><p>以表格的形式输出数据。这个方法最适用的场景我觉得是对象的数组，因为他可以让你一目了然地看到数组内对象各个属性的值。</p>\n<h3 id=\"用法-4\"><a href=\"#用法-4\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p><img src=\"/images/console/table.png\" alt></p>\n<h2 id=\"console-group\"><a href=\"#console-group\" class=\"headerlink\" title=\"console.group\"></a>console.group</h2><h3 id=\"使用情景-1\"><a href=\"#使用情景-1\" class=\"headerlink\" title=\"使用情景\"></a>使用情景</h3><p>当你有大量的内容要输出到界面上时，可以使用console.group方法为输出的内容添加一定的缩进来更好地整理这些内容。</p>\n<h3 id=\"用法-5\"><a href=\"#用法-5\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p><img src=\"/images/console/group.png\" alt><br>这里要记住的是每个group都需要手动地调用groupEnd来退出。</p>\n<h2 id=\"console-trace\"><a href=\"#console-trace\" class=\"headerlink\" title=\"console.trace\"></a>console.trace</h2><h3 id=\"使用情景-2\"><a href=\"#使用情景-2\" class=\"headerlink\" title=\"使用情景\"></a>使用情景</h3><p>追踪函数的执行栈。当你想知道一个函数具体是怎样被调用的时，可以使用console.trace这个函数去追踪它的执行栈。</p>\n<h3 id=\"用法-6\"><a href=\"#用法-6\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p><img src=\"/images/console/trace.png\" alt></p>\n<h2 id=\"console-count\"><a href=\"#console-count\" class=\"headerlink\" title=\"console.count\"></a>console.count</h2><h3 id=\"使用场景-4\"><a href=\"#使用场景-4\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>统计代码的执行次数。</p>\n<h3 id=\"用法-7\"><a href=\"#用法-7\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p><img src=\"/images/console/count.png\" alt><br>你还可以使用label去区分不同的统计类型：<br><img src=\"/images/console/label-count.png\" alt></p>\n<h2 id=\"console-time\"><a href=\"#console-time\" class=\"headerlink\" title=\"console.time\"></a>console.time</h2><h3 id=\"使用场景-5\"><a href=\"#使用场景-5\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>记录代码执行的耗时，以毫秒（ms）为单位。</p>\n<h3 id=\"用法-8\"><a href=\"#用法-8\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">console.time(timerName)</span></pre></td></tr></table></figure>\n<p><img src=\"/images/console/time.png\" alt></p>\n<h2 id=\"参考网站\"><a href=\"#参考网站\" class=\"headerlink\" title=\"参考网站\"></a>参考网站</h2><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Console\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/API/Console</a></li>\n<li><a href=\"https://medium.com/javascript-in-plain-english/mastering-js-console-log-like-a-pro-1c634e6393f9\" target=\"_blank\" rel=\"noopener\">https://medium.com/javascript-in-plain-english/mastering-js-console-log-like-a-pro-1c634e6393f9</a></li>\n</ul>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<p><code>console.log</code>我相信写过JavaScript人一定都有接触过，它可谓是我们debug的灵丹妙药。可是除了log方法，你知道console还有很多可以帮你快速提高代码debug效率（逼格）的方法吗？</p>\n<h2 id=\"console-log-console-info-console-debug-console-warn-console-error\"><a href=\"#console-log-console-info-console-debug-console-warn-console-error\" class=\"headerlink\" title=\"console.log | console.info | console.debug | console.warn | console.error\"></a>console.log | console.info | console.debug | console.warn | console.error</h2><h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>输出<code>不同类型</code>（level）的内容。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>这几个方法用起来都差不多，只不过输出结果可能会存在颜色上的区别：<br><img src=\"/images/console/level.png\" alt><br>注意console.debug如果没有输出可以将log level中的verbose选上（chrome）:<br><img src=\"/images/console/level-verbose.png\" alt></p>","more":"<h2 id=\"替换字符串-string-substitution\"><a href=\"#替换字符串-string-substitution\" class=\"headerlink\" title=\"替换字符串 - string substitution\"></a>替换字符串 - string substitution</h2><h3 id=\"使用场景-1\"><a href=\"#使用场景-1\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>呈现输出时的上下文信息（context）。</p>\n<h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>现在支持以下替换字符串：</p>\n<table>\n<thead>\n<tr>\n<th>替换字符串</th>\n<th align=\"right\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>%o</code> 或者 <code>%O</code></td>\n<td align=\"right\">JavaScript 对象，可以是整数、字符串或是 JSON 数据。</td>\n</tr>\n<tr>\n<td><code>%d</code>或者<code>%i</code></td>\n<td align=\"right\">整数。</td>\n</tr>\n<tr>\n<td><code>%s</code></td>\n<td align=\"right\">字符串。</td>\n</tr>\n<tr>\n<td><code>%f</code></td>\n<td align=\"right\">浮点数。</td>\n</tr>\n</tbody></table>\n<p><img src=\"/images/console/string-substitution.png\" alt=\"\"></p>\n<h2 id=\"为输出添加CSS样式\"><a href=\"#为输出添加CSS样式\" class=\"headerlink\" title=\"为输出添加CSS样式\"></a>为输出添加CSS样式</h2><h3 id=\"使用场景-2\"><a href=\"#使用场景-2\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>让内容更加结构化而且可以极大地提高逼格。</p>\n<h3 id=\"用法-2\"><a href=\"#用法-2\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>使用<code>%c</code>为某部分的输出内容定义样式：<br><img src=\"/images/console/css.png\" alt=\"\"></p>\n<h2 id=\"console-assert\"><a href=\"#console-assert\" class=\"headerlink\" title=\"console.assert\"></a>console.assert</h2><h3 id=\"使用场景-3\"><a href=\"#使用场景-3\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>条件性输出。有些信息你可能只想在某些条件不满足的时候才进行输出，这个时候你可以用这种方法而不是加多个if判断。</p>\n<h3 id=\"用法-3\"><a href=\"#用法-3\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.assert(condition, ...data)</span></pre></td></tr></table></figure>\n<p>注意只有condition是false的时候data才会被输出：<br><img src=\"/images/console/assert.png\" alt=\"\"></p>\n<h2 id=\"console-table\"><a href=\"#console-table\" class=\"headerlink\" title=\"console.table\"></a>console.table</h2><h3 id=\"使用情景\"><a href=\"#使用情景\" class=\"headerlink\" title=\"使用情景\"></a>使用情景</h3><p>以表格的形式输出数据。这个方法最适用的场景我觉得是对象的数组，因为他可以让你一目了然地看到数组内对象各个属性的值。</p>\n<h3 id=\"用法-4\"><a href=\"#用法-4\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p><img src=\"/images/console/table.png\" alt=\"\"></p>\n<h2 id=\"console-group\"><a href=\"#console-group\" class=\"headerlink\" title=\"console.group\"></a>console.group</h2><h3 id=\"使用情景-1\"><a href=\"#使用情景-1\" class=\"headerlink\" title=\"使用情景\"></a>使用情景</h3><p>当你有大量的内容要输出到界面上时，可以使用console.group方法为输出的内容添加一定的缩进来更好地整理这些内容。</p>\n<h3 id=\"用法-5\"><a href=\"#用法-5\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p><img src=\"/images/console/group.png\" alt=\"\"><br>这里要记住的是每个group都需要手动地调用groupEnd来退出。</p>\n<h2 id=\"console-trace\"><a href=\"#console-trace\" class=\"headerlink\" title=\"console.trace\"></a>console.trace</h2><h3 id=\"使用情景-2\"><a href=\"#使用情景-2\" class=\"headerlink\" title=\"使用情景\"></a>使用情景</h3><p>追踪函数的执行栈。当你想知道一个函数具体是怎样被调用的时，可以使用console.trace这个函数去追踪它的执行栈。</p>\n<h3 id=\"用法-6\"><a href=\"#用法-6\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p><img src=\"/images/console/trace.png\" alt=\"\"></p>\n<h2 id=\"console-count\"><a href=\"#console-count\" class=\"headerlink\" title=\"console.count\"></a>console.count</h2><h3 id=\"使用场景-4\"><a href=\"#使用场景-4\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>统计代码的执行次数。</p>\n<h3 id=\"用法-7\"><a href=\"#用法-7\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p><img src=\"/images/console/count.png\" alt=\"\"><br>你还可以使用label去区分不同的统计类型：<br><img src=\"/images/console/label-count.png\" alt=\"\"></p>\n<h2 id=\"console-time\"><a href=\"#console-time\" class=\"headerlink\" title=\"console.time\"></a>console.time</h2><h3 id=\"使用场景-5\"><a href=\"#使用场景-5\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>记录代码执行的耗时，以毫秒（ms）为单位。</p>\n<h3 id=\"用法-8\"><a href=\"#用法-8\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">console.time(timerName)</span></pre></td></tr></table></figure>\n<p><img src=\"/images/console/time.png\" alt=\"\"></p>\n<h2 id=\"参考网站\"><a href=\"#参考网站\" class=\"headerlink\" title=\"参考网站\"></a>参考网站</h2><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Console\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/API/Console</a></li>\n<li><a href=\"https://medium.com/javascript-in-plain-english/mastering-js-console-log-like-a-pro-1c634e6393f9\" target=\"_blank\" rel=\"noopener\">https://medium.com/javascript-in-plain-english/mastering-js-console-log-like-a-pro-1c634e6393f9</a></li>\n</ul>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt=\"\"></p>"},{"title":"Yarn v2介绍","thumbnail":"/gallery/thumbnails/yarn2.png","date":"2020-02-17T00:55:57.000Z","_content":"\n[Yarn](http://yarnpkg.com/)作为JavaScript生态的一个强大的依赖管理工具在今年[1月24日](https://dev.to/arcanis/introducing-yarn-2-4eh1)的时候正式发布了v2版本。在本篇文章中，我将会为大家介绍以下内容：\n* [为什么要开发v2版本](#为什么要开发v2版本)\n* [v2都有什么新的特性](#v2都有什么新的特性)\n* [Yarn的未来计划](#Yarn的未来计划)\n\n备注：如果你想知道如何直接使用v2版本可以查看[Getting Started](https://next.yarnpkg.com/getting-started/install)，如果你想从v1版本迁移到v2版本可以查看[Migrations](https://next.yarnpkg.com/advanced/migration)。\n<!-- more-->\n## 为什么要开发v2版本\n### 原有代码架构满足不了新的需求\nYarn创建于2016年初，它在刚开始的时候借鉴了很多npm的东西，其中的架构设计本身就不是很符合Yarn开发者的愿景。在那之后，由于不断有新的需求产生，Yarn在接下来的几年中还添加了很多新的功能，其中包括Workspaces(2017), Plug'n'Play(2018)和Zip loading(2019)。这些新的概念在Yarn刚刚被创建的时候压根就不存在，所以Yarn的架构设计也就没有考虑到日后这些新功能的添加，因此随着时间的推移，Yarn的代码变得越来越难维护和扩展。由于这个技术原因，Yarn需要一个更加现代化的代码架构来满足新需求的开发。\n### 鼓励开发者贡献代码\nYarn作为一个社区项目，秉承的一个理念就是: `we don't want to work for you, we want to work with you`。由此可以看出Yarn的开发者其实是希望更加多的开发者参与到这个项目的开发，而不是只有他们来维护。为了降低开发者为Yarn项目贡献代码的门槛，Yarn v2版本做了以下的一些改变：\n* 从Flow迁移到了现在更加流行的TypeScript作为开发语言，让开发者可以用更加熟悉的技术栈来贡献代码。\n* 采用基于插件（Plugin）的模块化（Modular）代码架构，让开发者不用搞懂Yarn的核心代码就可以通过实现插件的方式来为Yarn添加新的功能。而且Yarn的核心功能也是由不同的内置插件实现的，这点和Webpack的设计思想如出一辙，因此开发者可以很容易就搞懂每个功能是如何实现的。\n\n## v2都有什么新的特性\n说完了为什么要开发v2版本之后，我们再来看一下它都有什么新的特性。\n### 可读性更高的输出日志\n虽然相对于其他替代方案（例如npm）Yarn的输出日志的可读性算是比较高的了，可是它还是存在各种各样的问题，例如当输出信息特别多的时候，开发者很难在一大堆输出中找到有用的内容，而且输出日志的颜色并没有起到帮助用户快速识别出重要信息的作用，甚至还会对日志的阅读造成一定的干扰。基于这些原因，v2版本对输出日志进行了一些改进，我们先来看一下它大概变成了什么样子了：\n![](/images/yarn2/log.png)\n由上面的输出内容我们可以看到现在每一行日志的开头添加了一个错误号码（error code），不同的错误号码代表的意思可以在这个[文档](https://next.yarnpkg.com/advanced/error-codes)中找到。这些错误号码可以让开发者快速定位错误并且可以更加方便地搜索到修复错误的办法。除了新增错误号码，输出日志在颜色上也有很大的改进，例如上面输出中会用鲜艳的颜色来突出依赖的名称以及它的版本号，这样可以更加方便开发者获取有用的信息。\n\n### Yarn dlx\n[yarn dlx](https://next.yarnpkg.com/cli/dlx)的功能和[npx](https://github.com/npm/npx#readme)类似。dlx是`download and execute`的简称，这个命令会在本地创建一个临时的环境来下载指定的依赖，依赖下载完成后，它会在当前的工作目录（cwd）中执行这个依赖包含的可执行二进制文件，这个临时的空间会在命令完成后被删除，所以这些操作都是一次性的。\n\n`yarn dlx`这个命令不会改变当前项目的package.json的内容，而且它只可以执行远端的脚本而不能执行本地的脚本（本地脚本可以用yarn run来执行），所以它相对于npx有更高的安全性。 \n\n由于v2版本默认开启了[Plug'n'Play](https://next.yarnpkg.com/features/pnp)的功能，当你使用了一次`yarn dlx`命令执行某个远端脚本后，这个脚本的依赖会被缓存到本地环境中，这样当它被再次执行的时候它就不需要下载依赖了，所以它的速度会变得很快。\n\n### 更好的workspaces支持\nv2版本一个最大的改变就是将[workspaces](https://next.yarnpkg.com/features/workspaces)变成了一等公民（first-class citizen），这样就可以更好地支持[monorepo](https://next.yarnpkg.com/advanced/lexicon#monorepository)的开发了。v2版本对workspaces的支持体现在以下这些方面：\n\n#### yarn add 添加交互模式（interactive mode）\n假如你要在项目的某个workspace中引入某个依赖，你可能要考虑其他workspaces是否也用到了这个依赖，而且要避免引入不兼容的版本。v2版本中，你可以使用`-i`参数来让`yarn add`命令进入到交互模式，这样yarn就会帮你检查这个依赖有没有在其他workspaces中被使用，并且会让你选择是要复用其他workspaces中的依赖版本还是使用另外的版本。\n![](/images/yarn2/add-interactive.png)\n\n#### 一次更新所有workspaces某个依赖的版本\nv2版本新加了一个`yarn up`命令。这个命令和`yarn upgrade`命令类似，都是用来更新某个依赖的版本的。和`yarn upgrade`不同的是它可以同时更新所有workspaces的该依赖的版本，而不用切换到各个workspace中运行更新命令。这个命令同样具有交互模式`-i`来让你确认在不同workspace进行的具体操作。\n\n#### 自动发布关联的workspaces\n有参与过monorepo开发的同学们一定会遇到过这样的问题：当某个包（workspace）发布了新的版本之后，发布其它相关联的包十分麻烦。如果你在项目中使用的是[Lerna](https://github.com/lerna/lerna)，当你发布一个包的新版本的时候，你要么所有的包都要发布新的版本，要么你得自己手动来管理其他包的版本发布。虽然自己来管理其它包的发布也是可以的，可是人为的东西肯定会存在疏忽，而且多人协作的项目会让人很头疼。为了解决这个问题，Yarn v2版本采取了和Lerna以及其他类似工具完全不同的解决方案，它把这部分逻辑放在了一个单独的叫做[version的插件](https://next.yarnpkg.com/features/release-workflow)中。version插件允许你将一部分包版本管理工作分发给你的代码贡献者，而且它还提供了一个友好的交互界面来让你十分容易地管理关联包的发布：\n![](/images/yarn2/version.png)\n\n#### 在多个workspaces中运行相同的命令\n在同一个项目的不同workspaces中运行同一个命令是很常见的情形，Yarn v2版本提供了一个新的`yarn workspaces foreach`命令来让你在多个workspaces中运行同一个命令，这个命令是由它内置的[workspace-tools插件](https://github.com/yarnpkg/berry/tree/master/packages/plugin-workspace-tools)支持的，例如以下命令会在所有的workspaces中运行build命令：\n```shell\nyarn workspaces foreach run build\n```\n#### 给所有workspaces添加约束（contraints）\n有时候你希望同一个项目的所有workspaces都要遵循某些规则，例如`所有的workspaces都不能使用underscore作为依赖`又或者`所有workspaces依赖的某个包版本要互相兼容`等。v2版本有一个新的概念叫做[约束](https://next.yarnpkg.com/features/constraints)（Constraints），这里的约束是对项目内各个workspaces的`package.json`进行的约束，就像ESLint对JS文件进行约束一样，它会在workspaces的package.json破坏了某些规则之后给你错误提示并且可以帮你修复其中一部分错误。\n\nYarn的约束规则是用[Prolog](!https://baike.baidu.com/item/%E9%80%BB%E8%BE%91%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/20864034?fromtitle=Prolog&fromid=8379187&fr=aladdin)语法来编写的。想要为你的workspaces添加约束，你首先得引入`constraints`插件：\n```shell\nyarn plugin import constraints\n```\n然后在项目的根目录定义一个存放约束规则的`constraints.pro`文件，最后在这个文件中定义你想要的约束条件，例如以下的约束条件会禁止所有的workspaces将underscore作为依赖：\n```prolog\ngen_enforced_dependency(WorkspaceCwd, 'underscore', null, DependencyType) :-\n  workspace_has_dependency(WorkspaceCwd, 'underscore', _, DependencyType).\n```\n约束规则定义完后可以使用`yarn constraints check`命令来校验项目的workspaces是否满足定义的约束规则，当有错误发生时，可以使用`yarn constraints fix`命令自动修复那些可以被自动修复的错误。\n#### 像搜索数据库一样查询workspaces的依赖信息\n`yarn constraints query`命令可以查询项目中的workspaces用到的依赖信息，例如以下命令会输出各个workspace使用到的lodash版本信息：\n```shell\n$my-project: yarn constraints query \"workspace_has_dependency(Cwd, 'lodash', Range, _).\"\n➤ YN0000: ┌ Cwd   = 'packages/backend'\n➤ YN0000: └ Range = '4.17.0'\n➤ YN0000: ┌ Cwd   = 'packages/frontend'\n➤ YN0000: └ Range = '4.17.0'\n➤ YN0000: Done with warnings in 0.03s\n```\n个人感觉上面的依赖查询很像在MySQL数据库里面用SELECT语法查询数据库，是一个十分强大而且有用的功能。\n### 依赖零安装 （Zero-Installs）\n[依赖零安装](https://next.yarnpkg.com/features/zero-installs)更像是一个理念而不是一个功能，它的思路是希望我们每次在使用git更新完代码后，不需要再次使用`yarn install`命令来更新本地仓库的依赖来提高开发效率和避免一些问题的发生。它的具体做法是让开发者将本地的依赖包也提交到远端的git仓库中，看到这里你可能会想：“不就是将node_modules也提交吗？这个做法很蠢吧！”。确实如果直接将node_modules提交到远端仓库的话，每次提交都是一个噩梦，因为node_modules的文件很多（几万个文件很常见），首先你上传和下载代码的速度会变得很慢，其次很影响别人对你的代码进行review。为了解决这个问题，v2版本默认开启了Plug'n'Play + zip loading的功能，这个功能开启后你的项目将不再存在node_modules文件夹，所有的依赖都会被压缩成一个文件放在特定的地方，由于压缩后的包体积很小，而且包的数量不会很多，所以就不会存在以上说到的node_modules存在的问题。\n\n可是为什么要做到依赖零安装呢？这是因为它有以下的好处：\n* 更好的开发体验\n  * 你每次使用`git pull`, `git checkout`, `git rebase`这些命令更新完你的代码后无需使用`yarn install`进行依赖的安装，这样可以避免一些问题的出现，例如别人更新了某个依赖的版本后，如果你没有进行对应的更新的话，你的代码会挂。\n  * 代码review的时候可以更清楚哪些依赖发生了改变。\n* 更快，更简单，更稳定的CI部署\n  * 由于每次部署代码的时候，`yarn install`占用的时间都是一个大头，去掉这个步骤后部署速度将会大大提升。\n  * 不会存在本地运行没问题，发布线上环境的时候挂掉了的问题。\n  * 不用你在CI文件里面进行一些安装依赖的配置。\n\n想要看一下pnp + zip loading实际效果的同学可以看一下yarn v2版本的[代码\n](https://github.com/yarnpkg/berry)，你可以看到它就是在自己仓库的`.yarn/cache`目录下存放了它所有的依赖：\n![](/images/yarn2/berry-pnp.png)\n\n### 添加新的协议\nYarn v2版本添加了两个新的协议：`patch`和`portal`协议。不知道什么是协议的同学可以看一下官网[介绍](https://next.yarnpkg.com/features/protocols)，它大概是用来告诉yarn，定义在package.json文件里面的依赖是如何解析的。\n#### Patch协议\n我们日常开发中有时候会需要更改某个依赖的原代码来做一些试验性的东西，这个时候就可以使用这个patch协议了。我们先来看一下怎么使用：\n```json\n{\n  \"dependencies\": {\n    \"left-pad\": \"patch:left-pad@1.3.0#./my-patch.patch\"\n  }\n}\n```\n上面的package.json中定义了`left-pad`这个依赖是如何解析的，我们可以看到left-pad的解析其实就用到了patch协议，它表示项目中用到的left-pad代码是1.3.0这个版本的代码叠加上`./my-patch.patch`这个补丁，所谓的补丁就是我们自己对left-pad这个库的代码的更改，和git的diff文件类似。\n#### Portal协议\nPortal协议和原有的link协议类似。它的作用是告诉yarn项目中的某个依赖指向本地文件系统的某个软链接（symlink），其实和yarn link的作用是差不多的。和link协议不同的是，portal指向的是一些包（package），也就是有package.json文件的那种文件夹，而且yarn会去解析这个包中的transitive dependencies。关于portal协议和link协议的更具体的区别可以看[官方文档](https://next.yarnpkg.com/features/protocols#whats-the-difference-between-link-and-portal)。\n\n### 范式化shell脚本（Normalized shell）\nv2版本对Windows开发环境有了更好的兼容。你之前可能会遇到这样一个问题：你在package.json定义的script命令在OSX系统中可以运行，可是在windows电脑上却会报错。出现这个问题的原因是你在package.json中定义的script最终是通过Yarn创建一个子进程来执行的，而子进程的shell环境在Windows和OSX环境是不一样的（例如文件路径的写法就不一样）。为了解决这个问题，Yarn v2自带一个简单shell解析器（interpreter），这个解析器是用来兼容Windows和OSX shell环境的区别的，它覆盖了90%常用的shell脚本写法，所以正常来说你定义的shell脚本在Windows环境和OSX环境在这个解析器的兼容下都可以正常运行：\n```json\n{\n  \"scripts\": {\n    \"redirect\": \"node ./something.js > hello.md\",\n    \"no-cross-env\": \"NODE_ENV=prod webpack\"\n  }\n}\n```\n\n### 模块化代码架构\n在前面已经提到Yarn v2版本已经转变为一个模块化的架构，并且它支持用户自定义Plugin去增强它的功能。用户自定义的插件可以获取到Yarn解析出的dependency tree信息以及一些其他的上下文信息，因此很容易就可以实现一些诸如[Lerna](https://lerna.js.org/)，[Femoto](https://fable.io/blog/Introducing-Femto.html)和[Patch-Package](https://github.com/ds300/patch-package)的库。\n\n想要感受下Yarn的插件是怎么实现的同学可以看一下官方实现的[typescript插件](https://github.com/yarnpkg/berry/tree/master/packages/plugin-typescript)。这个typescript插件对于用Typescript开发的同学来说十分有用，它可以在你使用`yarn add`命令添加依赖的时候同时也添加这个依赖对应的`@types/`包，这样你就可以避免很多手动的工作了。更多和插件的相关的内容可以查看这个[教程](https://next.yarnpkg.com/advanced/plugin-tutorial)。\n\n### 其他更新\n除了上面的提到的新的属性外，v2版本还有以下这些更新：\n* Peer dependencies也可以在yarn link里面使用了\n* Lockfile的格式变为了标准的YAML格式\n* 包只能依赖那些在package.json声明的依赖，不允许require那些没有声明的依赖\n* 范式化了配置文件\n* ...\n\n想要查看v2版本所有更新内容的朋友可以看Maël Nison的文章 - [Introducing Yarn 2](https://dev.to/arcanis/introducing-yarn-2-4eh1)或者直接查看它的[change log](https://github.com/yarnpkg/berry/blob/master/CHANGELOG.md)。\n### Yarn的未来计划\n* v1最后一个版本v1.22已经发布，作者从此不会再在v1的代码上添加任何新的功能了。Yarn所有的新功能都只会在v2版本的代码库上开发。\n* v1的代码仓库将会被从`yarnpkg/yarn`迁移到`yarnpkg/legacy`，这个仓库会继续开放一定的时间用来修复一些bug，然后会在一两年后achieve掉。v2版本的代码由于历史遗留问题不会迁移到`yarnpkg/yarn`，而且会在未来很长的一段时间保留在`yarnpkg/berry`。\n* v1的官方网站会被搬到legacy.yarnpkg.com，yarnpkg.com官网的内容已经是v2版本next.yarnpkg.com的内容了。\n* npm仓库中，`legacy`标签指向的是最新的v1版本代码，`latest`标签会继续指向v1的最新版本的代码几周，然后指向v2的代码。`berry`标签将会一直指向v2版本的最新版本。\n* 大概在今年4月的时候，[Node 14版本的Docker镜像可能会默认自带v2版本](https://github.com/nodejs/docker-node/issues/1180)，这样你就可以直接在容器里使用v2的功能了。\n\n### 参考文献\n* [Yarn berry官方文档](https://next.yarnpkg.com/)\n* [Yarn 2 - Reinventing package management - Maël Nison aka @arcanis at @ReactEurope 2019\n](https://www.youtube.com/watch?v=SU0N4y8S1Qc)\n* [Introducing Yarn 2!](https://dev.to/arcanis/introducing-yarn-2-4eh1)\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","source":"_posts/yarnv2.md","raw":"---\ntitle: Yarn v2介绍\ntags:\n  - yarn\nthumbnail: /gallery/thumbnails/yarn2.png\ncategories:\n  - 前端\ndate: 2020-02-17 08:55:57\n---\n\n[Yarn](http://yarnpkg.com/)作为JavaScript生态的一个强大的依赖管理工具在今年[1月24日](https://dev.to/arcanis/introducing-yarn-2-4eh1)的时候正式发布了v2版本。在本篇文章中，我将会为大家介绍以下内容：\n* [为什么要开发v2版本](#为什么要开发v2版本)\n* [v2都有什么新的特性](#v2都有什么新的特性)\n* [Yarn的未来计划](#Yarn的未来计划)\n\n备注：如果你想知道如何直接使用v2版本可以查看[Getting Started](https://next.yarnpkg.com/getting-started/install)，如果你想从v1版本迁移到v2版本可以查看[Migrations](https://next.yarnpkg.com/advanced/migration)。\n<!-- more-->\n## 为什么要开发v2版本\n### 原有代码架构满足不了新的需求\nYarn创建于2016年初，它在刚开始的时候借鉴了很多npm的东西，其中的架构设计本身就不是很符合Yarn开发者的愿景。在那之后，由于不断有新的需求产生，Yarn在接下来的几年中还添加了很多新的功能，其中包括Workspaces(2017), Plug'n'Play(2018)和Zip loading(2019)。这些新的概念在Yarn刚刚被创建的时候压根就不存在，所以Yarn的架构设计也就没有考虑到日后这些新功能的添加，因此随着时间的推移，Yarn的代码变得越来越难维护和扩展。由于这个技术原因，Yarn需要一个更加现代化的代码架构来满足新需求的开发。\n### 鼓励开发者贡献代码\nYarn作为一个社区项目，秉承的一个理念就是: `we don't want to work for you, we want to work with you`。由此可以看出Yarn的开发者其实是希望更加多的开发者参与到这个项目的开发，而不是只有他们来维护。为了降低开发者为Yarn项目贡献代码的门槛，Yarn v2版本做了以下的一些改变：\n* 从Flow迁移到了现在更加流行的TypeScript作为开发语言，让开发者可以用更加熟悉的技术栈来贡献代码。\n* 采用基于插件（Plugin）的模块化（Modular）代码架构，让开发者不用搞懂Yarn的核心代码就可以通过实现插件的方式来为Yarn添加新的功能。而且Yarn的核心功能也是由不同的内置插件实现的，这点和Webpack的设计思想如出一辙，因此开发者可以很容易就搞懂每个功能是如何实现的。\n\n## v2都有什么新的特性\n说完了为什么要开发v2版本之后，我们再来看一下它都有什么新的特性。\n### 可读性更高的输出日志\n虽然相对于其他替代方案（例如npm）Yarn的输出日志的可读性算是比较高的了，可是它还是存在各种各样的问题，例如当输出信息特别多的时候，开发者很难在一大堆输出中找到有用的内容，而且输出日志的颜色并没有起到帮助用户快速识别出重要信息的作用，甚至还会对日志的阅读造成一定的干扰。基于这些原因，v2版本对输出日志进行了一些改进，我们先来看一下它大概变成了什么样子了：\n![](/images/yarn2/log.png)\n由上面的输出内容我们可以看到现在每一行日志的开头添加了一个错误号码（error code），不同的错误号码代表的意思可以在这个[文档](https://next.yarnpkg.com/advanced/error-codes)中找到。这些错误号码可以让开发者快速定位错误并且可以更加方便地搜索到修复错误的办法。除了新增错误号码，输出日志在颜色上也有很大的改进，例如上面输出中会用鲜艳的颜色来突出依赖的名称以及它的版本号，这样可以更加方便开发者获取有用的信息。\n\n### Yarn dlx\n[yarn dlx](https://next.yarnpkg.com/cli/dlx)的功能和[npx](https://github.com/npm/npx#readme)类似。dlx是`download and execute`的简称，这个命令会在本地创建一个临时的环境来下载指定的依赖，依赖下载完成后，它会在当前的工作目录（cwd）中执行这个依赖包含的可执行二进制文件，这个临时的空间会在命令完成后被删除，所以这些操作都是一次性的。\n\n`yarn dlx`这个命令不会改变当前项目的package.json的内容，而且它只可以执行远端的脚本而不能执行本地的脚本（本地脚本可以用yarn run来执行），所以它相对于npx有更高的安全性。 \n\n由于v2版本默认开启了[Plug'n'Play](https://next.yarnpkg.com/features/pnp)的功能，当你使用了一次`yarn dlx`命令执行某个远端脚本后，这个脚本的依赖会被缓存到本地环境中，这样当它被再次执行的时候它就不需要下载依赖了，所以它的速度会变得很快。\n\n### 更好的workspaces支持\nv2版本一个最大的改变就是将[workspaces](https://next.yarnpkg.com/features/workspaces)变成了一等公民（first-class citizen），这样就可以更好地支持[monorepo](https://next.yarnpkg.com/advanced/lexicon#monorepository)的开发了。v2版本对workspaces的支持体现在以下这些方面：\n\n#### yarn add 添加交互模式（interactive mode）\n假如你要在项目的某个workspace中引入某个依赖，你可能要考虑其他workspaces是否也用到了这个依赖，而且要避免引入不兼容的版本。v2版本中，你可以使用`-i`参数来让`yarn add`命令进入到交互模式，这样yarn就会帮你检查这个依赖有没有在其他workspaces中被使用，并且会让你选择是要复用其他workspaces中的依赖版本还是使用另外的版本。\n![](/images/yarn2/add-interactive.png)\n\n#### 一次更新所有workspaces某个依赖的版本\nv2版本新加了一个`yarn up`命令。这个命令和`yarn upgrade`命令类似，都是用来更新某个依赖的版本的。和`yarn upgrade`不同的是它可以同时更新所有workspaces的该依赖的版本，而不用切换到各个workspace中运行更新命令。这个命令同样具有交互模式`-i`来让你确认在不同workspace进行的具体操作。\n\n#### 自动发布关联的workspaces\n有参与过monorepo开发的同学们一定会遇到过这样的问题：当某个包（workspace）发布了新的版本之后，发布其它相关联的包十分麻烦。如果你在项目中使用的是[Lerna](https://github.com/lerna/lerna)，当你发布一个包的新版本的时候，你要么所有的包都要发布新的版本，要么你得自己手动来管理其他包的版本发布。虽然自己来管理其它包的发布也是可以的，可是人为的东西肯定会存在疏忽，而且多人协作的项目会让人很头疼。为了解决这个问题，Yarn v2版本采取了和Lerna以及其他类似工具完全不同的解决方案，它把这部分逻辑放在了一个单独的叫做[version的插件](https://next.yarnpkg.com/features/release-workflow)中。version插件允许你将一部分包版本管理工作分发给你的代码贡献者，而且它还提供了一个友好的交互界面来让你十分容易地管理关联包的发布：\n![](/images/yarn2/version.png)\n\n#### 在多个workspaces中运行相同的命令\n在同一个项目的不同workspaces中运行同一个命令是很常见的情形，Yarn v2版本提供了一个新的`yarn workspaces foreach`命令来让你在多个workspaces中运行同一个命令，这个命令是由它内置的[workspace-tools插件](https://github.com/yarnpkg/berry/tree/master/packages/plugin-workspace-tools)支持的，例如以下命令会在所有的workspaces中运行build命令：\n```shell\nyarn workspaces foreach run build\n```\n#### 给所有workspaces添加约束（contraints）\n有时候你希望同一个项目的所有workspaces都要遵循某些规则，例如`所有的workspaces都不能使用underscore作为依赖`又或者`所有workspaces依赖的某个包版本要互相兼容`等。v2版本有一个新的概念叫做[约束](https://next.yarnpkg.com/features/constraints)（Constraints），这里的约束是对项目内各个workspaces的`package.json`进行的约束，就像ESLint对JS文件进行约束一样，它会在workspaces的package.json破坏了某些规则之后给你错误提示并且可以帮你修复其中一部分错误。\n\nYarn的约束规则是用[Prolog](!https://baike.baidu.com/item/%E9%80%BB%E8%BE%91%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/20864034?fromtitle=Prolog&fromid=8379187&fr=aladdin)语法来编写的。想要为你的workspaces添加约束，你首先得引入`constraints`插件：\n```shell\nyarn plugin import constraints\n```\n然后在项目的根目录定义一个存放约束规则的`constraints.pro`文件，最后在这个文件中定义你想要的约束条件，例如以下的约束条件会禁止所有的workspaces将underscore作为依赖：\n```prolog\ngen_enforced_dependency(WorkspaceCwd, 'underscore', null, DependencyType) :-\n  workspace_has_dependency(WorkspaceCwd, 'underscore', _, DependencyType).\n```\n约束规则定义完后可以使用`yarn constraints check`命令来校验项目的workspaces是否满足定义的约束规则，当有错误发生时，可以使用`yarn constraints fix`命令自动修复那些可以被自动修复的错误。\n#### 像搜索数据库一样查询workspaces的依赖信息\n`yarn constraints query`命令可以查询项目中的workspaces用到的依赖信息，例如以下命令会输出各个workspace使用到的lodash版本信息：\n```shell\n$my-project: yarn constraints query \"workspace_has_dependency(Cwd, 'lodash', Range, _).\"\n➤ YN0000: ┌ Cwd   = 'packages/backend'\n➤ YN0000: └ Range = '4.17.0'\n➤ YN0000: ┌ Cwd   = 'packages/frontend'\n➤ YN0000: └ Range = '4.17.0'\n➤ YN0000: Done with warnings in 0.03s\n```\n个人感觉上面的依赖查询很像在MySQL数据库里面用SELECT语法查询数据库，是一个十分强大而且有用的功能。\n### 依赖零安装 （Zero-Installs）\n[依赖零安装](https://next.yarnpkg.com/features/zero-installs)更像是一个理念而不是一个功能，它的思路是希望我们每次在使用git更新完代码后，不需要再次使用`yarn install`命令来更新本地仓库的依赖来提高开发效率和避免一些问题的发生。它的具体做法是让开发者将本地的依赖包也提交到远端的git仓库中，看到这里你可能会想：“不就是将node_modules也提交吗？这个做法很蠢吧！”。确实如果直接将node_modules提交到远端仓库的话，每次提交都是一个噩梦，因为node_modules的文件很多（几万个文件很常见），首先你上传和下载代码的速度会变得很慢，其次很影响别人对你的代码进行review。为了解决这个问题，v2版本默认开启了Plug'n'Play + zip loading的功能，这个功能开启后你的项目将不再存在node_modules文件夹，所有的依赖都会被压缩成一个文件放在特定的地方，由于压缩后的包体积很小，而且包的数量不会很多，所以就不会存在以上说到的node_modules存在的问题。\n\n可是为什么要做到依赖零安装呢？这是因为它有以下的好处：\n* 更好的开发体验\n  * 你每次使用`git pull`, `git checkout`, `git rebase`这些命令更新完你的代码后无需使用`yarn install`进行依赖的安装，这样可以避免一些问题的出现，例如别人更新了某个依赖的版本后，如果你没有进行对应的更新的话，你的代码会挂。\n  * 代码review的时候可以更清楚哪些依赖发生了改变。\n* 更快，更简单，更稳定的CI部署\n  * 由于每次部署代码的时候，`yarn install`占用的时间都是一个大头，去掉这个步骤后部署速度将会大大提升。\n  * 不会存在本地运行没问题，发布线上环境的时候挂掉了的问题。\n  * 不用你在CI文件里面进行一些安装依赖的配置。\n\n想要看一下pnp + zip loading实际效果的同学可以看一下yarn v2版本的[代码\n](https://github.com/yarnpkg/berry)，你可以看到它就是在自己仓库的`.yarn/cache`目录下存放了它所有的依赖：\n![](/images/yarn2/berry-pnp.png)\n\n### 添加新的协议\nYarn v2版本添加了两个新的协议：`patch`和`portal`协议。不知道什么是协议的同学可以看一下官网[介绍](https://next.yarnpkg.com/features/protocols)，它大概是用来告诉yarn，定义在package.json文件里面的依赖是如何解析的。\n#### Patch协议\n我们日常开发中有时候会需要更改某个依赖的原代码来做一些试验性的东西，这个时候就可以使用这个patch协议了。我们先来看一下怎么使用：\n```json\n{\n  \"dependencies\": {\n    \"left-pad\": \"patch:left-pad@1.3.0#./my-patch.patch\"\n  }\n}\n```\n上面的package.json中定义了`left-pad`这个依赖是如何解析的，我们可以看到left-pad的解析其实就用到了patch协议，它表示项目中用到的left-pad代码是1.3.0这个版本的代码叠加上`./my-patch.patch`这个补丁，所谓的补丁就是我们自己对left-pad这个库的代码的更改，和git的diff文件类似。\n#### Portal协议\nPortal协议和原有的link协议类似。它的作用是告诉yarn项目中的某个依赖指向本地文件系统的某个软链接（symlink），其实和yarn link的作用是差不多的。和link协议不同的是，portal指向的是一些包（package），也就是有package.json文件的那种文件夹，而且yarn会去解析这个包中的transitive dependencies。关于portal协议和link协议的更具体的区别可以看[官方文档](https://next.yarnpkg.com/features/protocols#whats-the-difference-between-link-and-portal)。\n\n### 范式化shell脚本（Normalized shell）\nv2版本对Windows开发环境有了更好的兼容。你之前可能会遇到这样一个问题：你在package.json定义的script命令在OSX系统中可以运行，可是在windows电脑上却会报错。出现这个问题的原因是你在package.json中定义的script最终是通过Yarn创建一个子进程来执行的，而子进程的shell环境在Windows和OSX环境是不一样的（例如文件路径的写法就不一样）。为了解决这个问题，Yarn v2自带一个简单shell解析器（interpreter），这个解析器是用来兼容Windows和OSX shell环境的区别的，它覆盖了90%常用的shell脚本写法，所以正常来说你定义的shell脚本在Windows环境和OSX环境在这个解析器的兼容下都可以正常运行：\n```json\n{\n  \"scripts\": {\n    \"redirect\": \"node ./something.js > hello.md\",\n    \"no-cross-env\": \"NODE_ENV=prod webpack\"\n  }\n}\n```\n\n### 模块化代码架构\n在前面已经提到Yarn v2版本已经转变为一个模块化的架构，并且它支持用户自定义Plugin去增强它的功能。用户自定义的插件可以获取到Yarn解析出的dependency tree信息以及一些其他的上下文信息，因此很容易就可以实现一些诸如[Lerna](https://lerna.js.org/)，[Femoto](https://fable.io/blog/Introducing-Femto.html)和[Patch-Package](https://github.com/ds300/patch-package)的库。\n\n想要感受下Yarn的插件是怎么实现的同学可以看一下官方实现的[typescript插件](https://github.com/yarnpkg/berry/tree/master/packages/plugin-typescript)。这个typescript插件对于用Typescript开发的同学来说十分有用，它可以在你使用`yarn add`命令添加依赖的时候同时也添加这个依赖对应的`@types/`包，这样你就可以避免很多手动的工作了。更多和插件的相关的内容可以查看这个[教程](https://next.yarnpkg.com/advanced/plugin-tutorial)。\n\n### 其他更新\n除了上面的提到的新的属性外，v2版本还有以下这些更新：\n* Peer dependencies也可以在yarn link里面使用了\n* Lockfile的格式变为了标准的YAML格式\n* 包只能依赖那些在package.json声明的依赖，不允许require那些没有声明的依赖\n* 范式化了配置文件\n* ...\n\n想要查看v2版本所有更新内容的朋友可以看Maël Nison的文章 - [Introducing Yarn 2](https://dev.to/arcanis/introducing-yarn-2-4eh1)或者直接查看它的[change log](https://github.com/yarnpkg/berry/blob/master/CHANGELOG.md)。\n### Yarn的未来计划\n* v1最后一个版本v1.22已经发布，作者从此不会再在v1的代码上添加任何新的功能了。Yarn所有的新功能都只会在v2版本的代码库上开发。\n* v1的代码仓库将会被从`yarnpkg/yarn`迁移到`yarnpkg/legacy`，这个仓库会继续开放一定的时间用来修复一些bug，然后会在一两年后achieve掉。v2版本的代码由于历史遗留问题不会迁移到`yarnpkg/yarn`，而且会在未来很长的一段时间保留在`yarnpkg/berry`。\n* v1的官方网站会被搬到legacy.yarnpkg.com，yarnpkg.com官网的内容已经是v2版本next.yarnpkg.com的内容了。\n* npm仓库中，`legacy`标签指向的是最新的v1版本代码，`latest`标签会继续指向v1的最新版本的代码几周，然后指向v2的代码。`berry`标签将会一直指向v2版本的最新版本。\n* 大概在今年4月的时候，[Node 14版本的Docker镜像可能会默认自带v2版本](https://github.com/nodejs/docker-node/issues/1180)，这样你就可以直接在容器里使用v2的功能了。\n\n### 参考文献\n* [Yarn berry官方文档](https://next.yarnpkg.com/)\n* [Yarn 2 - Reinventing package management - Maël Nison aka @arcanis at @ReactEurope 2019\n](https://www.youtube.com/watch?v=SU0N4y8S1Qc)\n* [Introducing Yarn 2!](https://dev.to/arcanis/introducing-yarn-2-4eh1)\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","slug":"yarnv2","published":1,"updated":"2021-02-08T06:16:56.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0gqf6fl000fucnx31t4ez4m","content":"<p><a href=\"http://yarnpkg.com/\" target=\"_blank\" rel=\"noopener\">Yarn</a>作为JavaScript生态的一个强大的依赖管理工具在今年<a href=\"https://dev.to/arcanis/introducing-yarn-2-4eh1\" target=\"_blank\" rel=\"noopener\">1月24日</a>的时候正式发布了v2版本。在本篇文章中，我将会为大家介绍以下内容：</p>\n<ul>\n<li><a href=\"#为什么要开发v2版本\">为什么要开发v2版本</a></li>\n<li><a href=\"#v2都有什么新的特性\">v2都有什么新的特性</a></li>\n<li><a href=\"#Yarn的未来计划\">Yarn的未来计划</a></li>\n</ul>\n<p>备注：如果你想知道如何直接使用v2版本可以查看<a href=\"https://next.yarnpkg.com/getting-started/install\" target=\"_blank\" rel=\"noopener\">Getting Started</a>，如果你想从v1版本迁移到v2版本可以查看<a href=\"https://next.yarnpkg.com/advanced/migration\" target=\"_blank\" rel=\"noopener\">Migrations</a>。</p>\n<a id=\"more\"></a>\n<h2 id=\"为什么要开发v2版本\"><a href=\"#为什么要开发v2版本\" class=\"headerlink\" title=\"为什么要开发v2版本\"></a>为什么要开发v2版本</h2><h3 id=\"原有代码架构满足不了新的需求\"><a href=\"#原有代码架构满足不了新的需求\" class=\"headerlink\" title=\"原有代码架构满足不了新的需求\"></a>原有代码架构满足不了新的需求</h3><p>Yarn创建于2016年初，它在刚开始的时候借鉴了很多npm的东西，其中的架构设计本身就不是很符合Yarn开发者的愿景。在那之后，由于不断有新的需求产生，Yarn在接下来的几年中还添加了很多新的功能，其中包括Workspaces(2017), Plug’n’Play(2018)和Zip loading(2019)。这些新的概念在Yarn刚刚被创建的时候压根就不存在，所以Yarn的架构设计也就没有考虑到日后这些新功能的添加，因此随着时间的推移，Yarn的代码变得越来越难维护和扩展。由于这个技术原因，Yarn需要一个更加现代化的代码架构来满足新需求的开发。</p>\n<h3 id=\"鼓励开发者贡献代码\"><a href=\"#鼓励开发者贡献代码\" class=\"headerlink\" title=\"鼓励开发者贡献代码\"></a>鼓励开发者贡献代码</h3><p>Yarn作为一个社区项目，秉承的一个理念就是: <code>we don&#39;t want to work for you, we want to work with you</code>。由此可以看出Yarn的开发者其实是希望更加多的开发者参与到这个项目的开发，而不是只有他们来维护。为了降低开发者为Yarn项目贡献代码的门槛，Yarn v2版本做了以下的一些改变：</p>\n<ul>\n<li>从Flow迁移到了现在更加流行的TypeScript作为开发语言，让开发者可以用更加熟悉的技术栈来贡献代码。</li>\n<li>采用基于插件（Plugin）的模块化（Modular）代码架构，让开发者不用搞懂Yarn的核心代码就可以通过实现插件的方式来为Yarn添加新的功能。而且Yarn的核心功能也是由不同的内置插件实现的，这点和Webpack的设计思想如出一辙，因此开发者可以很容易就搞懂每个功能是如何实现的。</li>\n</ul>\n<h2 id=\"v2都有什么新的特性\"><a href=\"#v2都有什么新的特性\" class=\"headerlink\" title=\"v2都有什么新的特性\"></a>v2都有什么新的特性</h2><p>说完了为什么要开发v2版本之后，我们再来看一下它都有什么新的特性。</p>\n<h3 id=\"可读性更高的输出日志\"><a href=\"#可读性更高的输出日志\" class=\"headerlink\" title=\"可读性更高的输出日志\"></a>可读性更高的输出日志</h3><p>虽然相对于其他替代方案（例如npm）Yarn的输出日志的可读性算是比较高的了，可是它还是存在各种各样的问题，例如当输出信息特别多的时候，开发者很难在一大堆输出中找到有用的内容，而且输出日志的颜色并没有起到帮助用户快速识别出重要信息的作用，甚至还会对日志的阅读造成一定的干扰。基于这些原因，v2版本对输出日志进行了一些改进，我们先来看一下它大概变成了什么样子了：<br><img src=\"/images/yarn2/log.png\" alt><br>由上面的输出内容我们可以看到现在每一行日志的开头添加了一个错误号码（error code），不同的错误号码代表的意思可以在这个<a href=\"https://next.yarnpkg.com/advanced/error-codes\" target=\"_blank\" rel=\"noopener\">文档</a>中找到。这些错误号码可以让开发者快速定位错误并且可以更加方便地搜索到修复错误的办法。除了新增错误号码，输出日志在颜色上也有很大的改进，例如上面输出中会用鲜艳的颜色来突出依赖的名称以及它的版本号，这样可以更加方便开发者获取有用的信息。</p>\n<h3 id=\"Yarn-dlx\"><a href=\"#Yarn-dlx\" class=\"headerlink\" title=\"Yarn dlx\"></a>Yarn dlx</h3><p><a href=\"https://next.yarnpkg.com/cli/dlx\" target=\"_blank\" rel=\"noopener\">yarn dlx</a>的功能和<a href=\"https://github.com/npm/npx#readme\" target=\"_blank\" rel=\"noopener\">npx</a>类似。dlx是<code>download and execute</code>的简称，这个命令会在本地创建一个临时的环境来下载指定的依赖，依赖下载完成后，它会在当前的工作目录（cwd）中执行这个依赖包含的可执行二进制文件，这个临时的空间会在命令完成后被删除，所以这些操作都是一次性的。</p>\n<p><code>yarn dlx</code>这个命令不会改变当前项目的package.json的内容，而且它只可以执行远端的脚本而不能执行本地的脚本（本地脚本可以用yarn run来执行），所以它相对于npx有更高的安全性。 </p>\n<p>由于v2版本默认开启了<a href=\"https://next.yarnpkg.com/features/pnp\" target=\"_blank\" rel=\"noopener\">Plug’n’Play</a>的功能，当你使用了一次<code>yarn dlx</code>命令执行某个远端脚本后，这个脚本的依赖会被缓存到本地环境中，这样当它被再次执行的时候它就不需要下载依赖了，所以它的速度会变得很快。</p>\n<h3 id=\"更好的workspaces支持\"><a href=\"#更好的workspaces支持\" class=\"headerlink\" title=\"更好的workspaces支持\"></a>更好的workspaces支持</h3><p>v2版本一个最大的改变就是将<a href=\"https://next.yarnpkg.com/features/workspaces\" target=\"_blank\" rel=\"noopener\">workspaces</a>变成了一等公民（first-class citizen），这样就可以更好地支持<a href=\"https://next.yarnpkg.com/advanced/lexicon#monorepository\" target=\"_blank\" rel=\"noopener\">monorepo</a>的开发了。v2版本对workspaces的支持体现在以下这些方面：</p>\n<h4 id=\"yarn-add-添加交互模式（interactive-mode）\"><a href=\"#yarn-add-添加交互模式（interactive-mode）\" class=\"headerlink\" title=\"yarn add 添加交互模式（interactive mode）\"></a>yarn add 添加交互模式（interactive mode）</h4><p>假如你要在项目的某个workspace中引入某个依赖，你可能要考虑其他workspaces是否也用到了这个依赖，而且要避免引入不兼容的版本。v2版本中，你可以使用<code>-i</code>参数来让<code>yarn add</code>命令进入到交互模式，这样yarn就会帮你检查这个依赖有没有在其他workspaces中被使用，并且会让你选择是要复用其他workspaces中的依赖版本还是使用另外的版本。<br><img src=\"/images/yarn2/add-interactive.png\" alt></p>\n<h4 id=\"一次更新所有workspaces某个依赖的版本\"><a href=\"#一次更新所有workspaces某个依赖的版本\" class=\"headerlink\" title=\"一次更新所有workspaces某个依赖的版本\"></a>一次更新所有workspaces某个依赖的版本</h4><p>v2版本新加了一个<code>yarn up</code>命令。这个命令和<code>yarn upgrade</code>命令类似，都是用来更新某个依赖的版本的。和<code>yarn upgrade</code>不同的是它可以同时更新所有workspaces的该依赖的版本，而不用切换到各个workspace中运行更新命令。这个命令同样具有交互模式<code>-i</code>来让你确认在不同workspace进行的具体操作。</p>\n<h4 id=\"自动发布关联的workspaces\"><a href=\"#自动发布关联的workspaces\" class=\"headerlink\" title=\"自动发布关联的workspaces\"></a>自动发布关联的workspaces</h4><p>有参与过monorepo开发的同学们一定会遇到过这样的问题：当某个包（workspace）发布了新的版本之后，发布其它相关联的包十分麻烦。如果你在项目中使用的是<a href=\"https://github.com/lerna/lerna\" target=\"_blank\" rel=\"noopener\">Lerna</a>，当你发布一个包的新版本的时候，你要么所有的包都要发布新的版本，要么你得自己手动来管理其他包的版本发布。虽然自己来管理其它包的发布也是可以的，可是人为的东西肯定会存在疏忽，而且多人协作的项目会让人很头疼。为了解决这个问题，Yarn v2版本采取了和Lerna以及其他类似工具完全不同的解决方案，它把这部分逻辑放在了一个单独的叫做<a href=\"https://next.yarnpkg.com/features/release-workflow\" target=\"_blank\" rel=\"noopener\">version的插件</a>中。version插件允许你将一部分包版本管理工作分发给你的代码贡献者，而且它还提供了一个友好的交互界面来让你十分容易地管理关联包的发布：<br><img src=\"/images/yarn2/version.png\" alt></p>\n<h4 id=\"在多个workspaces中运行相同的命令\"><a href=\"#在多个workspaces中运行相同的命令\" class=\"headerlink\" title=\"在多个workspaces中运行相同的命令\"></a>在多个workspaces中运行相同的命令</h4><p>在同一个项目的不同workspaces中运行同一个命令是很常见的情形，Yarn v2版本提供了一个新的<code>yarn workspaces foreach</code>命令来让你在多个workspaces中运行同一个命令，这个命令是由它内置的<a href=\"https://github.com/yarnpkg/berry/tree/master/packages/plugin-workspace-tools\" target=\"_blank\" rel=\"noopener\">workspace-tools插件</a>支持的，例如以下命令会在所有的workspaces中运行build命令：</p>\n<figure class=\"highlight shell hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">yarn workspaces foreach run build</span></pre></td></tr></table></figure>\n<h4 id=\"给所有workspaces添加约束（contraints）\"><a href=\"#给所有workspaces添加约束（contraints）\" class=\"headerlink\" title=\"给所有workspaces添加约束（contraints）\"></a>给所有workspaces添加约束（contraints）</h4><p>有时候你希望同一个项目的所有workspaces都要遵循某些规则，例如<code>所有的workspaces都不能使用underscore作为依赖</code>又或者<code>所有workspaces依赖的某个包版本要互相兼容</code>等。v2版本有一个新的概念叫做<a href=\"https://next.yarnpkg.com/features/constraints\" target=\"_blank\" rel=\"noopener\">约束</a>（Constraints），这里的约束是对项目内各个workspaces的<code>package.json</code>进行的约束，就像ESLint对JS文件进行约束一样，它会在workspaces的package.json破坏了某些规则之后给你错误提示并且可以帮你修复其中一部分错误。</p>\n<p>Yarn的约束规则是用<a href=\"!https://baike.baidu.com/item/%E9%80%BB%E8%BE%91%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/20864034?fromtitle=Prolog&fromid=8379187&fr=aladdin\">Prolog</a>语法来编写的。想要为你的workspaces添加约束，你首先得引入<code>constraints</code>插件：</p>\n<figure class=\"highlight shell hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">yarn plugin import constraints</span></pre></td></tr></table></figure>\n<p>然后在项目的根目录定义一个存放约束规则的<code>constraints.pro</code>文件，最后在这个文件中定义你想要的约束条件，例如以下的约束条件会禁止所有的workspaces将underscore作为依赖：</p>\n<figure class=\"highlight prolog hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">gen_enforced_dependency(<span class=\"hljs-symbol\">WorkspaceCwd</span>, <span class=\"hljs-string\">'underscore'</span>, null, <span class=\"hljs-symbol\">DependencyType</span>) :-</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  workspace_has_dependency(<span class=\"hljs-symbol\">WorkspaceCwd</span>, <span class=\"hljs-string\">'underscore'</span>, <span class=\"hljs-symbol\">_</span>, <span class=\"hljs-symbol\">DependencyType</span>).</span></pre></td></tr></table></figure>\n<p>约束规则定义完后可以使用<code>yarn constraints check</code>命令来校验项目的workspaces是否满足定义的约束规则，当有错误发生时，可以使用<code>yarn constraints fix</code>命令自动修复那些可以被自动修复的错误。</p>\n<h4 id=\"像搜索数据库一样查询workspaces的依赖信息\"><a href=\"#像搜索数据库一样查询workspaces的依赖信息\" class=\"headerlink\" title=\"像搜索数据库一样查询workspaces的依赖信息\"></a>像搜索数据库一样查询workspaces的依赖信息</h4><p><code>yarn constraints query</code>命令可以查询项目中的workspaces用到的依赖信息，例如以下命令会输出各个workspace使用到的lodash版本信息：</p>\n<figure class=\"highlight shell hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-meta\">$</span><span class=\"hljs-bash\">my-project: yarn constraints query <span class=\"hljs-string\">\"workspace_has_dependency(Cwd, 'lodash', Range, _).\"</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">➤ YN0000: ┌ Cwd   = 'packages/backend'</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">➤ YN0000: └ Range = '4.17.0'</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">➤ YN0000: ┌ Cwd   = 'packages/frontend'</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">➤ YN0000: └ Range = '4.17.0'</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">➤ YN0000: Done with warnings in 0.03s</span></pre></td></tr></table></figure>\n<p>个人感觉上面的依赖查询很像在MySQL数据库里面用SELECT语法查询数据库，是一个十分强大而且有用的功能。</p>\n<h3 id=\"依赖零安装-（Zero-Installs）\"><a href=\"#依赖零安装-（Zero-Installs）\" class=\"headerlink\" title=\"依赖零安装 （Zero-Installs）\"></a>依赖零安装 （Zero-Installs）</h3><p><a href=\"https://next.yarnpkg.com/features/zero-installs\" target=\"_blank\" rel=\"noopener\">依赖零安装</a>更像是一个理念而不是一个功能，它的思路是希望我们每次在使用git更新完代码后，不需要再次使用<code>yarn install</code>命令来更新本地仓库的依赖来提高开发效率和避免一些问题的发生。它的具体做法是让开发者将本地的依赖包也提交到远端的git仓库中，看到这里你可能会想：“不就是将node_modules也提交吗？这个做法很蠢吧！”。确实如果直接将node_modules提交到远端仓库的话，每次提交都是一个噩梦，因为node_modules的文件很多（几万个文件很常见），首先你上传和下载代码的速度会变得很慢，其次很影响别人对你的代码进行review。为了解决这个问题，v2版本默认开启了Plug’n’Play + zip loading的功能，这个功能开启后你的项目将不再存在node_modules文件夹，所有的依赖都会被压缩成一个文件放在特定的地方，由于压缩后的包体积很小，而且包的数量不会很多，所以就不会存在以上说到的node_modules存在的问题。</p>\n<p>可是为什么要做到依赖零安装呢？这是因为它有以下的好处：</p>\n<ul>\n<li>更好的开发体验<ul>\n<li>你每次使用<code>git pull</code>, <code>git checkout</code>, <code>git rebase</code>这些命令更新完你的代码后无需使用<code>yarn install</code>进行依赖的安装，这样可以避免一些问题的出现，例如别人更新了某个依赖的版本后，如果你没有进行对应的更新的话，你的代码会挂。</li>\n<li>代码review的时候可以更清楚哪些依赖发生了改变。</li>\n</ul>\n</li>\n<li>更快，更简单，更稳定的CI部署<ul>\n<li>由于每次部署代码的时候，<code>yarn install</code>占用的时间都是一个大头，去掉这个步骤后部署速度将会大大提升。</li>\n<li>不会存在本地运行没问题，发布线上环境的时候挂掉了的问题。</li>\n<li>不用你在CI文件里面进行一些安装依赖的配置。</li>\n</ul>\n</li>\n</ul>\n<p>想要看一下pnp + zip loading实际效果的同学可以看一下yarn v2版本的<a href=\"https://github.com/yarnpkg/berry\" target=\"_blank\" rel=\"noopener\">代码\n</a>，你可以看到它就是在自己仓库的<code>.yarn/cache</code>目录下存放了它所有的依赖：<br><img src=\"/images/yarn2/berry-pnp.png\" alt></p>\n<h3 id=\"添加新的协议\"><a href=\"#添加新的协议\" class=\"headerlink\" title=\"添加新的协议\"></a>添加新的协议</h3><p>Yarn v2版本添加了两个新的协议：<code>patch</code>和<code>portal</code>协议。不知道什么是协议的同学可以看一下官网<a href=\"https://next.yarnpkg.com/features/protocols\" target=\"_blank\" rel=\"noopener\">介绍</a>，它大概是用来告诉yarn，定义在package.json文件里面的依赖是如何解析的。</p>\n<h4 id=\"Patch协议\"><a href=\"#Patch协议\" class=\"headerlink\" title=\"Patch协议\"></a>Patch协议</h4><p>我们日常开发中有时候会需要更改某个依赖的原代码来做一些试验性的东西，这个时候就可以使用这个patch协议了。我们先来看一下怎么使用：</p>\n<figure class=\"highlight json hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attr\">\"dependencies\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"left-pad\"</span>: <span class=\"hljs-string\">\"patch:left-pad@1.3.0#./my-patch.patch\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>上面的package.json中定义了<code>left-pad</code>这个依赖是如何解析的，我们可以看到left-pad的解析其实就用到了patch协议，它表示项目中用到的left-pad代码是1.3.0这个版本的代码叠加上<code>./my-patch.patch</code>这个补丁，所谓的补丁就是我们自己对left-pad这个库的代码的更改，和git的diff文件类似。</p>\n<h4 id=\"Portal协议\"><a href=\"#Portal协议\" class=\"headerlink\" title=\"Portal协议\"></a>Portal协议</h4><p>Portal协议和原有的link协议类似。它的作用是告诉yarn项目中的某个依赖指向本地文件系统的某个软链接（symlink），其实和yarn link的作用是差不多的。和link协议不同的是，portal指向的是一些包（package），也就是有package.json文件的那种文件夹，而且yarn会去解析这个包中的transitive dependencies。关于portal协议和link协议的更具体的区别可以看<a href=\"https://next.yarnpkg.com/features/protocols#whats-the-difference-between-link-and-portal\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<h3 id=\"范式化shell脚本（Normalized-shell）\"><a href=\"#范式化shell脚本（Normalized-shell）\" class=\"headerlink\" title=\"范式化shell脚本（Normalized shell）\"></a>范式化shell脚本（Normalized shell）</h3><p>v2版本对Windows开发环境有了更好的兼容。你之前可能会遇到这样一个问题：你在package.json定义的script命令在OSX系统中可以运行，可是在windows电脑上却会报错。出现这个问题的原因是你在package.json中定义的script最终是通过Yarn创建一个子进程来执行的，而子进程的shell环境在Windows和OSX环境是不一样的（例如文件路径的写法就不一样）。为了解决这个问题，Yarn v2自带一个简单shell解析器（interpreter），这个解析器是用来兼容Windows和OSX shell环境的区别的，它覆盖了90%常用的shell脚本写法，所以正常来说你定义的shell脚本在Windows环境和OSX环境在这个解析器的兼容下都可以正常运行：</p>\n<figure class=\"highlight json hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attr\">\"scripts\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"redirect\"</span>: <span class=\"hljs-string\">\"node ./something.js &gt; hello.md\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"no-cross-env\"</span>: <span class=\"hljs-string\">\"NODE_ENV=prod webpack\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<h3 id=\"模块化代码架构\"><a href=\"#模块化代码架构\" class=\"headerlink\" title=\"模块化代码架构\"></a>模块化代码架构</h3><p>在前面已经提到Yarn v2版本已经转变为一个模块化的架构，并且它支持用户自定义Plugin去增强它的功能。用户自定义的插件可以获取到Yarn解析出的dependency tree信息以及一些其他的上下文信息，因此很容易就可以实现一些诸如<a href=\"https://lerna.js.org/\" target=\"_blank\" rel=\"noopener\">Lerna</a>，<a href=\"https://fable.io/blog/Introducing-Femto.html\" target=\"_blank\" rel=\"noopener\">Femoto</a>和<a href=\"https://github.com/ds300/patch-package\" target=\"_blank\" rel=\"noopener\">Patch-Package</a>的库。</p>\n<p>想要感受下Yarn的插件是怎么实现的同学可以看一下官方实现的<a href=\"https://github.com/yarnpkg/berry/tree/master/packages/plugin-typescript\" target=\"_blank\" rel=\"noopener\">typescript插件</a>。这个typescript插件对于用Typescript开发的同学来说十分有用，它可以在你使用<code>yarn add</code>命令添加依赖的时候同时也添加这个依赖对应的<code>@types/</code>包，这样你就可以避免很多手动的工作了。更多和插件的相关的内容可以查看这个<a href=\"https://next.yarnpkg.com/advanced/plugin-tutorial\" target=\"_blank\" rel=\"noopener\">教程</a>。</p>\n<h3 id=\"其他更新\"><a href=\"#其他更新\" class=\"headerlink\" title=\"其他更新\"></a>其他更新</h3><p>除了上面的提到的新的属性外，v2版本还有以下这些更新：</p>\n<ul>\n<li>Peer dependencies也可以在yarn link里面使用了</li>\n<li>Lockfile的格式变为了标准的YAML格式</li>\n<li>包只能依赖那些在package.json声明的依赖，不允许require那些没有声明的依赖</li>\n<li>范式化了配置文件</li>\n<li>…</li>\n</ul>\n<p>想要查看v2版本所有更新内容的朋友可以看Maël Nison的文章 - <a href=\"https://dev.to/arcanis/introducing-yarn-2-4eh1\" target=\"_blank\" rel=\"noopener\">Introducing Yarn 2</a>或者直接查看它的<a href=\"https://github.com/yarnpkg/berry/blob/master/CHANGELOG.md\" target=\"_blank\" rel=\"noopener\">change log</a>。</p>\n<h3 id=\"Yarn的未来计划\"><a href=\"#Yarn的未来计划\" class=\"headerlink\" title=\"Yarn的未来计划\"></a>Yarn的未来计划</h3><ul>\n<li>v1最后一个版本v1.22已经发布，作者从此不会再在v1的代码上添加任何新的功能了。Yarn所有的新功能都只会在v2版本的代码库上开发。</li>\n<li>v1的代码仓库将会被从<code>yarnpkg/yarn</code>迁移到<code>yarnpkg/legacy</code>，这个仓库会继续开放一定的时间用来修复一些bug，然后会在一两年后achieve掉。v2版本的代码由于历史遗留问题不会迁移到<code>yarnpkg/yarn</code>，而且会在未来很长的一段时间保留在<code>yarnpkg/berry</code>。</li>\n<li>v1的官方网站会被搬到legacy.yarnpkg.com，yarnpkg.com官网的内容已经是v2版本next.yarnpkg.com的内容了。</li>\n<li>npm仓库中，<code>legacy</code>标签指向的是最新的v1版本代码，<code>latest</code>标签会继续指向v1的最新版本的代码几周，然后指向v2的代码。<code>berry</code>标签将会一直指向v2版本的最新版本。</li>\n<li>大概在今年4月的时候，<a href=\"https://github.com/nodejs/docker-node/issues/1180\" target=\"_blank\" rel=\"noopener\">Node 14版本的Docker镜像可能会默认自带v2版本</a>，这样你就可以直接在容器里使用v2的功能了。</li>\n</ul>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><ul>\n<li><a href=\"https://next.yarnpkg.com/\" target=\"_blank\" rel=\"noopener\">Yarn berry官方文档</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=SU0N4y8S1Qc\" target=\"_blank\" rel=\"noopener\">Yarn 2 - Reinventing package management - Maël Nison aka @arcanis at @ReactEurope 2019\n</a></li>\n<li><a href=\"https://dev.to/arcanis/introducing-yarn-2-4eh1\" target=\"_blank\" rel=\"noopener\">Introducing Yarn 2!</a></li>\n</ul>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://yarnpkg.com/\" target=\"_blank\" rel=\"noopener\">Yarn</a>作为JavaScript生态的一个强大的依赖管理工具在今年<a href=\"https://dev.to/arcanis/introducing-yarn-2-4eh1\" target=\"_blank\" rel=\"noopener\">1月24日</a>的时候正式发布了v2版本。在本篇文章中，我将会为大家介绍以下内容：</p>\n<ul>\n<li><a href=\"#为什么要开发v2版本\">为什么要开发v2版本</a></li>\n<li><a href=\"#v2都有什么新的特性\">v2都有什么新的特性</a></li>\n<li><a href=\"#Yarn的未来计划\">Yarn的未来计划</a></li>\n</ul>\n<p>备注：如果你想知道如何直接使用v2版本可以查看<a href=\"https://next.yarnpkg.com/getting-started/install\" target=\"_blank\" rel=\"noopener\">Getting Started</a>，如果你想从v1版本迁移到v2版本可以查看<a href=\"https://next.yarnpkg.com/advanced/migration\" target=\"_blank\" rel=\"noopener\">Migrations</a>。</p>","more":"<h2 id=\"为什么要开发v2版本\"><a href=\"#为什么要开发v2版本\" class=\"headerlink\" title=\"为什么要开发v2版本\"></a>为什么要开发v2版本</h2><h3 id=\"原有代码架构满足不了新的需求\"><a href=\"#原有代码架构满足不了新的需求\" class=\"headerlink\" title=\"原有代码架构满足不了新的需求\"></a>原有代码架构满足不了新的需求</h3><p>Yarn创建于2016年初，它在刚开始的时候借鉴了很多npm的东西，其中的架构设计本身就不是很符合Yarn开发者的愿景。在那之后，由于不断有新的需求产生，Yarn在接下来的几年中还添加了很多新的功能，其中包括Workspaces(2017), Plug’n’Play(2018)和Zip loading(2019)。这些新的概念在Yarn刚刚被创建的时候压根就不存在，所以Yarn的架构设计也就没有考虑到日后这些新功能的添加，因此随着时间的推移，Yarn的代码变得越来越难维护和扩展。由于这个技术原因，Yarn需要一个更加现代化的代码架构来满足新需求的开发。</p>\n<h3 id=\"鼓励开发者贡献代码\"><a href=\"#鼓励开发者贡献代码\" class=\"headerlink\" title=\"鼓励开发者贡献代码\"></a>鼓励开发者贡献代码</h3><p>Yarn作为一个社区项目，秉承的一个理念就是: <code>we don&#39;t want to work for you, we want to work with you</code>。由此可以看出Yarn的开发者其实是希望更加多的开发者参与到这个项目的开发，而不是只有他们来维护。为了降低开发者为Yarn项目贡献代码的门槛，Yarn v2版本做了以下的一些改变：</p>\n<ul>\n<li>从Flow迁移到了现在更加流行的TypeScript作为开发语言，让开发者可以用更加熟悉的技术栈来贡献代码。</li>\n<li>采用基于插件（Plugin）的模块化（Modular）代码架构，让开发者不用搞懂Yarn的核心代码就可以通过实现插件的方式来为Yarn添加新的功能。而且Yarn的核心功能也是由不同的内置插件实现的，这点和Webpack的设计思想如出一辙，因此开发者可以很容易就搞懂每个功能是如何实现的。</li>\n</ul>\n<h2 id=\"v2都有什么新的特性\"><a href=\"#v2都有什么新的特性\" class=\"headerlink\" title=\"v2都有什么新的特性\"></a>v2都有什么新的特性</h2><p>说完了为什么要开发v2版本之后，我们再来看一下它都有什么新的特性。</p>\n<h3 id=\"可读性更高的输出日志\"><a href=\"#可读性更高的输出日志\" class=\"headerlink\" title=\"可读性更高的输出日志\"></a>可读性更高的输出日志</h3><p>虽然相对于其他替代方案（例如npm）Yarn的输出日志的可读性算是比较高的了，可是它还是存在各种各样的问题，例如当输出信息特别多的时候，开发者很难在一大堆输出中找到有用的内容，而且输出日志的颜色并没有起到帮助用户快速识别出重要信息的作用，甚至还会对日志的阅读造成一定的干扰。基于这些原因，v2版本对输出日志进行了一些改进，我们先来看一下它大概变成了什么样子了：<br><img src=\"/images/yarn2/log.png\" alt=\"\"><br>由上面的输出内容我们可以看到现在每一行日志的开头添加了一个错误号码（error code），不同的错误号码代表的意思可以在这个<a href=\"https://next.yarnpkg.com/advanced/error-codes\" target=\"_blank\" rel=\"noopener\">文档</a>中找到。这些错误号码可以让开发者快速定位错误并且可以更加方便地搜索到修复错误的办法。除了新增错误号码，输出日志在颜色上也有很大的改进，例如上面输出中会用鲜艳的颜色来突出依赖的名称以及它的版本号，这样可以更加方便开发者获取有用的信息。</p>\n<h3 id=\"Yarn-dlx\"><a href=\"#Yarn-dlx\" class=\"headerlink\" title=\"Yarn dlx\"></a>Yarn dlx</h3><p><a href=\"https://next.yarnpkg.com/cli/dlx\" target=\"_blank\" rel=\"noopener\">yarn dlx</a>的功能和<a href=\"https://github.com/npm/npx#readme\" target=\"_blank\" rel=\"noopener\">npx</a>类似。dlx是<code>download and execute</code>的简称，这个命令会在本地创建一个临时的环境来下载指定的依赖，依赖下载完成后，它会在当前的工作目录（cwd）中执行这个依赖包含的可执行二进制文件，这个临时的空间会在命令完成后被删除，所以这些操作都是一次性的。</p>\n<p><code>yarn dlx</code>这个命令不会改变当前项目的package.json的内容，而且它只可以执行远端的脚本而不能执行本地的脚本（本地脚本可以用yarn run来执行），所以它相对于npx有更高的安全性。 </p>\n<p>由于v2版本默认开启了<a href=\"https://next.yarnpkg.com/features/pnp\" target=\"_blank\" rel=\"noopener\">Plug’n’Play</a>的功能，当你使用了一次<code>yarn dlx</code>命令执行某个远端脚本后，这个脚本的依赖会被缓存到本地环境中，这样当它被再次执行的时候它就不需要下载依赖了，所以它的速度会变得很快。</p>\n<h3 id=\"更好的workspaces支持\"><a href=\"#更好的workspaces支持\" class=\"headerlink\" title=\"更好的workspaces支持\"></a>更好的workspaces支持</h3><p>v2版本一个最大的改变就是将<a href=\"https://next.yarnpkg.com/features/workspaces\" target=\"_blank\" rel=\"noopener\">workspaces</a>变成了一等公民（first-class citizen），这样就可以更好地支持<a href=\"https://next.yarnpkg.com/advanced/lexicon#monorepository\" target=\"_blank\" rel=\"noopener\">monorepo</a>的开发了。v2版本对workspaces的支持体现在以下这些方面：</p>\n<h4 id=\"yarn-add-添加交互模式（interactive-mode）\"><a href=\"#yarn-add-添加交互模式（interactive-mode）\" class=\"headerlink\" title=\"yarn add 添加交互模式（interactive mode）\"></a>yarn add 添加交互模式（interactive mode）</h4><p>假如你要在项目的某个workspace中引入某个依赖，你可能要考虑其他workspaces是否也用到了这个依赖，而且要避免引入不兼容的版本。v2版本中，你可以使用<code>-i</code>参数来让<code>yarn add</code>命令进入到交互模式，这样yarn就会帮你检查这个依赖有没有在其他workspaces中被使用，并且会让你选择是要复用其他workspaces中的依赖版本还是使用另外的版本。<br><img src=\"/images/yarn2/add-interactive.png\" alt=\"\"></p>\n<h4 id=\"一次更新所有workspaces某个依赖的版本\"><a href=\"#一次更新所有workspaces某个依赖的版本\" class=\"headerlink\" title=\"一次更新所有workspaces某个依赖的版本\"></a>一次更新所有workspaces某个依赖的版本</h4><p>v2版本新加了一个<code>yarn up</code>命令。这个命令和<code>yarn upgrade</code>命令类似，都是用来更新某个依赖的版本的。和<code>yarn upgrade</code>不同的是它可以同时更新所有workspaces的该依赖的版本，而不用切换到各个workspace中运行更新命令。这个命令同样具有交互模式<code>-i</code>来让你确认在不同workspace进行的具体操作。</p>\n<h4 id=\"自动发布关联的workspaces\"><a href=\"#自动发布关联的workspaces\" class=\"headerlink\" title=\"自动发布关联的workspaces\"></a>自动发布关联的workspaces</h4><p>有参与过monorepo开发的同学们一定会遇到过这样的问题：当某个包（workspace）发布了新的版本之后，发布其它相关联的包十分麻烦。如果你在项目中使用的是<a href=\"https://github.com/lerna/lerna\" target=\"_blank\" rel=\"noopener\">Lerna</a>，当你发布一个包的新版本的时候，你要么所有的包都要发布新的版本，要么你得自己手动来管理其他包的版本发布。虽然自己来管理其它包的发布也是可以的，可是人为的东西肯定会存在疏忽，而且多人协作的项目会让人很头疼。为了解决这个问题，Yarn v2版本采取了和Lerna以及其他类似工具完全不同的解决方案，它把这部分逻辑放在了一个单独的叫做<a href=\"https://next.yarnpkg.com/features/release-workflow\" target=\"_blank\" rel=\"noopener\">version的插件</a>中。version插件允许你将一部分包版本管理工作分发给你的代码贡献者，而且它还提供了一个友好的交互界面来让你十分容易地管理关联包的发布：<br><img src=\"/images/yarn2/version.png\" alt=\"\"></p>\n<h4 id=\"在多个workspaces中运行相同的命令\"><a href=\"#在多个workspaces中运行相同的命令\" class=\"headerlink\" title=\"在多个workspaces中运行相同的命令\"></a>在多个workspaces中运行相同的命令</h4><p>在同一个项目的不同workspaces中运行同一个命令是很常见的情形，Yarn v2版本提供了一个新的<code>yarn workspaces foreach</code>命令来让你在多个workspaces中运行同一个命令，这个命令是由它内置的<a href=\"https://github.com/yarnpkg/berry/tree/master/packages/plugin-workspace-tools\" target=\"_blank\" rel=\"noopener\">workspace-tools插件</a>支持的，例如以下命令会在所有的workspaces中运行build命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">yarn workspaces foreach run build</span></pre></td></tr></table></figure>\n<h4 id=\"给所有workspaces添加约束（contraints）\"><a href=\"#给所有workspaces添加约束（contraints）\" class=\"headerlink\" title=\"给所有workspaces添加约束（contraints）\"></a>给所有workspaces添加约束（contraints）</h4><p>有时候你希望同一个项目的所有workspaces都要遵循某些规则，例如<code>所有的workspaces都不能使用underscore作为依赖</code>又或者<code>所有workspaces依赖的某个包版本要互相兼容</code>等。v2版本有一个新的概念叫做<a href=\"https://next.yarnpkg.com/features/constraints\" target=\"_blank\" rel=\"noopener\">约束</a>（Constraints），这里的约束是对项目内各个workspaces的<code>package.json</code>进行的约束，就像ESLint对JS文件进行约束一样，它会在workspaces的package.json破坏了某些规则之后给你错误提示并且可以帮你修复其中一部分错误。</p>\n<p>Yarn的约束规则是用<a href=\"!https://baike.baidu.com/item/%E9%80%BB%E8%BE%91%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/20864034?fromtitle=Prolog&fromid=8379187&fr=aladdin\">Prolog</a>语法来编写的。想要为你的workspaces添加约束，你首先得引入<code>constraints</code>插件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">yarn plugin import constraints</span></pre></td></tr></table></figure>\n<p>然后在项目的根目录定义一个存放约束规则的<code>constraints.pro</code>文件，最后在这个文件中定义你想要的约束条件，例如以下的约束条件会禁止所有的workspaces将underscore作为依赖：</p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">gen_enforced_dependency(<span class=\"symbol\">WorkspaceCwd</span>, <span class=\"string\">'underscore'</span>, null, <span class=\"symbol\">DependencyType</span>) :-</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  workspace_has_dependency(<span class=\"symbol\">WorkspaceCwd</span>, <span class=\"string\">'underscore'</span>, <span class=\"symbol\">_</span>, <span class=\"symbol\">DependencyType</span>).</span></pre></td></tr></table></figure>\n<p>约束规则定义完后可以使用<code>yarn constraints check</code>命令来校验项目的workspaces是否满足定义的约束规则，当有错误发生时，可以使用<code>yarn constraints fix</code>命令自动修复那些可以被自动修复的错误。</p>\n<h4 id=\"像搜索数据库一样查询workspaces的依赖信息\"><a href=\"#像搜索数据库一样查询workspaces的依赖信息\" class=\"headerlink\" title=\"像搜索数据库一样查询workspaces的依赖信息\"></a>像搜索数据库一样查询workspaces的依赖信息</h4><p><code>yarn constraints query</code>命令可以查询项目中的workspaces用到的依赖信息，例如以下命令会输出各个workspace使用到的lodash版本信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">my-project: yarn constraints query <span class=\"string\">\"workspace_has_dependency(Cwd, 'lodash', Range, _).\"</span></span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">➤ YN0000: ┌ Cwd   = 'packages/backend'</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">➤ YN0000: └ Range = '4.17.0'</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">➤ YN0000: ┌ Cwd   = 'packages/frontend'</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">➤ YN0000: └ Range = '4.17.0'</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">➤ YN0000: Done with warnings in 0.03s</span></pre></td></tr></table></figure>\n<p>个人感觉上面的依赖查询很像在MySQL数据库里面用SELECT语法查询数据库，是一个十分强大而且有用的功能。</p>\n<h3 id=\"依赖零安装-（Zero-Installs）\"><a href=\"#依赖零安装-（Zero-Installs）\" class=\"headerlink\" title=\"依赖零安装 （Zero-Installs）\"></a>依赖零安装 （Zero-Installs）</h3><p><a href=\"https://next.yarnpkg.com/features/zero-installs\" target=\"_blank\" rel=\"noopener\">依赖零安装</a>更像是一个理念而不是一个功能，它的思路是希望我们每次在使用git更新完代码后，不需要再次使用<code>yarn install</code>命令来更新本地仓库的依赖来提高开发效率和避免一些问题的发生。它的具体做法是让开发者将本地的依赖包也提交到远端的git仓库中，看到这里你可能会想：“不就是将node_modules也提交吗？这个做法很蠢吧！”。确实如果直接将node_modules提交到远端仓库的话，每次提交都是一个噩梦，因为node_modules的文件很多（几万个文件很常见），首先你上传和下载代码的速度会变得很慢，其次很影响别人对你的代码进行review。为了解决这个问题，v2版本默认开启了Plug’n’Play + zip loading的功能，这个功能开启后你的项目将不再存在node_modules文件夹，所有的依赖都会被压缩成一个文件放在特定的地方，由于压缩后的包体积很小，而且包的数量不会很多，所以就不会存在以上说到的node_modules存在的问题。</p>\n<p>可是为什么要做到依赖零安装呢？这是因为它有以下的好处：</p>\n<ul>\n<li>更好的开发体验<ul>\n<li>你每次使用<code>git pull</code>, <code>git checkout</code>, <code>git rebase</code>这些命令更新完你的代码后无需使用<code>yarn install</code>进行依赖的安装，这样可以避免一些问题的出现，例如别人更新了某个依赖的版本后，如果你没有进行对应的更新的话，你的代码会挂。</li>\n<li>代码review的时候可以更清楚哪些依赖发生了改变。</li>\n</ul>\n</li>\n<li>更快，更简单，更稳定的CI部署<ul>\n<li>由于每次部署代码的时候，<code>yarn install</code>占用的时间都是一个大头，去掉这个步骤后部署速度将会大大提升。</li>\n<li>不会存在本地运行没问题，发布线上环境的时候挂掉了的问题。</li>\n<li>不用你在CI文件里面进行一些安装依赖的配置。</li>\n</ul>\n</li>\n</ul>\n<p>想要看一下pnp + zip loading实际效果的同学可以看一下yarn v2版本的<a href=\"https://github.com/yarnpkg/berry\" target=\"_blank\" rel=\"noopener\">代码\n</a>，你可以看到它就是在自己仓库的<code>.yarn/cache</code>目录下存放了它所有的依赖：<br><img src=\"/images/yarn2/berry-pnp.png\" alt=\"\"></p>\n<h3 id=\"添加新的协议\"><a href=\"#添加新的协议\" class=\"headerlink\" title=\"添加新的协议\"></a>添加新的协议</h3><p>Yarn v2版本添加了两个新的协议：<code>patch</code>和<code>portal</code>协议。不知道什么是协议的同学可以看一下官网<a href=\"https://next.yarnpkg.com/features/protocols\" target=\"_blank\" rel=\"noopener\">介绍</a>，它大概是用来告诉yarn，定义在package.json文件里面的依赖是如何解析的。</p>\n<h4 id=\"Patch协议\"><a href=\"#Patch协议\" class=\"headerlink\" title=\"Patch协议\"></a>Patch协议</h4><p>我们日常开发中有时候会需要更改某个依赖的原代码来做一些试验性的东西，这个时候就可以使用这个patch协议了。我们先来看一下怎么使用：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"left-pad\"</span>: <span class=\"string\">\"patch:left-pad@1.3.0#./my-patch.patch\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>上面的package.json中定义了<code>left-pad</code>这个依赖是如何解析的，我们可以看到left-pad的解析其实就用到了patch协议，它表示项目中用到的left-pad代码是1.3.0这个版本的代码叠加上<code>./my-patch.patch</code>这个补丁，所谓的补丁就是我们自己对left-pad这个库的代码的更改，和git的diff文件类似。</p>\n<h4 id=\"Portal协议\"><a href=\"#Portal协议\" class=\"headerlink\" title=\"Portal协议\"></a>Portal协议</h4><p>Portal协议和原有的link协议类似。它的作用是告诉yarn项目中的某个依赖指向本地文件系统的某个软链接（symlink），其实和yarn link的作用是差不多的。和link协议不同的是，portal指向的是一些包（package），也就是有package.json文件的那种文件夹，而且yarn会去解析这个包中的transitive dependencies。关于portal协议和link协议的更具体的区别可以看<a href=\"https://next.yarnpkg.com/features/protocols#whats-the-difference-between-link-and-portal\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<h3 id=\"范式化shell脚本（Normalized-shell）\"><a href=\"#范式化shell脚本（Normalized-shell）\" class=\"headerlink\" title=\"范式化shell脚本（Normalized shell）\"></a>范式化shell脚本（Normalized shell）</h3><p>v2版本对Windows开发环境有了更好的兼容。你之前可能会遇到这样一个问题：你在package.json定义的script命令在OSX系统中可以运行，可是在windows电脑上却会报错。出现这个问题的原因是你在package.json中定义的script最终是通过Yarn创建一个子进程来执行的，而子进程的shell环境在Windows和OSX环境是不一样的（例如文件路径的写法就不一样）。为了解决这个问题，Yarn v2自带一个简单shell解析器（interpreter），这个解析器是用来兼容Windows和OSX shell环境的区别的，它覆盖了90%常用的shell脚本写法，所以正常来说你定义的shell脚本在Windows环境和OSX环境在这个解析器的兼容下都可以正常运行：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"redirect\"</span>: <span class=\"string\">\"node ./something.js &gt; hello.md\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"no-cross-env\"</span>: <span class=\"string\">\"NODE_ENV=prod webpack\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<h3 id=\"模块化代码架构\"><a href=\"#模块化代码架构\" class=\"headerlink\" title=\"模块化代码架构\"></a>模块化代码架构</h3><p>在前面已经提到Yarn v2版本已经转变为一个模块化的架构，并且它支持用户自定义Plugin去增强它的功能。用户自定义的插件可以获取到Yarn解析出的dependency tree信息以及一些其他的上下文信息，因此很容易就可以实现一些诸如<a href=\"https://lerna.js.org/\" target=\"_blank\" rel=\"noopener\">Lerna</a>，<a href=\"https://fable.io/blog/Introducing-Femto.html\" target=\"_blank\" rel=\"noopener\">Femoto</a>和<a href=\"https://github.com/ds300/patch-package\" target=\"_blank\" rel=\"noopener\">Patch-Package</a>的库。</p>\n<p>想要感受下Yarn的插件是怎么实现的同学可以看一下官方实现的<a href=\"https://github.com/yarnpkg/berry/tree/master/packages/plugin-typescript\" target=\"_blank\" rel=\"noopener\">typescript插件</a>。这个typescript插件对于用Typescript开发的同学来说十分有用，它可以在你使用<code>yarn add</code>命令添加依赖的时候同时也添加这个依赖对应的<code>@types/</code>包，这样你就可以避免很多手动的工作了。更多和插件的相关的内容可以查看这个<a href=\"https://next.yarnpkg.com/advanced/plugin-tutorial\" target=\"_blank\" rel=\"noopener\">教程</a>。</p>\n<h3 id=\"其他更新\"><a href=\"#其他更新\" class=\"headerlink\" title=\"其他更新\"></a>其他更新</h3><p>除了上面的提到的新的属性外，v2版本还有以下这些更新：</p>\n<ul>\n<li>Peer dependencies也可以在yarn link里面使用了</li>\n<li>Lockfile的格式变为了标准的YAML格式</li>\n<li>包只能依赖那些在package.json声明的依赖，不允许require那些没有声明的依赖</li>\n<li>范式化了配置文件</li>\n<li>…</li>\n</ul>\n<p>想要查看v2版本所有更新内容的朋友可以看Maël Nison的文章 - <a href=\"https://dev.to/arcanis/introducing-yarn-2-4eh1\" target=\"_blank\" rel=\"noopener\">Introducing Yarn 2</a>或者直接查看它的<a href=\"https://github.com/yarnpkg/berry/blob/master/CHANGELOG.md\" target=\"_blank\" rel=\"noopener\">change log</a>。</p>\n<h3 id=\"Yarn的未来计划\"><a href=\"#Yarn的未来计划\" class=\"headerlink\" title=\"Yarn的未来计划\"></a>Yarn的未来计划</h3><ul>\n<li>v1最后一个版本v1.22已经发布，作者从此不会再在v1的代码上添加任何新的功能了。Yarn所有的新功能都只会在v2版本的代码库上开发。</li>\n<li>v1的代码仓库将会被从<code>yarnpkg/yarn</code>迁移到<code>yarnpkg/legacy</code>，这个仓库会继续开放一定的时间用来修复一些bug，然后会在一两年后achieve掉。v2版本的代码由于历史遗留问题不会迁移到<code>yarnpkg/yarn</code>，而且会在未来很长的一段时间保留在<code>yarnpkg/berry</code>。</li>\n<li>v1的官方网站会被搬到legacy.yarnpkg.com，yarnpkg.com官网的内容已经是v2版本next.yarnpkg.com的内容了。</li>\n<li>npm仓库中，<code>legacy</code>标签指向的是最新的v1版本代码，<code>latest</code>标签会继续指向v1的最新版本的代码几周，然后指向v2的代码。<code>berry</code>标签将会一直指向v2版本的最新版本。</li>\n<li>大概在今年4月的时候，<a href=\"https://github.com/nodejs/docker-node/issues/1180\" target=\"_blank\" rel=\"noopener\">Node 14版本的Docker镜像可能会默认自带v2版本</a>，这样你就可以直接在容器里使用v2的功能了。</li>\n</ul>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><ul>\n<li><a href=\"https://next.yarnpkg.com/\" target=\"_blank\" rel=\"noopener\">Yarn berry官方文档</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=SU0N4y8S1Qc\" target=\"_blank\" rel=\"noopener\">Yarn 2 - Reinventing package management - Maël Nison aka @arcanis at @ReactEurope 2019\n</a></li>\n<li><a href=\"https://dev.to/arcanis/introducing-yarn-2-4eh1\" target=\"_blank\" rel=\"noopener\">Introducing Yarn 2!</a></li>\n</ul>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt=\"\"></p>"},{"title":"实现JavaScript语言解释器（一）","thumbnail":"/gallery/thumbnails/simple-js.jpg","date":"2020-10-29T03:06:33.000Z","_content":"\n## 前言\n对于大多数前端开发者来说JavaScript可谓是我们最熟悉的编程语言了，它十分强大可是有些语言特性却十分难以理解，例如**闭包**和**this绑定等**概念往往会让初学者摸不着头脑。网上有很多诸如《你看完这篇还不懂this绑定就来砍我》之类的文章来为大家传道解惑。可是在我看来这些文章大多流于表面，你读了很多可能还是会被面试官问倒。 那么如何才能彻彻底底理解这些语言特性，从而在面试的时候立于不败之地呢？在我看来要想真的理解一样东西，最好的途径就是**实现**这样东西，这也是西方程序员非常喜欢说的**learning by implementing**。例如，你想更好地理解React，那么最好的办法就是你自己动手实现一个React。因此为了更好地理解JavaScript的语言特性，我就自己动手实现了一个叫做Simple的JavaScript语言解释器，这个解释器十分简单，它基于**TypeScript**实现了**JavaScript语法的子集**，主要包括下面这些功能：\n<!-- more-->\n* 基本数据类型\n* 复杂数据类型object, array和function\n* 变量定义\n* 数学运算\n* 逻辑运算\n* if条件判断\n* while，for循环\n* 函数式编程\n* 闭包\n* this绑定\n\n本系列文章正是笔者在实现完Simple语言解释器后写的整理性文章，它会包括下面这些部分：\n* 项目介绍和词法分析（本文）\n* 语法分析\n* 执行JavaScript代码\n\n虽然Simple的实现和V8引擎（或者其它JavaScript引擎）没什么关系，你也不能通过本系列文章来理解它们的源码，可是看完本系列文章后你将会有下面这些收获：\n* 加深对JavaScript语言的理解（this和闭包等）\n* 掌握编译原理的基础知识\n* 知道什么是DSL以及如何实现内部DSL来提高研发效率（Simple的语法分析是基于内部DSL的）\n\nSimple解释器的源代码已经开源在github上面了，地址是[https://github.com/XiaocongDong/simple](https://github.com/XiaocongDong/simple)，我还开发了一个简易的代码编辑器供大家把玩，地址是[https://superseany.com/opensource/simple/build/](https://superseany.com/opensource/simple/build/)，大家可以在这个编辑器里面编写和运行JavaScript代码，并且可以看到JavaScript代码生成的**单词（Token）**和**语法树（AST）**。\n\n接着就让我们进入本系列文章的第一部分 - 项目介绍和词法分析的内容。\n\n## 项目介绍\n### 编译器 vs 解释器\n在开始了解Simple的实现原理之前，我们先来搞清楚两个基本的编译原理概念：编译器（Compiler） vs 解释器（Interpreter）。\n#### 编译器\n编译器可以理解成语言的**转换器**，它会把源文件从一种形式的代码转换成另外一种形式的代码，它只是负责转换代码，**不会真正执行代码的逻辑**。在开发前端项目的过程中，我们用到的代码打包器Webpack其实就是一个JavaScript编译器，它只会打包我们的代码而不会执行它们。\n#### 解释器\n解释器顾名思义就是会对我们的代码进行**解释执行**，它和编译器不一样，它不会对源代码进行转换（最起码不会输出中间文件），而是边解释边执行源代码的逻辑。\n#### Simple解释器\n由于Simple不会对编写的JavaScript代码进行中间代码转换，它只会解释并且执行代码的逻辑，所以它是一个不折不扣的**JavaScript语言解释器**。\n\n### Simple的架构设计\n我们编写的代码其实就是保存在计算机硬盘上面的字符串文本，而实现语言解释器的本质其实就是`教会计算机如何才能理解并执行这些文本代码`。那么计算机如何才能理解我们写的东西呢？考虑到大多数编程语言都是用英语进行编码的，我们不妨先来看一下人是如何理解一个英语句子的，看能不能受到一些启发。\n#### 人理解英语句子的过程\n![](/images/simple/english-sentence.png)\n**Put a pencil on the table**。我相信大家肯定都知道这句话是什么意思，可是你是否有思考过你是如何**理解这句话**的呢？或者更进一步，你能不能将你理解这句话的过程拆分成一个个单独的步骤？\n\n我相信大多数人在理解上面这句话的过程中都会经历这些阶段：\n* **切割**单词，**理解**每个单词的意思：句子是由单词组成的，我们要理解句子的意思首先就要知道每个单词的意思。Put a pencil on the table这个句子每个单词的意思分别是：\n  * put: **动词**，放置。\n  * a: **不定冠词**，一个。\n  * pencil: **名词**，铅笔。\n  * on: **介词**，在...上面。\n  * the: **定冠词**，这张。\n  * table: **名词**，桌子。\n* 单词切割完后，我们就会根据**英语语法规则**划分句子的**结构**：在理解完句子每个单词的意思后，我们接着就会根据英语的语法规则来对句子进行结构的划分，例如对于上面这个句子，我们会这样进行划分：\n  * 因为句子第一个单词是动词put，而且动词后面跟的是不定冠词修饰的名词，所以这个句子应该是个**动词 + 名词**的祈使句，因此这句话的前半句的意思就是叫某人放（put）一支（a）铅笔（pencil）。\n  * 前半句解释完后，我们再看一下这个句子的后半句。后半句的开头是一个介词（on）然后接着一个定冠词修饰的名词（the table），所以它是用来修饰句子前半句的结构为**介词 + 名词**的**状语**，表示铅笔是放在这个桌子上的。\n  * 划分和理解完句子的结构后，我们自然也明白了这个句子的意思，那就是：将铅笔放在这张桌子上面。\n\n#### 计算机如何理解代码\n知道了我们是如何理解一个英语句子后，我们再来思考一下如何让计算机来理解我们的代码。我们都知道**计算机科学的很多知识都是对现实世界的建模**。举个例子，我们熟知的数据结构Queue对应的就是我们日常生活中经常会排的队，而一些设计模式，例如Visitor，Listener等都是对现实生活情景的建模。在计算机科学里面研究编程语言的学科叫做**编译原理**，那么编译原理的一些基本概念是如何和我们上面说到的人类理解句子的步骤一一对应起来的呢？\n\n上面说到我们理解一个句子的第一步是**切割单词然后理解每个单词的意思**，这一个步骤其实对应的就是编译原理中的**词法分析**（Lexical Analysis）。词法分析顾名思义就是在单词层面对代码进行解释，它主要会将代码字符串划分为一个个独立的单词（token）。\n\n在理解完每个单词的意思后我们会**根据英语语法规则划分句子的结构**，这个步骤对应的编译原理的概念是**语法分析**（Syntax Analysis/Parser）。语法分析的过程会将词法分析生成的单词串根据定义的**语法规则**生成一颗**抽象语法树**（AST）。生成的抽象语法树最后就会被一些**运行时**（runtime）执行。\n\n综上所述，一个语言解释器的软件架构大体是这样的：\n![](/images/simple/architecture.png)\n\n上面其实也就是Simple的软件架构，接着让我们来看一下词法分析的具体实现。\n## 词法分析\n前面已经说过，所谓的**词法分析**就是将文件的代码**以单词（token）为单位切割成一个个独立的单元**。这里要注意的是编译原理的单词和英文里面的单词不是等同的概念，在编译原理里面，除了`let`，`for`和`while`等用字母连接起来的字符串是单词，一些诸如`=`，`==`，`&&`和`+`等非字母连接起来的字符串也是合法的单词。对于Simple解释器来说，下面都是一些合法的单词：\n* 关键字：let，const，break，continue，if，else，while，function，true，false，for，undefined，null，new，return\n* 标识符：主要是一些开发者定义的变量名字，例如arr，server，result等\n* 字面量：字面量包括数字字面量（number）和字符串字面量（string），Simple解释器只支持单引号字符串，例如'this is a string literal'\n* 算术和逻辑运算符号：+，-，++，--，*，/，&&，||，>，>=，<，<=，==\n* 赋值运算符：=，+=，-=\n* 特殊符号：[，]，{，}，.，:，(，)\n\n这里要注意的是词法分析阶段不会保留源代码中所有的字符，一些无用的信息例如空格，换行和代码注释等都会在这个阶段被去掉。下面是一个词法分析的效果图：\n![](/images/simple/lexical-analysis.png)\n\n对于词法分析，大概有以下两种实现：\n### 正则表达式\n这个方法可能是大多数开发者都会想到的做法。由于Simple解释器没有使用这种做法，所以这里只会简单介绍一下流程，总体来说，它包含以下这些步骤：\n* 为各个单词类型定义对应的正则表达式，例如数字字面量的正则表达式是`/[0-9][0-9]*/`（不考虑浮点数的情况），简单赋值运算符的正则表达式是`/=/`，等于运算符的正则表达式是`/==/`。\n* 将各个单词类型的正则表达式按照**词法优先级顺序**依次和代码字符串进行**match**操作，如果某个单词类型的正则表达式有**命中**，就将对应的子字符串提取出来，然后从刚才命中的字符串**最后的位置**开始继续执行match操作，如此**循环反复**直到所有字符串都match完毕为止。这里有一个十分重要的点是不同的单词类型是有**词法优先级顺序**的，例如等于运算符`==`的优先级要比`=`的优先级要高，因为如果开发者写了两个等号，想表达的肯定是等于判断，而不是两个赋值符号。\n\n### 基于有限状态机\n由于**所有的正则表达式都可以转化为与其对应的有限状态机**，所以词法分析同样也可以使用有限状态机来实现。那么什么是有限状态机呢？\n\n有限状态机的英文名称是**Finite State Machine（FSM）**，它有下面这些特点：\n* 它的状态是**有限的**\n* 它同一个时刻只能有一个状态，也就是**当前状态**\n* 在接收到外界的数据后，有限状态机会根据**当前状态**以及**接收到的数据**计算出下一个状态并**转换**到该状态\n\n我们熟悉的红绿灯其实就是一个有限状态机的例子。红绿灯只能有三种颜色，分别是红色，绿色和黄色，所以它的状态集是有限的。由于红绿灯在某一个时刻只能有一种颜色（试想下红绿灯同时是红色和绿色会怎样：）），因此它当前的状态是唯一的。最后红绿灯会根据当前的状态（颜色）和输入（过了多少时间）装换成下一个状态，例如红灯过了60秒就会变黄灯而不能变绿灯。\n\n从上面的定义我们知道一个有限状态机最重要的是下面这三个要素：\n* 状态集\n* 当前状态\n* 不同状态之间如何扭转\n\n知道了什么是有限状态机和它的三要素之后，接着让我们来看一个使用简易有限状态机来做词法分析的例子。我们要设计的有限状态机可以识别下面类型的单词：\n* identifier（标识符）\n* number（数字字面量，不包含浮点数）\n* string（字符串字面量，单引号包起来的）\n* 加号（+）\n* 加号赋值运算符（+=）\n\n我们先来为这个有限状态机定义一下上面提到的状态机三要素：\n* 状态集：状态集应该包含状态机在接收到任何输入后出现的`所有状态`，对于上面的状态机会有下面的状态：\n  * initial：初始状态\n  * number：当状态机识别到数字字面量时会处于这个状态\n  * start string literal：当状态机接收到第一个单引号的时候并且没有接收到第二个单引号前（字符串还没结束）都是处于这个状态\n  * string literal：当状态机识别到字符串字面量时会处于这个状态\n  * identifier：当状态机识别到标识符会处于这个状态\n  * plus：当状态机识别到加号会处于这个状态\n  * plus assign：当前状态机识别到加号赋值运算符会处于这个状态\n* 当前状态：该有限状态机的当前状态可以是上面定义的任意一个状态\n* 不同状态之间如何扭转：当状态机处于某一个状态时，它只可以**扭转到某些特定的状态**。举个例子，如果状态机现在处于`start string literal`状态，它只可以维持当前状态或者转换到`string literal`状态。在当前输入不能让状态机进行状态扭转时，会有两种情况，第一种情况是当前状态是一个**可终止的状态**，也就是说当前状态机已经知道生成一个token需要的所有信息了，这个时候状态机会输出当前状态表示的单词类型，输出上一个单词后，状态机会重置为初始状态接着再重新处理刚才的输入；如果当前状态是个**非终止状态**的话，也就是说当前状态机还没有足够的信息输出一个单词，这个时候状态机会报错。在当前这个例子中，可终止状态有`number`，`string literal`和`identifier`，而非终止状态有`start string literal`。下面是这个状态机的状态扭转图：![](/images/simple/fsm.png)\n\n这里要注意的是状态机除了要存储当前的状态信息外，还要保留现在还没输出为单词的字符，也就是说要有一个`buffer`变量来存储遇到的字符输入。例如遇到`+`后，`buffer`会变成`+`，后面再遇到`=`，`buffer`会变为`+=`，最后`+=`被输出，`buffer`会被重置为空字符串`''`。\n\n状态机三要素定义完成后，我们就可以使用上面的状态机来对`a+='Simple'`这个字符串就行词法分析了：\n\n1. 刚开始的时候状态机会处于initial状态，接着状态机会逐个接收代码的每个字符并完成对应的状态扭转和单词输出\n2. 状态机接收到`a`字符，根据上面定义的状态扭转图我们知道该字符可以让状态机扭转为`identifier`这个状态，并且会将该字符保存在`buffer`这个变量里面\n3. 状态机接收到`+`字符，由于identifier不能根据`+`字符进行状态扭转了，而它当前又处于一个可终止状态（identifier状态）所以状态机会输出之前记录下来的`a`单词，然后将状态重置为`initial`。状态机重置状态后会重新处理`+`字符，这时候状态机装换为`plus`状态，并且将`+`这个字符记录下来，这时候`buffer`变为`+`\n4. 状态机接收到`=`字符，从上面的扭转图可以看出，状态机可以转换到`plus assign`这个状态，所以状态机会进行状态的扭转并记录下`=`这个字符，`buffer`变为`+=`\n5. 状态机接收到`'`字符，由于`plus assign`不能根据`'`字符进行状态转换，而`plus assign`又是一个可终止的状态，所以状态机会输出当前`buffer`记录的`+=`作为单词，并且将状态重置为`initial`。状态机重置状态后会重新处理`'`字符，这时候状态机转换为`start string literal`状态\n6. 当状态机分别接收到`S`，`i`，`m`，`p`，`l`和`e`时，由于它们都不是单引号，所以状态机会维持在`start string literal`这个状态，并且这些字符会被依次加入到`buffer`中，最后buffer会变为`Simple`\n7. 状态机接收到`'`字符，状态机转换到`string literal`状态，这就意味着状态机已经识别到一个合法的字符串单词了\n8. 最后状态机判断没有字符可以输入后，它会看一下当前的状态是否是可终止状态，由于`string literal`是可终止状态，所以状态机会输出当前单词。反之，如果状态机发现没有新的字符可以输入而自己又处于一个非终止的状态，它就会抛一个叫做`Unexpected EOF`的错误\n\n以上就是使用有限状态机来实现词法分析器的一个简单例子，Simple解释器的词法分析实现和上面的步骤是一样的。在Simple解释器中，我将状态机的核心逻辑（记录当前状态和进行状态扭转）和状态机的配置（状态集的定义以及不同状态之间如何扭转）的逻辑解耦开来了，这样可以方便后面对Simple语言的词法规则进行修改和扩展，并且它还可以使用另外一个状态机配置来实现另外一门语言的词法分析。\n\n状态机的核心逻辑代码放在了`lib/lexer/Tokenizer.ts`文件里面，而状态机的配置则放在`lib/config/Tokenizer.ts`里面，下面是具体的源代码分析：\n#### 状态机配置定义\nSimple的状态机配置定义在[lib/config/Tokenizer.ts](https://github.com/XiaocongDong/simple/blob/master/lib/config/Tokenizer.ts)里面，下面是简化版的例子，具体代码可以到github上面看：\n```typescript\n// lib/config/Tokenizer.ts\n\n// State定义了Simple语言状态机所有可能的状态\nenum State {\n  INITIAL = 'INITIAL',\n  NUMBER_LITERAL = 'NUMBER_LITERAL',\n  IDENTIFER = 'IDENTIFER',\n  START_STRING_LITERAL = 'START_STRING_LITERAL',\n  STRING_LITERAL = 'STRING_LITERAL'\n  ...\n}\n\n// 状态扭转定义\nconst config: IConfig = {\n  initialState: State.INITIAL, // 定义状态机的初始状态\n  states: { // 枚举状态机所有的状态配置\n    [State.INITIAL]: {\n      isEnd: false, // 表示该状态是否是可终止状态\n      transitions: [ // 枚举状态机所有的状态转换\n        {\n          state: State.NUMBER_LITERAL,\n          checker: /[0-9]/\n        },\n        {\n          state: State.START_STRING_LITERAL,\n          checker: \"'\"\n        }\n    },\n    [State.NUMBER_LITERAL]: {\n      isEnd: true,\n      TokenType: TOKEN_TYPE.NUMBER_LITERAL,\n      transitions: [\n        {\n          state: State.NUMBER_LITERAL,\n          checker: /[0-9\\.]/\n        }\n      ]\n    },\n    [State.START_STRING_LITERAL]: {\n      isEnd: false,\n      transitions: [\n        {\n          state: State.START_STRING_LITERAL,\n          checker: /[^']/\n        },\n        {\n          state: State.STRING_LITERAL,\n          checker: \"'\"\n        }\n      ]\n    },\n    [State.STRING_LITERAL]: {\n      isEnd: true,\n      TokenType: TOKEN_TYPE.STRING_LITERAL\n    },\n    ...\n  }\n}\n```\n上面的配置文件定义了一个`config`对象，该对象会作为参数传递给`lib/lexer/Tokenizer.ts`里面的有限状态机类`Tokenizer`。这个config对象有两个参数，一个是初始状态值，一个是该状态机的所有状态配置`states`。初始状态值就是状态机刚开始的状态值，同时在状态机识别到一个新的单词后，它也会重置为这个状态。`states`是一个`Object`类型的对象，它的key是某个状态的值，而value则是这个状态对应的配置，一个状态的配置包括下面这些内容:\n* isEnd: boolean，代表这个状态是否是可终止状态\n* TokenType: 代表这个状态对应的单词类型。如果该状态是个可终止状态，它就可以有对应的单词类型。如果TokenType没有指定，即使有单词匹配成功也不会生成对应的单词。\n* transitions: 里面存储了这个状态所有可能的状态转换（transition），每个状态转换会有下面这些属性：\n  * state：要转换到的状态\n  * checker：状态转换的条件，可以是字符串，正则表达式或者是一个返回布尔值的函数，当输入满足checker的条件时状态机就会发生状态转换\n\n#### 状态机核心逻辑实现\n上面看了Simple状态机的配置后，我们再来看一下使用该配置的状态机的核心代码`lib/Lexer/Tokenizer.ts`。为了实现`Tokenizer`的功能，我设计了两个辅助类，一个是用于记录当前位置信息的`LocationKeeper`类，它是用来记录当前处理的字符在源文件的行数和列数的，这个类比较简单，这里不会详细介绍有兴趣的可以看源代码。另外一个类是`TokenBuffer`类，所有被状态机识别出的单词都会被存储到这个类的实例中，因此它需要提供一些方法对单词进行读写（read/write）操作，这个类会在`Tokenizer`类介绍完后介绍。\n\n我们先来看一下`Tokenizer`类处理输入字符的核心逻辑`consume(ch: string)`函数：\n```typescript\n// lib/lexer/Tokenizer.ts\nclass Tokenizer {\n  ...\n  consume(ch: string) {\n    // 如果输入字符是空格或者换行符而且当前的状态是初始状态的话，只更新当前位置信息\n    if ((ch === SPACE || ch === NEW_LINE) && this.state === this.initialState) {\n      this.locationKeeper.consume(ch)\n      return\n    }\n\n    // 接着会根据当前的状态和输入的字符进行状态扭转\n\n    // 获取当前状态的配置信息，this.state保存的是状态机当前的状态\n    const currentStateConfig: IStateConfig = this.statesConfig[this.state]\n    if (!currentStateConfig) {\n      // 开发者忘记配置这个状态了，我们也要报错，develper-friendly ：）\n      throw new Error(`Missing state config for ${this.state}`)\n    }\n\n    // 获取当前状态所有转换可能\n    const transitions = currentStateConfig.transitions\n    if (!transitions) {\n      // 如果当前状态不可以转换而且是可终止状态\n      if (currentStateConfig.isEnd) {\n        // 生成token，存进tokenBuffer里面\n        this.addToken(currentStateConfig.TokenType)\n        // 重置当前状态\n        this.reset()\n        // 再次消耗当前输入的字符\n        this.consume(ch)\n        return\n      }\n\n      // 当前状态不能转换而且是非终止状态的话就报错！\n      throw new SyntaxError(`Unexpected character ${ch}`, this.locationKeeper.getCurrentLocation())\n    }\n\n    // 将输入字符和checker进行比较以确定需要进行的状态转换\n    const targetTransition = transitions.find(({ checker }) => {\n      if (typeof checker === 'string') {\n        return ch === checker\n      }\n\n      if (checker instanceof RegExp) {\n        return checker.test(ch)\n      }\n\n      return checker(ch)\n    })\n    \n    // 不存在可以转换的状态\n    if (!targetTransition) {\n      // 是可终止状态\n      if (currentStateConfig.isEnd) {\n        if (currentStateConfig.TokenType) {\n          // 添加token到tokenBuffer实例\n          this.addToken(currentStateConfig.TokenType)\n        }\n        // 重置状态\n        this.reset()\n        // 重新消耗输入字符\n        this.consume(ch)\n        return\n      }\n\n      // 不存在可以转换的状态而现在又是非终止状态，我们只能报错了！\n      this.locationKeeper.consume(ch)\n      throw new SyntaxError('Invalid or unexpected token', this.locationKeeper.getCurrentLocation())      \n    }\n\n    // 下面的逻辑是状态成功扭转后进行的\n\n    // 更新当前记录的位置信息，代码的行数和列数\n    this.locationKeeper.consume(ch)\n\n    // 下面代码是为了记录当前单词的开始位置的\n    if (this.state === this.initialState && targetTransition.state !== this.initialState) {\n      this.locationKeeper.markLocation()\n    }\n\n    // 将当前状态转换为目标状态\n    this.state = targetTransition.state\n    // 将当前的字符加入到buffer里面\n    this.buffer += ch\n  }\n}\n```\n接着我们来看一下用来存储识别到的单词的类`TokenBuffer`的源代码：\n```typescript\n// lib/lexer/TokenBuffer.ts\nimport { IToken } from \"./types/token\"\n\nclass TokenBuffer {\n  // 存储当前已经识别出来的单词\n  private tokens: Array<IToken> = []\n  // 存储当前已经读到的单词的位置\n  private cursor: number = 0\n\n  // peek会返回当前的单词，它不会改变光标的位置，只会预读\n  peek() {\n    return this.tokens[this.cursor]\n  }\n\n  // 和peek不一样，它会读出当前的单词，因此会改变光标的位置\n  read() {\n    const currentToken = this.tokens[this.cursor]\n    const nextCursor = this.cursor < this.tokens.length ? ++this.cursor : this.tokens.length\n    this.cursor = nextCursor\n    return currentToken\n  }\n\n  // 取消上次的读取，将单词\"放\"回去\n  unread() {\n    const lastCursor = --this.cursor\n    this.cursor = lastCursor\n    return this.tokens[lastCursor]\n  }\n\n  // 写入新的token\n  write(token: IToken) {\n    this.tokens.push(token)\n  }\n\n  // 获取当前光标的位置\n  getCursor() {\n    return this.cursor\n  }\n\n  // 直接设置当期光标的位置，主要是在语法分析阶段进行回退用的\n  setCursor(cursor: number) {\n    this.cursor = cursor\n  }\n\n  // 以JSON格式输出当前的tokens\n  toJSON(): Array<IToken> {\n    return this.tokens\n  }\n\n  // 判断单词是否已经全部处理完毕了\n  isEmpty(): boolean {\n    return this.cursor === this.tokens.length\n  }\n}\n```\n细心的同学会发现我在实现上面的`TokenBuffer`时每次读取单词都只是移动光标，而没有真正将该单词从数组里面取出来，这样做的好处就是方便语法分析阶段在某个语法规则不匹配的时候回退之前读到的单词，从而使用另外一个语法规则来匹配。\n\n#### Token单词串\n最后我们再来看一下这个有限状态机识别到的Token串是什么样子的，下面是输入的代码：\n```javascript\nlet a = 'HelloWorld';\n```\n经过有限状态机的处理，输出的Token串是：\n```json\n[\n  {\n    \"type\": \"LET\",\n    \"value\": \"let\",\n    \"range\": {\n      \"start\": {\n        \"line\": 1,\n        \"column\": 1\n      },\n      \"end\": {\n        \"line\": 1,\n        \"column\": 3\n      }\n    }\n  },\n  {\n    \"type\": \"IDENTIFIER\",\n    \"value\": \"a\",\n    \"range\": {\n      \"start\": {\n        \"line\": 1,\n        \"column\": 5\n      },\n      \"end\": {\n        \"line\": 1,\n        \"column\": 5\n      }\n    }\n  },\n  {\n    \"type\": \"ASSIGN\",\n    \"value\": \"=\",\n    \"range\": {\n      \"start\": {\n        \"line\": 1,\n        \"column\": 7\n      },\n      \"end\": {\n        \"line\": 1,\n        \"column\": 7\n      }\n    }\n  },\n  {\n    \"type\": \"STRING_LITERAL\",\n    \"value\": \"'HelloWorld'\",\n    \"range\": {\n      \"start\": {\n        \"line\": 1,\n        \"column\": 9\n      },\n      \"end\": {\n        \"line\": 1,\n        \"column\": 20\n      }\n    }\n  },\n  {\n    \"type\": \"SEMICOLON\",\n    \"value\": \";\",\n    \"range\": {\n      \"start\": {\n        \"line\": 1,\n        \"column\": 21\n      },\n      \"end\": {\n        \"line\": 1,\n        \"column\": 21\n      }\n    }\n  }\n]\n```\n从上面的输出可以看出每个单词（token）都会有下面这些属性：\n* type: 单词的类型，也就是非终止状态里面定义的TokenType\n* value: 这个单词具体的值\n* range: 里面存储了这个单词的开始和结束的位置信息，包括行数和列数。这些位置信息会在代码报错的时候帮助开发者定位错误\n\n## 小结\n在本篇文章中我为大家介绍了Simple这个项目的`背景和内容`，然后再为大家介绍了一些简单的`编译原理`基础知识，最后再详述了如何使用`有限状态机`来实现`词法分析`并且解读了Simple项目对应的`源代码`。\n\n在下一篇文章中我将会为大家详细介绍`语法分析`的一些基本知识，以及普及一些`领域特定语言（DSL）`的基本概念，最后再详细介绍一下我是如何使用灵活的`DSL`来实现Simple语言的`语法分析`的。\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n\n![](/images/wechat_qr.jpg)\n","source":"_posts/实现JavaScript语言解释器-一.md","raw":"---\ntitle: 实现JavaScript语言解释器（一）\ntags:\n  - TypeScript\n  - Interpreter\n  - JavaScript\n  - 编译原理\nthumbnail: /gallery/thumbnails/simple-js.jpg\ndate: 2020-10-29 11:06:33\n---\n\n## 前言\n对于大多数前端开发者来说JavaScript可谓是我们最熟悉的编程语言了，它十分强大可是有些语言特性却十分难以理解，例如**闭包**和**this绑定等**概念往往会让初学者摸不着头脑。网上有很多诸如《你看完这篇还不懂this绑定就来砍我》之类的文章来为大家传道解惑。可是在我看来这些文章大多流于表面，你读了很多可能还是会被面试官问倒。 那么如何才能彻彻底底理解这些语言特性，从而在面试的时候立于不败之地呢？在我看来要想真的理解一样东西，最好的途径就是**实现**这样东西，这也是西方程序员非常喜欢说的**learning by implementing**。例如，你想更好地理解React，那么最好的办法就是你自己动手实现一个React。因此为了更好地理解JavaScript的语言特性，我就自己动手实现了一个叫做Simple的JavaScript语言解释器，这个解释器十分简单，它基于**TypeScript**实现了**JavaScript语法的子集**，主要包括下面这些功能：\n<!-- more-->\n* 基本数据类型\n* 复杂数据类型object, array和function\n* 变量定义\n* 数学运算\n* 逻辑运算\n* if条件判断\n* while，for循环\n* 函数式编程\n* 闭包\n* this绑定\n\n本系列文章正是笔者在实现完Simple语言解释器后写的整理性文章，它会包括下面这些部分：\n* 项目介绍和词法分析（本文）\n* 语法分析\n* 执行JavaScript代码\n\n虽然Simple的实现和V8引擎（或者其它JavaScript引擎）没什么关系，你也不能通过本系列文章来理解它们的源码，可是看完本系列文章后你将会有下面这些收获：\n* 加深对JavaScript语言的理解（this和闭包等）\n* 掌握编译原理的基础知识\n* 知道什么是DSL以及如何实现内部DSL来提高研发效率（Simple的语法分析是基于内部DSL的）\n\nSimple解释器的源代码已经开源在github上面了，地址是[https://github.com/XiaocongDong/simple](https://github.com/XiaocongDong/simple)，我还开发了一个简易的代码编辑器供大家把玩，地址是[https://superseany.com/opensource/simple/build/](https://superseany.com/opensource/simple/build/)，大家可以在这个编辑器里面编写和运行JavaScript代码，并且可以看到JavaScript代码生成的**单词（Token）**和**语法树（AST）**。\n\n接着就让我们进入本系列文章的第一部分 - 项目介绍和词法分析的内容。\n\n## 项目介绍\n### 编译器 vs 解释器\n在开始了解Simple的实现原理之前，我们先来搞清楚两个基本的编译原理概念：编译器（Compiler） vs 解释器（Interpreter）。\n#### 编译器\n编译器可以理解成语言的**转换器**，它会把源文件从一种形式的代码转换成另外一种形式的代码，它只是负责转换代码，**不会真正执行代码的逻辑**。在开发前端项目的过程中，我们用到的代码打包器Webpack其实就是一个JavaScript编译器，它只会打包我们的代码而不会执行它们。\n#### 解释器\n解释器顾名思义就是会对我们的代码进行**解释执行**，它和编译器不一样，它不会对源代码进行转换（最起码不会输出中间文件），而是边解释边执行源代码的逻辑。\n#### Simple解释器\n由于Simple不会对编写的JavaScript代码进行中间代码转换，它只会解释并且执行代码的逻辑，所以它是一个不折不扣的**JavaScript语言解释器**。\n\n### Simple的架构设计\n我们编写的代码其实就是保存在计算机硬盘上面的字符串文本，而实现语言解释器的本质其实就是`教会计算机如何才能理解并执行这些文本代码`。那么计算机如何才能理解我们写的东西呢？考虑到大多数编程语言都是用英语进行编码的，我们不妨先来看一下人是如何理解一个英语句子的，看能不能受到一些启发。\n#### 人理解英语句子的过程\n![](/images/simple/english-sentence.png)\n**Put a pencil on the table**。我相信大家肯定都知道这句话是什么意思，可是你是否有思考过你是如何**理解这句话**的呢？或者更进一步，你能不能将你理解这句话的过程拆分成一个个单独的步骤？\n\n我相信大多数人在理解上面这句话的过程中都会经历这些阶段：\n* **切割**单词，**理解**每个单词的意思：句子是由单词组成的，我们要理解句子的意思首先就要知道每个单词的意思。Put a pencil on the table这个句子每个单词的意思分别是：\n  * put: **动词**，放置。\n  * a: **不定冠词**，一个。\n  * pencil: **名词**，铅笔。\n  * on: **介词**，在...上面。\n  * the: **定冠词**，这张。\n  * table: **名词**，桌子。\n* 单词切割完后，我们就会根据**英语语法规则**划分句子的**结构**：在理解完句子每个单词的意思后，我们接着就会根据英语的语法规则来对句子进行结构的划分，例如对于上面这个句子，我们会这样进行划分：\n  * 因为句子第一个单词是动词put，而且动词后面跟的是不定冠词修饰的名词，所以这个句子应该是个**动词 + 名词**的祈使句，因此这句话的前半句的意思就是叫某人放（put）一支（a）铅笔（pencil）。\n  * 前半句解释完后，我们再看一下这个句子的后半句。后半句的开头是一个介词（on）然后接着一个定冠词修饰的名词（the table），所以它是用来修饰句子前半句的结构为**介词 + 名词**的**状语**，表示铅笔是放在这个桌子上的。\n  * 划分和理解完句子的结构后，我们自然也明白了这个句子的意思，那就是：将铅笔放在这张桌子上面。\n\n#### 计算机如何理解代码\n知道了我们是如何理解一个英语句子后，我们再来思考一下如何让计算机来理解我们的代码。我们都知道**计算机科学的很多知识都是对现实世界的建模**。举个例子，我们熟知的数据结构Queue对应的就是我们日常生活中经常会排的队，而一些设计模式，例如Visitor，Listener等都是对现实生活情景的建模。在计算机科学里面研究编程语言的学科叫做**编译原理**，那么编译原理的一些基本概念是如何和我们上面说到的人类理解句子的步骤一一对应起来的呢？\n\n上面说到我们理解一个句子的第一步是**切割单词然后理解每个单词的意思**，这一个步骤其实对应的就是编译原理中的**词法分析**（Lexical Analysis）。词法分析顾名思义就是在单词层面对代码进行解释，它主要会将代码字符串划分为一个个独立的单词（token）。\n\n在理解完每个单词的意思后我们会**根据英语语法规则划分句子的结构**，这个步骤对应的编译原理的概念是**语法分析**（Syntax Analysis/Parser）。语法分析的过程会将词法分析生成的单词串根据定义的**语法规则**生成一颗**抽象语法树**（AST）。生成的抽象语法树最后就会被一些**运行时**（runtime）执行。\n\n综上所述，一个语言解释器的软件架构大体是这样的：\n![](/images/simple/architecture.png)\n\n上面其实也就是Simple的软件架构，接着让我们来看一下词法分析的具体实现。\n## 词法分析\n前面已经说过，所谓的**词法分析**就是将文件的代码**以单词（token）为单位切割成一个个独立的单元**。这里要注意的是编译原理的单词和英文里面的单词不是等同的概念，在编译原理里面，除了`let`，`for`和`while`等用字母连接起来的字符串是单词，一些诸如`=`，`==`，`&&`和`+`等非字母连接起来的字符串也是合法的单词。对于Simple解释器来说，下面都是一些合法的单词：\n* 关键字：let，const，break，continue，if，else，while，function，true，false，for，undefined，null，new，return\n* 标识符：主要是一些开发者定义的变量名字，例如arr，server，result等\n* 字面量：字面量包括数字字面量（number）和字符串字面量（string），Simple解释器只支持单引号字符串，例如'this is a string literal'\n* 算术和逻辑运算符号：+，-，++，--，*，/，&&，||，>，>=，<，<=，==\n* 赋值运算符：=，+=，-=\n* 特殊符号：[，]，{，}，.，:，(，)\n\n这里要注意的是词法分析阶段不会保留源代码中所有的字符，一些无用的信息例如空格，换行和代码注释等都会在这个阶段被去掉。下面是一个词法分析的效果图：\n![](/images/simple/lexical-analysis.png)\n\n对于词法分析，大概有以下两种实现：\n### 正则表达式\n这个方法可能是大多数开发者都会想到的做法。由于Simple解释器没有使用这种做法，所以这里只会简单介绍一下流程，总体来说，它包含以下这些步骤：\n* 为各个单词类型定义对应的正则表达式，例如数字字面量的正则表达式是`/[0-9][0-9]*/`（不考虑浮点数的情况），简单赋值运算符的正则表达式是`/=/`，等于运算符的正则表达式是`/==/`。\n* 将各个单词类型的正则表达式按照**词法优先级顺序**依次和代码字符串进行**match**操作，如果某个单词类型的正则表达式有**命中**，就将对应的子字符串提取出来，然后从刚才命中的字符串**最后的位置**开始继续执行match操作，如此**循环反复**直到所有字符串都match完毕为止。这里有一个十分重要的点是不同的单词类型是有**词法优先级顺序**的，例如等于运算符`==`的优先级要比`=`的优先级要高，因为如果开发者写了两个等号，想表达的肯定是等于判断，而不是两个赋值符号。\n\n### 基于有限状态机\n由于**所有的正则表达式都可以转化为与其对应的有限状态机**，所以词法分析同样也可以使用有限状态机来实现。那么什么是有限状态机呢？\n\n有限状态机的英文名称是**Finite State Machine（FSM）**，它有下面这些特点：\n* 它的状态是**有限的**\n* 它同一个时刻只能有一个状态，也就是**当前状态**\n* 在接收到外界的数据后，有限状态机会根据**当前状态**以及**接收到的数据**计算出下一个状态并**转换**到该状态\n\n我们熟悉的红绿灯其实就是一个有限状态机的例子。红绿灯只能有三种颜色，分别是红色，绿色和黄色，所以它的状态集是有限的。由于红绿灯在某一个时刻只能有一种颜色（试想下红绿灯同时是红色和绿色会怎样：）），因此它当前的状态是唯一的。最后红绿灯会根据当前的状态（颜色）和输入（过了多少时间）装换成下一个状态，例如红灯过了60秒就会变黄灯而不能变绿灯。\n\n从上面的定义我们知道一个有限状态机最重要的是下面这三个要素：\n* 状态集\n* 当前状态\n* 不同状态之间如何扭转\n\n知道了什么是有限状态机和它的三要素之后，接着让我们来看一个使用简易有限状态机来做词法分析的例子。我们要设计的有限状态机可以识别下面类型的单词：\n* identifier（标识符）\n* number（数字字面量，不包含浮点数）\n* string（字符串字面量，单引号包起来的）\n* 加号（+）\n* 加号赋值运算符（+=）\n\n我们先来为这个有限状态机定义一下上面提到的状态机三要素：\n* 状态集：状态集应该包含状态机在接收到任何输入后出现的`所有状态`，对于上面的状态机会有下面的状态：\n  * initial：初始状态\n  * number：当状态机识别到数字字面量时会处于这个状态\n  * start string literal：当状态机接收到第一个单引号的时候并且没有接收到第二个单引号前（字符串还没结束）都是处于这个状态\n  * string literal：当状态机识别到字符串字面量时会处于这个状态\n  * identifier：当状态机识别到标识符会处于这个状态\n  * plus：当状态机识别到加号会处于这个状态\n  * plus assign：当前状态机识别到加号赋值运算符会处于这个状态\n* 当前状态：该有限状态机的当前状态可以是上面定义的任意一个状态\n* 不同状态之间如何扭转：当状态机处于某一个状态时，它只可以**扭转到某些特定的状态**。举个例子，如果状态机现在处于`start string literal`状态，它只可以维持当前状态或者转换到`string literal`状态。在当前输入不能让状态机进行状态扭转时，会有两种情况，第一种情况是当前状态是一个**可终止的状态**，也就是说当前状态机已经知道生成一个token需要的所有信息了，这个时候状态机会输出当前状态表示的单词类型，输出上一个单词后，状态机会重置为初始状态接着再重新处理刚才的输入；如果当前状态是个**非终止状态**的话，也就是说当前状态机还没有足够的信息输出一个单词，这个时候状态机会报错。在当前这个例子中，可终止状态有`number`，`string literal`和`identifier`，而非终止状态有`start string literal`。下面是这个状态机的状态扭转图：![](/images/simple/fsm.png)\n\n这里要注意的是状态机除了要存储当前的状态信息外，还要保留现在还没输出为单词的字符，也就是说要有一个`buffer`变量来存储遇到的字符输入。例如遇到`+`后，`buffer`会变成`+`，后面再遇到`=`，`buffer`会变为`+=`，最后`+=`被输出，`buffer`会被重置为空字符串`''`。\n\n状态机三要素定义完成后，我们就可以使用上面的状态机来对`a+='Simple'`这个字符串就行词法分析了：\n\n1. 刚开始的时候状态机会处于initial状态，接着状态机会逐个接收代码的每个字符并完成对应的状态扭转和单词输出\n2. 状态机接收到`a`字符，根据上面定义的状态扭转图我们知道该字符可以让状态机扭转为`identifier`这个状态，并且会将该字符保存在`buffer`这个变量里面\n3. 状态机接收到`+`字符，由于identifier不能根据`+`字符进行状态扭转了，而它当前又处于一个可终止状态（identifier状态）所以状态机会输出之前记录下来的`a`单词，然后将状态重置为`initial`。状态机重置状态后会重新处理`+`字符，这时候状态机装换为`plus`状态，并且将`+`这个字符记录下来，这时候`buffer`变为`+`\n4. 状态机接收到`=`字符，从上面的扭转图可以看出，状态机可以转换到`plus assign`这个状态，所以状态机会进行状态的扭转并记录下`=`这个字符，`buffer`变为`+=`\n5. 状态机接收到`'`字符，由于`plus assign`不能根据`'`字符进行状态转换，而`plus assign`又是一个可终止的状态，所以状态机会输出当前`buffer`记录的`+=`作为单词，并且将状态重置为`initial`。状态机重置状态后会重新处理`'`字符，这时候状态机转换为`start string literal`状态\n6. 当状态机分别接收到`S`，`i`，`m`，`p`，`l`和`e`时，由于它们都不是单引号，所以状态机会维持在`start string literal`这个状态，并且这些字符会被依次加入到`buffer`中，最后buffer会变为`Simple`\n7. 状态机接收到`'`字符，状态机转换到`string literal`状态，这就意味着状态机已经识别到一个合法的字符串单词了\n8. 最后状态机判断没有字符可以输入后，它会看一下当前的状态是否是可终止状态，由于`string literal`是可终止状态，所以状态机会输出当前单词。反之，如果状态机发现没有新的字符可以输入而自己又处于一个非终止的状态，它就会抛一个叫做`Unexpected EOF`的错误\n\n以上就是使用有限状态机来实现词法分析器的一个简单例子，Simple解释器的词法分析实现和上面的步骤是一样的。在Simple解释器中，我将状态机的核心逻辑（记录当前状态和进行状态扭转）和状态机的配置（状态集的定义以及不同状态之间如何扭转）的逻辑解耦开来了，这样可以方便后面对Simple语言的词法规则进行修改和扩展，并且它还可以使用另外一个状态机配置来实现另外一门语言的词法分析。\n\n状态机的核心逻辑代码放在了`lib/lexer/Tokenizer.ts`文件里面，而状态机的配置则放在`lib/config/Tokenizer.ts`里面，下面是具体的源代码分析：\n#### 状态机配置定义\nSimple的状态机配置定义在[lib/config/Tokenizer.ts](https://github.com/XiaocongDong/simple/blob/master/lib/config/Tokenizer.ts)里面，下面是简化版的例子，具体代码可以到github上面看：\n```typescript\n// lib/config/Tokenizer.ts\n\n// State定义了Simple语言状态机所有可能的状态\nenum State {\n  INITIAL = 'INITIAL',\n  NUMBER_LITERAL = 'NUMBER_LITERAL',\n  IDENTIFER = 'IDENTIFER',\n  START_STRING_LITERAL = 'START_STRING_LITERAL',\n  STRING_LITERAL = 'STRING_LITERAL'\n  ...\n}\n\n// 状态扭转定义\nconst config: IConfig = {\n  initialState: State.INITIAL, // 定义状态机的初始状态\n  states: { // 枚举状态机所有的状态配置\n    [State.INITIAL]: {\n      isEnd: false, // 表示该状态是否是可终止状态\n      transitions: [ // 枚举状态机所有的状态转换\n        {\n          state: State.NUMBER_LITERAL,\n          checker: /[0-9]/\n        },\n        {\n          state: State.START_STRING_LITERAL,\n          checker: \"'\"\n        }\n    },\n    [State.NUMBER_LITERAL]: {\n      isEnd: true,\n      TokenType: TOKEN_TYPE.NUMBER_LITERAL,\n      transitions: [\n        {\n          state: State.NUMBER_LITERAL,\n          checker: /[0-9\\.]/\n        }\n      ]\n    },\n    [State.START_STRING_LITERAL]: {\n      isEnd: false,\n      transitions: [\n        {\n          state: State.START_STRING_LITERAL,\n          checker: /[^']/\n        },\n        {\n          state: State.STRING_LITERAL,\n          checker: \"'\"\n        }\n      ]\n    },\n    [State.STRING_LITERAL]: {\n      isEnd: true,\n      TokenType: TOKEN_TYPE.STRING_LITERAL\n    },\n    ...\n  }\n}\n```\n上面的配置文件定义了一个`config`对象，该对象会作为参数传递给`lib/lexer/Tokenizer.ts`里面的有限状态机类`Tokenizer`。这个config对象有两个参数，一个是初始状态值，一个是该状态机的所有状态配置`states`。初始状态值就是状态机刚开始的状态值，同时在状态机识别到一个新的单词后，它也会重置为这个状态。`states`是一个`Object`类型的对象，它的key是某个状态的值，而value则是这个状态对应的配置，一个状态的配置包括下面这些内容:\n* isEnd: boolean，代表这个状态是否是可终止状态\n* TokenType: 代表这个状态对应的单词类型。如果该状态是个可终止状态，它就可以有对应的单词类型。如果TokenType没有指定，即使有单词匹配成功也不会生成对应的单词。\n* transitions: 里面存储了这个状态所有可能的状态转换（transition），每个状态转换会有下面这些属性：\n  * state：要转换到的状态\n  * checker：状态转换的条件，可以是字符串，正则表达式或者是一个返回布尔值的函数，当输入满足checker的条件时状态机就会发生状态转换\n\n#### 状态机核心逻辑实现\n上面看了Simple状态机的配置后，我们再来看一下使用该配置的状态机的核心代码`lib/Lexer/Tokenizer.ts`。为了实现`Tokenizer`的功能，我设计了两个辅助类，一个是用于记录当前位置信息的`LocationKeeper`类，它是用来记录当前处理的字符在源文件的行数和列数的，这个类比较简单，这里不会详细介绍有兴趣的可以看源代码。另外一个类是`TokenBuffer`类，所有被状态机识别出的单词都会被存储到这个类的实例中，因此它需要提供一些方法对单词进行读写（read/write）操作，这个类会在`Tokenizer`类介绍完后介绍。\n\n我们先来看一下`Tokenizer`类处理输入字符的核心逻辑`consume(ch: string)`函数：\n```typescript\n// lib/lexer/Tokenizer.ts\nclass Tokenizer {\n  ...\n  consume(ch: string) {\n    // 如果输入字符是空格或者换行符而且当前的状态是初始状态的话，只更新当前位置信息\n    if ((ch === SPACE || ch === NEW_LINE) && this.state === this.initialState) {\n      this.locationKeeper.consume(ch)\n      return\n    }\n\n    // 接着会根据当前的状态和输入的字符进行状态扭转\n\n    // 获取当前状态的配置信息，this.state保存的是状态机当前的状态\n    const currentStateConfig: IStateConfig = this.statesConfig[this.state]\n    if (!currentStateConfig) {\n      // 开发者忘记配置这个状态了，我们也要报错，develper-friendly ：）\n      throw new Error(`Missing state config for ${this.state}`)\n    }\n\n    // 获取当前状态所有转换可能\n    const transitions = currentStateConfig.transitions\n    if (!transitions) {\n      // 如果当前状态不可以转换而且是可终止状态\n      if (currentStateConfig.isEnd) {\n        // 生成token，存进tokenBuffer里面\n        this.addToken(currentStateConfig.TokenType)\n        // 重置当前状态\n        this.reset()\n        // 再次消耗当前输入的字符\n        this.consume(ch)\n        return\n      }\n\n      // 当前状态不能转换而且是非终止状态的话就报错！\n      throw new SyntaxError(`Unexpected character ${ch}`, this.locationKeeper.getCurrentLocation())\n    }\n\n    // 将输入字符和checker进行比较以确定需要进行的状态转换\n    const targetTransition = transitions.find(({ checker }) => {\n      if (typeof checker === 'string') {\n        return ch === checker\n      }\n\n      if (checker instanceof RegExp) {\n        return checker.test(ch)\n      }\n\n      return checker(ch)\n    })\n    \n    // 不存在可以转换的状态\n    if (!targetTransition) {\n      // 是可终止状态\n      if (currentStateConfig.isEnd) {\n        if (currentStateConfig.TokenType) {\n          // 添加token到tokenBuffer实例\n          this.addToken(currentStateConfig.TokenType)\n        }\n        // 重置状态\n        this.reset()\n        // 重新消耗输入字符\n        this.consume(ch)\n        return\n      }\n\n      // 不存在可以转换的状态而现在又是非终止状态，我们只能报错了！\n      this.locationKeeper.consume(ch)\n      throw new SyntaxError('Invalid or unexpected token', this.locationKeeper.getCurrentLocation())      \n    }\n\n    // 下面的逻辑是状态成功扭转后进行的\n\n    // 更新当前记录的位置信息，代码的行数和列数\n    this.locationKeeper.consume(ch)\n\n    // 下面代码是为了记录当前单词的开始位置的\n    if (this.state === this.initialState && targetTransition.state !== this.initialState) {\n      this.locationKeeper.markLocation()\n    }\n\n    // 将当前状态转换为目标状态\n    this.state = targetTransition.state\n    // 将当前的字符加入到buffer里面\n    this.buffer += ch\n  }\n}\n```\n接着我们来看一下用来存储识别到的单词的类`TokenBuffer`的源代码：\n```typescript\n// lib/lexer/TokenBuffer.ts\nimport { IToken } from \"./types/token\"\n\nclass TokenBuffer {\n  // 存储当前已经识别出来的单词\n  private tokens: Array<IToken> = []\n  // 存储当前已经读到的单词的位置\n  private cursor: number = 0\n\n  // peek会返回当前的单词，它不会改变光标的位置，只会预读\n  peek() {\n    return this.tokens[this.cursor]\n  }\n\n  // 和peek不一样，它会读出当前的单词，因此会改变光标的位置\n  read() {\n    const currentToken = this.tokens[this.cursor]\n    const nextCursor = this.cursor < this.tokens.length ? ++this.cursor : this.tokens.length\n    this.cursor = nextCursor\n    return currentToken\n  }\n\n  // 取消上次的读取，将单词\"放\"回去\n  unread() {\n    const lastCursor = --this.cursor\n    this.cursor = lastCursor\n    return this.tokens[lastCursor]\n  }\n\n  // 写入新的token\n  write(token: IToken) {\n    this.tokens.push(token)\n  }\n\n  // 获取当前光标的位置\n  getCursor() {\n    return this.cursor\n  }\n\n  // 直接设置当期光标的位置，主要是在语法分析阶段进行回退用的\n  setCursor(cursor: number) {\n    this.cursor = cursor\n  }\n\n  // 以JSON格式输出当前的tokens\n  toJSON(): Array<IToken> {\n    return this.tokens\n  }\n\n  // 判断单词是否已经全部处理完毕了\n  isEmpty(): boolean {\n    return this.cursor === this.tokens.length\n  }\n}\n```\n细心的同学会发现我在实现上面的`TokenBuffer`时每次读取单词都只是移动光标，而没有真正将该单词从数组里面取出来，这样做的好处就是方便语法分析阶段在某个语法规则不匹配的时候回退之前读到的单词，从而使用另外一个语法规则来匹配。\n\n#### Token单词串\n最后我们再来看一下这个有限状态机识别到的Token串是什么样子的，下面是输入的代码：\n```javascript\nlet a = 'HelloWorld';\n```\n经过有限状态机的处理，输出的Token串是：\n```json\n[\n  {\n    \"type\": \"LET\",\n    \"value\": \"let\",\n    \"range\": {\n      \"start\": {\n        \"line\": 1,\n        \"column\": 1\n      },\n      \"end\": {\n        \"line\": 1,\n        \"column\": 3\n      }\n    }\n  },\n  {\n    \"type\": \"IDENTIFIER\",\n    \"value\": \"a\",\n    \"range\": {\n      \"start\": {\n        \"line\": 1,\n        \"column\": 5\n      },\n      \"end\": {\n        \"line\": 1,\n        \"column\": 5\n      }\n    }\n  },\n  {\n    \"type\": \"ASSIGN\",\n    \"value\": \"=\",\n    \"range\": {\n      \"start\": {\n        \"line\": 1,\n        \"column\": 7\n      },\n      \"end\": {\n        \"line\": 1,\n        \"column\": 7\n      }\n    }\n  },\n  {\n    \"type\": \"STRING_LITERAL\",\n    \"value\": \"'HelloWorld'\",\n    \"range\": {\n      \"start\": {\n        \"line\": 1,\n        \"column\": 9\n      },\n      \"end\": {\n        \"line\": 1,\n        \"column\": 20\n      }\n    }\n  },\n  {\n    \"type\": \"SEMICOLON\",\n    \"value\": \";\",\n    \"range\": {\n      \"start\": {\n        \"line\": 1,\n        \"column\": 21\n      },\n      \"end\": {\n        \"line\": 1,\n        \"column\": 21\n      }\n    }\n  }\n]\n```\n从上面的输出可以看出每个单词（token）都会有下面这些属性：\n* type: 单词的类型，也就是非终止状态里面定义的TokenType\n* value: 这个单词具体的值\n* range: 里面存储了这个单词的开始和结束的位置信息，包括行数和列数。这些位置信息会在代码报错的时候帮助开发者定位错误\n\n## 小结\n在本篇文章中我为大家介绍了Simple这个项目的`背景和内容`，然后再为大家介绍了一些简单的`编译原理`基础知识，最后再详述了如何使用`有限状态机`来实现`词法分析`并且解读了Simple项目对应的`源代码`。\n\n在下一篇文章中我将会为大家详细介绍`语法分析`的一些基本知识，以及普及一些`领域特定语言（DSL）`的基本概念，最后再详细介绍一下我是如何使用灵活的`DSL`来实现Simple语言的`语法分析`的。\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n\n![](/images/wechat_qr.jpg)\n","slug":"实现JavaScript语言解释器-一","published":1,"updated":"2021-02-08T06:16:56.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0gqf6fo000hucnx4jb3a29o","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对于大多数前端开发者来说JavaScript可谓是我们最熟悉的编程语言了，它十分强大可是有些语言特性却十分难以理解，例如<strong>闭包</strong>和<strong>this绑定等</strong>概念往往会让初学者摸不着头脑。网上有很多诸如《你看完这篇还不懂this绑定就来砍我》之类的文章来为大家传道解惑。可是在我看来这些文章大多流于表面，你读了很多可能还是会被面试官问倒。 那么如何才能彻彻底底理解这些语言特性，从而在面试的时候立于不败之地呢？在我看来要想真的理解一样东西，最好的途径就是<strong>实现</strong>这样东西，这也是西方程序员非常喜欢说的<strong>learning by implementing</strong>。例如，你想更好地理解React，那么最好的办法就是你自己动手实现一个React。因此为了更好地理解JavaScript的语言特性，我就自己动手实现了一个叫做Simple的JavaScript语言解释器，这个解释器十分简单，它基于<strong>TypeScript</strong>实现了<strong>JavaScript语法的子集</strong>，主要包括下面这些功能：</p>\n<a id=\"more\"></a>\n<ul>\n<li>基本数据类型</li>\n<li>复杂数据类型object, array和function</li>\n<li>变量定义</li>\n<li>数学运算</li>\n<li>逻辑运算</li>\n<li>if条件判断</li>\n<li>while，for循环</li>\n<li>函数式编程</li>\n<li>闭包</li>\n<li>this绑定</li>\n</ul>\n<p>本系列文章正是笔者在实现完Simple语言解释器后写的整理性文章，它会包括下面这些部分：</p>\n<ul>\n<li>项目介绍和词法分析（本文）</li>\n<li>语法分析</li>\n<li>执行JavaScript代码</li>\n</ul>\n<p>虽然Simple的实现和V8引擎（或者其它JavaScript引擎）没什么关系，你也不能通过本系列文章来理解它们的源码，可是看完本系列文章后你将会有下面这些收获：</p>\n<ul>\n<li>加深对JavaScript语言的理解（this和闭包等）</li>\n<li>掌握编译原理的基础知识</li>\n<li>知道什么是DSL以及如何实现内部DSL来提高研发效率（Simple的语法分析是基于内部DSL的）</li>\n</ul>\n<p>Simple解释器的源代码已经开源在github上面了，地址是<a href=\"https://github.com/XiaocongDong/simple\" target=\"_blank\" rel=\"noopener\">https://github.com/XiaocongDong/simple</a>，我还开发了一个简易的代码编辑器供大家把玩，地址是<a href=\"https://superseany.com/opensource/simple/build/\" target=\"_blank\" rel=\"noopener\">https://superseany.com/opensource/simple/build/</a>，大家可以在这个编辑器里面编写和运行JavaScript代码，并且可以看到JavaScript代码生成的<strong>单词（Token）</strong>和<strong>语法树（AST）</strong>。</p>\n<p>接着就让我们进入本系列文章的第一部分 - 项目介绍和词法分析的内容。</p>\n<h2 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h2><h3 id=\"编译器-vs-解释器\"><a href=\"#编译器-vs-解释器\" class=\"headerlink\" title=\"编译器 vs 解释器\"></a>编译器 vs 解释器</h3><p>在开始了解Simple的实现原理之前，我们先来搞清楚两个基本的编译原理概念：编译器（Compiler） vs 解释器（Interpreter）。</p>\n<h4 id=\"编译器\"><a href=\"#编译器\" class=\"headerlink\" title=\"编译器\"></a>编译器</h4><p>编译器可以理解成语言的<strong>转换器</strong>，它会把源文件从一种形式的代码转换成另外一种形式的代码，它只是负责转换代码，<strong>不会真正执行代码的逻辑</strong>。在开发前端项目的过程中，我们用到的代码打包器Webpack其实就是一个JavaScript编译器，它只会打包我们的代码而不会执行它们。</p>\n<h4 id=\"解释器\"><a href=\"#解释器\" class=\"headerlink\" title=\"解释器\"></a>解释器</h4><p>解释器顾名思义就是会对我们的代码进行<strong>解释执行</strong>，它和编译器不一样，它不会对源代码进行转换（最起码不会输出中间文件），而是边解释边执行源代码的逻辑。</p>\n<h4 id=\"Simple解释器\"><a href=\"#Simple解释器\" class=\"headerlink\" title=\"Simple解释器\"></a>Simple解释器</h4><p>由于Simple不会对编写的JavaScript代码进行中间代码转换，它只会解释并且执行代码的逻辑，所以它是一个不折不扣的<strong>JavaScript语言解释器</strong>。</p>\n<h3 id=\"Simple的架构设计\"><a href=\"#Simple的架构设计\" class=\"headerlink\" title=\"Simple的架构设计\"></a>Simple的架构设计</h3><p>我们编写的代码其实就是保存在计算机硬盘上面的字符串文本，而实现语言解释器的本质其实就是<code>教会计算机如何才能理解并执行这些文本代码</code>。那么计算机如何才能理解我们写的东西呢？考虑到大多数编程语言都是用英语进行编码的，我们不妨先来看一下人是如何理解一个英语句子的，看能不能受到一些启发。</p>\n<h4 id=\"人理解英语句子的过程\"><a href=\"#人理解英语句子的过程\" class=\"headerlink\" title=\"人理解英语句子的过程\"></a>人理解英语句子的过程</h4><p><img src=\"/images/simple/english-sentence.png\" alt><br><strong>Put a pencil on the table</strong>。我相信大家肯定都知道这句话是什么意思，可是你是否有思考过你是如何<strong>理解这句话</strong>的呢？或者更进一步，你能不能将你理解这句话的过程拆分成一个个单独的步骤？</p>\n<p>我相信大多数人在理解上面这句话的过程中都会经历这些阶段：</p>\n<ul>\n<li><strong>切割</strong>单词，<strong>理解</strong>每个单词的意思：句子是由单词组成的，我们要理解句子的意思首先就要知道每个单词的意思。Put a pencil on the table这个句子每个单词的意思分别是：<ul>\n<li>put: <strong>动词</strong>，放置。</li>\n<li>a: <strong>不定冠词</strong>，一个。</li>\n<li>pencil: <strong>名词</strong>，铅笔。</li>\n<li>on: <strong>介词</strong>，在…上面。</li>\n<li>the: <strong>定冠词</strong>，这张。</li>\n<li>table: <strong>名词</strong>，桌子。</li>\n</ul>\n</li>\n<li>单词切割完后，我们就会根据<strong>英语语法规则</strong>划分句子的<strong>结构</strong>：在理解完句子每个单词的意思后，我们接着就会根据英语的语法规则来对句子进行结构的划分，例如对于上面这个句子，我们会这样进行划分：<ul>\n<li>因为句子第一个单词是动词put，而且动词后面跟的是不定冠词修饰的名词，所以这个句子应该是个<strong>动词 + 名词</strong>的祈使句，因此这句话的前半句的意思就是叫某人放（put）一支（a）铅笔（pencil）。</li>\n<li>前半句解释完后，我们再看一下这个句子的后半句。后半句的开头是一个介词（on）然后接着一个定冠词修饰的名词（the table），所以它是用来修饰句子前半句的结构为<strong>介词 + 名词</strong>的<strong>状语</strong>，表示铅笔是放在这个桌子上的。</li>\n<li>划分和理解完句子的结构后，我们自然也明白了这个句子的意思，那就是：将铅笔放在这张桌子上面。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"计算机如何理解代码\"><a href=\"#计算机如何理解代码\" class=\"headerlink\" title=\"计算机如何理解代码\"></a>计算机如何理解代码</h4><p>知道了我们是如何理解一个英语句子后，我们再来思考一下如何让计算机来理解我们的代码。我们都知道<strong>计算机科学的很多知识都是对现实世界的建模</strong>。举个例子，我们熟知的数据结构Queue对应的就是我们日常生活中经常会排的队，而一些设计模式，例如Visitor，Listener等都是对现实生活情景的建模。在计算机科学里面研究编程语言的学科叫做<strong>编译原理</strong>，那么编译原理的一些基本概念是如何和我们上面说到的人类理解句子的步骤一一对应起来的呢？</p>\n<p>上面说到我们理解一个句子的第一步是<strong>切割单词然后理解每个单词的意思</strong>，这一个步骤其实对应的就是编译原理中的<strong>词法分析</strong>（Lexical Analysis）。词法分析顾名思义就是在单词层面对代码进行解释，它主要会将代码字符串划分为一个个独立的单词（token）。</p>\n<p>在理解完每个单词的意思后我们会<strong>根据英语语法规则划分句子的结构</strong>，这个步骤对应的编译原理的概念是<strong>语法分析</strong>（Syntax Analysis/Parser）。语法分析的过程会将词法分析生成的单词串根据定义的<strong>语法规则</strong>生成一颗<strong>抽象语法树</strong>（AST）。生成的抽象语法树最后就会被一些<strong>运行时</strong>（runtime）执行。</p>\n<p>综上所述，一个语言解释器的软件架构大体是这样的：<br><img src=\"/images/simple/architecture.png\" alt></p>\n<p>上面其实也就是Simple的软件架构，接着让我们来看一下词法分析的具体实现。</p>\n<h2 id=\"词法分析\"><a href=\"#词法分析\" class=\"headerlink\" title=\"词法分析\"></a>词法分析</h2><p>前面已经说过，所谓的<strong>词法分析</strong>就是将文件的代码<strong>以单词（token）为单位切割成一个个独立的单元</strong>。这里要注意的是编译原理的单词和英文里面的单词不是等同的概念，在编译原理里面，除了<code>let</code>，<code>for</code>和<code>while</code>等用字母连接起来的字符串是单词，一些诸如<code>=</code>，<code>==</code>，<code>&amp;&amp;</code>和<code>+</code>等非字母连接起来的字符串也是合法的单词。对于Simple解释器来说，下面都是一些合法的单词：</p>\n<ul>\n<li>关键字：let，const，break，continue，if，else，while，function，true，false，for，undefined，null，new，return</li>\n<li>标识符：主要是一些开发者定义的变量名字，例如arr，server，result等</li>\n<li>字面量：字面量包括数字字面量（number）和字符串字面量（string），Simple解释器只支持单引号字符串，例如’this is a string literal’</li>\n<li>算术和逻辑运算符号：+，-，++，–，*，/，&amp;&amp;，||，&gt;，&gt;=，&lt;，&lt;=，==</li>\n<li>赋值运算符：=，+=，-=</li>\n<li>特殊符号：[，]，{，}，.，:，(，)</li>\n</ul>\n<p>这里要注意的是词法分析阶段不会保留源代码中所有的字符，一些无用的信息例如空格，换行和代码注释等都会在这个阶段被去掉。下面是一个词法分析的效果图：<br><img src=\"/images/simple/lexical-analysis.png\" alt></p>\n<p>对于词法分析，大概有以下两种实现：</p>\n<h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><p>这个方法可能是大多数开发者都会想到的做法。由于Simple解释器没有使用这种做法，所以这里只会简单介绍一下流程，总体来说，它包含以下这些步骤：</p>\n<ul>\n<li>为各个单词类型定义对应的正则表达式，例如数字字面量的正则表达式是<code>/[0-9][0-9]*/</code>（不考虑浮点数的情况），简单赋值运算符的正则表达式是<code>/=/</code>，等于运算符的正则表达式是<code>/==/</code>。</li>\n<li>将各个单词类型的正则表达式按照<strong>词法优先级顺序</strong>依次和代码字符串进行<strong>match</strong>操作，如果某个单词类型的正则表达式有<strong>命中</strong>，就将对应的子字符串提取出来，然后从刚才命中的字符串<strong>最后的位置</strong>开始继续执行match操作，如此<strong>循环反复</strong>直到所有字符串都match完毕为止。这里有一个十分重要的点是不同的单词类型是有<strong>词法优先级顺序</strong>的，例如等于运算符<code>==</code>的优先级要比<code>=</code>的优先级要高，因为如果开发者写了两个等号，想表达的肯定是等于判断，而不是两个赋值符号。</li>\n</ul>\n<h3 id=\"基于有限状态机\"><a href=\"#基于有限状态机\" class=\"headerlink\" title=\"基于有限状态机\"></a>基于有限状态机</h3><p>由于<strong>所有的正则表达式都可以转化为与其对应的有限状态机</strong>，所以词法分析同样也可以使用有限状态机来实现。那么什么是有限状态机呢？</p>\n<p>有限状态机的英文名称是<strong>Finite State Machine（FSM）</strong>，它有下面这些特点：</p>\n<ul>\n<li>它的状态是<strong>有限的</strong></li>\n<li>它同一个时刻只能有一个状态，也就是<strong>当前状态</strong></li>\n<li>在接收到外界的数据后，有限状态机会根据<strong>当前状态</strong>以及<strong>接收到的数据</strong>计算出下一个状态并<strong>转换</strong>到该状态</li>\n</ul>\n<p>我们熟悉的红绿灯其实就是一个有限状态机的例子。红绿灯只能有三种颜色，分别是红色，绿色和黄色，所以它的状态集是有限的。由于红绿灯在某一个时刻只能有一种颜色（试想下红绿灯同时是红色和绿色会怎样：）），因此它当前的状态是唯一的。最后红绿灯会根据当前的状态（颜色）和输入（过了多少时间）装换成下一个状态，例如红灯过了60秒就会变黄灯而不能变绿灯。</p>\n<p>从上面的定义我们知道一个有限状态机最重要的是下面这三个要素：</p>\n<ul>\n<li>状态集</li>\n<li>当前状态</li>\n<li>不同状态之间如何扭转</li>\n</ul>\n<p>知道了什么是有限状态机和它的三要素之后，接着让我们来看一个使用简易有限状态机来做词法分析的例子。我们要设计的有限状态机可以识别下面类型的单词：</p>\n<ul>\n<li>identifier（标识符）</li>\n<li>number（数字字面量，不包含浮点数）</li>\n<li>string（字符串字面量，单引号包起来的）</li>\n<li>加号（+）</li>\n<li>加号赋值运算符（+=）</li>\n</ul>\n<p>我们先来为这个有限状态机定义一下上面提到的状态机三要素：</p>\n<ul>\n<li>状态集：状态集应该包含状态机在接收到任何输入后出现的<code>所有状态</code>，对于上面的状态机会有下面的状态：<ul>\n<li>initial：初始状态</li>\n<li>number：当状态机识别到数字字面量时会处于这个状态</li>\n<li>start string literal：当状态机接收到第一个单引号的时候并且没有接收到第二个单引号前（字符串还没结束）都是处于这个状态</li>\n<li>string literal：当状态机识别到字符串字面量时会处于这个状态</li>\n<li>identifier：当状态机识别到标识符会处于这个状态</li>\n<li>plus：当状态机识别到加号会处于这个状态</li>\n<li>plus assign：当前状态机识别到加号赋值运算符会处于这个状态</li>\n</ul>\n</li>\n<li>当前状态：该有限状态机的当前状态可以是上面定义的任意一个状态</li>\n<li>不同状态之间如何扭转：当状态机处于某一个状态时，它只可以<strong>扭转到某些特定的状态</strong>。举个例子，如果状态机现在处于<code>start string literal</code>状态，它只可以维持当前状态或者转换到<code>string literal</code>状态。在当前输入不能让状态机进行状态扭转时，会有两种情况，第一种情况是当前状态是一个<strong>可终止的状态</strong>，也就是说当前状态机已经知道生成一个token需要的所有信息了，这个时候状态机会输出当前状态表示的单词类型，输出上一个单词后，状态机会重置为初始状态接着再重新处理刚才的输入；如果当前状态是个<strong>非终止状态</strong>的话，也就是说当前状态机还没有足够的信息输出一个单词，这个时候状态机会报错。在当前这个例子中，可终止状态有<code>number</code>，<code>string literal</code>和<code>identifier</code>，而非终止状态有<code>start string literal</code>。下面是这个状态机的状态扭转图：<img src=\"/images/simple/fsm.png\" alt></li>\n</ul>\n<p>这里要注意的是状态机除了要存储当前的状态信息外，还要保留现在还没输出为单词的字符，也就是说要有一个<code>buffer</code>变量来存储遇到的字符输入。例如遇到<code>+</code>后，<code>buffer</code>会变成<code>+</code>，后面再遇到<code>=</code>，<code>buffer</code>会变为<code>+=</code>，最后<code>+=</code>被输出，<code>buffer</code>会被重置为空字符串<code>&#39;&#39;</code>。</p>\n<p>状态机三要素定义完成后，我们就可以使用上面的状态机来对<code>a+=&#39;Simple&#39;</code>这个字符串就行词法分析了：</p>\n<ol>\n<li>刚开始的时候状态机会处于initial状态，接着状态机会逐个接收代码的每个字符并完成对应的状态扭转和单词输出</li>\n<li>状态机接收到<code>a</code>字符，根据上面定义的状态扭转图我们知道该字符可以让状态机扭转为<code>identifier</code>这个状态，并且会将该字符保存在<code>buffer</code>这个变量里面</li>\n<li>状态机接收到<code>+</code>字符，由于identifier不能根据<code>+</code>字符进行状态扭转了，而它当前又处于一个可终止状态（identifier状态）所以状态机会输出之前记录下来的<code>a</code>单词，然后将状态重置为<code>initial</code>。状态机重置状态后会重新处理<code>+</code>字符，这时候状态机装换为<code>plus</code>状态，并且将<code>+</code>这个字符记录下来，这时候<code>buffer</code>变为<code>+</code></li>\n<li>状态机接收到<code>=</code>字符，从上面的扭转图可以看出，状态机可以转换到<code>plus assign</code>这个状态，所以状态机会进行状态的扭转并记录下<code>=</code>这个字符，<code>buffer</code>变为<code>+=</code></li>\n<li>状态机接收到<code>&#39;</code>字符，由于<code>plus assign</code>不能根据<code>&#39;</code>字符进行状态转换，而<code>plus assign</code>又是一个可终止的状态，所以状态机会输出当前<code>buffer</code>记录的<code>+=</code>作为单词，并且将状态重置为<code>initial</code>。状态机重置状态后会重新处理<code>&#39;</code>字符，这时候状态机转换为<code>start string literal</code>状态</li>\n<li>当状态机分别接收到<code>S</code>，<code>i</code>，<code>m</code>，<code>p</code>，<code>l</code>和<code>e</code>时，由于它们都不是单引号，所以状态机会维持在<code>start string literal</code>这个状态，并且这些字符会被依次加入到<code>buffer</code>中，最后buffer会变为<code>Simple</code></li>\n<li>状态机接收到<code>&#39;</code>字符，状态机转换到<code>string literal</code>状态，这就意味着状态机已经识别到一个合法的字符串单词了</li>\n<li>最后状态机判断没有字符可以输入后，它会看一下当前的状态是否是可终止状态，由于<code>string literal</code>是可终止状态，所以状态机会输出当前单词。反之，如果状态机发现没有新的字符可以输入而自己又处于一个非终止的状态，它就会抛一个叫做<code>Unexpected EOF</code>的错误</li>\n</ol>\n<p>以上就是使用有限状态机来实现词法分析器的一个简单例子，Simple解释器的词法分析实现和上面的步骤是一样的。在Simple解释器中，我将状态机的核心逻辑（记录当前状态和进行状态扭转）和状态机的配置（状态集的定义以及不同状态之间如何扭转）的逻辑解耦开来了，这样可以方便后面对Simple语言的词法规则进行修改和扩展，并且它还可以使用另外一个状态机配置来实现另外一门语言的词法分析。</p>\n<p>状态机的核心逻辑代码放在了<code>lib/lexer/Tokenizer.ts</code>文件里面，而状态机的配置则放在<code>lib/config/Tokenizer.ts</code>里面，下面是具体的源代码分析：</p>\n<h4 id=\"状态机配置定义\"><a href=\"#状态机配置定义\" class=\"headerlink\" title=\"状态机配置定义\"></a>状态机配置定义</h4><p>Simple的状态机配置定义在<a href=\"https://github.com/XiaocongDong/simple/blob/master/lib/config/Tokenizer.ts\" target=\"_blank\" rel=\"noopener\">lib/config/Tokenizer.ts</a>里面，下面是简化版的例子，具体代码可以到github上面看：</p>\n<figure class=\"highlight typescript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// lib/config/Tokenizer.ts</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// State定义了Simple语言状态机所有可能的状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">enum</span> State &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  INITIAL = <span class=\"hljs-string\">'INITIAL'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  NUMBER_LITERAL = <span class=\"hljs-string\">'NUMBER_LITERAL'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  IDENTIFER = <span class=\"hljs-string\">'IDENTIFER'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  START_STRING_LITERAL = <span class=\"hljs-string\">'START_STRING_LITERAL'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  STRING_LITERAL = <span class=\"hljs-string\">'STRING_LITERAL'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 状态扭转定义</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> config: IConfig = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  initialState: State.INITIAL, <span class=\"hljs-comment\">// 定义状态机的初始状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  states: &#123; <span class=\"hljs-comment\">// 枚举状态机所有的状态配置</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    [State.INITIAL]: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      isEnd: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// 表示该状态是否是可终止状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      transitions: [ <span class=\"hljs-comment\">// 枚举状态机所有的状态转换</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">          state: State.NUMBER_LITERAL,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">          checker: <span class=\"hljs-regexp\">/[0-9]/</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">          state: State.START_STRING_LITERAL,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">          checker: <span class=\"hljs-string\">\"'\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    [State.NUMBER_LITERAL]: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">      isEnd: <span class=\"hljs-literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">      TokenType: TOKEN_TYPE.NUMBER_LITERAL,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">      transitions: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">          state: State.NUMBER_LITERAL,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">          checker: <span class=\"hljs-regexp\">/[0-9\\.]/</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">      ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">    [State.START_STRING_LITERAL]: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">      isEnd: <span class=\"hljs-literal\">false</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">      transitions: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">          state: State.START_STRING_LITERAL,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">          checker: <span class=\"hljs-regexp\">/[^']/</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">          state: State.STRING_LITERAL,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">          checker: <span class=\"hljs-string\">\"'\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">      ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">    [State.STRING_LITERAL]: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">      isEnd: <span class=\"hljs-literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">      TokenType: TOKEN_TYPE.STRING_LITERAL</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>上面的配置文件定义了一个<code>config</code>对象，该对象会作为参数传递给<code>lib/lexer/Tokenizer.ts</code>里面的有限状态机类<code>Tokenizer</code>。这个config对象有两个参数，一个是初始状态值，一个是该状态机的所有状态配置<code>states</code>。初始状态值就是状态机刚开始的状态值，同时在状态机识别到一个新的单词后，它也会重置为这个状态。<code>states</code>是一个<code>Object</code>类型的对象，它的key是某个状态的值，而value则是这个状态对应的配置，一个状态的配置包括下面这些内容:</p>\n<ul>\n<li>isEnd: boolean，代表这个状态是否是可终止状态</li>\n<li>TokenType: 代表这个状态对应的单词类型。如果该状态是个可终止状态，它就可以有对应的单词类型。如果TokenType没有指定，即使有单词匹配成功也不会生成对应的单词。</li>\n<li>transitions: 里面存储了这个状态所有可能的状态转换（transition），每个状态转换会有下面这些属性：<ul>\n<li>state：要转换到的状态</li>\n<li>checker：状态转换的条件，可以是字符串，正则表达式或者是一个返回布尔值的函数，当输入满足checker的条件时状态机就会发生状态转换</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"状态机核心逻辑实现\"><a href=\"#状态机核心逻辑实现\" class=\"headerlink\" title=\"状态机核心逻辑实现\"></a>状态机核心逻辑实现</h4><p>上面看了Simple状态机的配置后，我们再来看一下使用该配置的状态机的核心代码<code>lib/Lexer/Tokenizer.ts</code>。为了实现<code>Tokenizer</code>的功能，我设计了两个辅助类，一个是用于记录当前位置信息的<code>LocationKeeper</code>类，它是用来记录当前处理的字符在源文件的行数和列数的，这个类比较简单，这里不会详细介绍有兴趣的可以看源代码。另外一个类是<code>TokenBuffer</code>类，所有被状态机识别出的单词都会被存储到这个类的实例中，因此它需要提供一些方法对单词进行读写（read/write）操作，这个类会在<code>Tokenizer</code>类介绍完后介绍。</p>\n<p>我们先来看一下<code>Tokenizer</code>类处理输入字符的核心逻辑<code>consume(ch: string)</code>函数：</p>\n<figure class=\"highlight typescript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// lib/lexer/Tokenizer.ts</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">class</span> Tokenizer &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  consume(ch: <span class=\"hljs-built_in\">string</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 如果输入字符是空格或者换行符而且当前的状态是初始状态的话，只更新当前位置信息</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span> ((ch === SPACE || ch === NEW_LINE) &amp;&amp; <span class=\"hljs-keyword\">this</span>.state === <span class=\"hljs-keyword\">this</span>.initialState) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.locationKeeper.consume(ch)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">return</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 接着会根据当前的状态和输入的字符进行状态扭转</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 获取当前状态的配置信息，this.state保存的是状态机当前的状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">const</span> currentStateConfig: IStateConfig = <span class=\"hljs-keyword\">this</span>.statesConfig[<span class=\"hljs-keyword\">this</span>.state]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (!currentStateConfig) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-comment\">// 开发者忘记配置这个状态了，我们也要报错，develper-friendly ：）</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">`Missing state config for <span class=\"hljs-subst\">$&#123;<span class=\"hljs-keyword\">this</span>.state&#125;</span>`</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 获取当前状态所有转换可能</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">const</span> transitions = currentStateConfig.transitions</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (!transitions) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-comment\">// 如果当前状态不可以转换而且是可终止状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">if</span> (currentStateConfig.isEnd) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-comment\">// 生成token，存进tokenBuffer里面</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-keyword\">this</span>.addToken(currentStateConfig.TokenType)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-comment\">// 重置当前状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-keyword\">this</span>.reset()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-comment\">// 再次消耗当前输入的字符</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-keyword\">this</span>.consume(ch)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-keyword\">return</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-comment\">// 当前状态不能转换而且是非终止状态的话就报错！</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">SyntaxError</span>(<span class=\"hljs-string\">`Unexpected character <span class=\"hljs-subst\">$&#123;ch&#125;</span>`</span>, <span class=\"hljs-keyword\">this</span>.locationKeeper.getCurrentLocation())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 将输入字符和checker进行比较以确定需要进行的状态转换</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">const</span> targetTransition = transitions.find(<span class=\"hljs-function\">(<span class=\"hljs-params\">&#123; checker &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> checker === <span class=\"hljs-string\">'string'</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-keyword\">return</span> ch === checker</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">if</span> (checker <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">RegExp</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-keyword\">return</span> checker.test(ch)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">return</span> checker(ch)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 不存在可以转换的状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (!targetTransition) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-comment\">// 是可终止状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">if</span> (currentStateConfig.isEnd) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-keyword\">if</span> (currentStateConfig.TokenType) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-comment\">// 添加token到tokenBuffer实例</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-keyword\">this</span>.addToken(currentStateConfig.TokenType)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-comment\">// 重置状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-keyword\">this</span>.reset()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-comment\">// 重新消耗输入字符</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-keyword\">this</span>.consume(ch)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-keyword\">return</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-comment\">// 不存在可以转换的状态而现在又是非终止状态，我们只能报错了！</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.locationKeeper.consume(ch)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">SyntaxError</span>(<span class=\"hljs-string\">'Invalid or unexpected token'</span>, <span class=\"hljs-keyword\">this</span>.locationKeeper.getCurrentLocation())      </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 下面的逻辑是状态成功扭转后进行的</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">73</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 更新当前记录的位置信息，代码的行数和列数</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">74</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.locationKeeper.consume(ch)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">75</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">76</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 下面代码是为了记录当前单词的开始位置的</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">77</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.state === <span class=\"hljs-keyword\">this</span>.initialState &amp;&amp; targetTransition.state !== <span class=\"hljs-keyword\">this</span>.initialState) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">78</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.locationKeeper.markLocation()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">79</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">80</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">81</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 将当前状态转换为目标状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">82</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.state = targetTransition.state</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">83</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 将当前的字符加入到buffer里面</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">84</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.buffer += ch</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">85</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">86</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>接着我们来看一下用来存储识别到的单词的类<code>TokenBuffer</code>的源代码：</p>\n<figure class=\"highlight typescript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// lib/lexer/TokenBuffer.ts</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> &#123; IToken &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./types/token\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">class</span> TokenBuffer &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 存储当前已经识别出来的单词</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">private</span> tokens: <span class=\"hljs-built_in\">Array</span>&lt;IToken&gt; = []</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 存储当前已经读到的单词的位置</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">private</span> cursor: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">0</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// peek会返回当前的单词，它不会改变光标的位置，只会预读</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  peek() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.tokens[<span class=\"hljs-keyword\">this</span>.cursor]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 和peek不一样，它会读出当前的单词，因此会改变光标的位置</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  read() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">const</span> currentToken = <span class=\"hljs-keyword\">this</span>.tokens[<span class=\"hljs-keyword\">this</span>.cursor]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">const</span> nextCursor = <span class=\"hljs-keyword\">this</span>.cursor &lt; <span class=\"hljs-keyword\">this</span>.tokens.length ? ++<span class=\"hljs-keyword\">this</span>.cursor : <span class=\"hljs-keyword\">this</span>.tokens.length</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.cursor = nextCursor</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">return</span> currentToken</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 取消上次的读取，将单词\"放\"回去</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">  unread() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">const</span> lastCursor = --<span class=\"hljs-keyword\">this</span>.cursor</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.cursor = lastCursor</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.tokens[lastCursor]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 写入新的token</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">  write(token: IToken) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.tokens.push(token)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 获取当前光标的位置</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">  getCursor() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.cursor</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 直接设置当期光标的位置，主要是在语法分析阶段进行回退用的</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">  setCursor(cursor: <span class=\"hljs-built_in\">number</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.cursor = cursor</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 以JSON格式输出当前的tokens</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">  toJSON(): <span class=\"hljs-built_in\">Array</span>&lt;IToken&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.tokens</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 判断单词是否已经全部处理完毕了</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">  isEmpty(): <span class=\"hljs-built_in\">boolean</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.cursor === <span class=\"hljs-keyword\">this</span>.tokens.length</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>细心的同学会发现我在实现上面的<code>TokenBuffer</code>时每次读取单词都只是移动光标，而没有真正将该单词从数组里面取出来，这样做的好处就是方便语法分析阶段在某个语法规则不匹配的时候回退之前读到的单词，从而使用另外一个语法规则来匹配。</p>\n<h4 id=\"Token单词串\"><a href=\"#Token单词串\" class=\"headerlink\" title=\"Token单词串\"></a>Token单词串</h4><p>最后我们再来看一下这个有限状态机识别到的Token串是什么样子的，下面是输入的代码：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-string\">'HelloWorld'</span>;</span></pre></td></tr></table></figure>\n<p>经过有限状态机的处理，输出的Token串是：</p>\n<figure class=\"highlight json hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">[</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"LET\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"value\"</span>: <span class=\"hljs-string\">\"let\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"range\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">3</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"IDENTIFIER\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"value\"</span>: <span class=\"hljs-string\">\"a\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"range\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"ASSIGN\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"value\"</span>: <span class=\"hljs-string\">\"=\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"range\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">7</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">7</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"STRING_LITERAL\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"value\"</span>: <span class=\"hljs-string\">\"'HelloWorld'\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"range\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">9</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">20</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"SEMICOLON\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"value\"</span>: <span class=\"hljs-string\">\";\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"range\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">21</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">21</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr></table></figure>\n<p>从上面的输出可以看出每个单词（token）都会有下面这些属性：</p>\n<ul>\n<li>type: 单词的类型，也就是非终止状态里面定义的TokenType</li>\n<li>value: 这个单词具体的值</li>\n<li>range: 里面存储了这个单词的开始和结束的位置信息，包括行数和列数。这些位置信息会在代码报错的时候帮助开发者定位错误</li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>在本篇文章中我为大家介绍了Simple这个项目的<code>背景和内容</code>，然后再为大家介绍了一些简单的<code>编译原理</code>基础知识，最后再详述了如何使用<code>有限状态机</code>来实现<code>词法分析</code>并且解读了Simple项目对应的<code>源代码</code>。</p>\n<p>在下一篇文章中我将会为大家详细介绍<code>语法分析</code>的一些基本知识，以及普及一些<code>领域特定语言（DSL）</code>的基本概念，最后再详细介绍一下我是如何使用灵活的<code>DSL</code>来实现Simple语言的<code>语法分析</code>的。</p>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长</p>\n<p><img src=\"/images/wechat_qr.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对于大多数前端开发者来说JavaScript可谓是我们最熟悉的编程语言了，它十分强大可是有些语言特性却十分难以理解，例如<strong>闭包</strong>和<strong>this绑定等</strong>概念往往会让初学者摸不着头脑。网上有很多诸如《你看完这篇还不懂this绑定就来砍我》之类的文章来为大家传道解惑。可是在我看来这些文章大多流于表面，你读了很多可能还是会被面试官问倒。 那么如何才能彻彻底底理解这些语言特性，从而在面试的时候立于不败之地呢？在我看来要想真的理解一样东西，最好的途径就是<strong>实现</strong>这样东西，这也是西方程序员非常喜欢说的<strong>learning by implementing</strong>。例如，你想更好地理解React，那么最好的办法就是你自己动手实现一个React。因此为了更好地理解JavaScript的语言特性，我就自己动手实现了一个叫做Simple的JavaScript语言解释器，这个解释器十分简单，它基于<strong>TypeScript</strong>实现了<strong>JavaScript语法的子集</strong>，主要包括下面这些功能：</p>","more":"<ul>\n<li>基本数据类型</li>\n<li>复杂数据类型object, array和function</li>\n<li>变量定义</li>\n<li>数学运算</li>\n<li>逻辑运算</li>\n<li>if条件判断</li>\n<li>while，for循环</li>\n<li>函数式编程</li>\n<li>闭包</li>\n<li>this绑定</li>\n</ul>\n<p>本系列文章正是笔者在实现完Simple语言解释器后写的整理性文章，它会包括下面这些部分：</p>\n<ul>\n<li>项目介绍和词法分析（本文）</li>\n<li>语法分析</li>\n<li>执行JavaScript代码</li>\n</ul>\n<p>虽然Simple的实现和V8引擎（或者其它JavaScript引擎）没什么关系，你也不能通过本系列文章来理解它们的源码，可是看完本系列文章后你将会有下面这些收获：</p>\n<ul>\n<li>加深对JavaScript语言的理解（this和闭包等）</li>\n<li>掌握编译原理的基础知识</li>\n<li>知道什么是DSL以及如何实现内部DSL来提高研发效率（Simple的语法分析是基于内部DSL的）</li>\n</ul>\n<p>Simple解释器的源代码已经开源在github上面了，地址是<a href=\"https://github.com/XiaocongDong/simple\" target=\"_blank\" rel=\"noopener\">https://github.com/XiaocongDong/simple</a>，我还开发了一个简易的代码编辑器供大家把玩，地址是<a href=\"https://superseany.com/opensource/simple/build/\" target=\"_blank\" rel=\"noopener\">https://superseany.com/opensource/simple/build/</a>，大家可以在这个编辑器里面编写和运行JavaScript代码，并且可以看到JavaScript代码生成的<strong>单词（Token）</strong>和<strong>语法树（AST）</strong>。</p>\n<p>接着就让我们进入本系列文章的第一部分 - 项目介绍和词法分析的内容。</p>\n<h2 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h2><h3 id=\"编译器-vs-解释器\"><a href=\"#编译器-vs-解释器\" class=\"headerlink\" title=\"编译器 vs 解释器\"></a>编译器 vs 解释器</h3><p>在开始了解Simple的实现原理之前，我们先来搞清楚两个基本的编译原理概念：编译器（Compiler） vs 解释器（Interpreter）。</p>\n<h4 id=\"编译器\"><a href=\"#编译器\" class=\"headerlink\" title=\"编译器\"></a>编译器</h4><p>编译器可以理解成语言的<strong>转换器</strong>，它会把源文件从一种形式的代码转换成另外一种形式的代码，它只是负责转换代码，<strong>不会真正执行代码的逻辑</strong>。在开发前端项目的过程中，我们用到的代码打包器Webpack其实就是一个JavaScript编译器，它只会打包我们的代码而不会执行它们。</p>\n<h4 id=\"解释器\"><a href=\"#解释器\" class=\"headerlink\" title=\"解释器\"></a>解释器</h4><p>解释器顾名思义就是会对我们的代码进行<strong>解释执行</strong>，它和编译器不一样，它不会对源代码进行转换（最起码不会输出中间文件），而是边解释边执行源代码的逻辑。</p>\n<h4 id=\"Simple解释器\"><a href=\"#Simple解释器\" class=\"headerlink\" title=\"Simple解释器\"></a>Simple解释器</h4><p>由于Simple不会对编写的JavaScript代码进行中间代码转换，它只会解释并且执行代码的逻辑，所以它是一个不折不扣的<strong>JavaScript语言解释器</strong>。</p>\n<h3 id=\"Simple的架构设计\"><a href=\"#Simple的架构设计\" class=\"headerlink\" title=\"Simple的架构设计\"></a>Simple的架构设计</h3><p>我们编写的代码其实就是保存在计算机硬盘上面的字符串文本，而实现语言解释器的本质其实就是<code>教会计算机如何才能理解并执行这些文本代码</code>。那么计算机如何才能理解我们写的东西呢？考虑到大多数编程语言都是用英语进行编码的，我们不妨先来看一下人是如何理解一个英语句子的，看能不能受到一些启发。</p>\n<h4 id=\"人理解英语句子的过程\"><a href=\"#人理解英语句子的过程\" class=\"headerlink\" title=\"人理解英语句子的过程\"></a>人理解英语句子的过程</h4><p><img src=\"/images/simple/english-sentence.png\" alt=\"\"><br><strong>Put a pencil on the table</strong>。我相信大家肯定都知道这句话是什么意思，可是你是否有思考过你是如何<strong>理解这句话</strong>的呢？或者更进一步，你能不能将你理解这句话的过程拆分成一个个单独的步骤？</p>\n<p>我相信大多数人在理解上面这句话的过程中都会经历这些阶段：</p>\n<ul>\n<li><strong>切割</strong>单词，<strong>理解</strong>每个单词的意思：句子是由单词组成的，我们要理解句子的意思首先就要知道每个单词的意思。Put a pencil on the table这个句子每个单词的意思分别是：<ul>\n<li>put: <strong>动词</strong>，放置。</li>\n<li>a: <strong>不定冠词</strong>，一个。</li>\n<li>pencil: <strong>名词</strong>，铅笔。</li>\n<li>on: <strong>介词</strong>，在…上面。</li>\n<li>the: <strong>定冠词</strong>，这张。</li>\n<li>table: <strong>名词</strong>，桌子。</li>\n</ul>\n</li>\n<li>单词切割完后，我们就会根据<strong>英语语法规则</strong>划分句子的<strong>结构</strong>：在理解完句子每个单词的意思后，我们接着就会根据英语的语法规则来对句子进行结构的划分，例如对于上面这个句子，我们会这样进行划分：<ul>\n<li>因为句子第一个单词是动词put，而且动词后面跟的是不定冠词修饰的名词，所以这个句子应该是个<strong>动词 + 名词</strong>的祈使句，因此这句话的前半句的意思就是叫某人放（put）一支（a）铅笔（pencil）。</li>\n<li>前半句解释完后，我们再看一下这个句子的后半句。后半句的开头是一个介词（on）然后接着一个定冠词修饰的名词（the table），所以它是用来修饰句子前半句的结构为<strong>介词 + 名词</strong>的<strong>状语</strong>，表示铅笔是放在这个桌子上的。</li>\n<li>划分和理解完句子的结构后，我们自然也明白了这个句子的意思，那就是：将铅笔放在这张桌子上面。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"计算机如何理解代码\"><a href=\"#计算机如何理解代码\" class=\"headerlink\" title=\"计算机如何理解代码\"></a>计算机如何理解代码</h4><p>知道了我们是如何理解一个英语句子后，我们再来思考一下如何让计算机来理解我们的代码。我们都知道<strong>计算机科学的很多知识都是对现实世界的建模</strong>。举个例子，我们熟知的数据结构Queue对应的就是我们日常生活中经常会排的队，而一些设计模式，例如Visitor，Listener等都是对现实生活情景的建模。在计算机科学里面研究编程语言的学科叫做<strong>编译原理</strong>，那么编译原理的一些基本概念是如何和我们上面说到的人类理解句子的步骤一一对应起来的呢？</p>\n<p>上面说到我们理解一个句子的第一步是<strong>切割单词然后理解每个单词的意思</strong>，这一个步骤其实对应的就是编译原理中的<strong>词法分析</strong>（Lexical Analysis）。词法分析顾名思义就是在单词层面对代码进行解释，它主要会将代码字符串划分为一个个独立的单词（token）。</p>\n<p>在理解完每个单词的意思后我们会<strong>根据英语语法规则划分句子的结构</strong>，这个步骤对应的编译原理的概念是<strong>语法分析</strong>（Syntax Analysis/Parser）。语法分析的过程会将词法分析生成的单词串根据定义的<strong>语法规则</strong>生成一颗<strong>抽象语法树</strong>（AST）。生成的抽象语法树最后就会被一些<strong>运行时</strong>（runtime）执行。</p>\n<p>综上所述，一个语言解释器的软件架构大体是这样的：<br><img src=\"/images/simple/architecture.png\" alt=\"\"></p>\n<p>上面其实也就是Simple的软件架构，接着让我们来看一下词法分析的具体实现。</p>\n<h2 id=\"词法分析\"><a href=\"#词法分析\" class=\"headerlink\" title=\"词法分析\"></a>词法分析</h2><p>前面已经说过，所谓的<strong>词法分析</strong>就是将文件的代码<strong>以单词（token）为单位切割成一个个独立的单元</strong>。这里要注意的是编译原理的单词和英文里面的单词不是等同的概念，在编译原理里面，除了<code>let</code>，<code>for</code>和<code>while</code>等用字母连接起来的字符串是单词，一些诸如<code>=</code>，<code>==</code>，<code>&amp;&amp;</code>和<code>+</code>等非字母连接起来的字符串也是合法的单词。对于Simple解释器来说，下面都是一些合法的单词：</p>\n<ul>\n<li>关键字：let，const，break，continue，if，else，while，function，true，false，for，undefined，null，new，return</li>\n<li>标识符：主要是一些开发者定义的变量名字，例如arr，server，result等</li>\n<li>字面量：字面量包括数字字面量（number）和字符串字面量（string），Simple解释器只支持单引号字符串，例如’this is a string literal’</li>\n<li>算术和逻辑运算符号：+，-，++，–，*，/，&amp;&amp;，||，&gt;，&gt;=，&lt;，&lt;=，==</li>\n<li>赋值运算符：=，+=，-=</li>\n<li>特殊符号：[，]，{，}，.，:，(，)</li>\n</ul>\n<p>这里要注意的是词法分析阶段不会保留源代码中所有的字符，一些无用的信息例如空格，换行和代码注释等都会在这个阶段被去掉。下面是一个词法分析的效果图：<br><img src=\"/images/simple/lexical-analysis.png\" alt=\"\"></p>\n<p>对于词法分析，大概有以下两种实现：</p>\n<h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><p>这个方法可能是大多数开发者都会想到的做法。由于Simple解释器没有使用这种做法，所以这里只会简单介绍一下流程，总体来说，它包含以下这些步骤：</p>\n<ul>\n<li>为各个单词类型定义对应的正则表达式，例如数字字面量的正则表达式是<code>/[0-9][0-9]*/</code>（不考虑浮点数的情况），简单赋值运算符的正则表达式是<code>/=/</code>，等于运算符的正则表达式是<code>/==/</code>。</li>\n<li>将各个单词类型的正则表达式按照<strong>词法优先级顺序</strong>依次和代码字符串进行<strong>match</strong>操作，如果某个单词类型的正则表达式有<strong>命中</strong>，就将对应的子字符串提取出来，然后从刚才命中的字符串<strong>最后的位置</strong>开始继续执行match操作，如此<strong>循环反复</strong>直到所有字符串都match完毕为止。这里有一个十分重要的点是不同的单词类型是有<strong>词法优先级顺序</strong>的，例如等于运算符<code>==</code>的优先级要比<code>=</code>的优先级要高，因为如果开发者写了两个等号，想表达的肯定是等于判断，而不是两个赋值符号。</li>\n</ul>\n<h3 id=\"基于有限状态机\"><a href=\"#基于有限状态机\" class=\"headerlink\" title=\"基于有限状态机\"></a>基于有限状态机</h3><p>由于<strong>所有的正则表达式都可以转化为与其对应的有限状态机</strong>，所以词法分析同样也可以使用有限状态机来实现。那么什么是有限状态机呢？</p>\n<p>有限状态机的英文名称是<strong>Finite State Machine（FSM）</strong>，它有下面这些特点：</p>\n<ul>\n<li>它的状态是<strong>有限的</strong></li>\n<li>它同一个时刻只能有一个状态，也就是<strong>当前状态</strong></li>\n<li>在接收到外界的数据后，有限状态机会根据<strong>当前状态</strong>以及<strong>接收到的数据</strong>计算出下一个状态并<strong>转换</strong>到该状态</li>\n</ul>\n<p>我们熟悉的红绿灯其实就是一个有限状态机的例子。红绿灯只能有三种颜色，分别是红色，绿色和黄色，所以它的状态集是有限的。由于红绿灯在某一个时刻只能有一种颜色（试想下红绿灯同时是红色和绿色会怎样：）），因此它当前的状态是唯一的。最后红绿灯会根据当前的状态（颜色）和输入（过了多少时间）装换成下一个状态，例如红灯过了60秒就会变黄灯而不能变绿灯。</p>\n<p>从上面的定义我们知道一个有限状态机最重要的是下面这三个要素：</p>\n<ul>\n<li>状态集</li>\n<li>当前状态</li>\n<li>不同状态之间如何扭转</li>\n</ul>\n<p>知道了什么是有限状态机和它的三要素之后，接着让我们来看一个使用简易有限状态机来做词法分析的例子。我们要设计的有限状态机可以识别下面类型的单词：</p>\n<ul>\n<li>identifier（标识符）</li>\n<li>number（数字字面量，不包含浮点数）</li>\n<li>string（字符串字面量，单引号包起来的）</li>\n<li>加号（+）</li>\n<li>加号赋值运算符（+=）</li>\n</ul>\n<p>我们先来为这个有限状态机定义一下上面提到的状态机三要素：</p>\n<ul>\n<li>状态集：状态集应该包含状态机在接收到任何输入后出现的<code>所有状态</code>，对于上面的状态机会有下面的状态：<ul>\n<li>initial：初始状态</li>\n<li>number：当状态机识别到数字字面量时会处于这个状态</li>\n<li>start string literal：当状态机接收到第一个单引号的时候并且没有接收到第二个单引号前（字符串还没结束）都是处于这个状态</li>\n<li>string literal：当状态机识别到字符串字面量时会处于这个状态</li>\n<li>identifier：当状态机识别到标识符会处于这个状态</li>\n<li>plus：当状态机识别到加号会处于这个状态</li>\n<li>plus assign：当前状态机识别到加号赋值运算符会处于这个状态</li>\n</ul>\n</li>\n<li>当前状态：该有限状态机的当前状态可以是上面定义的任意一个状态</li>\n<li>不同状态之间如何扭转：当状态机处于某一个状态时，它只可以<strong>扭转到某些特定的状态</strong>。举个例子，如果状态机现在处于<code>start string literal</code>状态，它只可以维持当前状态或者转换到<code>string literal</code>状态。在当前输入不能让状态机进行状态扭转时，会有两种情况，第一种情况是当前状态是一个<strong>可终止的状态</strong>，也就是说当前状态机已经知道生成一个token需要的所有信息了，这个时候状态机会输出当前状态表示的单词类型，输出上一个单词后，状态机会重置为初始状态接着再重新处理刚才的输入；如果当前状态是个<strong>非终止状态</strong>的话，也就是说当前状态机还没有足够的信息输出一个单词，这个时候状态机会报错。在当前这个例子中，可终止状态有<code>number</code>，<code>string literal</code>和<code>identifier</code>，而非终止状态有<code>start string literal</code>。下面是这个状态机的状态扭转图：<img src=\"/images/simple/fsm.png\" alt=\"\"></li>\n</ul>\n<p>这里要注意的是状态机除了要存储当前的状态信息外，还要保留现在还没输出为单词的字符，也就是说要有一个<code>buffer</code>变量来存储遇到的字符输入。例如遇到<code>+</code>后，<code>buffer</code>会变成<code>+</code>，后面再遇到<code>=</code>，<code>buffer</code>会变为<code>+=</code>，最后<code>+=</code>被输出，<code>buffer</code>会被重置为空字符串<code>&#39;&#39;</code>。</p>\n<p>状态机三要素定义完成后，我们就可以使用上面的状态机来对<code>a+=&#39;Simple&#39;</code>这个字符串就行词法分析了：</p>\n<ol>\n<li>刚开始的时候状态机会处于initial状态，接着状态机会逐个接收代码的每个字符并完成对应的状态扭转和单词输出</li>\n<li>状态机接收到<code>a</code>字符，根据上面定义的状态扭转图我们知道该字符可以让状态机扭转为<code>identifier</code>这个状态，并且会将该字符保存在<code>buffer</code>这个变量里面</li>\n<li>状态机接收到<code>+</code>字符，由于identifier不能根据<code>+</code>字符进行状态扭转了，而它当前又处于一个可终止状态（identifier状态）所以状态机会输出之前记录下来的<code>a</code>单词，然后将状态重置为<code>initial</code>。状态机重置状态后会重新处理<code>+</code>字符，这时候状态机装换为<code>plus</code>状态，并且将<code>+</code>这个字符记录下来，这时候<code>buffer</code>变为<code>+</code></li>\n<li>状态机接收到<code>=</code>字符，从上面的扭转图可以看出，状态机可以转换到<code>plus assign</code>这个状态，所以状态机会进行状态的扭转并记录下<code>=</code>这个字符，<code>buffer</code>变为<code>+=</code></li>\n<li>状态机接收到<code>&#39;</code>字符，由于<code>plus assign</code>不能根据<code>&#39;</code>字符进行状态转换，而<code>plus assign</code>又是一个可终止的状态，所以状态机会输出当前<code>buffer</code>记录的<code>+=</code>作为单词，并且将状态重置为<code>initial</code>。状态机重置状态后会重新处理<code>&#39;</code>字符，这时候状态机转换为<code>start string literal</code>状态</li>\n<li>当状态机分别接收到<code>S</code>，<code>i</code>，<code>m</code>，<code>p</code>，<code>l</code>和<code>e</code>时，由于它们都不是单引号，所以状态机会维持在<code>start string literal</code>这个状态，并且这些字符会被依次加入到<code>buffer</code>中，最后buffer会变为<code>Simple</code></li>\n<li>状态机接收到<code>&#39;</code>字符，状态机转换到<code>string literal</code>状态，这就意味着状态机已经识别到一个合法的字符串单词了</li>\n<li>最后状态机判断没有字符可以输入后，它会看一下当前的状态是否是可终止状态，由于<code>string literal</code>是可终止状态，所以状态机会输出当前单词。反之，如果状态机发现没有新的字符可以输入而自己又处于一个非终止的状态，它就会抛一个叫做<code>Unexpected EOF</code>的错误</li>\n</ol>\n<p>以上就是使用有限状态机来实现词法分析器的一个简单例子，Simple解释器的词法分析实现和上面的步骤是一样的。在Simple解释器中，我将状态机的核心逻辑（记录当前状态和进行状态扭转）和状态机的配置（状态集的定义以及不同状态之间如何扭转）的逻辑解耦开来了，这样可以方便后面对Simple语言的词法规则进行修改和扩展，并且它还可以使用另外一个状态机配置来实现另外一门语言的词法分析。</p>\n<p>状态机的核心逻辑代码放在了<code>lib/lexer/Tokenizer.ts</code>文件里面，而状态机的配置则放在<code>lib/config/Tokenizer.ts</code>里面，下面是具体的源代码分析：</p>\n<h4 id=\"状态机配置定义\"><a href=\"#状态机配置定义\" class=\"headerlink\" title=\"状态机配置定义\"></a>状态机配置定义</h4><p>Simple的状态机配置定义在<a href=\"https://github.com/XiaocongDong/simple/blob/master/lib/config/Tokenizer.ts\" target=\"_blank\" rel=\"noopener\">lib/config/Tokenizer.ts</a>里面，下面是简化版的例子，具体代码可以到github上面看：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/config/Tokenizer.ts</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// State定义了Simple语言状态机所有可能的状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> State &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  INITIAL = <span class=\"string\">'INITIAL'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  NUMBER_LITERAL = <span class=\"string\">'NUMBER_LITERAL'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  IDENTIFER = <span class=\"string\">'IDENTIFER'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  START_STRING_LITERAL = <span class=\"string\">'START_STRING_LITERAL'</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  STRING_LITERAL = <span class=\"string\">'STRING_LITERAL'</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 状态扭转定义</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config: IConfig = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  initialState: State.INITIAL, <span class=\"comment\">// 定义状态机的初始状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  states: &#123; <span class=\"comment\">// 枚举状态机所有的状态配置</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    [State.INITIAL]: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      isEnd: <span class=\"literal\">false</span>, <span class=\"comment\">// 表示该状态是否是可终止状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      transitions: [ <span class=\"comment\">// 枚举状态机所有的状态转换</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">          state: State.NUMBER_LITERAL,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">          checker: <span class=\"regexp\">/[0-9]/</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">          state: State.START_STRING_LITERAL,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">          checker: <span class=\"string\">\"'\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    [State.NUMBER_LITERAL]: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">      isEnd: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">      TokenType: TOKEN_TYPE.NUMBER_LITERAL,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">      transitions: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">          state: State.NUMBER_LITERAL,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">          checker: <span class=\"regexp\">/[0-9\\.]/</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">      ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">    [State.START_STRING_LITERAL]: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">      isEnd: <span class=\"literal\">false</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">      transitions: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">          state: State.START_STRING_LITERAL,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">          checker: <span class=\"regexp\">/[^']/</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">          state: State.STRING_LITERAL,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">          checker: <span class=\"string\">\"'\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">      ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">    [State.STRING_LITERAL]: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">      isEnd: <span class=\"literal\">true</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">      TokenType: TOKEN_TYPE.STRING_LITERAL</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>上面的配置文件定义了一个<code>config</code>对象，该对象会作为参数传递给<code>lib/lexer/Tokenizer.ts</code>里面的有限状态机类<code>Tokenizer</code>。这个config对象有两个参数，一个是初始状态值，一个是该状态机的所有状态配置<code>states</code>。初始状态值就是状态机刚开始的状态值，同时在状态机识别到一个新的单词后，它也会重置为这个状态。<code>states</code>是一个<code>Object</code>类型的对象，它的key是某个状态的值，而value则是这个状态对应的配置，一个状态的配置包括下面这些内容:</p>\n<ul>\n<li>isEnd: boolean，代表这个状态是否是可终止状态</li>\n<li>TokenType: 代表这个状态对应的单词类型。如果该状态是个可终止状态，它就可以有对应的单词类型。如果TokenType没有指定，即使有单词匹配成功也不会生成对应的单词。</li>\n<li>transitions: 里面存储了这个状态所有可能的状态转换（transition），每个状态转换会有下面这些属性：<ul>\n<li>state：要转换到的状态</li>\n<li>checker：状态转换的条件，可以是字符串，正则表达式或者是一个返回布尔值的函数，当输入满足checker的条件时状态机就会发生状态转换</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"状态机核心逻辑实现\"><a href=\"#状态机核心逻辑实现\" class=\"headerlink\" title=\"状态机核心逻辑实现\"></a>状态机核心逻辑实现</h4><p>上面看了Simple状态机的配置后，我们再来看一下使用该配置的状态机的核心代码<code>lib/Lexer/Tokenizer.ts</code>。为了实现<code>Tokenizer</code>的功能，我设计了两个辅助类，一个是用于记录当前位置信息的<code>LocationKeeper</code>类，它是用来记录当前处理的字符在源文件的行数和列数的，这个类比较简单，这里不会详细介绍有兴趣的可以看源代码。另外一个类是<code>TokenBuffer</code>类，所有被状态机识别出的单词都会被存储到这个类的实例中，因此它需要提供一些方法对单词进行读写（read/write）操作，这个类会在<code>Tokenizer</code>类介绍完后介绍。</p>\n<p>我们先来看一下<code>Tokenizer</code>类处理输入字符的核心逻辑<code>consume(ch: string)</code>函数：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/lexer/Tokenizer.ts</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Tokenizer &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  consume(ch: <span class=\"built_in\">string</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 如果输入字符是空格或者换行符而且当前的状态是初始状态的话，只更新当前位置信息</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> ((ch === SPACE || ch === NEW_LINE) &amp;&amp; <span class=\"keyword\">this</span>.state === <span class=\"keyword\">this</span>.initialState) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">this</span>.locationKeeper.consume(ch)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 接着会根据当前的状态和输入的字符进行状态扭转</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 获取当前状态的配置信息，this.state保存的是状态机当前的状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> currentStateConfig: IStateConfig = <span class=\"keyword\">this</span>.statesConfig[<span class=\"keyword\">this</span>.state]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (!currentStateConfig) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">// 开发者忘记配置这个状态了，我们也要报错，develper-friendly ：）</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Missing state config for <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.state&#125;</span>`</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 获取当前状态所有转换可能</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> transitions = currentStateConfig.transitions</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (!transitions) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">// 如果当前状态不可以转换而且是可终止状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">if</span> (currentStateConfig.isEnd) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"comment\">// 生成token，存进tokenBuffer里面</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">this</span>.addToken(currentStateConfig.TokenType)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"comment\">// 重置当前状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">this</span>.reset()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"comment\">// 再次消耗当前输入的字符</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">this</span>.consume(ch)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">return</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">// 当前状态不能转换而且是非终止状态的话就报错！</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">SyntaxError</span>(<span class=\"string\">`Unexpected character <span class=\"subst\">$&#123;ch&#125;</span>`</span>, <span class=\"keyword\">this</span>.locationKeeper.getCurrentLocation())</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 将输入字符和checker进行比较以确定需要进行的状态转换</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> targetTransition = transitions.find(<span class=\"function\">(<span class=\"params\">&#123; checker &#125;</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> checker === <span class=\"string\">'string'</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">return</span> ch === checker</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">if</span> (checker <span class=\"keyword\">instanceof</span> <span class=\"built_in\">RegExp</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">return</span> checker.test(ch)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> checker(ch)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 不存在可以转换的状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (!targetTransition) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">// 是可终止状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">if</span> (currentStateConfig.isEnd) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">if</span> (currentStateConfig.TokenType) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"comment\">// 添加token到tokenBuffer实例</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"keyword\">this</span>.addToken(currentStateConfig.TokenType)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"comment\">// 重置状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">this</span>.reset()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"comment\">// 重新消耗输入字符</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">this</span>.consume(ch)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">return</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">// 不存在可以转换的状态而现在又是非终止状态，我们只能报错了！</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">this</span>.locationKeeper.consume(ch)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">SyntaxError</span>(<span class=\"string\">'Invalid or unexpected token'</span>, <span class=\"keyword\">this</span>.locationKeeper.getCurrentLocation())      </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 下面的逻辑是状态成功扭转后进行的</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">73</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 更新当前记录的位置信息，代码的行数和列数</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">74</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">this</span>.locationKeeper.consume(ch)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">75</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">76</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 下面代码是为了记录当前单词的开始位置的</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">77</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"keyword\">this</span>.initialState &amp;&amp; targetTransition.state !== <span class=\"keyword\">this</span>.initialState) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">78</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">this</span>.locationKeeper.markLocation()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">79</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">80</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">81</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 将当前状态转换为目标状态</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">82</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">this</span>.state = targetTransition.state</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">83</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 将当前的字符加入到buffer里面</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">84</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">this</span>.buffer += ch</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">85</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">86</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>接着我们来看一下用来存储识别到的单词的类<code>TokenBuffer</code>的源代码：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/lexer/TokenBuffer.ts</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; IToken &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./types/token\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> TokenBuffer &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 存储当前已经识别出来的单词</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">private</span> tokens: <span class=\"built_in\">Array</span>&lt;IToken&gt; = []</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 存储当前已经读到的单词的位置</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">private</span> cursor: <span class=\"built_in\">number</span> = <span class=\"number\">0</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// peek会返回当前的单词，它不会改变光标的位置，只会预读</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  peek() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.tokens[<span class=\"keyword\">this</span>.cursor]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 和peek不一样，它会读出当前的单词，因此会改变光标的位置</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  read() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> currentToken = <span class=\"keyword\">this</span>.tokens[<span class=\"keyword\">this</span>.cursor]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> nextCursor = <span class=\"keyword\">this</span>.cursor &lt; <span class=\"keyword\">this</span>.tokens.length ? ++<span class=\"keyword\">this</span>.cursor : <span class=\"keyword\">this</span>.tokens.length</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">this</span>.cursor = nextCursor</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> currentToken</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 取消上次的读取，将单词\"放\"回去</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">  unread() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> lastCursor = --<span class=\"keyword\">this</span>.cursor</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">this</span>.cursor = lastCursor</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.tokens[lastCursor]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 写入新的token</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">  write(token: IToken) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">this</span>.tokens.push(token)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 获取当前光标的位置</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">  getCursor() &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.cursor</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 直接设置当期光标的位置，主要是在语法分析阶段进行回退用的</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">  setCursor(cursor: <span class=\"built_in\">number</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">this</span>.cursor = cursor</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 以JSON格式输出当前的tokens</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">  toJSON(): <span class=\"built_in\">Array</span>&lt;IToken&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.tokens</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 判断单词是否已经全部处理完毕了</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">  isEmpty(): <span class=\"built_in\">boolean</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.cursor === <span class=\"keyword\">this</span>.tokens.length</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>细心的同学会发现我在实现上面的<code>TokenBuffer</code>时每次读取单词都只是移动光标，而没有真正将该单词从数组里面取出来，这样做的好处就是方便语法分析阶段在某个语法规则不匹配的时候回退之前读到的单词，从而使用另外一个语法规则来匹配。</p>\n<h4 id=\"Token单词串\"><a href=\"#Token单词串\" class=\"headerlink\" title=\"Token单词串\"></a>Token单词串</h4><p>最后我们再来看一下这个有限状态机识别到的Token串是什么样子的，下面是输入的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">'HelloWorld'</span>;</span></pre></td></tr></table></figure>\n<p>经过有限状态机的处理，输出的Token串是：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">[</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"LET\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"let\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"range\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"column\"</span>: <span class=\"number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"column\"</span>: <span class=\"number\">3</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"IDENTIFIER\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"a\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"range\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"column\"</span>: <span class=\"number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"column\"</span>: <span class=\"number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"ASSIGN\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"=\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"range\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"column\"</span>: <span class=\"number\">7</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"column\"</span>: <span class=\"number\">7</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"STRING_LITERAL\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"'HelloWorld'\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"range\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"column\"</span>: <span class=\"number\">9</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"column\"</span>: <span class=\"number\">20</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"SEMICOLON\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"value\"</span>: <span class=\"string\">\";\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"range\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"column\"</span>: <span class=\"number\">21</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"column\"</span>: <span class=\"number\">21</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr></table></figure>\n<p>从上面的输出可以看出每个单词（token）都会有下面这些属性：</p>\n<ul>\n<li>type: 单词的类型，也就是非终止状态里面定义的TokenType</li>\n<li>value: 这个单词具体的值</li>\n<li>range: 里面存储了这个单词的开始和结束的位置信息，包括行数和列数。这些位置信息会在代码报错的时候帮助开发者定位错误</li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>在本篇文章中我为大家介绍了Simple这个项目的<code>背景和内容</code>，然后再为大家介绍了一些简单的<code>编译原理</code>基础知识，最后再详述了如何使用<code>有限状态机</code>来实现<code>词法分析</code>并且解读了Simple项目对应的<code>源代码</code>。</p>\n<p>在下一篇文章中我将会为大家详细介绍<code>语法分析</code>的一些基本知识，以及普及一些<code>领域特定语言（DSL）</code>的基本概念，最后再详细介绍一下我是如何使用灵活的<code>DSL</code>来实现Simple语言的<code>语法分析</code>的。</p>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长</p>\n<p><img src=\"/images/wechat_qr.jpg\" alt=\"\"></p>"},{"title":"实现JavaScript语言解释器-三","thumbnail":"/gallery/thumbnails/simple-js.jpg","date":"2022-03-07T13:11:16.000Z","_content":"\n\n## 前言\n[上篇文章](https://superseany.com/2021/04/18/%E5%AE%9E%E7%8E%B0JavaScript%E8%AF%AD%E8%A8%80%E8%A7%A3%E9%87%8A%E5%99%A8-%E4%BA%8C/)我为大家介绍了`语法解析`的一些基本概念，以及如何通过自定义的DSL语言实现Simple语言解释器的语法树解析。在本篇也是这个系列最后一篇文章中我将为大家介绍Simple解释器是如何执行生成的语法树的。\n\n## evaluate函数和作用域\n前面在介绍语法解析相关知识的时候有出现过`evaluate`函数，其实`基本每一个AST节点都会有一个对应的evaluate函数`，这个函数的作用就是告诉Simple解释器如何执行当前AST节点。因此Simple解释器执行代码的过程就是：`从根节点开始执行当前节点的evaluate函数然后递归地执行子节点evalute函数的过程`。\n\n我们知道JavaScript代码执行的时候有一个概念叫做`作用域`，当我们访问一个变量的时候，会先看看当前作用域有没有定义这个变量，如果没有就会沿着作用域链向上一直寻找到全局作用域，如果作用域链上都没有该变量的定义的话就会抛出一个`Uncaught ReferenceError: xx is not defined`的错误。在实现Simple语言解释器的时候，我参照了JavaScript作用域的概念实现了一个叫做`Environment`的类，我们来看看Evironment类的实现：\n```ts\n// lib/runtime/Environment.ts\n\n// Environment类就是Simple语言的作用域\nclass Environment {\n  // parent指向当前作用域的父级作用域\n  private parent: Environment = null\n  // values对象会以key-value的形式存储当前作用域变量的引用和值\n  // 例如values = {a: 10}，代表当前作用域有一个变量a，它的值是10\n  protected values: Object = {}\n\n  // 当前作用域有新的变量定义的时候会调用create函数进行值的设置\n  // 例如执行 let a = 10 时，会调用env.create('a', 10)\n  create(key: string, value: any) {\n    if(this.values.hasOwnProperty(key)) {\n      throw new Error(`${key} has been initialized`)\n    }\n    this.values[key] = value\n  }\n\n  // 如果某个变量被重新赋值，Simple会沿着当前作用域链进行寻找，找到最近的符合条件的作用域，然后在该作用域上进行重新赋值\n  update(key: string, value: any) {\n    const matchedEnvironment = this.getEnvironmentWithKey(key)\n    if (!matchedEnvironment) {\n      throw new Error(`Uncaught ReferenceError: ${key} hasn't been defined`)\n    }\n    matchedEnvironment.values = {\n      ...matchedEnvironment.values,\n      [key]: value\n    }\n  }\n\n  // 在作用域链上寻找某个变量，如果没有找到就抛出Uncaught ReferenceError的错误\n  get(key: string) {\n    const matchedEnvironment = this.getEnvironmentWithKey(key)\n    if (!matchedEnvironment) {\n      throw new Error(`Uncaught ReferenceError: ${key} is not defined`)\n    }\n\n    return matchedEnvironment.values[key]\n  }\n\n  // 沿着作用域链向上寻找某个变量的值，如果没有找到就返回null\n  private getEnvironmentWithKey(key: string): Environment {\n    if(this.values.hasOwnProperty(key)) {\n      return this\n    }\n  \n    let currentEnvironment = this.parent\n    while(currentEnvironment) {\n      if (currentEnvironment.values.hasOwnProperty(key)) {\n        return currentEnvironment\n      }\n      currentEnvironment = currentEnvironment.parent\n    }\n\n    return null\n  }\n}\n```\n从上面的代码以及注释可以看出，所谓的作用域链其实就是由Environment实例组成的`单向链表`。解析某个变量值的时候会沿着这个作用域链进行寻找，如果没有找到该变量的定义就会报错。接着我们以for循环执行的过程来看一下具体过程是怎么样的：\n\n被执行的代码：\n```ts\nfor(let i = 0; i < 10; i++) {\n  console.log(i);\n};\n```\nForStatement代码的执行过程：\n```ts\n// lib/ast/node/ForStatement.ts\nclass ForStatement extends Node {\n  ...\n\n  // evaluate函数会接受一个作用域对象，这个对象代表当前AST节点的执行作用域\n  evaluate(env: Environment): any {\n    // 上面for循环括号里面的内容是在一个独立的作用域里面的，所以需要基于父级节点传递过来的作用域新建一个作用域，取名为bridgeEnvironment\n    const bridgeEnvironment = new Environment(env)\n    // if括号内的变量初始化(let i = 0)会在这个作用域里面进行\n    this.init.evaluate(bridgeEnvironment)\n\n    // 如果当前作用域没有被break语句退出 && return语句返回 && 测试表达式(i < 10)是真值，for循环就会继续执行，否则for循环中断\n    while(!runtime.isBreak && !runtime.isReturn && this.test.evaluate(bridgeEnvironment)) {\n      // 因为for循环体(console.log(i))是一个新的作用域，所以要基于当前的brigeEnvironment新建一个子作用域\n      const executionEnvironment = new Environment(bridgeEnvironment)\n      this.body.evaluate(executionEnvironment)\n      // 循环变量的更新(i++)会在brigeEnvironment里面执行\n      this.update.evaluate(bridgeEnvironment)\n    }\n  }\n}\n```\n\n## 闭包和this绑定\n在理解了evalute函数的一般执行过程后，我们再来看看`闭包`是如何实现的。我们都知道JavaScript是`词法作用域`，也就是说一个`函数的作用域链在这个函数被定义的时候就决定了`。我们通过函数声明节点`FunctionDeclaration`的evaluate函数的代码来看一下Simple语言的闭包是如何实现的:\n```ts\n// lib/ast/node/FunctionDeclaration.ts\nclass FunctionDeclaration extends Node {\n  ...\n\n  // 当函数声明语句被执行的时候，这个evaluate函数会被执行，传进来的对象就是当前的执行作用域\n  evaluate(env: Environment): any {\n    // 生成一个新的FunctionDeclaration对象，因为同一个函数可能被多次定义（例如这个函数被嵌套定义在某个父级函数的时候）\n    const func = new FunctionDeclaration()\n    // 函数复制\n    func.loc = this.loc\n    func.id = this.id\n    func.params = [...this.params]\n    func.body = this.body\n    \n    // 函数被声明的时候会通过parentEnv属性记录下当前的执行作用域，这就是闭包了！！！\n    func.parentEnv = env\n\n    // 将函数注册到当前的执行作用域上面，该函数就可以被递归调用了\n    env.create(this.id.name, func)\n  }\n  ...\n}\n```\n从上面的代码可以看出，要实现Simple语言的闭包，`其实只需要在函数声明的时候记录一下当前作用域(parentEnv)就可以了`。\n\n接着我们再来看一下函数执行的时候是如何判断`this`绑定的是哪个对象的：\n```ts\n// lib/ast/node/FunctionDeclaration.ts\nclass FunctionDeclaration extends Node {\n  ...\n\n  // 函数执行的时候，如果存在调用函数的实例，该实例会被当做参数传进来，例如a.test()，a就是test的这个参数\n  call(args: Array<any>, callerInstance?: any): any {\n    // 函数执行时传进来的参数如果少于声明的参数会报错\n    if (this.params.length !== args.length) {\n      throw new Error('function declared parameters are not matched with arguments')\n    }\n\n    // 这是实现闭包的重点，函数执行时的父级作用域是之前函数被定义的时候记录下来的父级作用域！！\n    const callEnvironment = new Environment(this.parentEnv)\n    \n    // 函数参数进行初始化\n    for (let i = 0; i < args.length; i++) {\n      const argument = args[i]\n      const param = this.params[i]\n\n      callEnvironment.create(param.name, argument)\n    }\n    // 创建函数的arguments对象\n    callEnvironment.create('arguments', args)\n\n    // 如果当前函数有调用实例，那么这个函数的this将会是调用实例\n    if (callerInstance) {\n      callEnvironment.create('this', callerInstance)\n    } else {\n      // 如果函数没有调用实例，就会沿着函数的作用域链就行寻找，直到全局的process(node)或者window(browser)对象\n      callEnvironment.create('this', this.parentEnv.getRootEnv().get('process'))\n    }\n\n    // 函数体的执行\n    this.body.evaluate(callEnvironment)\n  }\n}\n```\n上面的代码大概给大家介绍了Simple语言的this是如何绑定的，实际上JavaScript的实现可能和这个有比较大的出入，这里只是给大家一个参考而已。\n\n## 总结\n在本篇文章中我给大家介绍了Simple解释器是如何执行代码的，其中包括闭包和this绑定的内容，由于篇幅限制这里忽略了很多内容，例如for和while循环的break语句是如何退出的，函数的return语句是如何将值传递给父级函数的，大家如果感兴趣可以看一下我的源码：\nhttps://github.com/XiaocongDong/simple。\n\n最后希望大家经过这三篇系列文章的学习可以对编译原理和JavaScript一些比较难懂的语言特性有一定的了解，也希望后面我可以继续给大家带来优质的内容来让我们共同进步。\n\n* [实现JavaScript语言解释器-一](https://superseany.com/2020/10/29/%E5%AE%9E%E7%8E%B0JavaScript%E8%AF%AD%E8%A8%80%E8%A7%A3%E9%87%8A%E5%99%A8-%E4%B8%80/)\n* [实现JavaScript语言解释器-二](https://superseany.com/2021/04/18/%E5%AE%9E%E7%8E%B0JavaScript%E8%AF%AD%E8%A8%80%E8%A7%A3%E9%87%8A%E5%99%A8-%E4%BA%8C/)\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n\n![](/images/wechat_qr.jpg)\n","source":"_posts/实现JavaScript语言解释器-三.md","raw":"---\ntitle: 实现JavaScript语言解释器-三\ntags:\n  - TypeScript\n  - Interpreter\n  - JavaScript\n  - 编译原理\nthumbnail: /gallery/thumbnails/simple-js.jpg\ndate: 2022-03-07 21:11:16\n---\n\n\n## 前言\n[上篇文章](https://superseany.com/2021/04/18/%E5%AE%9E%E7%8E%B0JavaScript%E8%AF%AD%E8%A8%80%E8%A7%A3%E9%87%8A%E5%99%A8-%E4%BA%8C/)我为大家介绍了`语法解析`的一些基本概念，以及如何通过自定义的DSL语言实现Simple语言解释器的语法树解析。在本篇也是这个系列最后一篇文章中我将为大家介绍Simple解释器是如何执行生成的语法树的。\n\n## evaluate函数和作用域\n前面在介绍语法解析相关知识的时候有出现过`evaluate`函数，其实`基本每一个AST节点都会有一个对应的evaluate函数`，这个函数的作用就是告诉Simple解释器如何执行当前AST节点。因此Simple解释器执行代码的过程就是：`从根节点开始执行当前节点的evaluate函数然后递归地执行子节点evalute函数的过程`。\n\n我们知道JavaScript代码执行的时候有一个概念叫做`作用域`，当我们访问一个变量的时候，会先看看当前作用域有没有定义这个变量，如果没有就会沿着作用域链向上一直寻找到全局作用域，如果作用域链上都没有该变量的定义的话就会抛出一个`Uncaught ReferenceError: xx is not defined`的错误。在实现Simple语言解释器的时候，我参照了JavaScript作用域的概念实现了一个叫做`Environment`的类，我们来看看Evironment类的实现：\n```ts\n// lib/runtime/Environment.ts\n\n// Environment类就是Simple语言的作用域\nclass Environment {\n  // parent指向当前作用域的父级作用域\n  private parent: Environment = null\n  // values对象会以key-value的形式存储当前作用域变量的引用和值\n  // 例如values = {a: 10}，代表当前作用域有一个变量a，它的值是10\n  protected values: Object = {}\n\n  // 当前作用域有新的变量定义的时候会调用create函数进行值的设置\n  // 例如执行 let a = 10 时，会调用env.create('a', 10)\n  create(key: string, value: any) {\n    if(this.values.hasOwnProperty(key)) {\n      throw new Error(`${key} has been initialized`)\n    }\n    this.values[key] = value\n  }\n\n  // 如果某个变量被重新赋值，Simple会沿着当前作用域链进行寻找，找到最近的符合条件的作用域，然后在该作用域上进行重新赋值\n  update(key: string, value: any) {\n    const matchedEnvironment = this.getEnvironmentWithKey(key)\n    if (!matchedEnvironment) {\n      throw new Error(`Uncaught ReferenceError: ${key} hasn't been defined`)\n    }\n    matchedEnvironment.values = {\n      ...matchedEnvironment.values,\n      [key]: value\n    }\n  }\n\n  // 在作用域链上寻找某个变量，如果没有找到就抛出Uncaught ReferenceError的错误\n  get(key: string) {\n    const matchedEnvironment = this.getEnvironmentWithKey(key)\n    if (!matchedEnvironment) {\n      throw new Error(`Uncaught ReferenceError: ${key} is not defined`)\n    }\n\n    return matchedEnvironment.values[key]\n  }\n\n  // 沿着作用域链向上寻找某个变量的值，如果没有找到就返回null\n  private getEnvironmentWithKey(key: string): Environment {\n    if(this.values.hasOwnProperty(key)) {\n      return this\n    }\n  \n    let currentEnvironment = this.parent\n    while(currentEnvironment) {\n      if (currentEnvironment.values.hasOwnProperty(key)) {\n        return currentEnvironment\n      }\n      currentEnvironment = currentEnvironment.parent\n    }\n\n    return null\n  }\n}\n```\n从上面的代码以及注释可以看出，所谓的作用域链其实就是由Environment实例组成的`单向链表`。解析某个变量值的时候会沿着这个作用域链进行寻找，如果没有找到该变量的定义就会报错。接着我们以for循环执行的过程来看一下具体过程是怎么样的：\n\n被执行的代码：\n```ts\nfor(let i = 0; i < 10; i++) {\n  console.log(i);\n};\n```\nForStatement代码的执行过程：\n```ts\n// lib/ast/node/ForStatement.ts\nclass ForStatement extends Node {\n  ...\n\n  // evaluate函数会接受一个作用域对象，这个对象代表当前AST节点的执行作用域\n  evaluate(env: Environment): any {\n    // 上面for循环括号里面的内容是在一个独立的作用域里面的，所以需要基于父级节点传递过来的作用域新建一个作用域，取名为bridgeEnvironment\n    const bridgeEnvironment = new Environment(env)\n    // if括号内的变量初始化(let i = 0)会在这个作用域里面进行\n    this.init.evaluate(bridgeEnvironment)\n\n    // 如果当前作用域没有被break语句退出 && return语句返回 && 测试表达式(i < 10)是真值，for循环就会继续执行，否则for循环中断\n    while(!runtime.isBreak && !runtime.isReturn && this.test.evaluate(bridgeEnvironment)) {\n      // 因为for循环体(console.log(i))是一个新的作用域，所以要基于当前的brigeEnvironment新建一个子作用域\n      const executionEnvironment = new Environment(bridgeEnvironment)\n      this.body.evaluate(executionEnvironment)\n      // 循环变量的更新(i++)会在brigeEnvironment里面执行\n      this.update.evaluate(bridgeEnvironment)\n    }\n  }\n}\n```\n\n## 闭包和this绑定\n在理解了evalute函数的一般执行过程后，我们再来看看`闭包`是如何实现的。我们都知道JavaScript是`词法作用域`，也就是说一个`函数的作用域链在这个函数被定义的时候就决定了`。我们通过函数声明节点`FunctionDeclaration`的evaluate函数的代码来看一下Simple语言的闭包是如何实现的:\n```ts\n// lib/ast/node/FunctionDeclaration.ts\nclass FunctionDeclaration extends Node {\n  ...\n\n  // 当函数声明语句被执行的时候，这个evaluate函数会被执行，传进来的对象就是当前的执行作用域\n  evaluate(env: Environment): any {\n    // 生成一个新的FunctionDeclaration对象，因为同一个函数可能被多次定义（例如这个函数被嵌套定义在某个父级函数的时候）\n    const func = new FunctionDeclaration()\n    // 函数复制\n    func.loc = this.loc\n    func.id = this.id\n    func.params = [...this.params]\n    func.body = this.body\n    \n    // 函数被声明的时候会通过parentEnv属性记录下当前的执行作用域，这就是闭包了！！！\n    func.parentEnv = env\n\n    // 将函数注册到当前的执行作用域上面，该函数就可以被递归调用了\n    env.create(this.id.name, func)\n  }\n  ...\n}\n```\n从上面的代码可以看出，要实现Simple语言的闭包，`其实只需要在函数声明的时候记录一下当前作用域(parentEnv)就可以了`。\n\n接着我们再来看一下函数执行的时候是如何判断`this`绑定的是哪个对象的：\n```ts\n// lib/ast/node/FunctionDeclaration.ts\nclass FunctionDeclaration extends Node {\n  ...\n\n  // 函数执行的时候，如果存在调用函数的实例，该实例会被当做参数传进来，例如a.test()，a就是test的这个参数\n  call(args: Array<any>, callerInstance?: any): any {\n    // 函数执行时传进来的参数如果少于声明的参数会报错\n    if (this.params.length !== args.length) {\n      throw new Error('function declared parameters are not matched with arguments')\n    }\n\n    // 这是实现闭包的重点，函数执行时的父级作用域是之前函数被定义的时候记录下来的父级作用域！！\n    const callEnvironment = new Environment(this.parentEnv)\n    \n    // 函数参数进行初始化\n    for (let i = 0; i < args.length; i++) {\n      const argument = args[i]\n      const param = this.params[i]\n\n      callEnvironment.create(param.name, argument)\n    }\n    // 创建函数的arguments对象\n    callEnvironment.create('arguments', args)\n\n    // 如果当前函数有调用实例，那么这个函数的this将会是调用实例\n    if (callerInstance) {\n      callEnvironment.create('this', callerInstance)\n    } else {\n      // 如果函数没有调用实例，就会沿着函数的作用域链就行寻找，直到全局的process(node)或者window(browser)对象\n      callEnvironment.create('this', this.parentEnv.getRootEnv().get('process'))\n    }\n\n    // 函数体的执行\n    this.body.evaluate(callEnvironment)\n  }\n}\n```\n上面的代码大概给大家介绍了Simple语言的this是如何绑定的，实际上JavaScript的实现可能和这个有比较大的出入，这里只是给大家一个参考而已。\n\n## 总结\n在本篇文章中我给大家介绍了Simple解释器是如何执行代码的，其中包括闭包和this绑定的内容，由于篇幅限制这里忽略了很多内容，例如for和while循环的break语句是如何退出的，函数的return语句是如何将值传递给父级函数的，大家如果感兴趣可以看一下我的源码：\nhttps://github.com/XiaocongDong/simple。\n\n最后希望大家经过这三篇系列文章的学习可以对编译原理和JavaScript一些比较难懂的语言特性有一定的了解，也希望后面我可以继续给大家带来优质的内容来让我们共同进步。\n\n* [实现JavaScript语言解释器-一](https://superseany.com/2020/10/29/%E5%AE%9E%E7%8E%B0JavaScript%E8%AF%AD%E8%A8%80%E8%A7%A3%E9%87%8A%E5%99%A8-%E4%B8%80/)\n* [实现JavaScript语言解释器-二](https://superseany.com/2021/04/18/%E5%AE%9E%E7%8E%B0JavaScript%E8%AF%AD%E8%A8%80%E8%A7%A3%E9%87%8A%E5%99%A8-%E4%BA%8C/)\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n\n![](/images/wechat_qr.jpg)\n","slug":"实现JavaScript语言解释器-三","published":1,"updated":"2022-03-07T13:11:16.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0gqf6fq000kucnxdk13dq5m","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><a href=\"https://superseany.com/2021/04/18/%E5%AE%9E%E7%8E%B0JavaScript%E8%AF%AD%E8%A8%80%E8%A7%A3%E9%87%8A%E5%99%A8-%E4%BA%8C/\" target=\"_blank\" rel=\"noopener\">上篇文章</a>我为大家介绍了<code>语法解析</code>的一些基本概念，以及如何通过自定义的DSL语言实现Simple语言解释器的语法树解析。在本篇也是这个系列最后一篇文章中我将为大家介绍Simple解释器是如何执行生成的语法树的。</p>\n<h2 id=\"evaluate函数和作用域\"><a href=\"#evaluate函数和作用域\" class=\"headerlink\" title=\"evaluate函数和作用域\"></a>evaluate函数和作用域</h2><p>前面在介绍语法解析相关知识的时候有出现过<code>evaluate</code>函数，其实<code>基本每一个AST节点都会有一个对应的evaluate函数</code>，这个函数的作用就是告诉Simple解释器如何执行当前AST节点。因此Simple解释器执行代码的过程就是：<code>从根节点开始执行当前节点的evaluate函数然后递归地执行子节点evalute函数的过程</code>。</p>\n<p>我们知道JavaScript代码执行的时候有一个概念叫做<code>作用域</code>，当我们访问一个变量的时候，会先看看当前作用域有没有定义这个变量，如果没有就会沿着作用域链向上一直寻找到全局作用域，如果作用域链上都没有该变量的定义的话就会抛出一个<code>Uncaught ReferenceError: xx is not defined</code>的错误。在实现Simple语言解释器的时候，我参照了JavaScript作用域的概念实现了一个叫做<code>Environment</code>的类，我们来看看Evironment类的实现：</p>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// lib/runtime/Environment.ts</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// Environment类就是Simple语言的作用域</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">class</span> Environment &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// parent指向当前作用域的父级作用域</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">private</span> parent: Environment = <span class=\"hljs-literal\">null</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// values对象会以key-value的形式存储当前作用域变量的引用和值</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 例如values = &#123;a: 10&#125;，代表当前作用域有一个变量a，它的值是10</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">protected</span> values: <span class=\"hljs-built_in\">Object</span> = &#123;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 当前作用域有新的变量定义的时候会调用create函数进行值的设置</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 例如执行 let a = 10 时，会调用env.create('a', 10)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  create(key: <span class=\"hljs-built_in\">string</span>, value: <span class=\"hljs-built_in\">any</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.values.hasOwnProperty(key)) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;key&#125;</span> has been initialized`</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.values[key] = value</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 如果某个变量被重新赋值，Simple会沿着当前作用域链进行寻找，找到最近的符合条件的作用域，然后在该作用域上进行重新赋值</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  update(key: <span class=\"hljs-built_in\">string</span>, value: <span class=\"hljs-built_in\">any</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">const</span> matchedEnvironment = <span class=\"hljs-keyword\">this</span>.getEnvironmentWithKey(key)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (!matchedEnvironment) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">`Uncaught ReferenceError: <span class=\"hljs-subst\">$&#123;key&#125;</span> hasn't been defined`</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    matchedEnvironment.values = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">      ...matchedEnvironment.values,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">      [key]: value</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 在作用域链上寻找某个变量，如果没有找到就抛出Uncaught ReferenceError的错误</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">get</span>(key: <span class=\"hljs-built_in\">string</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">const</span> matchedEnvironment = <span class=\"hljs-keyword\">this</span>.getEnvironmentWithKey(key)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (!matchedEnvironment) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">`Uncaught ReferenceError: <span class=\"hljs-subst\">$&#123;key&#125;</span> is not defined`</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">return</span> matchedEnvironment.values[key]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 沿着作用域链向上寻找某个变量的值，如果没有找到就返回null</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">private</span> getEnvironmentWithKey(key: <span class=\"hljs-built_in\">string</span>): Environment &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.values.hasOwnProperty(key)) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">  </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">let</span> currentEnvironment = <span class=\"hljs-keyword\">this</span>.parent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">while</span>(currentEnvironment) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">if</span> (currentEnvironment.values.hasOwnProperty(key)) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-keyword\">return</span> currentEnvironment</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">      currentEnvironment = currentEnvironment.parent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>从上面的代码以及注释可以看出，所谓的作用域链其实就是由Environment实例组成的<code>单向链表</code>。解析某个变量值的时候会沿着这个作用域链进行寻找，如果没有找到该变量的定义就会报错。接着我们以for循环执行的过程来看一下具体过程是怎么样的：</p>\n<p>被执行的代码：</p>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(i);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr></table></figure>\n<p>ForStatement代码的执行过程：</p>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// lib/ast/node/ForStatement.ts</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">class</span> ForStatement <span class=\"hljs-keyword\">extends</span> Node &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// evaluate函数会接受一个作用域对象，这个对象代表当前AST节点的执行作用域</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  evaluate(env: Environment): <span class=\"hljs-built_in\">any</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 上面for循环括号里面的内容是在一个独立的作用域里面的，所以需要基于父级节点传递过来的作用域新建一个作用域，取名为bridgeEnvironment</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">const</span> bridgeEnvironment = <span class=\"hljs-keyword\">new</span> Environment(env)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// if括号内的变量初始化(let i = 0)会在这个作用域里面进行</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.init.evaluate(bridgeEnvironment)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 如果当前作用域没有被break语句退出 &amp;&amp; return语句返回 &amp;&amp; 测试表达式(i &lt; 10)是真值，for循环就会继续执行，否则for循环中断</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">while</span>(!runtime.isBreak &amp;&amp; !runtime.isReturn &amp;&amp; <span class=\"hljs-keyword\">this</span>.test.evaluate(bridgeEnvironment)) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-comment\">// 因为for循环体(console.log(i))是一个新的作用域，所以要基于当前的brigeEnvironment新建一个子作用域</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">const</span> executionEnvironment = <span class=\"hljs-keyword\">new</span> Environment(bridgeEnvironment)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.body.evaluate(executionEnvironment)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-comment\">// 循环变量的更新(i++)会在brigeEnvironment里面执行</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">this</span>.update.evaluate(bridgeEnvironment)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<h2 id=\"闭包和this绑定\"><a href=\"#闭包和this绑定\" class=\"headerlink\" title=\"闭包和this绑定\"></a>闭包和this绑定</h2><p>在理解了evalute函数的一般执行过程后，我们再来看看<code>闭包</code>是如何实现的。我们都知道JavaScript是<code>词法作用域</code>，也就是说一个<code>函数的作用域链在这个函数被定义的时候就决定了</code>。我们通过函数声明节点<code>FunctionDeclaration</code>的evaluate函数的代码来看一下Simple语言的闭包是如何实现的:</p>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// lib/ast/node/FunctionDeclaration.ts</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">class</span> FunctionDeclaration <span class=\"hljs-keyword\">extends</span> Node &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 当函数声明语句被执行的时候，这个evaluate函数会被执行，传进来的对象就是当前的执行作用域</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  evaluate(env: Environment): <span class=\"hljs-built_in\">any</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 生成一个新的FunctionDeclaration对象，因为同一个函数可能被多次定义（例如这个函数被嵌套定义在某个父级函数的时候）</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">const</span> func = <span class=\"hljs-keyword\">new</span> FunctionDeclaration()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 函数复制</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    func.loc = <span class=\"hljs-keyword\">this</span>.loc</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    func.id = <span class=\"hljs-keyword\">this</span>.id</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    func.params = [...this.params]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    func.body = <span class=\"hljs-keyword\">this</span>.body</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 函数被声明的时候会通过parentEnv属性记录下当前的执行作用域，这就是闭包了！！！</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    func.parentEnv = env</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 将函数注册到当前的执行作用域上面，该函数就可以被递归调用了</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    env.create(<span class=\"hljs-keyword\">this</span>.id.name, func)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>从上面的代码可以看出，要实现Simple语言的闭包，<code>其实只需要在函数声明的时候记录一下当前作用域(parentEnv)就可以了</code>。</p>\n<p>接着我们再来看一下函数执行的时候是如何判断<code>this</code>绑定的是哪个对象的：</p>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// lib/ast/node/FunctionDeclaration.ts</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">class</span> FunctionDeclaration <span class=\"hljs-keyword\">extends</span> Node &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 函数执行的时候，如果存在调用函数的实例，该实例会被当做参数传进来，例如a.test()，a就是test的这个参数</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  call(args: <span class=\"hljs-built_in\">Array</span>&lt;<span class=\"hljs-built_in\">any</span>&gt;, callerInstance?: <span class=\"hljs-built_in\">any</span>): <span class=\"hljs-built_in\">any</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 函数执行时传进来的参数如果少于声明的参数会报错</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.params.length !== args.length) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'function declared parameters are not matched with arguments'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 这是实现闭包的重点，函数执行时的父级作用域是之前函数被定义的时候记录下来的父级作用域！！</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">const</span> callEnvironment = <span class=\"hljs-keyword\">new</span> Environment(<span class=\"hljs-keyword\">this</span>.parentEnv)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 函数参数进行初始化</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; args.length; i++) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">const</span> argument = args[i]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">const</span> param = <span class=\"hljs-keyword\">this</span>.params[i]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      callEnvironment.create(param.name, argument)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 创建函数的arguments对象</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    callEnvironment.create(<span class=\"hljs-string\">'arguments'</span>, args)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 如果当前函数有调用实例，那么这个函数的this将会是调用实例</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (callerInstance) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">      callEnvironment.create(<span class=\"hljs-string\">'this'</span>, callerInstance)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-comment\">// 如果函数没有调用实例，就会沿着函数的作用域链就行寻找，直到全局的process(node)或者window(browser)对象</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">      callEnvironment.create(<span class=\"hljs-string\">'this'</span>, <span class=\"hljs-keyword\">this</span>.parentEnv.getRootEnv().get(<span class=\"hljs-string\">'process'</span>))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 函数体的执行</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.body.evaluate(callEnvironment)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>上面的代码大概给大家介绍了Simple语言的this是如何绑定的，实际上JavaScript的实现可能和这个有比较大的出入，这里只是给大家一个参考而已。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在本篇文章中我给大家介绍了Simple解释器是如何执行代码的，其中包括闭包和this绑定的内容，由于篇幅限制这里忽略了很多内容，例如for和while循环的break语句是如何退出的，函数的return语句是如何将值传递给父级函数的，大家如果感兴趣可以看一下我的源码：<br><a href=\"https://github.com/XiaocongDong/simple。\" target=\"_blank\" rel=\"noopener\">https://github.com/XiaocongDong/simple。</a></p>\n<p>最后希望大家经过这三篇系列文章的学习可以对编译原理和JavaScript一些比较难懂的语言特性有一定的了解，也希望后面我可以继续给大家带来优质的内容来让我们共同进步。</p>\n<ul>\n<li><a href=\"https://superseany.com/2020/10/29/%E5%AE%9E%E7%8E%B0JavaScript%E8%AF%AD%E8%A8%80%E8%A7%A3%E9%87%8A%E5%99%A8-%E4%B8%80/\" target=\"_blank\" rel=\"noopener\">实现JavaScript语言解释器-一</a></li>\n<li><a href=\"https://superseany.com/2021/04/18/%E5%AE%9E%E7%8E%B0JavaScript%E8%AF%AD%E8%A8%80%E8%A7%A3%E9%87%8A%E5%99%A8-%E4%BA%8C/\" target=\"_blank\" rel=\"noopener\">实现JavaScript语言解释器-二</a></li>\n</ul>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长</p>\n<p><img src=\"/images/wechat_qr.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><a href=\"https://superseany.com/2021/04/18/%E5%AE%9E%E7%8E%B0JavaScript%E8%AF%AD%E8%A8%80%E8%A7%A3%E9%87%8A%E5%99%A8-%E4%BA%8C/\" target=\"_blank\" rel=\"noopener\">上篇文章</a>我为大家介绍了<code>语法解析</code>的一些基本概念，以及如何通过自定义的DSL语言实现Simple语言解释器的语法树解析。在本篇也是这个系列最后一篇文章中我将为大家介绍Simple解释器是如何执行生成的语法树的。</p>\n<h2 id=\"evaluate函数和作用域\"><a href=\"#evaluate函数和作用域\" class=\"headerlink\" title=\"evaluate函数和作用域\"></a>evaluate函数和作用域</h2><p>前面在介绍语法解析相关知识的时候有出现过<code>evaluate</code>函数，其实<code>基本每一个AST节点都会有一个对应的evaluate函数</code>，这个函数的作用就是告诉Simple解释器如何执行当前AST节点。因此Simple解释器执行代码的过程就是：<code>从根节点开始执行当前节点的evaluate函数然后递归地执行子节点evalute函数的过程</code>。</p>\n<p>我们知道JavaScript代码执行的时候有一个概念叫做<code>作用域</code>，当我们访问一个变量的时候，会先看看当前作用域有没有定义这个变量，如果没有就会沿着作用域链向上一直寻找到全局作用域，如果作用域链上都没有该变量的定义的话就会抛出一个<code>Uncaught ReferenceError: xx is not defined</code>的错误。在实现Simple语言解释器的时候，我参照了JavaScript作用域的概念实现了一个叫做<code>Environment</code>的类，我们来看看Evironment类的实现：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/runtime/Environment.ts</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Environment类就是Simple语言的作用域</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Environment &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// parent指向当前作用域的父级作用域</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">private</span> parent: Environment = <span class=\"literal\">null</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// values对象会以key-value的形式存储当前作用域变量的引用和值</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 例如values = &#123;a: 10&#125;，代表当前作用域有一个变量a，它的值是10</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">protected</span> values: <span class=\"built_in\">Object</span> = &#123;&#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 当前作用域有新的变量定义的时候会调用create函数进行值的设置</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 例如执行 let a = 10 时，会调用env.create('a', 10)</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  create(key: <span class=\"built_in\">string</span>, value: <span class=\"built_in\">any</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.values.hasOwnProperty(key)) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span> has been initialized`</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">this</span>.values[key] = value</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 如果某个变量被重新赋值，Simple会沿着当前作用域链进行寻找，找到最近的符合条件的作用域，然后在该作用域上进行重新赋值</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  update(key: <span class=\"built_in\">string</span>, value: <span class=\"built_in\">any</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> matchedEnvironment = <span class=\"keyword\">this</span>.getEnvironmentWithKey(key)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (!matchedEnvironment) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Uncaught ReferenceError: <span class=\"subst\">$&#123;key&#125;</span> hasn't been defined`</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    matchedEnvironment.values = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">      ...matchedEnvironment.values,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">      [key]: value</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 在作用域链上寻找某个变量，如果没有找到就抛出Uncaught ReferenceError的错误</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">get</span>(key: <span class=\"built_in\">string</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> matchedEnvironment = <span class=\"keyword\">this</span>.getEnvironmentWithKey(key)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (!matchedEnvironment) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Uncaught ReferenceError: <span class=\"subst\">$&#123;key&#125;</span> is not defined`</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> matchedEnvironment.values[key]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 沿着作用域链向上寻找某个变量的值，如果没有找到就返回null</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">private</span> getEnvironmentWithKey(key: <span class=\"built_in\">string</span>): Environment &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.values.hasOwnProperty(key)) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">  </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">let</span> currentEnvironment = <span class=\"keyword\">this</span>.parent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">while</span>(currentEnvironment) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">if</span> (currentEnvironment.values.hasOwnProperty(key)) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">return</span> currentEnvironment</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">      currentEnvironment = currentEnvironment.parent</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>从上面的代码以及注释可以看出，所谓的作用域链其实就是由Environment实例组成的<code>单向链表</code>。解析某个变量值的时候会沿着这个作用域链进行寻找，如果没有找到该变量的定义就会报错。接着我们以for循环执行的过程来看一下具体过程是怎么样的：</p>\n<p>被执行的代码：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr></table></figure>\n<p>ForStatement代码的执行过程：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/ast/node/ForStatement.ts</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> ForStatement <span class=\"keyword\">extends</span> Node &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// evaluate函数会接受一个作用域对象，这个对象代表当前AST节点的执行作用域</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  evaluate(env: Environment): <span class=\"built_in\">any</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 上面for循环括号里面的内容是在一个独立的作用域里面的，所以需要基于父级节点传递过来的作用域新建一个作用域，取名为bridgeEnvironment</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> bridgeEnvironment = <span class=\"keyword\">new</span> Environment(env)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// if括号内的变量初始化(let i = 0)会在这个作用域里面进行</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">this</span>.init.evaluate(bridgeEnvironment)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 如果当前作用域没有被break语句退出 &amp;&amp; return语句返回 &amp;&amp; 测试表达式(i &lt; 10)是真值，for循环就会继续执行，否则for循环中断</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">while</span>(!runtime.isBreak &amp;&amp; !runtime.isReturn &amp;&amp; <span class=\"keyword\">this</span>.test.evaluate(bridgeEnvironment)) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">// 因为for循环体(console.log(i))是一个新的作用域，所以要基于当前的brigeEnvironment新建一个子作用域</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> executionEnvironment = <span class=\"keyword\">new</span> Environment(bridgeEnvironment)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">this</span>.body.evaluate(executionEnvironment)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">// 循环变量的更新(i++)会在brigeEnvironment里面执行</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">this</span>.update.evaluate(bridgeEnvironment)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n\n<h2 id=\"闭包和this绑定\"><a href=\"#闭包和this绑定\" class=\"headerlink\" title=\"闭包和this绑定\"></a>闭包和this绑定</h2><p>在理解了evalute函数的一般执行过程后，我们再来看看<code>闭包</code>是如何实现的。我们都知道JavaScript是<code>词法作用域</code>，也就是说一个<code>函数的作用域链在这个函数被定义的时候就决定了</code>。我们通过函数声明节点<code>FunctionDeclaration</code>的evaluate函数的代码来看一下Simple语言的闭包是如何实现的:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/ast/node/FunctionDeclaration.ts</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> FunctionDeclaration <span class=\"keyword\">extends</span> Node &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 当函数声明语句被执行的时候，这个evaluate函数会被执行，传进来的对象就是当前的执行作用域</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  evaluate(env: Environment): <span class=\"built_in\">any</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 生成一个新的FunctionDeclaration对象，因为同一个函数可能被多次定义（例如这个函数被嵌套定义在某个父级函数的时候）</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> func = <span class=\"keyword\">new</span> FunctionDeclaration()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 函数复制</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    func.loc = <span class=\"keyword\">this</span>.loc</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    func.id = <span class=\"keyword\">this</span>.id</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    func.params = [...this.params]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    func.body = <span class=\"keyword\">this</span>.body</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 函数被声明的时候会通过parentEnv属性记录下当前的执行作用域，这就是闭包了！！！</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    func.parentEnv = env</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 将函数注册到当前的执行作用域上面，该函数就可以被递归调用了</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    env.create(<span class=\"keyword\">this</span>.id.name, func)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>从上面的代码可以看出，要实现Simple语言的闭包，<code>其实只需要在函数声明的时候记录一下当前作用域(parentEnv)就可以了</code>。</p>\n<p>接着我们再来看一下函数执行的时候是如何判断<code>this</code>绑定的是哪个对象的：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/ast/node/FunctionDeclaration.ts</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> FunctionDeclaration <span class=\"keyword\">extends</span> Node &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ...</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 函数执行的时候，如果存在调用函数的实例，该实例会被当做参数传进来，例如a.test()，a就是test的这个参数</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  call(args: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">any</span>&gt;, callerInstance?: <span class=\"built_in\">any</span>): <span class=\"built_in\">any</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 函数执行时传进来的参数如果少于声明的参数会报错</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.params.length !== args.length) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'function declared parameters are not matched with arguments'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 这是实现闭包的重点，函数执行时的父级作用域是之前函数被定义的时候记录下来的父级作用域！！</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> callEnvironment = <span class=\"keyword\">new</span> Environment(<span class=\"keyword\">this</span>.parentEnv)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 函数参数进行初始化</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; args.length; i++) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> argument = args[i]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">const</span> param = <span class=\"keyword\">this</span>.params[i]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      callEnvironment.create(param.name, argument)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 创建函数的arguments对象</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">    callEnvironment.create(<span class=\"string\">'arguments'</span>, args)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 如果当前函数有调用实例，那么这个函数的this将会是调用实例</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (callerInstance) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">      callEnvironment.create(<span class=\"string\">'this'</span>, callerInstance)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">// 如果函数没有调用实例，就会沿着函数的作用域链就行寻找，直到全局的process(node)或者window(browser)对象</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">      callEnvironment.create(<span class=\"string\">'this'</span>, <span class=\"keyword\">this</span>.parentEnv.getRootEnv().get(<span class=\"string\">'process'</span>))</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 函数体的执行</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">this</span>.body.evaluate(callEnvironment)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>上面的代码大概给大家介绍了Simple语言的this是如何绑定的，实际上JavaScript的实现可能和这个有比较大的出入，这里只是给大家一个参考而已。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在本篇文章中我给大家介绍了Simple解释器是如何执行代码的，其中包括闭包和this绑定的内容，由于篇幅限制这里忽略了很多内容，例如for和while循环的break语句是如何退出的，函数的return语句是如何将值传递给父级函数的，大家如果感兴趣可以看一下我的源码：<br><a href=\"https://github.com/XiaocongDong/simple。\" target=\"_blank\" rel=\"noopener\">https://github.com/XiaocongDong/simple。</a></p>\n<p>最后希望大家经过这三篇系列文章的学习可以对编译原理和JavaScript一些比较难懂的语言特性有一定的了解，也希望后面我可以继续给大家带来优质的内容来让我们共同进步。</p>\n<ul>\n<li><a href=\"https://superseany.com/2020/10/29/%E5%AE%9E%E7%8E%B0JavaScript%E8%AF%AD%E8%A8%80%E8%A7%A3%E9%87%8A%E5%99%A8-%E4%B8%80/\" target=\"_blank\" rel=\"noopener\">实现JavaScript语言解释器-一</a></li>\n<li><a href=\"https://superseany.com/2021/04/18/%E5%AE%9E%E7%8E%B0JavaScript%E8%AF%AD%E8%A8%80%E8%A7%A3%E9%87%8A%E5%99%A8-%E4%BA%8C/\" target=\"_blank\" rel=\"noopener\">实现JavaScript语言解释器-二</a></li>\n</ul>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长</p>\n<p><img src=\"/images/wechat_qr.jpg\" alt=\"\"></p>\n"},{"title":"窥探现代浏览器架构(一)","thumbnail":"/gallery/thumbnails/chrome.png","date":"2019-12-25T11:09:39.000Z","_content":"\n## 前言\n本文是笔者对[Mario Kosaka](https://developers.google.com/web/resources/contributors/kosamari)写的[inside look at modern web browser](https://developers.google.com/web/updates/2018/09/inside-browser-part1)系列文章的翻译。这里的翻译不是指直译，而是结合个人的理解将作者想表达的意思表达出来，而且会尽量补充一些相关的内容来帮助大家更好地理解。\n## CPU，GPU，内存和多进程架构\n在这个**4集系列教程**里面，我将会从Chrome浏览器的高层次架构（high-level architecture）开始说起，一直深入讲到页面渲染流水线（rendering pipeline）的具体细节。如果你想知道浏览器是怎么把你编写的代码转变成一个可用的网站，或者你不知道为什么一些特定的代码写法可以提高网站的性能的，那你就来对地方了，这篇文章就是为你准备的。\n\n作为本系列文章的第一篇，我们会先了解一些关键的**计算机术语**以及Chrome浏览器的**多进程架构**。\n\n<!-- more-->\n\n## 计算机的核心 - CPU和GPU\n要想理解浏览器的运行环境，我们先要搞明白一些计算机组件以及它们的作用。\n### CPU\n首先我们要说的是计算机的大脑 - CPU（**C**entral **P**rocessing **U**nit）。CPU是计算机里面的一块芯片，上面有一个或者多个核心（core）。我们可以把CPU的一个核心（core）比喻成一个办公室工人，他**功能强大**，上知天文下知地理，琴棋书画无所不能，**它可以串行地一件接着一件处理交给它的任务**。很久之前的时候大多数CPU只有一个核心，不过在现在的硬件设备上CPU通常会有多个核心，因为多核心CPU可以大大提高手机和电脑的运算能力。\n![](/images/chrome/CPU.png)\n<p align=\"center\">四个CPU核心愉快地在各自工位上一个接着一个地处理交给它们的任务</p>\n\n### GPU\n图形处理器 - 或者说GPU（**G**raphics **P**rocessing **U**nit）是计算机的另外一个重要组成部分。和功能强大的CPU核心不一样的是，单个GPU核心只能处理一些简单的任务，不过它胜在数量多，单片GPU上会有很多很多的核心可以同时工作，也就是说它的**并行计算能力是非常强**的。图形处理器（GPU）顾名思义一开始就是专门用来处理图形的，所以在说到图形**使用GPU**（using）或者**GPU支持**（backed）时，人们就会联想到图形快速渲染或者流畅的用户体验相关的概念。最近几年来，随着**GPU加速概念**的流行，在GPU上单独进行的计算也变得越来越多了。\n![](/images/chrome/GPU.png)\n<p align=\"center\">每个GPU核心手里只有一个扳手，这就说明它的能力是非常有限的，可是它们人多啊！</p>\n\n当你在手机或者电脑上打开某个应用程序的时候，背后其实是CPU和GPU支撑着这个应用程序的运行。通常来说，你的应用要通过**操作系统**提供的一些机制才能跑在CPU和GPU上面。\n![](/images/chrome/hw-os-app.png)\n<p align=\"center\">计算机的三层架构，最下层是硬件机器，操作系统夹在中间，最上层是运行的应用</p>\n\n## 在进程和线程上执行程序\n在深入到浏览器的架构之前我们还得了解一下进程（process）和线程（thread）的相关概念。进程可以看成正在被执行的应用程序（executing program）。而**线程是跑在进程里面的**，一个进程里面可能有一个或者多个线程，这些线程可以执行任何一部分应用程序的代码。\n![](/images/chrome/process-thread.png)\n<p align=\"center\">进程就像一个大鱼缸，而线程就是浴缸里面畅游的鱼儿</p>\n\n当你启动一个应用程序的时候，操作系统会为这个程序创建一个进程同时还为这个进程分配一片**私有的内存空间**，这片空间会被用来存储所有程序相关的数据和状态。当你关闭这个程序的时候，这个程序对应的进程也会随之消失，进程对应的内存空间也会被操作系统释放掉。\n![](/images/chrome/memory.svg)\n<p align=\"center\">进程使用系统分配的内存空间去存储应用的数据</p>\n\n有时候为了满足功能的需要，创建的进程会叫系统创建另外一些进程去处理其它任务，不过新建的进程会拥有**全新的独立的内存空间**而不是和原来的进程共用内存空间。如果这些进程需要通信，它们要通过**IPC**机制（Inter Process Communication）来进行。很多应用程序都会采取这种**多进程的方式**来工作，因为进程和进程之间是互相独立的它们互不影响，换句话来书，如果其中一个工作进程（worker process）挂掉了其他进程不会受到影响，而且挂掉的进程还可以重启。\n![](/images/chrome/workerprocess.png)\n<p align=\"center\">不同的进程通过IPC来通信</p>\n\n## 浏览器架构\n那么浏览器是怎么使用进程和线程来工作的呢？其实大概可以分为两种架构，一种是单进程架构，也就是只启动一个进程，这个进程里面有多个线程工作。第二种是多进程架构，浏览器会启动多个进程，每个进程里面有多个线程，不同进程通过IPC进行通信。\n![](/images/chrome/browser-arch.png)\n<p align=\"center\">单进程和多进程浏览器的架构图</p>\n\n上面的图表架构其实包含了浏览器架构的具体实现了，在现实中其实并没有一个大家都遵循的浏览器实现标准，所以不同浏览器的实现方式可能会完全不一样。\n\n为了更好地在本系列文章中展开论述，我们主要讨论最新的Chrome浏览器架构，它采用的是**多进程架构**，以下是架构图：\n![](/images/chrome/browser-arch2.png)\n<p align=\"center\">Chrome的多进程架构图，多个渲染进程的卡片（render process）是用来表明Chrome会为每一个tab创建一个渲染进程。</p>\n\nChrome浏览器会有一个浏览器进程（browser process），这个进程会和其他进程一起协作来实现浏览器的功能。对于渲染进程（renderer process），Chrome会尽可能为每一个tab甚至是页面里面的每一个iframe都分配一个单独的进程。\n\n## 各个进程如何分工合作呢？\n以下是各个进程具体负责的工作内容：\n\n| 进程     | 负责的工作                                                                                                                                 |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------ |\n| Browser  | 负责浏览器的“Chrome”部分， 包括导航栏，书签， 前进和后退按钮。同时这个进程还会控制那些我们看不见的部分，包括网络请求的发送以及文件的读写。 |\n| Renderer | 负责tab内和网页展示相关的所有工作。                                                                                                        |\n| Plugin   | 控制网页使用的所有插件，例如flash插件。                                                                                                    |\n| GPU      | 负责独立于其它进程的GPU任务。它之所以被独立为一个进程是因为它要处理来自于不同tab的渲染请求并把它在同一个界面上画出来。                     |\n\n![](/images/chrome/browserui.png)\n<p align=\"center\">不同的进程负责浏览器不同部分的界面内容</p>\n\n除了上面列出来的进程，Chrome还有很多其他进程在工作，例如扩展进程（Extension Process）和工具进程（utility process）。如果你想看一下你的Chrome浏览器现在有多少个进程在跑可以点击浏览器右上角的更多按钮，选择更多工具和任务管理器：\n![](/images/chrome/devtool.png)\n在弹出的窗口里面你会看到正在工作的进程列表，以及每个进程使用的CPU和内存状况。\n\n## Chrome多进程架构的好处\n那么为什么Chrome会采取多进程架构工作呢？\n\n其中一个好处是多进程可以使浏览器具有很好的容错性。对于大多数简单的情景来说，Chrome会为每个tab单独分配一个属于它们的渲染进程（render process）。举个例子，假如你有三个tab，你就会有三个独立的渲染进程。当其中一个tab的崩溃时，你可以随时关闭这个tab并且其他tab不受到影响。可是如果所有的tab都跑在同一个进程的话，它们就会有连带关系，一个挂全部挂。\n![](/images/chrome/tabs.png)\n<p align=\"center\">不同的tab会有不同的渲染进程来负责</p>\n\nChrome采用多进程架构的另外一个好处就是可以提供安全性和沙盒性（sanboxing）。因为操作系统可以提供方法让你限制每个进程拥有的能力，所以浏览器可以让某些进程不具备某些特定的功能。例如，由于tab渲染进程可能会处理来自用户的随机输入，所以Chrome限制了它们对系统文件随机读写的能力。\n\n不过多进程架构也有它不好的地方，那就是进程的内存消耗。由于每个进程都有各自独立的内存空间，所以它们不能像存在于同一个进程的线程那样共用内存空间，这就造成了一些基础的架构（例如V8 JavaScript引擎）会在不同进程的内存空间同时存在的问题，这些重复的内容会消耗更多的内存。所以为了节省内存，Chrome会限制被启动的进程数目，当进程数达到一定的界限后，Chrome会将**访问同一个网站的tab都放在一个进程里面跑**。\n\n## 节省更多的内存 - Chrome的服务化\n同样的优化方法也可以被使用在浏览器进程（browser process）上面。Chrome浏览器的架构正在发生一些改变，目的是将和浏览器本身（Chrome）相关的部分拆分为一个个不同的服务，服务化之后，这些功能既可以放在不同的进程里面运行也可以合并为一个单独的进程运行。\n\n这样做的主要原因是让Chrome在不同性能的硬件上有不同的表现。当Chrome运行在一些性能比较好的硬件时，浏览器进程相关的服务会被放在不同的进程运行以提高系统的稳定性。相反如果硬件性能不好，这些服务就会被放在同一个进程里面执行来减少内存的占用。其实在这次架构变化之前，Chrome在Android上面已经开始采取类似的做法了。\n![](/images/chrome/servicfication.png)\n<p align=\"center\">Chrome将浏览器相关的服务放在同一个进程里面运行和放在不同的进程运行的区别</p>\n\n## 单帧渲染进程 - 网站隔离（Site Isolation）\n[网站隔离](https://developers.google.com/web/updates/2018/07/site-isolation)（Site Isolation）是最近Chrome浏览器启动的功能，这个功能会为网站内不同站点的iframe分配一个独立的渲染进程。之前说过Chrome会为每个tab分配一个单独的渲染进程，可是如果一个tab只有一个进程的话不同站点的iframe都会跑在这个进程里面，这也意味着它们会共享内存，这就有可能会破坏[同源策略](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy)。同源策略是浏览器最核心的安全模型，它可以禁止网站在未经同意的情况下去获取另外一个站点的数据，因此绕过同源策略是很多安全攻击的主要目的。而进程隔离（proces isolation）是隔离网站最好最有效的办法了。再加上CPU存在[Meltdown和Spectre](https://developers.google.com/web/updates/2018/02/meltdown-spectre)的隐患，网站隔离变得势在必行。因此在Chrome 67版本之后，桌面版的Chrome会默认开启网站隔离功能，这样每一个跨站点的iframe都会拥有一个独立的渲染进程。\n![](/images/chrome/isolation.png)\n<p align=\"center\">网站隔离功能会让跨站的iframe拥有独立的进程</p>\n\n网站隔离技术汇聚了我们工程师好几年的研发努力，它其实远远没有想象中那样只是为不同站点的iframe分配一个独立的渲染进程那么简单，因为它从根本上改变了各个iframe之间的通信方式。网站隔离后，对于有iframe的网站，当用户打开右边的devtool时，Chrome浏览器其实要做很多幕后工作才能让开发者感觉不出这和之前的有什么区别，这其实是很难实现的。对于一些很简单的功能，例如在devtool里面用Ctrl + F键在页面搜索某个关键词，Chrome都要遍历多个渲染进程去完成。所以我们的浏览器工程师在网站隔离这个功能发布后都感叹这是一个里程碑式的成就。\n\n## 总结\n在本篇文章中，我们探讨了浏览器高层次的架构设计以及多进程架构的带来的好处。同时我们还讨论了服务化和网站隔离这些和浏览器多进程架构息息相关的技术。在下一篇文章中我们要开始深入了解这些进程和线程是如何呈现我们的网站页面的了。\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","source":"_posts/窥探现代浏览器架构-一.md","raw":"---\ntitle: 窥探现代浏览器架构(一)\ntags:\n  - Chrome\n  - 浏览器\nthumbnail: /gallery/thumbnails/chrome.png\ncategories:\n  - 前端\ndate: 2019-12-25 19:09:39\n---\n\n## 前言\n本文是笔者对[Mario Kosaka](https://developers.google.com/web/resources/contributors/kosamari)写的[inside look at modern web browser](https://developers.google.com/web/updates/2018/09/inside-browser-part1)系列文章的翻译。这里的翻译不是指直译，而是结合个人的理解将作者想表达的意思表达出来，而且会尽量补充一些相关的内容来帮助大家更好地理解。\n## CPU，GPU，内存和多进程架构\n在这个**4集系列教程**里面，我将会从Chrome浏览器的高层次架构（high-level architecture）开始说起，一直深入讲到页面渲染流水线（rendering pipeline）的具体细节。如果你想知道浏览器是怎么把你编写的代码转变成一个可用的网站，或者你不知道为什么一些特定的代码写法可以提高网站的性能的，那你就来对地方了，这篇文章就是为你准备的。\n\n作为本系列文章的第一篇，我们会先了解一些关键的**计算机术语**以及Chrome浏览器的**多进程架构**。\n\n<!-- more-->\n\n## 计算机的核心 - CPU和GPU\n要想理解浏览器的运行环境，我们先要搞明白一些计算机组件以及它们的作用。\n### CPU\n首先我们要说的是计算机的大脑 - CPU（**C**entral **P**rocessing **U**nit）。CPU是计算机里面的一块芯片，上面有一个或者多个核心（core）。我们可以把CPU的一个核心（core）比喻成一个办公室工人，他**功能强大**，上知天文下知地理，琴棋书画无所不能，**它可以串行地一件接着一件处理交给它的任务**。很久之前的时候大多数CPU只有一个核心，不过在现在的硬件设备上CPU通常会有多个核心，因为多核心CPU可以大大提高手机和电脑的运算能力。\n![](/images/chrome/CPU.png)\n<p align=\"center\">四个CPU核心愉快地在各自工位上一个接着一个地处理交给它们的任务</p>\n\n### GPU\n图形处理器 - 或者说GPU（**G**raphics **P**rocessing **U**nit）是计算机的另外一个重要组成部分。和功能强大的CPU核心不一样的是，单个GPU核心只能处理一些简单的任务，不过它胜在数量多，单片GPU上会有很多很多的核心可以同时工作，也就是说它的**并行计算能力是非常强**的。图形处理器（GPU）顾名思义一开始就是专门用来处理图形的，所以在说到图形**使用GPU**（using）或者**GPU支持**（backed）时，人们就会联想到图形快速渲染或者流畅的用户体验相关的概念。最近几年来，随着**GPU加速概念**的流行，在GPU上单独进行的计算也变得越来越多了。\n![](/images/chrome/GPU.png)\n<p align=\"center\">每个GPU核心手里只有一个扳手，这就说明它的能力是非常有限的，可是它们人多啊！</p>\n\n当你在手机或者电脑上打开某个应用程序的时候，背后其实是CPU和GPU支撑着这个应用程序的运行。通常来说，你的应用要通过**操作系统**提供的一些机制才能跑在CPU和GPU上面。\n![](/images/chrome/hw-os-app.png)\n<p align=\"center\">计算机的三层架构，最下层是硬件机器，操作系统夹在中间，最上层是运行的应用</p>\n\n## 在进程和线程上执行程序\n在深入到浏览器的架构之前我们还得了解一下进程（process）和线程（thread）的相关概念。进程可以看成正在被执行的应用程序（executing program）。而**线程是跑在进程里面的**，一个进程里面可能有一个或者多个线程，这些线程可以执行任何一部分应用程序的代码。\n![](/images/chrome/process-thread.png)\n<p align=\"center\">进程就像一个大鱼缸，而线程就是浴缸里面畅游的鱼儿</p>\n\n当你启动一个应用程序的时候，操作系统会为这个程序创建一个进程同时还为这个进程分配一片**私有的内存空间**，这片空间会被用来存储所有程序相关的数据和状态。当你关闭这个程序的时候，这个程序对应的进程也会随之消失，进程对应的内存空间也会被操作系统释放掉。\n![](/images/chrome/memory.svg)\n<p align=\"center\">进程使用系统分配的内存空间去存储应用的数据</p>\n\n有时候为了满足功能的需要，创建的进程会叫系统创建另外一些进程去处理其它任务，不过新建的进程会拥有**全新的独立的内存空间**而不是和原来的进程共用内存空间。如果这些进程需要通信，它们要通过**IPC**机制（Inter Process Communication）来进行。很多应用程序都会采取这种**多进程的方式**来工作，因为进程和进程之间是互相独立的它们互不影响，换句话来书，如果其中一个工作进程（worker process）挂掉了其他进程不会受到影响，而且挂掉的进程还可以重启。\n![](/images/chrome/workerprocess.png)\n<p align=\"center\">不同的进程通过IPC来通信</p>\n\n## 浏览器架构\n那么浏览器是怎么使用进程和线程来工作的呢？其实大概可以分为两种架构，一种是单进程架构，也就是只启动一个进程，这个进程里面有多个线程工作。第二种是多进程架构，浏览器会启动多个进程，每个进程里面有多个线程，不同进程通过IPC进行通信。\n![](/images/chrome/browser-arch.png)\n<p align=\"center\">单进程和多进程浏览器的架构图</p>\n\n上面的图表架构其实包含了浏览器架构的具体实现了，在现实中其实并没有一个大家都遵循的浏览器实现标准，所以不同浏览器的实现方式可能会完全不一样。\n\n为了更好地在本系列文章中展开论述，我们主要讨论最新的Chrome浏览器架构，它采用的是**多进程架构**，以下是架构图：\n![](/images/chrome/browser-arch2.png)\n<p align=\"center\">Chrome的多进程架构图，多个渲染进程的卡片（render process）是用来表明Chrome会为每一个tab创建一个渲染进程。</p>\n\nChrome浏览器会有一个浏览器进程（browser process），这个进程会和其他进程一起协作来实现浏览器的功能。对于渲染进程（renderer process），Chrome会尽可能为每一个tab甚至是页面里面的每一个iframe都分配一个单独的进程。\n\n## 各个进程如何分工合作呢？\n以下是各个进程具体负责的工作内容：\n\n| 进程     | 负责的工作                                                                                                                                 |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------ |\n| Browser  | 负责浏览器的“Chrome”部分， 包括导航栏，书签， 前进和后退按钮。同时这个进程还会控制那些我们看不见的部分，包括网络请求的发送以及文件的读写。 |\n| Renderer | 负责tab内和网页展示相关的所有工作。                                                                                                        |\n| Plugin   | 控制网页使用的所有插件，例如flash插件。                                                                                                    |\n| GPU      | 负责独立于其它进程的GPU任务。它之所以被独立为一个进程是因为它要处理来自于不同tab的渲染请求并把它在同一个界面上画出来。                     |\n\n![](/images/chrome/browserui.png)\n<p align=\"center\">不同的进程负责浏览器不同部分的界面内容</p>\n\n除了上面列出来的进程，Chrome还有很多其他进程在工作，例如扩展进程（Extension Process）和工具进程（utility process）。如果你想看一下你的Chrome浏览器现在有多少个进程在跑可以点击浏览器右上角的更多按钮，选择更多工具和任务管理器：\n![](/images/chrome/devtool.png)\n在弹出的窗口里面你会看到正在工作的进程列表，以及每个进程使用的CPU和内存状况。\n\n## Chrome多进程架构的好处\n那么为什么Chrome会采取多进程架构工作呢？\n\n其中一个好处是多进程可以使浏览器具有很好的容错性。对于大多数简单的情景来说，Chrome会为每个tab单独分配一个属于它们的渲染进程（render process）。举个例子，假如你有三个tab，你就会有三个独立的渲染进程。当其中一个tab的崩溃时，你可以随时关闭这个tab并且其他tab不受到影响。可是如果所有的tab都跑在同一个进程的话，它们就会有连带关系，一个挂全部挂。\n![](/images/chrome/tabs.png)\n<p align=\"center\">不同的tab会有不同的渲染进程来负责</p>\n\nChrome采用多进程架构的另外一个好处就是可以提供安全性和沙盒性（sanboxing）。因为操作系统可以提供方法让你限制每个进程拥有的能力，所以浏览器可以让某些进程不具备某些特定的功能。例如，由于tab渲染进程可能会处理来自用户的随机输入，所以Chrome限制了它们对系统文件随机读写的能力。\n\n不过多进程架构也有它不好的地方，那就是进程的内存消耗。由于每个进程都有各自独立的内存空间，所以它们不能像存在于同一个进程的线程那样共用内存空间，这就造成了一些基础的架构（例如V8 JavaScript引擎）会在不同进程的内存空间同时存在的问题，这些重复的内容会消耗更多的内存。所以为了节省内存，Chrome会限制被启动的进程数目，当进程数达到一定的界限后，Chrome会将**访问同一个网站的tab都放在一个进程里面跑**。\n\n## 节省更多的内存 - Chrome的服务化\n同样的优化方法也可以被使用在浏览器进程（browser process）上面。Chrome浏览器的架构正在发生一些改变，目的是将和浏览器本身（Chrome）相关的部分拆分为一个个不同的服务，服务化之后，这些功能既可以放在不同的进程里面运行也可以合并为一个单独的进程运行。\n\n这样做的主要原因是让Chrome在不同性能的硬件上有不同的表现。当Chrome运行在一些性能比较好的硬件时，浏览器进程相关的服务会被放在不同的进程运行以提高系统的稳定性。相反如果硬件性能不好，这些服务就会被放在同一个进程里面执行来减少内存的占用。其实在这次架构变化之前，Chrome在Android上面已经开始采取类似的做法了。\n![](/images/chrome/servicfication.png)\n<p align=\"center\">Chrome将浏览器相关的服务放在同一个进程里面运行和放在不同的进程运行的区别</p>\n\n## 单帧渲染进程 - 网站隔离（Site Isolation）\n[网站隔离](https://developers.google.com/web/updates/2018/07/site-isolation)（Site Isolation）是最近Chrome浏览器启动的功能，这个功能会为网站内不同站点的iframe分配一个独立的渲染进程。之前说过Chrome会为每个tab分配一个单独的渲染进程，可是如果一个tab只有一个进程的话不同站点的iframe都会跑在这个进程里面，这也意味着它们会共享内存，这就有可能会破坏[同源策略](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy)。同源策略是浏览器最核心的安全模型，它可以禁止网站在未经同意的情况下去获取另外一个站点的数据，因此绕过同源策略是很多安全攻击的主要目的。而进程隔离（proces isolation）是隔离网站最好最有效的办法了。再加上CPU存在[Meltdown和Spectre](https://developers.google.com/web/updates/2018/02/meltdown-spectre)的隐患，网站隔离变得势在必行。因此在Chrome 67版本之后，桌面版的Chrome会默认开启网站隔离功能，这样每一个跨站点的iframe都会拥有一个独立的渲染进程。\n![](/images/chrome/isolation.png)\n<p align=\"center\">网站隔离功能会让跨站的iframe拥有独立的进程</p>\n\n网站隔离技术汇聚了我们工程师好几年的研发努力，它其实远远没有想象中那样只是为不同站点的iframe分配一个独立的渲染进程那么简单，因为它从根本上改变了各个iframe之间的通信方式。网站隔离后，对于有iframe的网站，当用户打开右边的devtool时，Chrome浏览器其实要做很多幕后工作才能让开发者感觉不出这和之前的有什么区别，这其实是很难实现的。对于一些很简单的功能，例如在devtool里面用Ctrl + F键在页面搜索某个关键词，Chrome都要遍历多个渲染进程去完成。所以我们的浏览器工程师在网站隔离这个功能发布后都感叹这是一个里程碑式的成就。\n\n## 总结\n在本篇文章中，我们探讨了浏览器高层次的架构设计以及多进程架构的带来的好处。同时我们还讨论了服务化和网站隔离这些和浏览器多进程架构息息相关的技术。在下一篇文章中我们要开始深入了解这些进程和线程是如何呈现我们的网站页面的了。\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","slug":"窥探现代浏览器架构-一","published":1,"updated":"2021-02-08T06:16:56.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0gqf6fs000nucnxcgbuamor","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文是笔者对<a href=\"https://developers.google.com/web/resources/contributors/kosamari\" target=\"_blank\" rel=\"noopener\">Mario Kosaka</a>写的<a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part1\" target=\"_blank\" rel=\"noopener\">inside look at modern web browser</a>系列文章的翻译。这里的翻译不是指直译，而是结合个人的理解将作者想表达的意思表达出来，而且会尽量补充一些相关的内容来帮助大家更好地理解。</p>\n<h2 id=\"CPU，GPU，内存和多进程架构\"><a href=\"#CPU，GPU，内存和多进程架构\" class=\"headerlink\" title=\"CPU，GPU，内存和多进程架构\"></a>CPU，GPU，内存和多进程架构</h2><p>在这个<strong>4集系列教程</strong>里面，我将会从Chrome浏览器的高层次架构（high-level architecture）开始说起，一直深入讲到页面渲染流水线（rendering pipeline）的具体细节。如果你想知道浏览器是怎么把你编写的代码转变成一个可用的网站，或者你不知道为什么一些特定的代码写法可以提高网站的性能的，那你就来对地方了，这篇文章就是为你准备的。</p>\n<p>作为本系列文章的第一篇，我们会先了解一些关键的<strong>计算机术语</strong>以及Chrome浏览器的<strong>多进程架构</strong>。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"计算机的核心-CPU和GPU\"><a href=\"#计算机的核心-CPU和GPU\" class=\"headerlink\" title=\"计算机的核心 - CPU和GPU\"></a>计算机的核心 - CPU和GPU</h2><p>要想理解浏览器的运行环境，我们先要搞明白一些计算机组件以及它们的作用。</p>\n<h3 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h3><p>首先我们要说的是计算机的大脑 - CPU（<strong>C</strong>entral <strong>P</strong>rocessing <strong>U</strong>nit）。CPU是计算机里面的一块芯片，上面有一个或者多个核心（core）。我们可以把CPU的一个核心（core）比喻成一个办公室工人，他<strong>功能强大</strong>，上知天文下知地理，琴棋书画无所不能，<strong>它可以串行地一件接着一件处理交给它的任务</strong>。很久之前的时候大多数CPU只有一个核心，不过在现在的硬件设备上CPU通常会有多个核心，因为多核心CPU可以大大提高手机和电脑的运算能力。<br><img src=\"/images/chrome/CPU.png\" alt></p>\n<p align=\"center\">四个CPU核心愉快地在各自工位上一个接着一个地处理交给它们的任务</p>\n\n<h3 id=\"GPU\"><a href=\"#GPU\" class=\"headerlink\" title=\"GPU\"></a>GPU</h3><p>图形处理器 - 或者说GPU（<strong>G</strong>raphics <strong>P</strong>rocessing <strong>U</strong>nit）是计算机的另外一个重要组成部分。和功能强大的CPU核心不一样的是，单个GPU核心只能处理一些简单的任务，不过它胜在数量多，单片GPU上会有很多很多的核心可以同时工作，也就是说它的<strong>并行计算能力是非常强</strong>的。图形处理器（GPU）顾名思义一开始就是专门用来处理图形的，所以在说到图形<strong>使用GPU</strong>（using）或者<strong>GPU支持</strong>（backed）时，人们就会联想到图形快速渲染或者流畅的用户体验相关的概念。最近几年来，随着<strong>GPU加速概念</strong>的流行，在GPU上单独进行的计算也变得越来越多了。<br><img src=\"/images/chrome/GPU.png\" alt></p>\n<p align=\"center\">每个GPU核心手里只有一个扳手，这就说明它的能力是非常有限的，可是它们人多啊！</p>\n\n<p>当你在手机或者电脑上打开某个应用程序的时候，背后其实是CPU和GPU支撑着这个应用程序的运行。通常来说，你的应用要通过<strong>操作系统</strong>提供的一些机制才能跑在CPU和GPU上面。<br><img src=\"/images/chrome/hw-os-app.png\" alt></p>\n<p align=\"center\">计算机的三层架构，最下层是硬件机器，操作系统夹在中间，最上层是运行的应用</p>\n\n<h2 id=\"在进程和线程上执行程序\"><a href=\"#在进程和线程上执行程序\" class=\"headerlink\" title=\"在进程和线程上执行程序\"></a>在进程和线程上执行程序</h2><p>在深入到浏览器的架构之前我们还得了解一下进程（process）和线程（thread）的相关概念。进程可以看成正在被执行的应用程序（executing program）。而<strong>线程是跑在进程里面的</strong>，一个进程里面可能有一个或者多个线程，这些线程可以执行任何一部分应用程序的代码。<br><img src=\"/images/chrome/process-thread.png\" alt></p>\n<p align=\"center\">进程就像一个大鱼缸，而线程就是浴缸里面畅游的鱼儿</p>\n\n<p>当你启动一个应用程序的时候，操作系统会为这个程序创建一个进程同时还为这个进程分配一片<strong>私有的内存空间</strong>，这片空间会被用来存储所有程序相关的数据和状态。当你关闭这个程序的时候，这个程序对应的进程也会随之消失，进程对应的内存空间也会被操作系统释放掉。<br><img src=\"/images/chrome/memory.svg\" alt></p>\n<p align=\"center\">进程使用系统分配的内存空间去存储应用的数据</p>\n\n<p>有时候为了满足功能的需要，创建的进程会叫系统创建另外一些进程去处理其它任务，不过新建的进程会拥有<strong>全新的独立的内存空间</strong>而不是和原来的进程共用内存空间。如果这些进程需要通信，它们要通过<strong>IPC</strong>机制（Inter Process Communication）来进行。很多应用程序都会采取这种<strong>多进程的方式</strong>来工作，因为进程和进程之间是互相独立的它们互不影响，换句话来书，如果其中一个工作进程（worker process）挂掉了其他进程不会受到影响，而且挂掉的进程还可以重启。<br><img src=\"/images/chrome/workerprocess.png\" alt></p>\n<p align=\"center\">不同的进程通过IPC来通信</p>\n\n<h2 id=\"浏览器架构\"><a href=\"#浏览器架构\" class=\"headerlink\" title=\"浏览器架构\"></a>浏览器架构</h2><p>那么浏览器是怎么使用进程和线程来工作的呢？其实大概可以分为两种架构，一种是单进程架构，也就是只启动一个进程，这个进程里面有多个线程工作。第二种是多进程架构，浏览器会启动多个进程，每个进程里面有多个线程，不同进程通过IPC进行通信。<br><img src=\"/images/chrome/browser-arch.png\" alt></p>\n<p align=\"center\">单进程和多进程浏览器的架构图</p>\n\n<p>上面的图表架构其实包含了浏览器架构的具体实现了，在现实中其实并没有一个大家都遵循的浏览器实现标准，所以不同浏览器的实现方式可能会完全不一样。</p>\n<p>为了更好地在本系列文章中展开论述，我们主要讨论最新的Chrome浏览器架构，它采用的是<strong>多进程架构</strong>，以下是架构图：<br><img src=\"/images/chrome/browser-arch2.png\" alt></p>\n<p align=\"center\">Chrome的多进程架构图，多个渲染进程的卡片（render process）是用来表明Chrome会为每一个tab创建一个渲染进程。</p>\n\n<p>Chrome浏览器会有一个浏览器进程（browser process），这个进程会和其他进程一起协作来实现浏览器的功能。对于渲染进程（renderer process），Chrome会尽可能为每一个tab甚至是页面里面的每一个iframe都分配一个单独的进程。</p>\n<h2 id=\"各个进程如何分工合作呢？\"><a href=\"#各个进程如何分工合作呢？\" class=\"headerlink\" title=\"各个进程如何分工合作呢？\"></a>各个进程如何分工合作呢？</h2><p>以下是各个进程具体负责的工作内容：</p>\n<table>\n<thead>\n<tr>\n<th>进程</th>\n<th>负责的工作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Browser</td>\n<td>负责浏览器的“Chrome”部分， 包括导航栏，书签， 前进和后退按钮。同时这个进程还会控制那些我们看不见的部分，包括网络请求的发送以及文件的读写。</td>\n</tr>\n<tr>\n<td>Renderer</td>\n<td>负责tab内和网页展示相关的所有工作。</td>\n</tr>\n<tr>\n<td>Plugin</td>\n<td>控制网页使用的所有插件，例如flash插件。</td>\n</tr>\n<tr>\n<td>GPU</td>\n<td>负责独立于其它进程的GPU任务。它之所以被独立为一个进程是因为它要处理来自于不同tab的渲染请求并把它在同一个界面上画出来。</td>\n</tr>\n</tbody></table>\n<p><img src=\"/images/chrome/browserui.png\" alt></p>\n<p align=\"center\">不同的进程负责浏览器不同部分的界面内容</p>\n\n<p>除了上面列出来的进程，Chrome还有很多其他进程在工作，例如扩展进程（Extension Process）和工具进程（utility process）。如果你想看一下你的Chrome浏览器现在有多少个进程在跑可以点击浏览器右上角的更多按钮，选择更多工具和任务管理器：<br><img src=\"/images/chrome/devtool.png\" alt><br>在弹出的窗口里面你会看到正在工作的进程列表，以及每个进程使用的CPU和内存状况。</p>\n<h2 id=\"Chrome多进程架构的好处\"><a href=\"#Chrome多进程架构的好处\" class=\"headerlink\" title=\"Chrome多进程架构的好处\"></a>Chrome多进程架构的好处</h2><p>那么为什么Chrome会采取多进程架构工作呢？</p>\n<p>其中一个好处是多进程可以使浏览器具有很好的容错性。对于大多数简单的情景来说，Chrome会为每个tab单独分配一个属于它们的渲染进程（render process）。举个例子，假如你有三个tab，你就会有三个独立的渲染进程。当其中一个tab的崩溃时，你可以随时关闭这个tab并且其他tab不受到影响。可是如果所有的tab都跑在同一个进程的话，它们就会有连带关系，一个挂全部挂。<br><img src=\"/images/chrome/tabs.png\" alt></p>\n<p align=\"center\">不同的tab会有不同的渲染进程来负责</p>\n\n<p>Chrome采用多进程架构的另外一个好处就是可以提供安全性和沙盒性（sanboxing）。因为操作系统可以提供方法让你限制每个进程拥有的能力，所以浏览器可以让某些进程不具备某些特定的功能。例如，由于tab渲染进程可能会处理来自用户的随机输入，所以Chrome限制了它们对系统文件随机读写的能力。</p>\n<p>不过多进程架构也有它不好的地方，那就是进程的内存消耗。由于每个进程都有各自独立的内存空间，所以它们不能像存在于同一个进程的线程那样共用内存空间，这就造成了一些基础的架构（例如V8 JavaScript引擎）会在不同进程的内存空间同时存在的问题，这些重复的内容会消耗更多的内存。所以为了节省内存，Chrome会限制被启动的进程数目，当进程数达到一定的界限后，Chrome会将<strong>访问同一个网站的tab都放在一个进程里面跑</strong>。</p>\n<h2 id=\"节省更多的内存-Chrome的服务化\"><a href=\"#节省更多的内存-Chrome的服务化\" class=\"headerlink\" title=\"节省更多的内存 - Chrome的服务化\"></a>节省更多的内存 - Chrome的服务化</h2><p>同样的优化方法也可以被使用在浏览器进程（browser process）上面。Chrome浏览器的架构正在发生一些改变，目的是将和浏览器本身（Chrome）相关的部分拆分为一个个不同的服务，服务化之后，这些功能既可以放在不同的进程里面运行也可以合并为一个单独的进程运行。</p>\n<p>这样做的主要原因是让Chrome在不同性能的硬件上有不同的表现。当Chrome运行在一些性能比较好的硬件时，浏览器进程相关的服务会被放在不同的进程运行以提高系统的稳定性。相反如果硬件性能不好，这些服务就会被放在同一个进程里面执行来减少内存的占用。其实在这次架构变化之前，Chrome在Android上面已经开始采取类似的做法了。<br><img src=\"/images/chrome/servicfication.png\" alt></p>\n<p align=\"center\">Chrome将浏览器相关的服务放在同一个进程里面运行和放在不同的进程运行的区别</p>\n\n<h2 id=\"单帧渲染进程-网站隔离（Site-Isolation）\"><a href=\"#单帧渲染进程-网站隔离（Site-Isolation）\" class=\"headerlink\" title=\"单帧渲染进程 - 网站隔离（Site Isolation）\"></a>单帧渲染进程 - 网站隔离（Site Isolation）</h2><p><a href=\"https://developers.google.com/web/updates/2018/07/site-isolation\" target=\"_blank\" rel=\"noopener\">网站隔离</a>（Site Isolation）是最近Chrome浏览器启动的功能，这个功能会为网站内不同站点的iframe分配一个独立的渲染进程。之前说过Chrome会为每个tab分配一个单独的渲染进程，可是如果一个tab只有一个进程的话不同站点的iframe都会跑在这个进程里面，这也意味着它们会共享内存，这就有可能会破坏<a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\" target=\"_blank\" rel=\"noopener\">同源策略</a>。同源策略是浏览器最核心的安全模型，它可以禁止网站在未经同意的情况下去获取另外一个站点的数据，因此绕过同源策略是很多安全攻击的主要目的。而进程隔离（proces isolation）是隔离网站最好最有效的办法了。再加上CPU存在<a href=\"https://developers.google.com/web/updates/2018/02/meltdown-spectre\" target=\"_blank\" rel=\"noopener\">Meltdown和Spectre</a>的隐患，网站隔离变得势在必行。因此在Chrome 67版本之后，桌面版的Chrome会默认开启网站隔离功能，这样每一个跨站点的iframe都会拥有一个独立的渲染进程。<br><img src=\"/images/chrome/isolation.png\" alt></p>\n<p align=\"center\">网站隔离功能会让跨站的iframe拥有独立的进程</p>\n\n<p>网站隔离技术汇聚了我们工程师好几年的研发努力，它其实远远没有想象中那样只是为不同站点的iframe分配一个独立的渲染进程那么简单，因为它从根本上改变了各个iframe之间的通信方式。网站隔离后，对于有iframe的网站，当用户打开右边的devtool时，Chrome浏览器其实要做很多幕后工作才能让开发者感觉不出这和之前的有什么区别，这其实是很难实现的。对于一些很简单的功能，例如在devtool里面用Ctrl + F键在页面搜索某个关键词，Chrome都要遍历多个渲染进程去完成。所以我们的浏览器工程师在网站隔离这个功能发布后都感叹这是一个里程碑式的成就。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在本篇文章中，我们探讨了浏览器高层次的架构设计以及多进程架构的带来的好处。同时我们还讨论了服务化和网站隔离这些和浏览器多进程架构息息相关的技术。在下一篇文章中我们要开始深入了解这些进程和线程是如何呈现我们的网站页面的了。</p>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文是笔者对<a href=\"https://developers.google.com/web/resources/contributors/kosamari\" target=\"_blank\" rel=\"noopener\">Mario Kosaka</a>写的<a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part1\" target=\"_blank\" rel=\"noopener\">inside look at modern web browser</a>系列文章的翻译。这里的翻译不是指直译，而是结合个人的理解将作者想表达的意思表达出来，而且会尽量补充一些相关的内容来帮助大家更好地理解。</p>\n<h2 id=\"CPU，GPU，内存和多进程架构\"><a href=\"#CPU，GPU，内存和多进程架构\" class=\"headerlink\" title=\"CPU，GPU，内存和多进程架构\"></a>CPU，GPU，内存和多进程架构</h2><p>在这个<strong>4集系列教程</strong>里面，我将会从Chrome浏览器的高层次架构（high-level architecture）开始说起，一直深入讲到页面渲染流水线（rendering pipeline）的具体细节。如果你想知道浏览器是怎么把你编写的代码转变成一个可用的网站，或者你不知道为什么一些特定的代码写法可以提高网站的性能的，那你就来对地方了，这篇文章就是为你准备的。</p>\n<p>作为本系列文章的第一篇，我们会先了解一些关键的<strong>计算机术语</strong>以及Chrome浏览器的<strong>多进程架构</strong>。</p>","more":"<h2 id=\"计算机的核心-CPU和GPU\"><a href=\"#计算机的核心-CPU和GPU\" class=\"headerlink\" title=\"计算机的核心 - CPU和GPU\"></a>计算机的核心 - CPU和GPU</h2><p>要想理解浏览器的运行环境，我们先要搞明白一些计算机组件以及它们的作用。</p>\n<h3 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h3><p>首先我们要说的是计算机的大脑 - CPU（<strong>C</strong>entral <strong>P</strong>rocessing <strong>U</strong>nit）。CPU是计算机里面的一块芯片，上面有一个或者多个核心（core）。我们可以把CPU的一个核心（core）比喻成一个办公室工人，他<strong>功能强大</strong>，上知天文下知地理，琴棋书画无所不能，<strong>它可以串行地一件接着一件处理交给它的任务</strong>。很久之前的时候大多数CPU只有一个核心，不过在现在的硬件设备上CPU通常会有多个核心，因为多核心CPU可以大大提高手机和电脑的运算能力。<br><img src=\"/images/chrome/CPU.png\" alt=\"\"></p>\n<p align=\"center\">四个CPU核心愉快地在各自工位上一个接着一个地处理交给它们的任务</p>\n\n<h3 id=\"GPU\"><a href=\"#GPU\" class=\"headerlink\" title=\"GPU\"></a>GPU</h3><p>图形处理器 - 或者说GPU（<strong>G</strong>raphics <strong>P</strong>rocessing <strong>U</strong>nit）是计算机的另外一个重要组成部分。和功能强大的CPU核心不一样的是，单个GPU核心只能处理一些简单的任务，不过它胜在数量多，单片GPU上会有很多很多的核心可以同时工作，也就是说它的<strong>并行计算能力是非常强</strong>的。图形处理器（GPU）顾名思义一开始就是专门用来处理图形的，所以在说到图形<strong>使用GPU</strong>（using）或者<strong>GPU支持</strong>（backed）时，人们就会联想到图形快速渲染或者流畅的用户体验相关的概念。最近几年来，随着<strong>GPU加速概念</strong>的流行，在GPU上单独进行的计算也变得越来越多了。<br><img src=\"/images/chrome/GPU.png\" alt=\"\"></p>\n<p align=\"center\">每个GPU核心手里只有一个扳手，这就说明它的能力是非常有限的，可是它们人多啊！</p>\n\n<p>当你在手机或者电脑上打开某个应用程序的时候，背后其实是CPU和GPU支撑着这个应用程序的运行。通常来说，你的应用要通过<strong>操作系统</strong>提供的一些机制才能跑在CPU和GPU上面。<br><img src=\"/images/chrome/hw-os-app.png\" alt=\"\"></p>\n<p align=\"center\">计算机的三层架构，最下层是硬件机器，操作系统夹在中间，最上层是运行的应用</p>\n\n<h2 id=\"在进程和线程上执行程序\"><a href=\"#在进程和线程上执行程序\" class=\"headerlink\" title=\"在进程和线程上执行程序\"></a>在进程和线程上执行程序</h2><p>在深入到浏览器的架构之前我们还得了解一下进程（process）和线程（thread）的相关概念。进程可以看成正在被执行的应用程序（executing program）。而<strong>线程是跑在进程里面的</strong>，一个进程里面可能有一个或者多个线程，这些线程可以执行任何一部分应用程序的代码。<br><img src=\"/images/chrome/process-thread.png\" alt=\"\"></p>\n<p align=\"center\">进程就像一个大鱼缸，而线程就是浴缸里面畅游的鱼儿</p>\n\n<p>当你启动一个应用程序的时候，操作系统会为这个程序创建一个进程同时还为这个进程分配一片<strong>私有的内存空间</strong>，这片空间会被用来存储所有程序相关的数据和状态。当你关闭这个程序的时候，这个程序对应的进程也会随之消失，进程对应的内存空间也会被操作系统释放掉。<br><img src=\"/images/chrome/memory.svg\" alt=\"\"></p>\n<p align=\"center\">进程使用系统分配的内存空间去存储应用的数据</p>\n\n<p>有时候为了满足功能的需要，创建的进程会叫系统创建另外一些进程去处理其它任务，不过新建的进程会拥有<strong>全新的独立的内存空间</strong>而不是和原来的进程共用内存空间。如果这些进程需要通信，它们要通过<strong>IPC</strong>机制（Inter Process Communication）来进行。很多应用程序都会采取这种<strong>多进程的方式</strong>来工作，因为进程和进程之间是互相独立的它们互不影响，换句话来书，如果其中一个工作进程（worker process）挂掉了其他进程不会受到影响，而且挂掉的进程还可以重启。<br><img src=\"/images/chrome/workerprocess.png\" alt=\"\"></p>\n<p align=\"center\">不同的进程通过IPC来通信</p>\n\n<h2 id=\"浏览器架构\"><a href=\"#浏览器架构\" class=\"headerlink\" title=\"浏览器架构\"></a>浏览器架构</h2><p>那么浏览器是怎么使用进程和线程来工作的呢？其实大概可以分为两种架构，一种是单进程架构，也就是只启动一个进程，这个进程里面有多个线程工作。第二种是多进程架构，浏览器会启动多个进程，每个进程里面有多个线程，不同进程通过IPC进行通信。<br><img src=\"/images/chrome/browser-arch.png\" alt=\"\"></p>\n<p align=\"center\">单进程和多进程浏览器的架构图</p>\n\n<p>上面的图表架构其实包含了浏览器架构的具体实现了，在现实中其实并没有一个大家都遵循的浏览器实现标准，所以不同浏览器的实现方式可能会完全不一样。</p>\n<p>为了更好地在本系列文章中展开论述，我们主要讨论最新的Chrome浏览器架构，它采用的是<strong>多进程架构</strong>，以下是架构图：<br><img src=\"/images/chrome/browser-arch2.png\" alt=\"\"></p>\n<p align=\"center\">Chrome的多进程架构图，多个渲染进程的卡片（render process）是用来表明Chrome会为每一个tab创建一个渲染进程。</p>\n\n<p>Chrome浏览器会有一个浏览器进程（browser process），这个进程会和其他进程一起协作来实现浏览器的功能。对于渲染进程（renderer process），Chrome会尽可能为每一个tab甚至是页面里面的每一个iframe都分配一个单独的进程。</p>\n<h2 id=\"各个进程如何分工合作呢？\"><a href=\"#各个进程如何分工合作呢？\" class=\"headerlink\" title=\"各个进程如何分工合作呢？\"></a>各个进程如何分工合作呢？</h2><p>以下是各个进程具体负责的工作内容：</p>\n<table>\n<thead>\n<tr>\n<th>进程</th>\n<th>负责的工作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Browser</td>\n<td>负责浏览器的“Chrome”部分， 包括导航栏，书签， 前进和后退按钮。同时这个进程还会控制那些我们看不见的部分，包括网络请求的发送以及文件的读写。</td>\n</tr>\n<tr>\n<td>Renderer</td>\n<td>负责tab内和网页展示相关的所有工作。</td>\n</tr>\n<tr>\n<td>Plugin</td>\n<td>控制网页使用的所有插件，例如flash插件。</td>\n</tr>\n<tr>\n<td>GPU</td>\n<td>负责独立于其它进程的GPU任务。它之所以被独立为一个进程是因为它要处理来自于不同tab的渲染请求并把它在同一个界面上画出来。</td>\n</tr>\n</tbody></table>\n<p><img src=\"/images/chrome/browserui.png\" alt=\"\"></p>\n<p align=\"center\">不同的进程负责浏览器不同部分的界面内容</p>\n\n<p>除了上面列出来的进程，Chrome还有很多其他进程在工作，例如扩展进程（Extension Process）和工具进程（utility process）。如果你想看一下你的Chrome浏览器现在有多少个进程在跑可以点击浏览器右上角的更多按钮，选择更多工具和任务管理器：<br><img src=\"/images/chrome/devtool.png\" alt=\"\"><br>在弹出的窗口里面你会看到正在工作的进程列表，以及每个进程使用的CPU和内存状况。</p>\n<h2 id=\"Chrome多进程架构的好处\"><a href=\"#Chrome多进程架构的好处\" class=\"headerlink\" title=\"Chrome多进程架构的好处\"></a>Chrome多进程架构的好处</h2><p>那么为什么Chrome会采取多进程架构工作呢？</p>\n<p>其中一个好处是多进程可以使浏览器具有很好的容错性。对于大多数简单的情景来说，Chrome会为每个tab单独分配一个属于它们的渲染进程（render process）。举个例子，假如你有三个tab，你就会有三个独立的渲染进程。当其中一个tab的崩溃时，你可以随时关闭这个tab并且其他tab不受到影响。可是如果所有的tab都跑在同一个进程的话，它们就会有连带关系，一个挂全部挂。<br><img src=\"/images/chrome/tabs.png\" alt=\"\"></p>\n<p align=\"center\">不同的tab会有不同的渲染进程来负责</p>\n\n<p>Chrome采用多进程架构的另外一个好处就是可以提供安全性和沙盒性（sanboxing）。因为操作系统可以提供方法让你限制每个进程拥有的能力，所以浏览器可以让某些进程不具备某些特定的功能。例如，由于tab渲染进程可能会处理来自用户的随机输入，所以Chrome限制了它们对系统文件随机读写的能力。</p>\n<p>不过多进程架构也有它不好的地方，那就是进程的内存消耗。由于每个进程都有各自独立的内存空间，所以它们不能像存在于同一个进程的线程那样共用内存空间，这就造成了一些基础的架构（例如V8 JavaScript引擎）会在不同进程的内存空间同时存在的问题，这些重复的内容会消耗更多的内存。所以为了节省内存，Chrome会限制被启动的进程数目，当进程数达到一定的界限后，Chrome会将<strong>访问同一个网站的tab都放在一个进程里面跑</strong>。</p>\n<h2 id=\"节省更多的内存-Chrome的服务化\"><a href=\"#节省更多的内存-Chrome的服务化\" class=\"headerlink\" title=\"节省更多的内存 - Chrome的服务化\"></a>节省更多的内存 - Chrome的服务化</h2><p>同样的优化方法也可以被使用在浏览器进程（browser process）上面。Chrome浏览器的架构正在发生一些改变，目的是将和浏览器本身（Chrome）相关的部分拆分为一个个不同的服务，服务化之后，这些功能既可以放在不同的进程里面运行也可以合并为一个单独的进程运行。</p>\n<p>这样做的主要原因是让Chrome在不同性能的硬件上有不同的表现。当Chrome运行在一些性能比较好的硬件时，浏览器进程相关的服务会被放在不同的进程运行以提高系统的稳定性。相反如果硬件性能不好，这些服务就会被放在同一个进程里面执行来减少内存的占用。其实在这次架构变化之前，Chrome在Android上面已经开始采取类似的做法了。<br><img src=\"/images/chrome/servicfication.png\" alt=\"\"></p>\n<p align=\"center\">Chrome将浏览器相关的服务放在同一个进程里面运行和放在不同的进程运行的区别</p>\n\n<h2 id=\"单帧渲染进程-网站隔离（Site-Isolation）\"><a href=\"#单帧渲染进程-网站隔离（Site-Isolation）\" class=\"headerlink\" title=\"单帧渲染进程 - 网站隔离（Site Isolation）\"></a>单帧渲染进程 - 网站隔离（Site Isolation）</h2><p><a href=\"https://developers.google.com/web/updates/2018/07/site-isolation\" target=\"_blank\" rel=\"noopener\">网站隔离</a>（Site Isolation）是最近Chrome浏览器启动的功能，这个功能会为网站内不同站点的iframe分配一个独立的渲染进程。之前说过Chrome会为每个tab分配一个单独的渲染进程，可是如果一个tab只有一个进程的话不同站点的iframe都会跑在这个进程里面，这也意味着它们会共享内存，这就有可能会破坏<a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\" target=\"_blank\" rel=\"noopener\">同源策略</a>。同源策略是浏览器最核心的安全模型，它可以禁止网站在未经同意的情况下去获取另外一个站点的数据，因此绕过同源策略是很多安全攻击的主要目的。而进程隔离（proces isolation）是隔离网站最好最有效的办法了。再加上CPU存在<a href=\"https://developers.google.com/web/updates/2018/02/meltdown-spectre\" target=\"_blank\" rel=\"noopener\">Meltdown和Spectre</a>的隐患，网站隔离变得势在必行。因此在Chrome 67版本之后，桌面版的Chrome会默认开启网站隔离功能，这样每一个跨站点的iframe都会拥有一个独立的渲染进程。<br><img src=\"/images/chrome/isolation.png\" alt=\"\"></p>\n<p align=\"center\">网站隔离功能会让跨站的iframe拥有独立的进程</p>\n\n<p>网站隔离技术汇聚了我们工程师好几年的研发努力，它其实远远没有想象中那样只是为不同站点的iframe分配一个独立的渲染进程那么简单，因为它从根本上改变了各个iframe之间的通信方式。网站隔离后，对于有iframe的网站，当用户打开右边的devtool时，Chrome浏览器其实要做很多幕后工作才能让开发者感觉不出这和之前的有什么区别，这其实是很难实现的。对于一些很简单的功能，例如在devtool里面用Ctrl + F键在页面搜索某个关键词，Chrome都要遍历多个渲染进程去完成。所以我们的浏览器工程师在网站隔离这个功能发布后都感叹这是一个里程碑式的成就。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在本篇文章中，我们探讨了浏览器高层次的架构设计以及多进程架构的带来的好处。同时我们还讨论了服务化和网站隔离这些和浏览器多进程架构息息相关的技术。在下一篇文章中我们要开始深入了解这些进程和线程是如何呈现我们的网站页面的了。</p>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt=\"\"></p>"},{"title":"窥探现代浏览器架构-三","thumbnail":"/gallery/thumbnails/chrome.png","date":"2020-01-08T00:00:50.000Z","_content":"\n## 前言\n本文是笔者对[Mario Kosaka](https://developers.google.com/web/resources/contributors/kosamari)写的[inside look at modern web browser](https://developers.google.com/web/updates/2018/09/inside-browser-part3)系列文章的翻译。这里的翻译不是指直译，而是结合个人的理解将作者想表达的意思表达出来，而且会尽量补充一些相关的内容来帮助大家更好地理解。\n\n## 渲染进程里面发生的事\n这篇文章是探究Chrome内部工作原理的**四集系列文章**中的第三篇。之前我们分别探讨了[Chrome的多进程架构](https://xiaocongdong.github.io/2019/12/25/%E7%AA%A5%E6%8E%A2%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84-%E4%B8%80/)以及[导航的过程都发生了什么](https://xiaocongdong.github.io/2019/12/27/%E7%AA%A5%E6%8E%A2%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84-%E4%BA%8C/)。在本篇文章中，我们将要窥探一下渲染进程在渲染页面的时候具体都发生了什么事情。\n\n渲染进程会影响到Web性能的很多方面。页面渲染的时候发生的东西实在太多了，本篇文章只能作一个大体的介绍。如果你想要了解更多相关的内容，[Web Fundamentals的Performance栏目](https://developers.google.com/web/fundamentals/performance/why-performance-matters/)有很多资源可以查看。\n\n<!-- more-->\n\n## 渲染进程处理页面内容\n渲染进程负责标签（tab）内发生的所有事情。在渲染进程里面，主线程（main thread）处理了绝大多数你发送给用户的代码。如果你使用了web worker或者service worker，相关的代码将会由工作线程（worker thread）处理。合成（compositor）以及光栅（raster）线程运行在渲染进程里面用来高效流畅地渲染出页面内容。\n\n**渲染进程的主要任务是将HTML，CSS，以及JavaScript转变为我们可以进程交互的网页内容**。\n![](/images/chrome/renderer.png)\n<p align=\"center\">渲染进程里面有：一个主线程（main thread），几个工作线程（worker threads），一个合成线程（compositor thread）以及一个光栅线程（raster thread）</p>\n\n## 解析\n### 构建DOM\n前面文章提到，渲染进程在导航结束的时候会收到来自浏览器进程提交导航（commit navigation）的消息，在这之后渲染进程就会开始接收HTML数据，同时主线程也会开始解析接收到的文本数据（text string）并把它转化为一个DOM（**D**ocument **O**bject **M**odel）对象\n\n**DOM对象既是浏览器对当前页面的内部表示，也是Web开发人员通过JavaScript与网页进行交互的数据结构以及API**。\n\n如何将HTML文档解析为DOM对象是在[HTML标准](https://html.spec.whatwg.org/)中定义的。不过在你的web开发生涯中，你可能从来没有遇到过浏览器在解析HTML的时候发生错误的情景。**这是因为浏览器对HTML的错误容忍度很大**。举些例子：如果一个段落缺失了闭合p标签（\\</p\\>），这个页面还是会被当做为有效的HTML来处理；Hi! \\<b\\>I'm \\<i\\>Chrome\\</b\\>!\\</i\\> (闭合b标签写在了闭合i标签的前面) ，虽然有语法错误，不过浏览器会把它处理为Hi! \\<b\\>I'm \\<i\\>Chrome\\</i\\>\\</b\\>\\<i\\>!\\</i\\>。如果你想知道浏览器是如何对这些错误进行容错处理的，可以参考HTML规范里面的[An introduction to error handling and strange cases in the parser](https://html.spec.whatwg.org/multipage/parsing.html#an-introduction-to-error-handling-and-strange-cases-in-the-parser)内容。\n\n### 子资源加载\n除了HTML文件，网站通常还会使用到一些诸如图片，CSS样式以及JavaScript脚本等子资源。这些文件会从缓存或者网络上获取。主线程会按照在构建DOM树时遇到各个资源的循序一个接着一个地发起网络请求，可是为了提升效率，浏览器会同时运行“预加载扫描”（preload scanner）程序。如果在HTML文档里面存在诸如\\<img\\>或者\\<link\\>这样的标签，预加载扫描程序会在HTML解析器生成的token里面找到对应要获取的资源，并把这些要获取的资源告诉浏览器进程里面的网络线程。\n![](/images/chrome/dom.png)\n<p align=\"center\">主线程会解析HTML内容并且构建出DOM树</p>\n\n### JavaScript会阻塞HTML的解析过程\n当HTML解析器碰到script标签的时候，它会停止HTML文档的解析从而转向JavaScript代码的加载，解析以及执行。为什么要这样做呢？因为script标签中的JavaScript可能会使用诸如`document.write()`这样的代码改变文档流（document）的形状，从而使整个DOM树的结构发生根本性的改变（HTML规范里面的[overview of the parsing model部分](https://html.spec.whatwg.org/multipage/parsing.html#overview-of-the-parsing-model)有很好的示意图）。因为这个原因，HTML解析器不得不等JavaScript执行完成之后才能继续对HTML文档流的解析工作。如果你想知道JavaScipt的执行过程都发生了什么，V8团队有很多关于这个话题的[讨论以及博客](https://mathiasbynens.be/notes/shapes-ics)。\n\n## 给浏览器一点如何加载资源的提示\nWeb开发者可以通过很多方式告诉浏览器如何才能更加优雅地加载网页需要用到的资源。如果你的JavaScript不会使用到诸如`document.write()`的方式去改变文档流的内容的话，你可以为script标签添加一个[async](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-async)或者[defer](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-defer)属性来使JavaScript脚本进行异步加载。当然如果能满足到你的需求，你也可以使用[JavaScript Module](https://developers.google.com/web/fundamentals/primers/modules)。同时`<link rel=\"preload\">`资源预加载可以用来告诉浏览器这个资源在当前的导航肯定会被用到，你想要尽快加载这个资源。更多相关的内容，你可阅读[Resource Prioritization - Getting the Browser to Help You](https://developers.google.com/web/fundamentals/performance/resource-prioritization)这篇文章。\n\n## 样式计算 - Style calculation\n拥有了DOM树我们还不足以知道页面的外貌，因为我们通常会为页面的元素设置一些样式。主线程会解析页面的CSS从而确定每个DOM节点的计算样式（computed style）。计算样式是主线程根据CSS样式选择器（CSS selectors）计算出的每个DOM元素应该具备的具体样式，你可以打开devtools来查看每个DOM节点对应的计算样式。\n![](/images/chrome/computedstyle.png)\n<p align=\"center\">主线程解析CSS来确定每个元素的计算样式</p>\n\n即使你的页面没有设置任何自定义的样式，每个DOM节点还是会有一个计算样式属性，这是因为每个浏览器都有自己的默认样式表。因为这个样式表的存在，页面上的h1标签一定会比h2标签大，而且不同的标签会有不同的magin和padding。如果你想知道Chrome的默认样式是长什么样的，你可以直接查看[代码](https://cs.chromium.org/chromium/src/third_party/blink/renderer/core/html/resources/html.css)。\n\n## 布局 - Layout\n前面这些步骤完成之后，渲染进程就已经知道页面的具体文档结构以及每个节点拥有的样式信息了，可是这些信息还是不能最终确定页面的样子。举个例子，假如你现在想通过电话告诉你的朋友你身边的一幅画的内容：“画布上有一个红色的大圆圈和一个蓝色的正方形”，单凭这些信息你的朋友是很难知道这幅画具体是什么样子的，因为他不知道大圆圈和正方形具体在页面的什么位置，是正方形在圆圈前面呢还是圆圈在正方形的前面。\n![](/images/chrome/tellgame.png)\n<p align=\"center\">你站在一幅画面前通过电话告诉你朋友画上的内容</p>\n\n渲染网页也是同样的道理，只知道网站的文档流以及每个节点的样式是远远不足以渲染出页面内容的，还需要通过布局（layout）来计算出每个节点的**几何信息**（geometry）。布局的具体过程是：主线程会遍历刚刚构建的DOM树，根据DOM节点的计算样式计算出一个布局树（layout tree）。布局树上每个节点会有它在页面上的x，y坐标以及盒子大小（bounding box sizes）的具体信息。布局树长得和先前构建的DOM树差不多，不同的是这颗树只有那些可见的（visible）节点信息。举个例子，如果一个节点被设置为了**display:none**，这个节点就是不可见的就不会出现在布局树上面（**visibility:hidden**的节点会出现在布局树上面，你可以思考一下这是为什么）。同样的，如果一个伪元素（pseudo class）节点有诸如`p::before{content:\"Hi!\"}`这样的内容，它会出现在布局上，而不存在于DOM树上。\n![](/images/chrome/layout.png)\n<p align=\"center\">主线程会遍历每个DOM tree节点的计算样式信息来生成一棵布局树</p>\n\n即使页面的布局十分简单，布局这个过程都是非常复杂的。例如页面就是简单地从上而下展示一个又一个段落，这个过程就很复杂，因为你需要考虑段落中的字体大小以及段落在哪里需要进行换行之类的东西，它们都会影响到段落的大小以及形状，继而影响到接下来段落的布局。\n![](/images/chrome/tree.png)\n<p align=\"center\">浏览器得考虑段落是不是要换行</p>\n\n如果考虑到CSS的话将会更加复杂，因为CSS是一个很强大的东西，它可以让元素悬浮（float）到页面的某一边，还可以遮挡住页面溢出的（overflow）元素，还可以改变内容的书写方向，所以单是想一下你就知道布局这个过程是一个十分艰巨和复杂的任务。对于Chrome浏览器，我们有一整个负责布局过程的工程师团队。如果你想知道他们工作的具体内容，他们在[BlinkOn Conference](https://www.youtube.com/watch?v=Y5Xa4H2wtVA)上面的相关讨论被录制了下来，有时间的话你可以去看一下。\n\n## 绘画 - Paint\n知道了DOM节点以及它的样式和布局其实还是不足以渲染出页面来的。为什么呢？举个例子，假如你现在想对着一幅画画一幅一样的画，你已经知道了画布上每个元素的大小，形状以及位置，你还是得思考一下每个元素的绘画顺序，因为画布上的元素是会互相遮挡的（z-index）。\n\n![](/images/chrome/drawgame.png)\n<p align=\"center\">一个人拿着画笔站在画布前面，在思考着是先画一个圆还是先画一个正方形</p>\n\n举个例子，如果页面上的某些元素设置了**z-index**属性，绘制元素的顺序就会影响到页面的正确性。\n\n![](/images/chrome/zindex.png)\n<p align=\"center\">单纯按照HTML布局的顺序绘制页面的元素是错误的，因为元素的z-index元素没有被考虑到</p>\n\n在绘画这个步骤中，主线程会遍历之前得到的布局树（layout tree）来生成一系列的绘画记录（paint records）。绘画记录是对绘画过程的注释，例如“首先画背景，然后是文本，最后画矩形”。如果你曾经在canvas画布上有使用过JavaScript绘制元素，你可能会觉着这个过程不是很陌生。\n\n![](/images/chrome/paint.png)\n<p align=\"center\">主线程遍历布局树来生成绘画记录</p>\n\n## 高成本的**渲染流水线**（rendering pipeline）更新\n关于渲染流水线有一个十分重要的点就是流水线的每一步都要使用到前一步的结果来生成新的数据，这就意味着如果某一步的内容发生了改变的话，这一步后面所有的步骤都要被重新执行以生成新的记录。举个例子，如果布局树有些东西被改变了，文档上那些被影响到的部分的绘画顺序是要重新生成的。\n![](/images/chrome/trees.gif)\n<p align=\"center\">DOM+Style，布局以及绘画树</p>\n\n如果你的页面元素有动画效果（animating），浏览器就不得不在每个渲染帧的间隔中通过渲染流水线来更新页面的元素。我们大多数显示器的刷新频率是一秒钟60次（60fps），如果你在每个渲染帧的间隔都能通过流水线移动元素，人眼就会看到流畅的动画效果。可是如果流水线更新时间比较久，动画存在丢帧的状况的话，页面看起来就会很“卡顿”。\n\n![](/images/chrome/pagejank1.png)\n<p align=\"center\">流水线更新没有赶上屏幕刷新，动画就有点卡</p>\n\n即使你的渲染流水线更新是和屏幕的刷新频率保持一致的，这些更新是运行在主线程上面的，这就意味着它可能被同样运行在主线程上面的JavaScript代码阻塞。\n\n![](/images/chrome/pagejank2.png)\n<p align=\"center\">某些动画帧被JavaScript阻塞了</p>\n\n对于这种情况，你可以将要被执行的JavaScript操作拆分为更小的块然后通过`requestAnimationFrame`这个API把他们放在每个动画帧中执行。想知道更多关于这方面的信息的话，可以参考[Optimize JavaScript Execution](https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution)。当然你还可以将JavaScript代码放在[WebWorkers](https://www.youtube.com/watch?v=X57mh8tKkgE)中执行来避免它们阻塞主线程。\n\n![](/images/chrome/raf.png)\n<p align=\"center\">在动画帧上运行一小段JavaScript代码</p>\n\n## 合成\n### 如何绘制一个页面？\n到目前为止，浏览器已经知道了关于页面以下的信息：文档结构，元素的样式，元素的几何信息以及它们的绘画顺序。那么浏览器是如何利用这些信息来绘制出页面来的呢？**将以上这些信息转化为显示器的像素的过程叫做光栅化（rasterizing）**。\n\n可能一个最简单的做法就是只光栅化视口内（viewport）的网页内容。如果用户进行了页面滚动，就移动光栅帧（rastered frame）并且光栅化更多的内容以补上页面缺失的部分。Chrome的第一个版本其实就是这样做的。然而，对于现代的浏览器来说，它们往往采取一种更加复杂的叫做合成（compositing）的做法。\n\n![](/images/chrome/rasterizing.gif)\n<p align=\"center\">最简单的光栅化过程</p>\n\n### 什么是合成\n合成是一种将页面分成若干层，然后分别对它们进行光栅化，最后在一个单独的线程 - 合成线程（compositor thread）里面合并成一个页面的技术。当用户滚动页面时，由于页面各个层都已经被光栅化了，浏览器需要做的只是合成一个新的帧来展示滚动后的效果罢了。页面的动画效果实现也是类似，将页面上的层进行移动并构建出一个新的帧即可。\n\n你可以通过[Layers panel](https://blog.logrocket.com/eliminate-content-repaints-with-the-new-layers-panel-in-chrome-e2c306d4d752?gi=cd6271834cea)在DevTools查看你的网站是如何被浏览器分成不同的层的。\n\n![](/images/chrome/composit.gif)\n<p align=\"center\">页面合成过程</p>\n\n### 页面分层\n为了确定哪些元素需要放置在哪一层，主线程需要遍历渲染树来创建一棵层次树（Layer Tree）（在DevTools中这一部分工作叫做“Update Layer Tree”）。如果页面的某些部分应该被放置在一个单独的层上面（滑动菜单）可是却没有的话，你可以通过使用`will-change` CSS属性来告诉浏览器对其分层。\n\n![](/images/chrome/layer.png)\n<p align=\"center\">主线程遍历布局树来生成层次树</p>\n\n你可能会想要给页面上所有的元素一个单独的层，然而当页面的层超过一定的数量后，层的合成操作要比在每个帧中光栅化页面的一小部分还要慢，因此衡量你应用的渲染性能是十分重要的一件事情。想要获取关于这方面的更多信息，可以参考文章[Stick to Compositor-Only Properties and Manage Layer Count](https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count)。\n\n### 在主线程之外光栅化和合成页面\n一旦页面的层次树创建出来并且页面元素的绘制顺序确定后，主线程就会向合成线程（compositor thread）提交这些信息。然后合成线程就会光栅化页面的每一层。因为页面的一层可能有整个网页那么大，所以合成线程需要将它们切分为一块又一块的小图块（tiles）然后将图块发送给一系列光栅线程（raster threads）。光栅线程会栅格化每个图块并且把它们存储在GPU的内存中。\n\n![](/images/chrome/raster.png)\n<p align=\"center\">光栅线程创建图块的位图并发送给GPU</p>\n\n合成线程可以给不同的光栅线程赋予不同的优先级（prioritize），进而使那些在视口中的或者视口附近的页面可以先被光栅化。为了响应用户对页面的放大和缩小操作，页面的图层（layer）会为不同的清晰度配备不同的图块。\n\n当图层上面的图块都被栅格化后，合成线程会收集图块上面叫做**绘画四边形**（draw quads）的信息来构建一个**合成帧**（compositor frame）。\n\n* 绘画四边形：包含图块在**内存的位置**以及图层合成后图块在页面的位置之类的信息。\n* 合成帧：代表页面一个帧的内容的绘制四边形**集合**。\n\n上面的步骤完成之后，合成线程就会通过IPC向浏览器进程（browser process）提交（commit）一个渲染帧。这个时候可能有另外一个合成帧被浏览器进程的UI线程（UI thread）提交以改变浏览器的UI。这些合成帧都会被发送给GPU从而展示在屏幕上。如果合成线程收到页面滚动的事件，合成线程会构建另外一个合成帧发送给GPU来更新页面。\n\n![](/images/chrome/composit.png)\n<p align=\"center\">合成线程构建出合成帧，合成帧会被发送给浏览器进程然后再发送给GPU</p>\n\n合成的好处在于这个过程没有涉及到主线程，所以合成线程不需要等待样式的计算以及JavaScript完成执行。这也就是为什么说[只通过合成来构建页面动画](https://www.html5rocks.com/en/tutorials/speed/high-performance-animations/)是构建流畅用户体验的最佳实践的原因了。如果页面需要被重新布局或者绘制的话，主线程一定会参与进来的。\n\n## 总结\n在这篇文章中，我们探讨了从解析HTML文件到合成页面整个的渲染流水线。希望你读完后，可以自己去看一些关于页面性能优化的文章了。\n\n在接下来也是最后一篇本系列的文章中，我们将要查看合成线程更多的细节，来了解一下当用户在页面移动鼠标（**mouse move**）以及进行点击（**click**）的时候浏览器会做些什么事情。\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","source":"_posts/窥探现代浏览器架构-三.md","raw":"---\ntitle: 窥探现代浏览器架构-三\ntags:\n  - Chrome\n  - 浏览器\nthumbnail: /gallery/thumbnails/chrome.png\ncategories:\n  - 前端\ndate: 2020-01-08 08:00:50\n---\n\n## 前言\n本文是笔者对[Mario Kosaka](https://developers.google.com/web/resources/contributors/kosamari)写的[inside look at modern web browser](https://developers.google.com/web/updates/2018/09/inside-browser-part3)系列文章的翻译。这里的翻译不是指直译，而是结合个人的理解将作者想表达的意思表达出来，而且会尽量补充一些相关的内容来帮助大家更好地理解。\n\n## 渲染进程里面发生的事\n这篇文章是探究Chrome内部工作原理的**四集系列文章**中的第三篇。之前我们分别探讨了[Chrome的多进程架构](https://xiaocongdong.github.io/2019/12/25/%E7%AA%A5%E6%8E%A2%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84-%E4%B8%80/)以及[导航的过程都发生了什么](https://xiaocongdong.github.io/2019/12/27/%E7%AA%A5%E6%8E%A2%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84-%E4%BA%8C/)。在本篇文章中，我们将要窥探一下渲染进程在渲染页面的时候具体都发生了什么事情。\n\n渲染进程会影响到Web性能的很多方面。页面渲染的时候发生的东西实在太多了，本篇文章只能作一个大体的介绍。如果你想要了解更多相关的内容，[Web Fundamentals的Performance栏目](https://developers.google.com/web/fundamentals/performance/why-performance-matters/)有很多资源可以查看。\n\n<!-- more-->\n\n## 渲染进程处理页面内容\n渲染进程负责标签（tab）内发生的所有事情。在渲染进程里面，主线程（main thread）处理了绝大多数你发送给用户的代码。如果你使用了web worker或者service worker，相关的代码将会由工作线程（worker thread）处理。合成（compositor）以及光栅（raster）线程运行在渲染进程里面用来高效流畅地渲染出页面内容。\n\n**渲染进程的主要任务是将HTML，CSS，以及JavaScript转变为我们可以进程交互的网页内容**。\n![](/images/chrome/renderer.png)\n<p align=\"center\">渲染进程里面有：一个主线程（main thread），几个工作线程（worker threads），一个合成线程（compositor thread）以及一个光栅线程（raster thread）</p>\n\n## 解析\n### 构建DOM\n前面文章提到，渲染进程在导航结束的时候会收到来自浏览器进程提交导航（commit navigation）的消息，在这之后渲染进程就会开始接收HTML数据，同时主线程也会开始解析接收到的文本数据（text string）并把它转化为一个DOM（**D**ocument **O**bject **M**odel）对象\n\n**DOM对象既是浏览器对当前页面的内部表示，也是Web开发人员通过JavaScript与网页进行交互的数据结构以及API**。\n\n如何将HTML文档解析为DOM对象是在[HTML标准](https://html.spec.whatwg.org/)中定义的。不过在你的web开发生涯中，你可能从来没有遇到过浏览器在解析HTML的时候发生错误的情景。**这是因为浏览器对HTML的错误容忍度很大**。举些例子：如果一个段落缺失了闭合p标签（\\</p\\>），这个页面还是会被当做为有效的HTML来处理；Hi! \\<b\\>I'm \\<i\\>Chrome\\</b\\>!\\</i\\> (闭合b标签写在了闭合i标签的前面) ，虽然有语法错误，不过浏览器会把它处理为Hi! \\<b\\>I'm \\<i\\>Chrome\\</i\\>\\</b\\>\\<i\\>!\\</i\\>。如果你想知道浏览器是如何对这些错误进行容错处理的，可以参考HTML规范里面的[An introduction to error handling and strange cases in the parser](https://html.spec.whatwg.org/multipage/parsing.html#an-introduction-to-error-handling-and-strange-cases-in-the-parser)内容。\n\n### 子资源加载\n除了HTML文件，网站通常还会使用到一些诸如图片，CSS样式以及JavaScript脚本等子资源。这些文件会从缓存或者网络上获取。主线程会按照在构建DOM树时遇到各个资源的循序一个接着一个地发起网络请求，可是为了提升效率，浏览器会同时运行“预加载扫描”（preload scanner）程序。如果在HTML文档里面存在诸如\\<img\\>或者\\<link\\>这样的标签，预加载扫描程序会在HTML解析器生成的token里面找到对应要获取的资源，并把这些要获取的资源告诉浏览器进程里面的网络线程。\n![](/images/chrome/dom.png)\n<p align=\"center\">主线程会解析HTML内容并且构建出DOM树</p>\n\n### JavaScript会阻塞HTML的解析过程\n当HTML解析器碰到script标签的时候，它会停止HTML文档的解析从而转向JavaScript代码的加载，解析以及执行。为什么要这样做呢？因为script标签中的JavaScript可能会使用诸如`document.write()`这样的代码改变文档流（document）的形状，从而使整个DOM树的结构发生根本性的改变（HTML规范里面的[overview of the parsing model部分](https://html.spec.whatwg.org/multipage/parsing.html#overview-of-the-parsing-model)有很好的示意图）。因为这个原因，HTML解析器不得不等JavaScript执行完成之后才能继续对HTML文档流的解析工作。如果你想知道JavaScipt的执行过程都发生了什么，V8团队有很多关于这个话题的[讨论以及博客](https://mathiasbynens.be/notes/shapes-ics)。\n\n## 给浏览器一点如何加载资源的提示\nWeb开发者可以通过很多方式告诉浏览器如何才能更加优雅地加载网页需要用到的资源。如果你的JavaScript不会使用到诸如`document.write()`的方式去改变文档流的内容的话，你可以为script标签添加一个[async](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-async)或者[defer](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-defer)属性来使JavaScript脚本进行异步加载。当然如果能满足到你的需求，你也可以使用[JavaScript Module](https://developers.google.com/web/fundamentals/primers/modules)。同时`<link rel=\"preload\">`资源预加载可以用来告诉浏览器这个资源在当前的导航肯定会被用到，你想要尽快加载这个资源。更多相关的内容，你可阅读[Resource Prioritization - Getting the Browser to Help You](https://developers.google.com/web/fundamentals/performance/resource-prioritization)这篇文章。\n\n## 样式计算 - Style calculation\n拥有了DOM树我们还不足以知道页面的外貌，因为我们通常会为页面的元素设置一些样式。主线程会解析页面的CSS从而确定每个DOM节点的计算样式（computed style）。计算样式是主线程根据CSS样式选择器（CSS selectors）计算出的每个DOM元素应该具备的具体样式，你可以打开devtools来查看每个DOM节点对应的计算样式。\n![](/images/chrome/computedstyle.png)\n<p align=\"center\">主线程解析CSS来确定每个元素的计算样式</p>\n\n即使你的页面没有设置任何自定义的样式，每个DOM节点还是会有一个计算样式属性，这是因为每个浏览器都有自己的默认样式表。因为这个样式表的存在，页面上的h1标签一定会比h2标签大，而且不同的标签会有不同的magin和padding。如果你想知道Chrome的默认样式是长什么样的，你可以直接查看[代码](https://cs.chromium.org/chromium/src/third_party/blink/renderer/core/html/resources/html.css)。\n\n## 布局 - Layout\n前面这些步骤完成之后，渲染进程就已经知道页面的具体文档结构以及每个节点拥有的样式信息了，可是这些信息还是不能最终确定页面的样子。举个例子，假如你现在想通过电话告诉你的朋友你身边的一幅画的内容：“画布上有一个红色的大圆圈和一个蓝色的正方形”，单凭这些信息你的朋友是很难知道这幅画具体是什么样子的，因为他不知道大圆圈和正方形具体在页面的什么位置，是正方形在圆圈前面呢还是圆圈在正方形的前面。\n![](/images/chrome/tellgame.png)\n<p align=\"center\">你站在一幅画面前通过电话告诉你朋友画上的内容</p>\n\n渲染网页也是同样的道理，只知道网站的文档流以及每个节点的样式是远远不足以渲染出页面内容的，还需要通过布局（layout）来计算出每个节点的**几何信息**（geometry）。布局的具体过程是：主线程会遍历刚刚构建的DOM树，根据DOM节点的计算样式计算出一个布局树（layout tree）。布局树上每个节点会有它在页面上的x，y坐标以及盒子大小（bounding box sizes）的具体信息。布局树长得和先前构建的DOM树差不多，不同的是这颗树只有那些可见的（visible）节点信息。举个例子，如果一个节点被设置为了**display:none**，这个节点就是不可见的就不会出现在布局树上面（**visibility:hidden**的节点会出现在布局树上面，你可以思考一下这是为什么）。同样的，如果一个伪元素（pseudo class）节点有诸如`p::before{content:\"Hi!\"}`这样的内容，它会出现在布局上，而不存在于DOM树上。\n![](/images/chrome/layout.png)\n<p align=\"center\">主线程会遍历每个DOM tree节点的计算样式信息来生成一棵布局树</p>\n\n即使页面的布局十分简单，布局这个过程都是非常复杂的。例如页面就是简单地从上而下展示一个又一个段落，这个过程就很复杂，因为你需要考虑段落中的字体大小以及段落在哪里需要进行换行之类的东西，它们都会影响到段落的大小以及形状，继而影响到接下来段落的布局。\n![](/images/chrome/tree.png)\n<p align=\"center\">浏览器得考虑段落是不是要换行</p>\n\n如果考虑到CSS的话将会更加复杂，因为CSS是一个很强大的东西，它可以让元素悬浮（float）到页面的某一边，还可以遮挡住页面溢出的（overflow）元素，还可以改变内容的书写方向，所以单是想一下你就知道布局这个过程是一个十分艰巨和复杂的任务。对于Chrome浏览器，我们有一整个负责布局过程的工程师团队。如果你想知道他们工作的具体内容，他们在[BlinkOn Conference](https://www.youtube.com/watch?v=Y5Xa4H2wtVA)上面的相关讨论被录制了下来，有时间的话你可以去看一下。\n\n## 绘画 - Paint\n知道了DOM节点以及它的样式和布局其实还是不足以渲染出页面来的。为什么呢？举个例子，假如你现在想对着一幅画画一幅一样的画，你已经知道了画布上每个元素的大小，形状以及位置，你还是得思考一下每个元素的绘画顺序，因为画布上的元素是会互相遮挡的（z-index）。\n\n![](/images/chrome/drawgame.png)\n<p align=\"center\">一个人拿着画笔站在画布前面，在思考着是先画一个圆还是先画一个正方形</p>\n\n举个例子，如果页面上的某些元素设置了**z-index**属性，绘制元素的顺序就会影响到页面的正确性。\n\n![](/images/chrome/zindex.png)\n<p align=\"center\">单纯按照HTML布局的顺序绘制页面的元素是错误的，因为元素的z-index元素没有被考虑到</p>\n\n在绘画这个步骤中，主线程会遍历之前得到的布局树（layout tree）来生成一系列的绘画记录（paint records）。绘画记录是对绘画过程的注释，例如“首先画背景，然后是文本，最后画矩形”。如果你曾经在canvas画布上有使用过JavaScript绘制元素，你可能会觉着这个过程不是很陌生。\n\n![](/images/chrome/paint.png)\n<p align=\"center\">主线程遍历布局树来生成绘画记录</p>\n\n## 高成本的**渲染流水线**（rendering pipeline）更新\n关于渲染流水线有一个十分重要的点就是流水线的每一步都要使用到前一步的结果来生成新的数据，这就意味着如果某一步的内容发生了改变的话，这一步后面所有的步骤都要被重新执行以生成新的记录。举个例子，如果布局树有些东西被改变了，文档上那些被影响到的部分的绘画顺序是要重新生成的。\n![](/images/chrome/trees.gif)\n<p align=\"center\">DOM+Style，布局以及绘画树</p>\n\n如果你的页面元素有动画效果（animating），浏览器就不得不在每个渲染帧的间隔中通过渲染流水线来更新页面的元素。我们大多数显示器的刷新频率是一秒钟60次（60fps），如果你在每个渲染帧的间隔都能通过流水线移动元素，人眼就会看到流畅的动画效果。可是如果流水线更新时间比较久，动画存在丢帧的状况的话，页面看起来就会很“卡顿”。\n\n![](/images/chrome/pagejank1.png)\n<p align=\"center\">流水线更新没有赶上屏幕刷新，动画就有点卡</p>\n\n即使你的渲染流水线更新是和屏幕的刷新频率保持一致的，这些更新是运行在主线程上面的，这就意味着它可能被同样运行在主线程上面的JavaScript代码阻塞。\n\n![](/images/chrome/pagejank2.png)\n<p align=\"center\">某些动画帧被JavaScript阻塞了</p>\n\n对于这种情况，你可以将要被执行的JavaScript操作拆分为更小的块然后通过`requestAnimationFrame`这个API把他们放在每个动画帧中执行。想知道更多关于这方面的信息的话，可以参考[Optimize JavaScript Execution](https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution)。当然你还可以将JavaScript代码放在[WebWorkers](https://www.youtube.com/watch?v=X57mh8tKkgE)中执行来避免它们阻塞主线程。\n\n![](/images/chrome/raf.png)\n<p align=\"center\">在动画帧上运行一小段JavaScript代码</p>\n\n## 合成\n### 如何绘制一个页面？\n到目前为止，浏览器已经知道了关于页面以下的信息：文档结构，元素的样式，元素的几何信息以及它们的绘画顺序。那么浏览器是如何利用这些信息来绘制出页面来的呢？**将以上这些信息转化为显示器的像素的过程叫做光栅化（rasterizing）**。\n\n可能一个最简单的做法就是只光栅化视口内（viewport）的网页内容。如果用户进行了页面滚动，就移动光栅帧（rastered frame）并且光栅化更多的内容以补上页面缺失的部分。Chrome的第一个版本其实就是这样做的。然而，对于现代的浏览器来说，它们往往采取一种更加复杂的叫做合成（compositing）的做法。\n\n![](/images/chrome/rasterizing.gif)\n<p align=\"center\">最简单的光栅化过程</p>\n\n### 什么是合成\n合成是一种将页面分成若干层，然后分别对它们进行光栅化，最后在一个单独的线程 - 合成线程（compositor thread）里面合并成一个页面的技术。当用户滚动页面时，由于页面各个层都已经被光栅化了，浏览器需要做的只是合成一个新的帧来展示滚动后的效果罢了。页面的动画效果实现也是类似，将页面上的层进行移动并构建出一个新的帧即可。\n\n你可以通过[Layers panel](https://blog.logrocket.com/eliminate-content-repaints-with-the-new-layers-panel-in-chrome-e2c306d4d752?gi=cd6271834cea)在DevTools查看你的网站是如何被浏览器分成不同的层的。\n\n![](/images/chrome/composit.gif)\n<p align=\"center\">页面合成过程</p>\n\n### 页面分层\n为了确定哪些元素需要放置在哪一层，主线程需要遍历渲染树来创建一棵层次树（Layer Tree）（在DevTools中这一部分工作叫做“Update Layer Tree”）。如果页面的某些部分应该被放置在一个单独的层上面（滑动菜单）可是却没有的话，你可以通过使用`will-change` CSS属性来告诉浏览器对其分层。\n\n![](/images/chrome/layer.png)\n<p align=\"center\">主线程遍历布局树来生成层次树</p>\n\n你可能会想要给页面上所有的元素一个单独的层，然而当页面的层超过一定的数量后，层的合成操作要比在每个帧中光栅化页面的一小部分还要慢，因此衡量你应用的渲染性能是十分重要的一件事情。想要获取关于这方面的更多信息，可以参考文章[Stick to Compositor-Only Properties and Manage Layer Count](https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count)。\n\n### 在主线程之外光栅化和合成页面\n一旦页面的层次树创建出来并且页面元素的绘制顺序确定后，主线程就会向合成线程（compositor thread）提交这些信息。然后合成线程就会光栅化页面的每一层。因为页面的一层可能有整个网页那么大，所以合成线程需要将它们切分为一块又一块的小图块（tiles）然后将图块发送给一系列光栅线程（raster threads）。光栅线程会栅格化每个图块并且把它们存储在GPU的内存中。\n\n![](/images/chrome/raster.png)\n<p align=\"center\">光栅线程创建图块的位图并发送给GPU</p>\n\n合成线程可以给不同的光栅线程赋予不同的优先级（prioritize），进而使那些在视口中的或者视口附近的页面可以先被光栅化。为了响应用户对页面的放大和缩小操作，页面的图层（layer）会为不同的清晰度配备不同的图块。\n\n当图层上面的图块都被栅格化后，合成线程会收集图块上面叫做**绘画四边形**（draw quads）的信息来构建一个**合成帧**（compositor frame）。\n\n* 绘画四边形：包含图块在**内存的位置**以及图层合成后图块在页面的位置之类的信息。\n* 合成帧：代表页面一个帧的内容的绘制四边形**集合**。\n\n上面的步骤完成之后，合成线程就会通过IPC向浏览器进程（browser process）提交（commit）一个渲染帧。这个时候可能有另外一个合成帧被浏览器进程的UI线程（UI thread）提交以改变浏览器的UI。这些合成帧都会被发送给GPU从而展示在屏幕上。如果合成线程收到页面滚动的事件，合成线程会构建另外一个合成帧发送给GPU来更新页面。\n\n![](/images/chrome/composit.png)\n<p align=\"center\">合成线程构建出合成帧，合成帧会被发送给浏览器进程然后再发送给GPU</p>\n\n合成的好处在于这个过程没有涉及到主线程，所以合成线程不需要等待样式的计算以及JavaScript完成执行。这也就是为什么说[只通过合成来构建页面动画](https://www.html5rocks.com/en/tutorials/speed/high-performance-animations/)是构建流畅用户体验的最佳实践的原因了。如果页面需要被重新布局或者绘制的话，主线程一定会参与进来的。\n\n## 总结\n在这篇文章中，我们探讨了从解析HTML文件到合成页面整个的渲染流水线。希望你读完后，可以自己去看一些关于页面性能优化的文章了。\n\n在接下来也是最后一篇本系列的文章中，我们将要查看合成线程更多的细节，来了解一下当用户在页面移动鼠标（**mouse move**）以及进行点击（**click**）的时候浏览器会做些什么事情。\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","slug":"窥探现代浏览器架构-三","published":1,"updated":"2021-02-08T06:16:56.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0gqf6ft000qucnx33chda6t","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文是笔者对<a href=\"https://developers.google.com/web/resources/contributors/kosamari\" target=\"_blank\" rel=\"noopener\">Mario Kosaka</a>写的<a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part3\" target=\"_blank\" rel=\"noopener\">inside look at modern web browser</a>系列文章的翻译。这里的翻译不是指直译，而是结合个人的理解将作者想表达的意思表达出来，而且会尽量补充一些相关的内容来帮助大家更好地理解。</p>\n<h2 id=\"渲染进程里面发生的事\"><a href=\"#渲染进程里面发生的事\" class=\"headerlink\" title=\"渲染进程里面发生的事\"></a>渲染进程里面发生的事</h2><p>这篇文章是探究Chrome内部工作原理的<strong>四集系列文章</strong>中的第三篇。之前我们分别探讨了<a href=\"https://xiaocongdong.github.io/2019/12/25/%E7%AA%A5%E6%8E%A2%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84-%E4%B8%80/\" target=\"_blank\" rel=\"noopener\">Chrome的多进程架构</a>以及<a href=\"https://xiaocongdong.github.io/2019/12/27/%E7%AA%A5%E6%8E%A2%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84-%E4%BA%8C/\" target=\"_blank\" rel=\"noopener\">导航的过程都发生了什么</a>。在本篇文章中，我们将要窥探一下渲染进程在渲染页面的时候具体都发生了什么事情。</p>\n<p>渲染进程会影响到Web性能的很多方面。页面渲染的时候发生的东西实在太多了，本篇文章只能作一个大体的介绍。如果你想要了解更多相关的内容，<a href=\"https://developers.google.com/web/fundamentals/performance/why-performance-matters/\" target=\"_blank\" rel=\"noopener\">Web Fundamentals的Performance栏目</a>有很多资源可以查看。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"渲染进程处理页面内容\"><a href=\"#渲染进程处理页面内容\" class=\"headerlink\" title=\"渲染进程处理页面内容\"></a>渲染进程处理页面内容</h2><p>渲染进程负责标签（tab）内发生的所有事情。在渲染进程里面，主线程（main thread）处理了绝大多数你发送给用户的代码。如果你使用了web worker或者service worker，相关的代码将会由工作线程（worker thread）处理。合成（compositor）以及光栅（raster）线程运行在渲染进程里面用来高效流畅地渲染出页面内容。</p>\n<p><strong>渲染进程的主要任务是将HTML，CSS，以及JavaScript转变为我们可以进程交互的网页内容</strong>。<br><img src=\"/images/chrome/renderer.png\" alt></p>\n<p align=\"center\">渲染进程里面有：一个主线程（main thread），几个工作线程（worker threads），一个合成线程（compositor thread）以及一个光栅线程（raster thread）</p>\n\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><h3 id=\"构建DOM\"><a href=\"#构建DOM\" class=\"headerlink\" title=\"构建DOM\"></a>构建DOM</h3><p>前面文章提到，渲染进程在导航结束的时候会收到来自浏览器进程提交导航（commit navigation）的消息，在这之后渲染进程就会开始接收HTML数据，同时主线程也会开始解析接收到的文本数据（text string）并把它转化为一个DOM（<strong>D</strong>ocument <strong>O</strong>bject <strong>M</strong>odel）对象</p>\n<p><strong>DOM对象既是浏览器对当前页面的内部表示，也是Web开发人员通过JavaScript与网页进行交互的数据结构以及API</strong>。</p>\n<p>如何将HTML文档解析为DOM对象是在<a href=\"https://html.spec.whatwg.org/\" target=\"_blank\" rel=\"noopener\">HTML标准</a>中定义的。不过在你的web开发生涯中，你可能从来没有遇到过浏览器在解析HTML的时候发生错误的情景。<strong>这是因为浏览器对HTML的错误容忍度很大</strong>。举些例子：如果一个段落缺失了闭合p标签（&lt;/p&gt;），这个页面还是会被当做为有效的HTML来处理；Hi! &lt;b&gt;I’m &lt;i&gt;Chrome&lt;/b&gt;!&lt;/i&gt; (闭合b标签写在了闭合i标签的前面) ，虽然有语法错误，不过浏览器会把它处理为Hi! &lt;b&gt;I’m &lt;i&gt;Chrome&lt;/i&gt;&lt;/b&gt;&lt;i&gt;!&lt;/i&gt;。如果你想知道浏览器是如何对这些错误进行容错处理的，可以参考HTML规范里面的<a href=\"https://html.spec.whatwg.org/multipage/parsing.html#an-introduction-to-error-handling-and-strange-cases-in-the-parser\" target=\"_blank\" rel=\"noopener\">An introduction to error handling and strange cases in the parser</a>内容。</p>\n<h3 id=\"子资源加载\"><a href=\"#子资源加载\" class=\"headerlink\" title=\"子资源加载\"></a>子资源加载</h3><p>除了HTML文件，网站通常还会使用到一些诸如图片，CSS样式以及JavaScript脚本等子资源。这些文件会从缓存或者网络上获取。主线程会按照在构建DOM树时遇到各个资源的循序一个接着一个地发起网络请求，可是为了提升效率，浏览器会同时运行“预加载扫描”（preload scanner）程序。如果在HTML文档里面存在诸如&lt;img&gt;或者&lt;link&gt;这样的标签，预加载扫描程序会在HTML解析器生成的token里面找到对应要获取的资源，并把这些要获取的资源告诉浏览器进程里面的网络线程。<br><img src=\"/images/chrome/dom.png\" alt></p>\n<p align=\"center\">主线程会解析HTML内容并且构建出DOM树</p>\n\n<h3 id=\"JavaScript会阻塞HTML的解析过程\"><a href=\"#JavaScript会阻塞HTML的解析过程\" class=\"headerlink\" title=\"JavaScript会阻塞HTML的解析过程\"></a>JavaScript会阻塞HTML的解析过程</h3><p>当HTML解析器碰到script标签的时候，它会停止HTML文档的解析从而转向JavaScript代码的加载，解析以及执行。为什么要这样做呢？因为script标签中的JavaScript可能会使用诸如<code>document.write()</code>这样的代码改变文档流（document）的形状，从而使整个DOM树的结构发生根本性的改变（HTML规范里面的<a href=\"https://html.spec.whatwg.org/multipage/parsing.html#overview-of-the-parsing-model\" target=\"_blank\" rel=\"noopener\">overview of the parsing model部分</a>有很好的示意图）。因为这个原因，HTML解析器不得不等JavaScript执行完成之后才能继续对HTML文档流的解析工作。如果你想知道JavaScipt的执行过程都发生了什么，V8团队有很多关于这个话题的<a href=\"https://mathiasbynens.be/notes/shapes-ics\" target=\"_blank\" rel=\"noopener\">讨论以及博客</a>。</p>\n<h2 id=\"给浏览器一点如何加载资源的提示\"><a href=\"#给浏览器一点如何加载资源的提示\" class=\"headerlink\" title=\"给浏览器一点如何加载资源的提示\"></a>给浏览器一点如何加载资源的提示</h2><p>Web开发者可以通过很多方式告诉浏览器如何才能更加优雅地加载网页需要用到的资源。如果你的JavaScript不会使用到诸如<code>document.write()</code>的方式去改变文档流的内容的话，你可以为script标签添加一个<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-async\" target=\"_blank\" rel=\"noopener\">async</a>或者<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-defer\" target=\"_blank\" rel=\"noopener\">defer</a>属性来使JavaScript脚本进行异步加载。当然如果能满足到你的需求，你也可以使用<a href=\"https://developers.google.com/web/fundamentals/primers/modules\" target=\"_blank\" rel=\"noopener\">JavaScript Module</a>。同时<code>&lt;link rel=&quot;preload&quot;&gt;</code>资源预加载可以用来告诉浏览器这个资源在当前的导航肯定会被用到，你想要尽快加载这个资源。更多相关的内容，你可阅读<a href=\"https://developers.google.com/web/fundamentals/performance/resource-prioritization\" target=\"_blank\" rel=\"noopener\">Resource Prioritization - Getting the Browser to Help You</a>这篇文章。</p>\n<h2 id=\"样式计算-Style-calculation\"><a href=\"#样式计算-Style-calculation\" class=\"headerlink\" title=\"样式计算 - Style calculation\"></a>样式计算 - Style calculation</h2><p>拥有了DOM树我们还不足以知道页面的外貌，因为我们通常会为页面的元素设置一些样式。主线程会解析页面的CSS从而确定每个DOM节点的计算样式（computed style）。计算样式是主线程根据CSS样式选择器（CSS selectors）计算出的每个DOM元素应该具备的具体样式，你可以打开devtools来查看每个DOM节点对应的计算样式。<br><img src=\"/images/chrome/computedstyle.png\" alt></p>\n<p align=\"center\">主线程解析CSS来确定每个元素的计算样式</p>\n\n<p>即使你的页面没有设置任何自定义的样式，每个DOM节点还是会有一个计算样式属性，这是因为每个浏览器都有自己的默认样式表。因为这个样式表的存在，页面上的h1标签一定会比h2标签大，而且不同的标签会有不同的magin和padding。如果你想知道Chrome的默认样式是长什么样的，你可以直接查看<a href=\"https://cs.chromium.org/chromium/src/third_party/blink/renderer/core/html/resources/html.css\" target=\"_blank\" rel=\"noopener\">代码</a>。</p>\n<h2 id=\"布局-Layout\"><a href=\"#布局-Layout\" class=\"headerlink\" title=\"布局 - Layout\"></a>布局 - Layout</h2><p>前面这些步骤完成之后，渲染进程就已经知道页面的具体文档结构以及每个节点拥有的样式信息了，可是这些信息还是不能最终确定页面的样子。举个例子，假如你现在想通过电话告诉你的朋友你身边的一幅画的内容：“画布上有一个红色的大圆圈和一个蓝色的正方形”，单凭这些信息你的朋友是很难知道这幅画具体是什么样子的，因为他不知道大圆圈和正方形具体在页面的什么位置，是正方形在圆圈前面呢还是圆圈在正方形的前面。<br><img src=\"/images/chrome/tellgame.png\" alt></p>\n<p align=\"center\">你站在一幅画面前通过电话告诉你朋友画上的内容</p>\n\n<p>渲染网页也是同样的道理，只知道网站的文档流以及每个节点的样式是远远不足以渲染出页面内容的，还需要通过布局（layout）来计算出每个节点的<strong>几何信息</strong>（geometry）。布局的具体过程是：主线程会遍历刚刚构建的DOM树，根据DOM节点的计算样式计算出一个布局树（layout tree）。布局树上每个节点会有它在页面上的x，y坐标以及盒子大小（bounding box sizes）的具体信息。布局树长得和先前构建的DOM树差不多，不同的是这颗树只有那些可见的（visible）节点信息。举个例子，如果一个节点被设置为了<strong>display:none</strong>，这个节点就是不可见的就不会出现在布局树上面（<strong>visibility:hidden</strong>的节点会出现在布局树上面，你可以思考一下这是为什么）。同样的，如果一个伪元素（pseudo class）节点有诸如<code>p::before{content:&quot;Hi!&quot;}</code>这样的内容，它会出现在布局上，而不存在于DOM树上。<br><img src=\"/images/chrome/layout.png\" alt></p>\n<p align=\"center\">主线程会遍历每个DOM tree节点的计算样式信息来生成一棵布局树</p>\n\n<p>即使页面的布局十分简单，布局这个过程都是非常复杂的。例如页面就是简单地从上而下展示一个又一个段落，这个过程就很复杂，因为你需要考虑段落中的字体大小以及段落在哪里需要进行换行之类的东西，它们都会影响到段落的大小以及形状，继而影响到接下来段落的布局。<br><img src=\"/images/chrome/tree.png\" alt></p>\n<p align=\"center\">浏览器得考虑段落是不是要换行</p>\n\n<p>如果考虑到CSS的话将会更加复杂，因为CSS是一个很强大的东西，它可以让元素悬浮（float）到页面的某一边，还可以遮挡住页面溢出的（overflow）元素，还可以改变内容的书写方向，所以单是想一下你就知道布局这个过程是一个十分艰巨和复杂的任务。对于Chrome浏览器，我们有一整个负责布局过程的工程师团队。如果你想知道他们工作的具体内容，他们在<a href=\"https://www.youtube.com/watch?v=Y5Xa4H2wtVA\" target=\"_blank\" rel=\"noopener\">BlinkOn Conference</a>上面的相关讨论被录制了下来，有时间的话你可以去看一下。</p>\n<h2 id=\"绘画-Paint\"><a href=\"#绘画-Paint\" class=\"headerlink\" title=\"绘画 - Paint\"></a>绘画 - Paint</h2><p>知道了DOM节点以及它的样式和布局其实还是不足以渲染出页面来的。为什么呢？举个例子，假如你现在想对着一幅画画一幅一样的画，你已经知道了画布上每个元素的大小，形状以及位置，你还是得思考一下每个元素的绘画顺序，因为画布上的元素是会互相遮挡的（z-index）。</p>\n<p><img src=\"/images/chrome/drawgame.png\" alt></p>\n<p align=\"center\">一个人拿着画笔站在画布前面，在思考着是先画一个圆还是先画一个正方形</p>\n\n<p>举个例子，如果页面上的某些元素设置了<strong>z-index</strong>属性，绘制元素的顺序就会影响到页面的正确性。</p>\n<p><img src=\"/images/chrome/zindex.png\" alt></p>\n<p align=\"center\">单纯按照HTML布局的顺序绘制页面的元素是错误的，因为元素的z-index元素没有被考虑到</p>\n\n<p>在绘画这个步骤中，主线程会遍历之前得到的布局树（layout tree）来生成一系列的绘画记录（paint records）。绘画记录是对绘画过程的注释，例如“首先画背景，然后是文本，最后画矩形”。如果你曾经在canvas画布上有使用过JavaScript绘制元素，你可能会觉着这个过程不是很陌生。</p>\n<p><img src=\"/images/chrome/paint.png\" alt></p>\n<p align=\"center\">主线程遍历布局树来生成绘画记录</p>\n\n<h2 id=\"高成本的渲染流水线（rendering-pipeline）更新\"><a href=\"#高成本的渲染流水线（rendering-pipeline）更新\" class=\"headerlink\" title=\"高成本的渲染流水线（rendering pipeline）更新\"></a>高成本的<strong>渲染流水线</strong>（rendering pipeline）更新</h2><p>关于渲染流水线有一个十分重要的点就是流水线的每一步都要使用到前一步的结果来生成新的数据，这就意味着如果某一步的内容发生了改变的话，这一步后面所有的步骤都要被重新执行以生成新的记录。举个例子，如果布局树有些东西被改变了，文档上那些被影响到的部分的绘画顺序是要重新生成的。<br><img src=\"/images/chrome/trees.gif\" alt></p>\n<p align=\"center\">DOM+Style，布局以及绘画树</p>\n\n<p>如果你的页面元素有动画效果（animating），浏览器就不得不在每个渲染帧的间隔中通过渲染流水线来更新页面的元素。我们大多数显示器的刷新频率是一秒钟60次（60fps），如果你在每个渲染帧的间隔都能通过流水线移动元素，人眼就会看到流畅的动画效果。可是如果流水线更新时间比较久，动画存在丢帧的状况的话，页面看起来就会很“卡顿”。</p>\n<p><img src=\"/images/chrome/pagejank1.png\" alt></p>\n<p align=\"center\">流水线更新没有赶上屏幕刷新，动画就有点卡</p>\n\n<p>即使你的渲染流水线更新是和屏幕的刷新频率保持一致的，这些更新是运行在主线程上面的，这就意味着它可能被同样运行在主线程上面的JavaScript代码阻塞。</p>\n<p><img src=\"/images/chrome/pagejank2.png\" alt></p>\n<p align=\"center\">某些动画帧被JavaScript阻塞了</p>\n\n<p>对于这种情况，你可以将要被执行的JavaScript操作拆分为更小的块然后通过<code>requestAnimationFrame</code>这个API把他们放在每个动画帧中执行。想知道更多关于这方面的信息的话，可以参考<a href=\"https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution\" target=\"_blank\" rel=\"noopener\">Optimize JavaScript Execution</a>。当然你还可以将JavaScript代码放在<a href=\"https://www.youtube.com/watch?v=X57mh8tKkgE\" target=\"_blank\" rel=\"noopener\">WebWorkers</a>中执行来避免它们阻塞主线程。</p>\n<p><img src=\"/images/chrome/raf.png\" alt></p>\n<p align=\"center\">在动画帧上运行一小段JavaScript代码</p>\n\n<h2 id=\"合成\"><a href=\"#合成\" class=\"headerlink\" title=\"合成\"></a>合成</h2><h3 id=\"如何绘制一个页面？\"><a href=\"#如何绘制一个页面？\" class=\"headerlink\" title=\"如何绘制一个页面？\"></a>如何绘制一个页面？</h3><p>到目前为止，浏览器已经知道了关于页面以下的信息：文档结构，元素的样式，元素的几何信息以及它们的绘画顺序。那么浏览器是如何利用这些信息来绘制出页面来的呢？<strong>将以上这些信息转化为显示器的像素的过程叫做光栅化（rasterizing）</strong>。</p>\n<p>可能一个最简单的做法就是只光栅化视口内（viewport）的网页内容。如果用户进行了页面滚动，就移动光栅帧（rastered frame）并且光栅化更多的内容以补上页面缺失的部分。Chrome的第一个版本其实就是这样做的。然而，对于现代的浏览器来说，它们往往采取一种更加复杂的叫做合成（compositing）的做法。</p>\n<p><img src=\"/images/chrome/rasterizing.gif\" alt></p>\n<p align=\"center\">最简单的光栅化过程</p>\n\n<h3 id=\"什么是合成\"><a href=\"#什么是合成\" class=\"headerlink\" title=\"什么是合成\"></a>什么是合成</h3><p>合成是一种将页面分成若干层，然后分别对它们进行光栅化，最后在一个单独的线程 - 合成线程（compositor thread）里面合并成一个页面的技术。当用户滚动页面时，由于页面各个层都已经被光栅化了，浏览器需要做的只是合成一个新的帧来展示滚动后的效果罢了。页面的动画效果实现也是类似，将页面上的层进行移动并构建出一个新的帧即可。</p>\n<p>你可以通过<a href=\"https://blog.logrocket.com/eliminate-content-repaints-with-the-new-layers-panel-in-chrome-e2c306d4d752?gi=cd6271834cea\" target=\"_blank\" rel=\"noopener\">Layers panel</a>在DevTools查看你的网站是如何被浏览器分成不同的层的。</p>\n<p><img src=\"/images/chrome/composit.gif\" alt></p>\n<p align=\"center\">页面合成过程</p>\n\n<h3 id=\"页面分层\"><a href=\"#页面分层\" class=\"headerlink\" title=\"页面分层\"></a>页面分层</h3><p>为了确定哪些元素需要放置在哪一层，主线程需要遍历渲染树来创建一棵层次树（Layer Tree）（在DevTools中这一部分工作叫做“Update Layer Tree”）。如果页面的某些部分应该被放置在一个单独的层上面（滑动菜单）可是却没有的话，你可以通过使用<code>will-change</code> CSS属性来告诉浏览器对其分层。</p>\n<p><img src=\"/images/chrome/layer.png\" alt></p>\n<p align=\"center\">主线程遍历布局树来生成层次树</p>\n\n<p>你可能会想要给页面上所有的元素一个单独的层，然而当页面的层超过一定的数量后，层的合成操作要比在每个帧中光栅化页面的一小部分还要慢，因此衡量你应用的渲染性能是十分重要的一件事情。想要获取关于这方面的更多信息，可以参考文章<a href=\"https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count\" target=\"_blank\" rel=\"noopener\">Stick to Compositor-Only Properties and Manage Layer Count</a>。</p>\n<h3 id=\"在主线程之外光栅化和合成页面\"><a href=\"#在主线程之外光栅化和合成页面\" class=\"headerlink\" title=\"在主线程之外光栅化和合成页面\"></a>在主线程之外光栅化和合成页面</h3><p>一旦页面的层次树创建出来并且页面元素的绘制顺序确定后，主线程就会向合成线程（compositor thread）提交这些信息。然后合成线程就会光栅化页面的每一层。因为页面的一层可能有整个网页那么大，所以合成线程需要将它们切分为一块又一块的小图块（tiles）然后将图块发送给一系列光栅线程（raster threads）。光栅线程会栅格化每个图块并且把它们存储在GPU的内存中。</p>\n<p><img src=\"/images/chrome/raster.png\" alt></p>\n<p align=\"center\">光栅线程创建图块的位图并发送给GPU</p>\n\n<p>合成线程可以给不同的光栅线程赋予不同的优先级（prioritize），进而使那些在视口中的或者视口附近的页面可以先被光栅化。为了响应用户对页面的放大和缩小操作，页面的图层（layer）会为不同的清晰度配备不同的图块。</p>\n<p>当图层上面的图块都被栅格化后，合成线程会收集图块上面叫做<strong>绘画四边形</strong>（draw quads）的信息来构建一个<strong>合成帧</strong>（compositor frame）。</p>\n<ul>\n<li>绘画四边形：包含图块在<strong>内存的位置</strong>以及图层合成后图块在页面的位置之类的信息。</li>\n<li>合成帧：代表页面一个帧的内容的绘制四边形<strong>集合</strong>。</li>\n</ul>\n<p>上面的步骤完成之后，合成线程就会通过IPC向浏览器进程（browser process）提交（commit）一个渲染帧。这个时候可能有另外一个合成帧被浏览器进程的UI线程（UI thread）提交以改变浏览器的UI。这些合成帧都会被发送给GPU从而展示在屏幕上。如果合成线程收到页面滚动的事件，合成线程会构建另外一个合成帧发送给GPU来更新页面。</p>\n<p><img src=\"/images/chrome/composit.png\" alt></p>\n<p align=\"center\">合成线程构建出合成帧，合成帧会被发送给浏览器进程然后再发送给GPU</p>\n\n<p>合成的好处在于这个过程没有涉及到主线程，所以合成线程不需要等待样式的计算以及JavaScript完成执行。这也就是为什么说<a href=\"https://www.html5rocks.com/en/tutorials/speed/high-performance-animations/\" target=\"_blank\" rel=\"noopener\">只通过合成来构建页面动画</a>是构建流畅用户体验的最佳实践的原因了。如果页面需要被重新布局或者绘制的话，主线程一定会参与进来的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在这篇文章中，我们探讨了从解析HTML文件到合成页面整个的渲染流水线。希望你读完后，可以自己去看一些关于页面性能优化的文章了。</p>\n<p>在接下来也是最后一篇本系列的文章中，我们将要查看合成线程更多的细节，来了解一下当用户在页面移动鼠标（<strong>mouse move</strong>）以及进行点击（<strong>click</strong>）的时候浏览器会做些什么事情。</p>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文是笔者对<a href=\"https://developers.google.com/web/resources/contributors/kosamari\" target=\"_blank\" rel=\"noopener\">Mario Kosaka</a>写的<a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part3\" target=\"_blank\" rel=\"noopener\">inside look at modern web browser</a>系列文章的翻译。这里的翻译不是指直译，而是结合个人的理解将作者想表达的意思表达出来，而且会尽量补充一些相关的内容来帮助大家更好地理解。</p>\n<h2 id=\"渲染进程里面发生的事\"><a href=\"#渲染进程里面发生的事\" class=\"headerlink\" title=\"渲染进程里面发生的事\"></a>渲染进程里面发生的事</h2><p>这篇文章是探究Chrome内部工作原理的<strong>四集系列文章</strong>中的第三篇。之前我们分别探讨了<a href=\"https://xiaocongdong.github.io/2019/12/25/%E7%AA%A5%E6%8E%A2%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84-%E4%B8%80/\" target=\"_blank\" rel=\"noopener\">Chrome的多进程架构</a>以及<a href=\"https://xiaocongdong.github.io/2019/12/27/%E7%AA%A5%E6%8E%A2%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84-%E4%BA%8C/\" target=\"_blank\" rel=\"noopener\">导航的过程都发生了什么</a>。在本篇文章中，我们将要窥探一下渲染进程在渲染页面的时候具体都发生了什么事情。</p>\n<p>渲染进程会影响到Web性能的很多方面。页面渲染的时候发生的东西实在太多了，本篇文章只能作一个大体的介绍。如果你想要了解更多相关的内容，<a href=\"https://developers.google.com/web/fundamentals/performance/why-performance-matters/\" target=\"_blank\" rel=\"noopener\">Web Fundamentals的Performance栏目</a>有很多资源可以查看。</p>","more":"<h2 id=\"渲染进程处理页面内容\"><a href=\"#渲染进程处理页面内容\" class=\"headerlink\" title=\"渲染进程处理页面内容\"></a>渲染进程处理页面内容</h2><p>渲染进程负责标签（tab）内发生的所有事情。在渲染进程里面，主线程（main thread）处理了绝大多数你发送给用户的代码。如果你使用了web worker或者service worker，相关的代码将会由工作线程（worker thread）处理。合成（compositor）以及光栅（raster）线程运行在渲染进程里面用来高效流畅地渲染出页面内容。</p>\n<p><strong>渲染进程的主要任务是将HTML，CSS，以及JavaScript转变为我们可以进程交互的网页内容</strong>。<br><img src=\"/images/chrome/renderer.png\" alt=\"\"></p>\n<p align=\"center\">渲染进程里面有：一个主线程（main thread），几个工作线程（worker threads），一个合成线程（compositor thread）以及一个光栅线程（raster thread）</p>\n\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><h3 id=\"构建DOM\"><a href=\"#构建DOM\" class=\"headerlink\" title=\"构建DOM\"></a>构建DOM</h3><p>前面文章提到，渲染进程在导航结束的时候会收到来自浏览器进程提交导航（commit navigation）的消息，在这之后渲染进程就会开始接收HTML数据，同时主线程也会开始解析接收到的文本数据（text string）并把它转化为一个DOM（<strong>D</strong>ocument <strong>O</strong>bject <strong>M</strong>odel）对象</p>\n<p><strong>DOM对象既是浏览器对当前页面的内部表示，也是Web开发人员通过JavaScript与网页进行交互的数据结构以及API</strong>。</p>\n<p>如何将HTML文档解析为DOM对象是在<a href=\"https://html.spec.whatwg.org/\" target=\"_blank\" rel=\"noopener\">HTML标准</a>中定义的。不过在你的web开发生涯中，你可能从来没有遇到过浏览器在解析HTML的时候发生错误的情景。<strong>这是因为浏览器对HTML的错误容忍度很大</strong>。举些例子：如果一个段落缺失了闭合p标签（&lt;/p&gt;），这个页面还是会被当做为有效的HTML来处理；Hi! &lt;b&gt;I’m &lt;i&gt;Chrome&lt;/b&gt;!&lt;/i&gt; (闭合b标签写在了闭合i标签的前面) ，虽然有语法错误，不过浏览器会把它处理为Hi! &lt;b&gt;I’m &lt;i&gt;Chrome&lt;/i&gt;&lt;/b&gt;&lt;i&gt;!&lt;/i&gt;。如果你想知道浏览器是如何对这些错误进行容错处理的，可以参考HTML规范里面的<a href=\"https://html.spec.whatwg.org/multipage/parsing.html#an-introduction-to-error-handling-and-strange-cases-in-the-parser\" target=\"_blank\" rel=\"noopener\">An introduction to error handling and strange cases in the parser</a>内容。</p>\n<h3 id=\"子资源加载\"><a href=\"#子资源加载\" class=\"headerlink\" title=\"子资源加载\"></a>子资源加载</h3><p>除了HTML文件，网站通常还会使用到一些诸如图片，CSS样式以及JavaScript脚本等子资源。这些文件会从缓存或者网络上获取。主线程会按照在构建DOM树时遇到各个资源的循序一个接着一个地发起网络请求，可是为了提升效率，浏览器会同时运行“预加载扫描”（preload scanner）程序。如果在HTML文档里面存在诸如&lt;img&gt;或者&lt;link&gt;这样的标签，预加载扫描程序会在HTML解析器生成的token里面找到对应要获取的资源，并把这些要获取的资源告诉浏览器进程里面的网络线程。<br><img src=\"/images/chrome/dom.png\" alt=\"\"></p>\n<p align=\"center\">主线程会解析HTML内容并且构建出DOM树</p>\n\n<h3 id=\"JavaScript会阻塞HTML的解析过程\"><a href=\"#JavaScript会阻塞HTML的解析过程\" class=\"headerlink\" title=\"JavaScript会阻塞HTML的解析过程\"></a>JavaScript会阻塞HTML的解析过程</h3><p>当HTML解析器碰到script标签的时候，它会停止HTML文档的解析从而转向JavaScript代码的加载，解析以及执行。为什么要这样做呢？因为script标签中的JavaScript可能会使用诸如<code>document.write()</code>这样的代码改变文档流（document）的形状，从而使整个DOM树的结构发生根本性的改变（HTML规范里面的<a href=\"https://html.spec.whatwg.org/multipage/parsing.html#overview-of-the-parsing-model\" target=\"_blank\" rel=\"noopener\">overview of the parsing model部分</a>有很好的示意图）。因为这个原因，HTML解析器不得不等JavaScript执行完成之后才能继续对HTML文档流的解析工作。如果你想知道JavaScipt的执行过程都发生了什么，V8团队有很多关于这个话题的<a href=\"https://mathiasbynens.be/notes/shapes-ics\" target=\"_blank\" rel=\"noopener\">讨论以及博客</a>。</p>\n<h2 id=\"给浏览器一点如何加载资源的提示\"><a href=\"#给浏览器一点如何加载资源的提示\" class=\"headerlink\" title=\"给浏览器一点如何加载资源的提示\"></a>给浏览器一点如何加载资源的提示</h2><p>Web开发者可以通过很多方式告诉浏览器如何才能更加优雅地加载网页需要用到的资源。如果你的JavaScript不会使用到诸如<code>document.write()</code>的方式去改变文档流的内容的话，你可以为script标签添加一个<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-async\" target=\"_blank\" rel=\"noopener\">async</a>或者<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-defer\" target=\"_blank\" rel=\"noopener\">defer</a>属性来使JavaScript脚本进行异步加载。当然如果能满足到你的需求，你也可以使用<a href=\"https://developers.google.com/web/fundamentals/primers/modules\" target=\"_blank\" rel=\"noopener\">JavaScript Module</a>。同时<code>&lt;link rel=&quot;preload&quot;&gt;</code>资源预加载可以用来告诉浏览器这个资源在当前的导航肯定会被用到，你想要尽快加载这个资源。更多相关的内容，你可阅读<a href=\"https://developers.google.com/web/fundamentals/performance/resource-prioritization\" target=\"_blank\" rel=\"noopener\">Resource Prioritization - Getting the Browser to Help You</a>这篇文章。</p>\n<h2 id=\"样式计算-Style-calculation\"><a href=\"#样式计算-Style-calculation\" class=\"headerlink\" title=\"样式计算 - Style calculation\"></a>样式计算 - Style calculation</h2><p>拥有了DOM树我们还不足以知道页面的外貌，因为我们通常会为页面的元素设置一些样式。主线程会解析页面的CSS从而确定每个DOM节点的计算样式（computed style）。计算样式是主线程根据CSS样式选择器（CSS selectors）计算出的每个DOM元素应该具备的具体样式，你可以打开devtools来查看每个DOM节点对应的计算样式。<br><img src=\"/images/chrome/computedstyle.png\" alt=\"\"></p>\n<p align=\"center\">主线程解析CSS来确定每个元素的计算样式</p>\n\n<p>即使你的页面没有设置任何自定义的样式，每个DOM节点还是会有一个计算样式属性，这是因为每个浏览器都有自己的默认样式表。因为这个样式表的存在，页面上的h1标签一定会比h2标签大，而且不同的标签会有不同的magin和padding。如果你想知道Chrome的默认样式是长什么样的，你可以直接查看<a href=\"https://cs.chromium.org/chromium/src/third_party/blink/renderer/core/html/resources/html.css\" target=\"_blank\" rel=\"noopener\">代码</a>。</p>\n<h2 id=\"布局-Layout\"><a href=\"#布局-Layout\" class=\"headerlink\" title=\"布局 - Layout\"></a>布局 - Layout</h2><p>前面这些步骤完成之后，渲染进程就已经知道页面的具体文档结构以及每个节点拥有的样式信息了，可是这些信息还是不能最终确定页面的样子。举个例子，假如你现在想通过电话告诉你的朋友你身边的一幅画的内容：“画布上有一个红色的大圆圈和一个蓝色的正方形”，单凭这些信息你的朋友是很难知道这幅画具体是什么样子的，因为他不知道大圆圈和正方形具体在页面的什么位置，是正方形在圆圈前面呢还是圆圈在正方形的前面。<br><img src=\"/images/chrome/tellgame.png\" alt=\"\"></p>\n<p align=\"center\">你站在一幅画面前通过电话告诉你朋友画上的内容</p>\n\n<p>渲染网页也是同样的道理，只知道网站的文档流以及每个节点的样式是远远不足以渲染出页面内容的，还需要通过布局（layout）来计算出每个节点的<strong>几何信息</strong>（geometry）。布局的具体过程是：主线程会遍历刚刚构建的DOM树，根据DOM节点的计算样式计算出一个布局树（layout tree）。布局树上每个节点会有它在页面上的x，y坐标以及盒子大小（bounding box sizes）的具体信息。布局树长得和先前构建的DOM树差不多，不同的是这颗树只有那些可见的（visible）节点信息。举个例子，如果一个节点被设置为了<strong>display:none</strong>，这个节点就是不可见的就不会出现在布局树上面（<strong>visibility:hidden</strong>的节点会出现在布局树上面，你可以思考一下这是为什么）。同样的，如果一个伪元素（pseudo class）节点有诸如<code>p::before{content:&quot;Hi!&quot;}</code>这样的内容，它会出现在布局上，而不存在于DOM树上。<br><img src=\"/images/chrome/layout.png\" alt=\"\"></p>\n<p align=\"center\">主线程会遍历每个DOM tree节点的计算样式信息来生成一棵布局树</p>\n\n<p>即使页面的布局十分简单，布局这个过程都是非常复杂的。例如页面就是简单地从上而下展示一个又一个段落，这个过程就很复杂，因为你需要考虑段落中的字体大小以及段落在哪里需要进行换行之类的东西，它们都会影响到段落的大小以及形状，继而影响到接下来段落的布局。<br><img src=\"/images/chrome/tree.png\" alt=\"\"></p>\n<p align=\"center\">浏览器得考虑段落是不是要换行</p>\n\n<p>如果考虑到CSS的话将会更加复杂，因为CSS是一个很强大的东西，它可以让元素悬浮（float）到页面的某一边，还可以遮挡住页面溢出的（overflow）元素，还可以改变内容的书写方向，所以单是想一下你就知道布局这个过程是一个十分艰巨和复杂的任务。对于Chrome浏览器，我们有一整个负责布局过程的工程师团队。如果你想知道他们工作的具体内容，他们在<a href=\"https://www.youtube.com/watch?v=Y5Xa4H2wtVA\" target=\"_blank\" rel=\"noopener\">BlinkOn Conference</a>上面的相关讨论被录制了下来，有时间的话你可以去看一下。</p>\n<h2 id=\"绘画-Paint\"><a href=\"#绘画-Paint\" class=\"headerlink\" title=\"绘画 - Paint\"></a>绘画 - Paint</h2><p>知道了DOM节点以及它的样式和布局其实还是不足以渲染出页面来的。为什么呢？举个例子，假如你现在想对着一幅画画一幅一样的画，你已经知道了画布上每个元素的大小，形状以及位置，你还是得思考一下每个元素的绘画顺序，因为画布上的元素是会互相遮挡的（z-index）。</p>\n<p><img src=\"/images/chrome/drawgame.png\" alt=\"\"></p>\n<p align=\"center\">一个人拿着画笔站在画布前面，在思考着是先画一个圆还是先画一个正方形</p>\n\n<p>举个例子，如果页面上的某些元素设置了<strong>z-index</strong>属性，绘制元素的顺序就会影响到页面的正确性。</p>\n<p><img src=\"/images/chrome/zindex.png\" alt=\"\"></p>\n<p align=\"center\">单纯按照HTML布局的顺序绘制页面的元素是错误的，因为元素的z-index元素没有被考虑到</p>\n\n<p>在绘画这个步骤中，主线程会遍历之前得到的布局树（layout tree）来生成一系列的绘画记录（paint records）。绘画记录是对绘画过程的注释，例如“首先画背景，然后是文本，最后画矩形”。如果你曾经在canvas画布上有使用过JavaScript绘制元素，你可能会觉着这个过程不是很陌生。</p>\n<p><img src=\"/images/chrome/paint.png\" alt=\"\"></p>\n<p align=\"center\">主线程遍历布局树来生成绘画记录</p>\n\n<h2 id=\"高成本的渲染流水线（rendering-pipeline）更新\"><a href=\"#高成本的渲染流水线（rendering-pipeline）更新\" class=\"headerlink\" title=\"高成本的渲染流水线（rendering pipeline）更新\"></a>高成本的<strong>渲染流水线</strong>（rendering pipeline）更新</h2><p>关于渲染流水线有一个十分重要的点就是流水线的每一步都要使用到前一步的结果来生成新的数据，这就意味着如果某一步的内容发生了改变的话，这一步后面所有的步骤都要被重新执行以生成新的记录。举个例子，如果布局树有些东西被改变了，文档上那些被影响到的部分的绘画顺序是要重新生成的。<br><img src=\"/images/chrome/trees.gif\" alt=\"\"></p>\n<p align=\"center\">DOM+Style，布局以及绘画树</p>\n\n<p>如果你的页面元素有动画效果（animating），浏览器就不得不在每个渲染帧的间隔中通过渲染流水线来更新页面的元素。我们大多数显示器的刷新频率是一秒钟60次（60fps），如果你在每个渲染帧的间隔都能通过流水线移动元素，人眼就会看到流畅的动画效果。可是如果流水线更新时间比较久，动画存在丢帧的状况的话，页面看起来就会很“卡顿”。</p>\n<p><img src=\"/images/chrome/pagejank1.png\" alt=\"\"></p>\n<p align=\"center\">流水线更新没有赶上屏幕刷新，动画就有点卡</p>\n\n<p>即使你的渲染流水线更新是和屏幕的刷新频率保持一致的，这些更新是运行在主线程上面的，这就意味着它可能被同样运行在主线程上面的JavaScript代码阻塞。</p>\n<p><img src=\"/images/chrome/pagejank2.png\" alt=\"\"></p>\n<p align=\"center\">某些动画帧被JavaScript阻塞了</p>\n\n<p>对于这种情况，你可以将要被执行的JavaScript操作拆分为更小的块然后通过<code>requestAnimationFrame</code>这个API把他们放在每个动画帧中执行。想知道更多关于这方面的信息的话，可以参考<a href=\"https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution\" target=\"_blank\" rel=\"noopener\">Optimize JavaScript Execution</a>。当然你还可以将JavaScript代码放在<a href=\"https://www.youtube.com/watch?v=X57mh8tKkgE\" target=\"_blank\" rel=\"noopener\">WebWorkers</a>中执行来避免它们阻塞主线程。</p>\n<p><img src=\"/images/chrome/raf.png\" alt=\"\"></p>\n<p align=\"center\">在动画帧上运行一小段JavaScript代码</p>\n\n<h2 id=\"合成\"><a href=\"#合成\" class=\"headerlink\" title=\"合成\"></a>合成</h2><h3 id=\"如何绘制一个页面？\"><a href=\"#如何绘制一个页面？\" class=\"headerlink\" title=\"如何绘制一个页面？\"></a>如何绘制一个页面？</h3><p>到目前为止，浏览器已经知道了关于页面以下的信息：文档结构，元素的样式，元素的几何信息以及它们的绘画顺序。那么浏览器是如何利用这些信息来绘制出页面来的呢？<strong>将以上这些信息转化为显示器的像素的过程叫做光栅化（rasterizing）</strong>。</p>\n<p>可能一个最简单的做法就是只光栅化视口内（viewport）的网页内容。如果用户进行了页面滚动，就移动光栅帧（rastered frame）并且光栅化更多的内容以补上页面缺失的部分。Chrome的第一个版本其实就是这样做的。然而，对于现代的浏览器来说，它们往往采取一种更加复杂的叫做合成（compositing）的做法。</p>\n<p><img src=\"/images/chrome/rasterizing.gif\" alt=\"\"></p>\n<p align=\"center\">最简单的光栅化过程</p>\n\n<h3 id=\"什么是合成\"><a href=\"#什么是合成\" class=\"headerlink\" title=\"什么是合成\"></a>什么是合成</h3><p>合成是一种将页面分成若干层，然后分别对它们进行光栅化，最后在一个单独的线程 - 合成线程（compositor thread）里面合并成一个页面的技术。当用户滚动页面时，由于页面各个层都已经被光栅化了，浏览器需要做的只是合成一个新的帧来展示滚动后的效果罢了。页面的动画效果实现也是类似，将页面上的层进行移动并构建出一个新的帧即可。</p>\n<p>你可以通过<a href=\"https://blog.logrocket.com/eliminate-content-repaints-with-the-new-layers-panel-in-chrome-e2c306d4d752?gi=cd6271834cea\" target=\"_blank\" rel=\"noopener\">Layers panel</a>在DevTools查看你的网站是如何被浏览器分成不同的层的。</p>\n<p><img src=\"/images/chrome/composit.gif\" alt=\"\"></p>\n<p align=\"center\">页面合成过程</p>\n\n<h3 id=\"页面分层\"><a href=\"#页面分层\" class=\"headerlink\" title=\"页面分层\"></a>页面分层</h3><p>为了确定哪些元素需要放置在哪一层，主线程需要遍历渲染树来创建一棵层次树（Layer Tree）（在DevTools中这一部分工作叫做“Update Layer Tree”）。如果页面的某些部分应该被放置在一个单独的层上面（滑动菜单）可是却没有的话，你可以通过使用<code>will-change</code> CSS属性来告诉浏览器对其分层。</p>\n<p><img src=\"/images/chrome/layer.png\" alt=\"\"></p>\n<p align=\"center\">主线程遍历布局树来生成层次树</p>\n\n<p>你可能会想要给页面上所有的元素一个单独的层，然而当页面的层超过一定的数量后，层的合成操作要比在每个帧中光栅化页面的一小部分还要慢，因此衡量你应用的渲染性能是十分重要的一件事情。想要获取关于这方面的更多信息，可以参考文章<a href=\"https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count\" target=\"_blank\" rel=\"noopener\">Stick to Compositor-Only Properties and Manage Layer Count</a>。</p>\n<h3 id=\"在主线程之外光栅化和合成页面\"><a href=\"#在主线程之外光栅化和合成页面\" class=\"headerlink\" title=\"在主线程之外光栅化和合成页面\"></a>在主线程之外光栅化和合成页面</h3><p>一旦页面的层次树创建出来并且页面元素的绘制顺序确定后，主线程就会向合成线程（compositor thread）提交这些信息。然后合成线程就会光栅化页面的每一层。因为页面的一层可能有整个网页那么大，所以合成线程需要将它们切分为一块又一块的小图块（tiles）然后将图块发送给一系列光栅线程（raster threads）。光栅线程会栅格化每个图块并且把它们存储在GPU的内存中。</p>\n<p><img src=\"/images/chrome/raster.png\" alt=\"\"></p>\n<p align=\"center\">光栅线程创建图块的位图并发送给GPU</p>\n\n<p>合成线程可以给不同的光栅线程赋予不同的优先级（prioritize），进而使那些在视口中的或者视口附近的页面可以先被光栅化。为了响应用户对页面的放大和缩小操作，页面的图层（layer）会为不同的清晰度配备不同的图块。</p>\n<p>当图层上面的图块都被栅格化后，合成线程会收集图块上面叫做<strong>绘画四边形</strong>（draw quads）的信息来构建一个<strong>合成帧</strong>（compositor frame）。</p>\n<ul>\n<li>绘画四边形：包含图块在<strong>内存的位置</strong>以及图层合成后图块在页面的位置之类的信息。</li>\n<li>合成帧：代表页面一个帧的内容的绘制四边形<strong>集合</strong>。</li>\n</ul>\n<p>上面的步骤完成之后，合成线程就会通过IPC向浏览器进程（browser process）提交（commit）一个渲染帧。这个时候可能有另外一个合成帧被浏览器进程的UI线程（UI thread）提交以改变浏览器的UI。这些合成帧都会被发送给GPU从而展示在屏幕上。如果合成线程收到页面滚动的事件，合成线程会构建另外一个合成帧发送给GPU来更新页面。</p>\n<p><img src=\"/images/chrome/composit.png\" alt=\"\"></p>\n<p align=\"center\">合成线程构建出合成帧，合成帧会被发送给浏览器进程然后再发送给GPU</p>\n\n<p>合成的好处在于这个过程没有涉及到主线程，所以合成线程不需要等待样式的计算以及JavaScript完成执行。这也就是为什么说<a href=\"https://www.html5rocks.com/en/tutorials/speed/high-performance-animations/\" target=\"_blank\" rel=\"noopener\">只通过合成来构建页面动画</a>是构建流畅用户体验的最佳实践的原因了。如果页面需要被重新布局或者绘制的话，主线程一定会参与进来的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在这篇文章中，我们探讨了从解析HTML文件到合成页面整个的渲染流水线。希望你读完后，可以自己去看一些关于页面性能优化的文章了。</p>\n<p>在接下来也是最后一篇本系列的文章中，我们将要查看合成线程更多的细节，来了解一下当用户在页面移动鼠标（<strong>mouse move</strong>）以及进行点击（<strong>click</strong>）的时候浏览器会做些什么事情。</p>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt=\"\"></p>"},{"title":"进击的JAMStack","thumbnail":"/gallery/thumbnails/gatsby.jpg","date":"2020-04-22T11:51:59.000Z","_content":"\n最近在研究JAMStack的一些相关内容，发现这的确是个好东西，所以想写一篇文章把这个概念分享给还不了解JAMStack的同学。本篇文章主要包含以下的内容：\n* 什么是JAMStack\n* JAMStack有什么优势\n* JAMStack适合什么应用\n* 我的个人思考\n\n## 什么是JAMStack\n### 概念\n**JAM**Stack中的JAM其实是三个词的缩写，它们分别是**J**avaScript, **A**PIs以及**M**arkdown。而Stack用中文的说法就是技术栈（Tech Stack），也就是我们在构建应用的时候具体使用到的技术的集合。举个例子，国外现在比较火的一个Stack叫做Mean Stack，它表示使用MongoDB + Express.js + AngularJS + Node.js这些技术来构建一个Web应用。因此用最通俗易懂的话来描述JAMStack就是：**使用JavaScript，APIs和Markdown三种技术来构建Web应用**。所以JAMStack是一种**问题解决方案**，而不是一个具体的实现。\n\n接着我们再具体看一下JavaScript，APIs和Markdown这三种技术在JAMStack的世界中是起到什么作用的。\n\n<!-- more-->\n\n### JavaScript\n在JAMStack的概念中，JavaScript指的是在客户端（client）实现动态网页效果的JavaScript，它既可以是React和Vue这种Web框架，也可以是原生的JavaScript。它主要负责网页**动态的内容**。\n\n### APIs\n这里的API和我们平时开发调用的API是一样的。JAMStack的Web应用会通过JavaScript给后端API发送AJAX请求或者GraphQL query，后端API会以某种格式（一般是JSON）返回数据给前端来实现一些用户交互。\n\n### Markdown\n[Mardown](https://baike.baidu.com/item/markdown/3245829?fr=aladdin)是一种轻量级的标记语言。在JAMStack的世界中，Markdown类型的文件通常是用来作为生成静态HTML文件的数据源。有用过[hexo](https://hexo.io/)写博客的同学对这个概念肯定不会陌生，因为hexo的原理就是将我们编写的Markdown文件根据我们指定的主题或者模板生成一些静态的HTML然后托管在github pages或者其它类似的**静态网站服务器**来供别人访问的。\n\n除了Markdown文件之外，JAMStack的静态数据源还可以是其它的东西，例如我们后面说到的[Gatsby](https://www.gatsbyjs.org/)（JAMStack的一种实现）就允许通过插件的方式使用SQL直接读取数据库的内容来生成静态页面。\n\n了解了这三个概念的具体内容后，我们再通过一个[Gatsby](https://www.gatsbyjs.org)的小demo来体会一下JAMStack的应用是如何工作的。\n\n### Gatsby Demo\n由于文章篇幅的限制，我将不在这里为大家讲述Gatsby的具体用法，不过我后面会写一系列文章来教大家如何用Gatsby来免费构建一个比较大的内容网站（CMS），大家可以留意一下。\n\n简单来说，[Gatsby](https://www.gatsbyjs.org/)是一个可以让开发者使用**React**，**GraphQL**等现代技术快速开发网站的静态网站生成器（static-site generator）。**它是存在于网站构建（build）阶段的一个工具**。为了给大家一个直观点的认识，我使用Gatsby搭建了一个简单的个人博客网站，网站的源代码可以在我的[github仓库](https://github.com/XiaocongDong/gatsby-demo)找到。\n\n博客网站包含以下的功能：\n* 博客列表页面：展示我发表的所有博客。（静态内容）\n* 博客详情页面：展示每一篇博客的具体内容。（静态内容）\n* 博客评论列表：游客评论博客以及展示游客对这篇博客的评论列表。（动态内容）\n\n细心的你一定注意到了我在上面每个功能点的右边标出了这个功能是静态的还是动态的。所谓静态的内容就是那些**不会经常发生变化的内容**，这些内容在一段时间内不同用户访问的时候都会得到同样的结果。而动态的内容就是那些**频繁发生变化的内容**，例如游客对我的博客的评论。那么我为什么要区分开这两种类型的内容呢？要回答这个问题我们可以先看看如果使用服务端渲染（SSR）的方案这个博客应用是如何运行的。首先游客会向SSR服务器发送一个查看某个博客的请求，SSR服务器收到请求后向后端服务请求这个博客的内容然后渲染出一个HTML页面然后返回给用户。这时候如果其他用户也向SSR服务器请求了同样的资源，SSR服务器还是会做同样的工作，请求资源 + 渲染页面。这个时候其实SSR服务器消耗了很多IO和CPU资源来做这些重复性的渲染，而且随着你的博客访问量的增大这些无用的资源消耗也会越来越多，在不升级服务端资源的前提下用户体验也会随之变差。到这里你可能会问，既然服务端渲染这么浪费资源，我们不进行SSR，直接将webpack打包生成的文件放在一个静态服务器然后页面都是在浏览器渲染不就行了吗？从实现博客功能的层面上来说这是没有问题的，可是这对搜索引擎优化（SEO）很不友好，百度收录不了你的博客，你的网站火不起来啊！\n\n为了避免重复性的无用渲染而且能对SEO友好，Gatsby采取了**区分网站静态内容和动态内容**的技术方案。对于那些**不经常变动的而且希望被搜索引擎收录的**静态内容，Gatsby会在Webpack打包阶段就生成，这样就不需要在用户访问该页面的时候才浪费资源来渲染页面了，而且这些静态文件还可以通过CDN来优化用户体验。而对于那些数据经常发生变化的且不需要被搜索引擎收录的内容，它们会等到浏览器实际渲染对应组件的时候才通过APIs动态获取数据渲染出来。\n\n我们接着来看一下博客网站的代码目录结构：\n\n![](/images/jamstack/blog-structure.png)\n\n上面代码中，server文件夹存放的是一个简单的管理用户评论的express应用，src文件夹才是Gatsby操作的前端资源，它包括以下内容：\n* blogs：这个文件夹是用来存放博客内容的，每一个Markdown文件都会生成一个静态的HTML文件。\n* components: 存放React组件用的。\n* images：存放博客的一些图片资源。\n* pages: 网站的路由文件夹，这个文件夹下的每一个文件都会被生成一个对应的HTML静态文件，当请求该路由时会直接返回该静态文件。例如现在pages底下有两个路由，404的路由对应着的是没找到资源的页面，而index路由则是博客的主页面。\n* templates: 网站的模板文件夹，该文件夹底下只有一个叫做blog-post.js的模板文件，在Gatsby构建网站的时候blogs文件夹底下的每一个Markdown文件都会通过这个模板文件生成一个对应的HTML文件，这样当用户访问服务器的时候博客的HTML文件就会被直接返回而无需进行服务端渲染了。\n\n接着我们可以看一下Gatsby打包会生成哪些文件：\n\n![](/images/jamstack/build.png)\n\n由上图可以看出，Gatsby会为每一个pages文件夹底下的文件生成一个对应的html文件，以及为每一个blogs文件夹底下的博客生成一个静态的HTML文件，同时还有一些在客户端执行的JS文件。生成的文件可以直接使用静态网站服务器来为用户提供服务，同时你还可以把它们放在CDN中来让用户访问起来更快。\n\n最后让我们来看一下这个博客网站的运行效果吧：\n\n![](/images/jamstack/demo.gif)\n\n上图中我点击了“如何马上实现财富自由”这个博客，进入到博客详情页时浏览器没有重新向服务端请求博客详情的HTML文件，而是直接在浏览器完成渲染，用户体验非常之流畅。这其实是Gatsby应用的一个很大的亮点，那就是：Gatsby打包的应用在浏览器首次请求获得提前生成的静态HTML文件后，会演变成一个React SPA应用，接下来的用户交互就和一般的SPA应用没有任何差别了，换句话来说，Gatsby既保留了SSR方案SEO友好的优点又保留了SPA应用的流畅用户体验，可谓是各取所长，扬长补短了！\n\n### 其他例子\n其实JAMStack的应用现在已经有很多了，只不过我们平时没有留意到而已。举个例子，React开发者十分熟悉的React官网[reactjs.org](http://reactjs.org/)就是用Gatsby构建。那么除了这些比较简单的文档性和博客网站，JAMStack可以用来构建复杂的商业应用吗？答案是肯定的，除了一些简单的CMS平台，JAMStack还可以用来搭建诸如[braun](https://ca.braun.com/en-ca)这类电商平台，你可能想不到的是著名的程序员学习网站[freeCodeCamp](https://www.freecodecamp.org/)也是使用JAMStack技术栈来搭建的，大家可以去网上（Google）查一下关于freeCodeCamp架构设计的视频或文章，看完之后我相信你会对JAMStack有更深入的理解的。\n\n## JAMStack的优势\n在上面的介绍中我已经大概说了一些JAMStack的优势了，其中包括SEO友好还有流畅的用户体验，那么除了这些，JAMStack还有没有其它吸引人的地方呢？\n\n### 高性能\n为什么JAMStack是高性能的呢？这是因为JAMStack的应用将网站的静态部分和动态部分区分开来了，那些不会频繁发生变化的内容会被提前生成，从而无需使用额外的计算资源来进行服务端渲染。这样用户首次访问某个页面的时候速度会变得很快，而且这些静态的资源还可以被放在CDN来进一步提升用户体验。将动态内容和静态内容区分开来还有另外一个好处，就是我们后端接口的职责更加明确了，API接口的数量会变得更少，性能也会变得更好。\n\n### 高性价比以及高可扩展性\n由于我们前端的内容都是一些静态的文件没有服务端渲染的要求，而静态资源服务器对性能的要求并不高，所以我们在购买服务器方面不需要很大的成本，我们甚至还可以使用一些诸如[netlify](https://www.netlify.com/)和[Gatsby Cloud](https://www.gatsbyjs.com/cloud/)等免费资源来托管我们的文件。对于后端来说由于我们已经将前后端彻底分离了，所以后端可以使用一些廉价的Baas或者Serverless服务，例如可以使用[Auth0](https://auth0.com/)作为我们的用户鉴权服务，使用[Firebase](https://firebase.google.com/)作为我们的接口服务等等。使用这些Baas和Serverless服务有一个好处就是它们很便宜，而且它们是按照接口使用量来收费的，你的用户量决定了你的支出，如果你的用户很少，你甚至不需要花一分钱。\n\n除了极高的性价比，JAMStack还有很好的扩展性。举个例子，假如你现在的博客网站因为某一篇博客突然火了，访问用户激增。如果你的前端静态文件使用的是CDN网络的话，你的网站很容易就可以扩展了，一切都是自动的，无需你做任何东西，而后端如果你使用了Serverless和Baas的解决方案的话，一切也是自动的，用户不会感觉到有使用体验的差别，而你只需要给使用到的服务平台多一点点费用而已。\n\n### 更好的开发者体验\n拿我们前面提到的Gatsby来举例，它就允许我们使用一些现代的前端技术来进行开发，例如React，Styled-components和GraphQL等，这些都是我们前端开发者十分熟悉的技术了，没有很大的学习成本所以开发者体验会很好。除此之外，由于Gatsby使用了React，所以它间接上接入了React的生态系统，这样开发者在开发Gatsby应用时就可以使用React生态的各种最佳实践和库实现了，这无疑可以大大提高我们的开发效率。\n\n### 更高的安全性\n由于JAMStack是一种前后端分离的技术，没有了后端渲染所以可以降低被攻击的风险。举个例子采用Gatsby生成的CMS平台就比传统的WordPress平台安全很多：）。\n\n## JAMStack适合什么应用\n既然JAMStack有那么多好处，我们是不是一把梭在所有的项目中都使用JAMStack呢？答案是否定的，由于JAMStack需要我们将网站的静态部分和动态部分区分开来，静态部分的内容会在构建的时候就生成而动态的内容会在浏览器进行渲染，这个特点就注定了它不适合于构建以下类型的应用：\n* 掘金，知乎这种主要由第三方用户创建内容的应用。由于这些应用的内容都是由平台用户创建的，而且用户可以不断地修改和删除已经创建的内容，如果使用JAMStack的话网站的内容就需要被频繁构建，这显然是不合理的。\n* 微博，推特这种社交应用。这类应用的内容除了频繁更新之外，还有就是动态内容多于静态内容，例如用户的主页只会展示他关注的人发表的动态，所以也不适合使用JAMStack。\n* 一些不需要SEO的应用。JAMStack一个很大的优点就是对SEO友好，如果你的应用没有被搜索引擎收录的需求的话，就没必要使用JAMStack了。\n* 内容很多的应用。由于JAMStack需要我们每次都构建出所有的静态资源，所以对于那些静态内容很多的应用（例如页面数超过50k）的话，每次构建应用都需要大量的时间，因此这种类型的网站也不适合用JAMStack。\n  \n相反JAMStack十分适合构建以下类型的应用：\n* 项目文档之类的网站，例如React的官网等。\n* 企业或者组织的官方网站。\n* 个人管理的博客网站。\n* 中小型规模的CMS平台。\n* 中小型的电商平台。\n* 既有需要被SEO的静态内容又有动态的不需要SEO的内容的混合应用。例如一些To B的平台，里面既有用户的工作台又有一些操作文档相关的静态内容。\n\n当然了我在这里列出来的无论是适用还是不适用JAMStack的应用其实都是一些很笼统的分类，我们在实际开发时还得具体问题具体分析，根据实际情况来评估我们的应用是不是适合使用JAMStack来开发。\n\n## 我的个人思考\n在最后我想说一下我自己对JAMStack的一些思考。\n\n首先我个人十分看好这个技术栈，也会在日后的开发中使用这个技术栈。因为它帮我解决了网站SEO的问题。在不了解JAMStack之前，如果我想我的网站被搜索引擎收录要么就是刀耕火种地硬写HTML和原生JS，这种方案明显开发效率十分低下。还有一种方案就是我使用React等现代开发技术，这样我就得学习next.js等SSR技术来实现SEO，这个方案有一个问题就是学习next.js有一定的学习成本，而且在项目上线后我得维护一个后端服务来进行服务端渲染，所以会有一定的运维成本。可是使用了JAMStack或者说是Gatsby后这些问题就迎刃而解了，因为我可以继续使用我熟悉的React技术栈来快速开发Web应用，还无需考虑服务端渲染的问题就可以达到SEO的效果，这不是美滋滋？\n\n其次我觉得JAMStack这个技术栈十分有利于我们实践一些自己想到的不确定能不能成功的点子（创业想法）。上面在介绍JAMStack优势的时候，我提到了一点就是使用JAMStack其实你可以免费部署你的应用，因为你可以将前端的静态代码放在一些免费的静态资源托管服务器，然后后端使用一些免费的Baas API服务，当然了这只适合于我们平台用户量不大的情景，当用户量大的时候我们还是得付费的。可是我们网站刚起步的时候用户量不都是不大的吗？如果我们一大早就买好服务器资源和域名，后面却发现这个想法根本行不通的话，这些钱就算是赔进去了。相反，使用免费服务的话，即使我们做的东西黄了，我们也不会有什么损失。\n\n总的来说我对JAMStack这个技术栈是很有信心的，特别是在CMS内容管理平台这方面我相信它一定会逐渐火起来，而且有可能可以取代WordPress的地位。\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n\n![](/images/wechat_qr.jpg)\n","source":"_posts/进击的JAMStack.md","raw":"---\ntitle: 进击的JAMStack\ntags:\n  - React\n  - JavaScript\n  - Markdown\n  - GraphQL\nthumbnail: /gallery/thumbnails/gatsby.jpg\ndate: 2020-04-22 19:51:59\n---\n\n最近在研究JAMStack的一些相关内容，发现这的确是个好东西，所以想写一篇文章把这个概念分享给还不了解JAMStack的同学。本篇文章主要包含以下的内容：\n* 什么是JAMStack\n* JAMStack有什么优势\n* JAMStack适合什么应用\n* 我的个人思考\n\n## 什么是JAMStack\n### 概念\n**JAM**Stack中的JAM其实是三个词的缩写，它们分别是**J**avaScript, **A**PIs以及**M**arkdown。而Stack用中文的说法就是技术栈（Tech Stack），也就是我们在构建应用的时候具体使用到的技术的集合。举个例子，国外现在比较火的一个Stack叫做Mean Stack，它表示使用MongoDB + Express.js + AngularJS + Node.js这些技术来构建一个Web应用。因此用最通俗易懂的话来描述JAMStack就是：**使用JavaScript，APIs和Markdown三种技术来构建Web应用**。所以JAMStack是一种**问题解决方案**，而不是一个具体的实现。\n\n接着我们再具体看一下JavaScript，APIs和Markdown这三种技术在JAMStack的世界中是起到什么作用的。\n\n<!-- more-->\n\n### JavaScript\n在JAMStack的概念中，JavaScript指的是在客户端（client）实现动态网页效果的JavaScript，它既可以是React和Vue这种Web框架，也可以是原生的JavaScript。它主要负责网页**动态的内容**。\n\n### APIs\n这里的API和我们平时开发调用的API是一样的。JAMStack的Web应用会通过JavaScript给后端API发送AJAX请求或者GraphQL query，后端API会以某种格式（一般是JSON）返回数据给前端来实现一些用户交互。\n\n### Markdown\n[Mardown](https://baike.baidu.com/item/markdown/3245829?fr=aladdin)是一种轻量级的标记语言。在JAMStack的世界中，Markdown类型的文件通常是用来作为生成静态HTML文件的数据源。有用过[hexo](https://hexo.io/)写博客的同学对这个概念肯定不会陌生，因为hexo的原理就是将我们编写的Markdown文件根据我们指定的主题或者模板生成一些静态的HTML然后托管在github pages或者其它类似的**静态网站服务器**来供别人访问的。\n\n除了Markdown文件之外，JAMStack的静态数据源还可以是其它的东西，例如我们后面说到的[Gatsby](https://www.gatsbyjs.org/)（JAMStack的一种实现）就允许通过插件的方式使用SQL直接读取数据库的内容来生成静态页面。\n\n了解了这三个概念的具体内容后，我们再通过一个[Gatsby](https://www.gatsbyjs.org)的小demo来体会一下JAMStack的应用是如何工作的。\n\n### Gatsby Demo\n由于文章篇幅的限制，我将不在这里为大家讲述Gatsby的具体用法，不过我后面会写一系列文章来教大家如何用Gatsby来免费构建一个比较大的内容网站（CMS），大家可以留意一下。\n\n简单来说，[Gatsby](https://www.gatsbyjs.org/)是一个可以让开发者使用**React**，**GraphQL**等现代技术快速开发网站的静态网站生成器（static-site generator）。**它是存在于网站构建（build）阶段的一个工具**。为了给大家一个直观点的认识，我使用Gatsby搭建了一个简单的个人博客网站，网站的源代码可以在我的[github仓库](https://github.com/XiaocongDong/gatsby-demo)找到。\n\n博客网站包含以下的功能：\n* 博客列表页面：展示我发表的所有博客。（静态内容）\n* 博客详情页面：展示每一篇博客的具体内容。（静态内容）\n* 博客评论列表：游客评论博客以及展示游客对这篇博客的评论列表。（动态内容）\n\n细心的你一定注意到了我在上面每个功能点的右边标出了这个功能是静态的还是动态的。所谓静态的内容就是那些**不会经常发生变化的内容**，这些内容在一段时间内不同用户访问的时候都会得到同样的结果。而动态的内容就是那些**频繁发生变化的内容**，例如游客对我的博客的评论。那么我为什么要区分开这两种类型的内容呢？要回答这个问题我们可以先看看如果使用服务端渲染（SSR）的方案这个博客应用是如何运行的。首先游客会向SSR服务器发送一个查看某个博客的请求，SSR服务器收到请求后向后端服务请求这个博客的内容然后渲染出一个HTML页面然后返回给用户。这时候如果其他用户也向SSR服务器请求了同样的资源，SSR服务器还是会做同样的工作，请求资源 + 渲染页面。这个时候其实SSR服务器消耗了很多IO和CPU资源来做这些重复性的渲染，而且随着你的博客访问量的增大这些无用的资源消耗也会越来越多，在不升级服务端资源的前提下用户体验也会随之变差。到这里你可能会问，既然服务端渲染这么浪费资源，我们不进行SSR，直接将webpack打包生成的文件放在一个静态服务器然后页面都是在浏览器渲染不就行了吗？从实现博客功能的层面上来说这是没有问题的，可是这对搜索引擎优化（SEO）很不友好，百度收录不了你的博客，你的网站火不起来啊！\n\n为了避免重复性的无用渲染而且能对SEO友好，Gatsby采取了**区分网站静态内容和动态内容**的技术方案。对于那些**不经常变动的而且希望被搜索引擎收录的**静态内容，Gatsby会在Webpack打包阶段就生成，这样就不需要在用户访问该页面的时候才浪费资源来渲染页面了，而且这些静态文件还可以通过CDN来优化用户体验。而对于那些数据经常发生变化的且不需要被搜索引擎收录的内容，它们会等到浏览器实际渲染对应组件的时候才通过APIs动态获取数据渲染出来。\n\n我们接着来看一下博客网站的代码目录结构：\n\n![](/images/jamstack/blog-structure.png)\n\n上面代码中，server文件夹存放的是一个简单的管理用户评论的express应用，src文件夹才是Gatsby操作的前端资源，它包括以下内容：\n* blogs：这个文件夹是用来存放博客内容的，每一个Markdown文件都会生成一个静态的HTML文件。\n* components: 存放React组件用的。\n* images：存放博客的一些图片资源。\n* pages: 网站的路由文件夹，这个文件夹下的每一个文件都会被生成一个对应的HTML静态文件，当请求该路由时会直接返回该静态文件。例如现在pages底下有两个路由，404的路由对应着的是没找到资源的页面，而index路由则是博客的主页面。\n* templates: 网站的模板文件夹，该文件夹底下只有一个叫做blog-post.js的模板文件，在Gatsby构建网站的时候blogs文件夹底下的每一个Markdown文件都会通过这个模板文件生成一个对应的HTML文件，这样当用户访问服务器的时候博客的HTML文件就会被直接返回而无需进行服务端渲染了。\n\n接着我们可以看一下Gatsby打包会生成哪些文件：\n\n![](/images/jamstack/build.png)\n\n由上图可以看出，Gatsby会为每一个pages文件夹底下的文件生成一个对应的html文件，以及为每一个blogs文件夹底下的博客生成一个静态的HTML文件，同时还有一些在客户端执行的JS文件。生成的文件可以直接使用静态网站服务器来为用户提供服务，同时你还可以把它们放在CDN中来让用户访问起来更快。\n\n最后让我们来看一下这个博客网站的运行效果吧：\n\n![](/images/jamstack/demo.gif)\n\n上图中我点击了“如何马上实现财富自由”这个博客，进入到博客详情页时浏览器没有重新向服务端请求博客详情的HTML文件，而是直接在浏览器完成渲染，用户体验非常之流畅。这其实是Gatsby应用的一个很大的亮点，那就是：Gatsby打包的应用在浏览器首次请求获得提前生成的静态HTML文件后，会演变成一个React SPA应用，接下来的用户交互就和一般的SPA应用没有任何差别了，换句话来说，Gatsby既保留了SSR方案SEO友好的优点又保留了SPA应用的流畅用户体验，可谓是各取所长，扬长补短了！\n\n### 其他例子\n其实JAMStack的应用现在已经有很多了，只不过我们平时没有留意到而已。举个例子，React开发者十分熟悉的React官网[reactjs.org](http://reactjs.org/)就是用Gatsby构建。那么除了这些比较简单的文档性和博客网站，JAMStack可以用来构建复杂的商业应用吗？答案是肯定的，除了一些简单的CMS平台，JAMStack还可以用来搭建诸如[braun](https://ca.braun.com/en-ca)这类电商平台，你可能想不到的是著名的程序员学习网站[freeCodeCamp](https://www.freecodecamp.org/)也是使用JAMStack技术栈来搭建的，大家可以去网上（Google）查一下关于freeCodeCamp架构设计的视频或文章，看完之后我相信你会对JAMStack有更深入的理解的。\n\n## JAMStack的优势\n在上面的介绍中我已经大概说了一些JAMStack的优势了，其中包括SEO友好还有流畅的用户体验，那么除了这些，JAMStack还有没有其它吸引人的地方呢？\n\n### 高性能\n为什么JAMStack是高性能的呢？这是因为JAMStack的应用将网站的静态部分和动态部分区分开来了，那些不会频繁发生变化的内容会被提前生成，从而无需使用额外的计算资源来进行服务端渲染。这样用户首次访问某个页面的时候速度会变得很快，而且这些静态的资源还可以被放在CDN来进一步提升用户体验。将动态内容和静态内容区分开来还有另外一个好处，就是我们后端接口的职责更加明确了，API接口的数量会变得更少，性能也会变得更好。\n\n### 高性价比以及高可扩展性\n由于我们前端的内容都是一些静态的文件没有服务端渲染的要求，而静态资源服务器对性能的要求并不高，所以我们在购买服务器方面不需要很大的成本，我们甚至还可以使用一些诸如[netlify](https://www.netlify.com/)和[Gatsby Cloud](https://www.gatsbyjs.com/cloud/)等免费资源来托管我们的文件。对于后端来说由于我们已经将前后端彻底分离了，所以后端可以使用一些廉价的Baas或者Serverless服务，例如可以使用[Auth0](https://auth0.com/)作为我们的用户鉴权服务，使用[Firebase](https://firebase.google.com/)作为我们的接口服务等等。使用这些Baas和Serverless服务有一个好处就是它们很便宜，而且它们是按照接口使用量来收费的，你的用户量决定了你的支出，如果你的用户很少，你甚至不需要花一分钱。\n\n除了极高的性价比，JAMStack还有很好的扩展性。举个例子，假如你现在的博客网站因为某一篇博客突然火了，访问用户激增。如果你的前端静态文件使用的是CDN网络的话，你的网站很容易就可以扩展了，一切都是自动的，无需你做任何东西，而后端如果你使用了Serverless和Baas的解决方案的话，一切也是自动的，用户不会感觉到有使用体验的差别，而你只需要给使用到的服务平台多一点点费用而已。\n\n### 更好的开发者体验\n拿我们前面提到的Gatsby来举例，它就允许我们使用一些现代的前端技术来进行开发，例如React，Styled-components和GraphQL等，这些都是我们前端开发者十分熟悉的技术了，没有很大的学习成本所以开发者体验会很好。除此之外，由于Gatsby使用了React，所以它间接上接入了React的生态系统，这样开发者在开发Gatsby应用时就可以使用React生态的各种最佳实践和库实现了，这无疑可以大大提高我们的开发效率。\n\n### 更高的安全性\n由于JAMStack是一种前后端分离的技术，没有了后端渲染所以可以降低被攻击的风险。举个例子采用Gatsby生成的CMS平台就比传统的WordPress平台安全很多：）。\n\n## JAMStack适合什么应用\n既然JAMStack有那么多好处，我们是不是一把梭在所有的项目中都使用JAMStack呢？答案是否定的，由于JAMStack需要我们将网站的静态部分和动态部分区分开来，静态部分的内容会在构建的时候就生成而动态的内容会在浏览器进行渲染，这个特点就注定了它不适合于构建以下类型的应用：\n* 掘金，知乎这种主要由第三方用户创建内容的应用。由于这些应用的内容都是由平台用户创建的，而且用户可以不断地修改和删除已经创建的内容，如果使用JAMStack的话网站的内容就需要被频繁构建，这显然是不合理的。\n* 微博，推特这种社交应用。这类应用的内容除了频繁更新之外，还有就是动态内容多于静态内容，例如用户的主页只会展示他关注的人发表的动态，所以也不适合使用JAMStack。\n* 一些不需要SEO的应用。JAMStack一个很大的优点就是对SEO友好，如果你的应用没有被搜索引擎收录的需求的话，就没必要使用JAMStack了。\n* 内容很多的应用。由于JAMStack需要我们每次都构建出所有的静态资源，所以对于那些静态内容很多的应用（例如页面数超过50k）的话，每次构建应用都需要大量的时间，因此这种类型的网站也不适合用JAMStack。\n  \n相反JAMStack十分适合构建以下类型的应用：\n* 项目文档之类的网站，例如React的官网等。\n* 企业或者组织的官方网站。\n* 个人管理的博客网站。\n* 中小型规模的CMS平台。\n* 中小型的电商平台。\n* 既有需要被SEO的静态内容又有动态的不需要SEO的内容的混合应用。例如一些To B的平台，里面既有用户的工作台又有一些操作文档相关的静态内容。\n\n当然了我在这里列出来的无论是适用还是不适用JAMStack的应用其实都是一些很笼统的分类，我们在实际开发时还得具体问题具体分析，根据实际情况来评估我们的应用是不是适合使用JAMStack来开发。\n\n## 我的个人思考\n在最后我想说一下我自己对JAMStack的一些思考。\n\n首先我个人十分看好这个技术栈，也会在日后的开发中使用这个技术栈。因为它帮我解决了网站SEO的问题。在不了解JAMStack之前，如果我想我的网站被搜索引擎收录要么就是刀耕火种地硬写HTML和原生JS，这种方案明显开发效率十分低下。还有一种方案就是我使用React等现代开发技术，这样我就得学习next.js等SSR技术来实现SEO，这个方案有一个问题就是学习next.js有一定的学习成本，而且在项目上线后我得维护一个后端服务来进行服务端渲染，所以会有一定的运维成本。可是使用了JAMStack或者说是Gatsby后这些问题就迎刃而解了，因为我可以继续使用我熟悉的React技术栈来快速开发Web应用，还无需考虑服务端渲染的问题就可以达到SEO的效果，这不是美滋滋？\n\n其次我觉得JAMStack这个技术栈十分有利于我们实践一些自己想到的不确定能不能成功的点子（创业想法）。上面在介绍JAMStack优势的时候，我提到了一点就是使用JAMStack其实你可以免费部署你的应用，因为你可以将前端的静态代码放在一些免费的静态资源托管服务器，然后后端使用一些免费的Baas API服务，当然了这只适合于我们平台用户量不大的情景，当用户量大的时候我们还是得付费的。可是我们网站刚起步的时候用户量不都是不大的吗？如果我们一大早就买好服务器资源和域名，后面却发现这个想法根本行不通的话，这些钱就算是赔进去了。相反，使用免费服务的话，即使我们做的东西黄了，我们也不会有什么损失。\n\n总的来说我对JAMStack这个技术栈是很有信心的，特别是在CMS内容管理平台这方面我相信它一定会逐渐火起来，而且有可能可以取代WordPress的地位。\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n\n![](/images/wechat_qr.jpg)\n","slug":"进击的JAMStack","published":1,"updated":"2021-02-08T06:16:56.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0gqf6fv000tucnxd00y3ugv","content":"<p>最近在研究JAMStack的一些相关内容，发现这的确是个好东西，所以想写一篇文章把这个概念分享给还不了解JAMStack的同学。本篇文章主要包含以下的内容：</p>\n<ul>\n<li>什么是JAMStack</li>\n<li>JAMStack有什么优势</li>\n<li>JAMStack适合什么应用</li>\n<li>我的个人思考</li>\n</ul>\n<h2 id=\"什么是JAMStack\"><a href=\"#什么是JAMStack\" class=\"headerlink\" title=\"什么是JAMStack\"></a>什么是JAMStack</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p><strong>JAM</strong>Stack中的JAM其实是三个词的缩写，它们分别是<strong>J</strong>avaScript, <strong>A</strong>PIs以及<strong>M</strong>arkdown。而Stack用中文的说法就是技术栈（Tech Stack），也就是我们在构建应用的时候具体使用到的技术的集合。举个例子，国外现在比较火的一个Stack叫做Mean Stack，它表示使用MongoDB + Express.js + AngularJS + Node.js这些技术来构建一个Web应用。因此用最通俗易懂的话来描述JAMStack就是：<strong>使用JavaScript，APIs和Markdown三种技术来构建Web应用</strong>。所以JAMStack是一种<strong>问题解决方案</strong>，而不是一个具体的实现。</p>\n<p>接着我们再具体看一下JavaScript，APIs和Markdown这三种技术在JAMStack的世界中是起到什么作用的。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3><p>在JAMStack的概念中，JavaScript指的是在客户端（client）实现动态网页效果的JavaScript，它既可以是React和Vue这种Web框架，也可以是原生的JavaScript。它主要负责网页<strong>动态的内容</strong>。</p>\n<h3 id=\"APIs\"><a href=\"#APIs\" class=\"headerlink\" title=\"APIs\"></a>APIs</h3><p>这里的API和我们平时开发调用的API是一样的。JAMStack的Web应用会通过JavaScript给后端API发送AJAX请求或者GraphQL query，后端API会以某种格式（一般是JSON）返回数据给前端来实现一些用户交互。</p>\n<h3 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h3><p><a href=\"https://baike.baidu.com/item/markdown/3245829?fr=aladdin\" target=\"_blank\" rel=\"noopener\">Mardown</a>是一种轻量级的标记语言。在JAMStack的世界中，Markdown类型的文件通常是用来作为生成静态HTML文件的数据源。有用过<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">hexo</a>写博客的同学对这个概念肯定不会陌生，因为hexo的原理就是将我们编写的Markdown文件根据我们指定的主题或者模板生成一些静态的HTML然后托管在github pages或者其它类似的<strong>静态网站服务器</strong>来供别人访问的。</p>\n<p>除了Markdown文件之外，JAMStack的静态数据源还可以是其它的东西，例如我们后面说到的<a href=\"https://www.gatsbyjs.org/\" target=\"_blank\" rel=\"noopener\">Gatsby</a>（JAMStack的一种实现）就允许通过插件的方式使用SQL直接读取数据库的内容来生成静态页面。</p>\n<p>了解了这三个概念的具体内容后，我们再通过一个<a href=\"https://www.gatsbyjs.org\" target=\"_blank\" rel=\"noopener\">Gatsby</a>的小demo来体会一下JAMStack的应用是如何工作的。</p>\n<h3 id=\"Gatsby-Demo\"><a href=\"#Gatsby-Demo\" class=\"headerlink\" title=\"Gatsby Demo\"></a>Gatsby Demo</h3><p>由于文章篇幅的限制，我将不在这里为大家讲述Gatsby的具体用法，不过我后面会写一系列文章来教大家如何用Gatsby来免费构建一个比较大的内容网站（CMS），大家可以留意一下。</p>\n<p>简单来说，<a href=\"https://www.gatsbyjs.org/\" target=\"_blank\" rel=\"noopener\">Gatsby</a>是一个可以让开发者使用<strong>React</strong>，<strong>GraphQL</strong>等现代技术快速开发网站的静态网站生成器（static-site generator）。<strong>它是存在于网站构建（build）阶段的一个工具</strong>。为了给大家一个直观点的认识，我使用Gatsby搭建了一个简单的个人博客网站，网站的源代码可以在我的<a href=\"https://github.com/XiaocongDong/gatsby-demo\" target=\"_blank\" rel=\"noopener\">github仓库</a>找到。</p>\n<p>博客网站包含以下的功能：</p>\n<ul>\n<li>博客列表页面：展示我发表的所有博客。（静态内容）</li>\n<li>博客详情页面：展示每一篇博客的具体内容。（静态内容）</li>\n<li>博客评论列表：游客评论博客以及展示游客对这篇博客的评论列表。（动态内容）</li>\n</ul>\n<p>细心的你一定注意到了我在上面每个功能点的右边标出了这个功能是静态的还是动态的。所谓静态的内容就是那些<strong>不会经常发生变化的内容</strong>，这些内容在一段时间内不同用户访问的时候都会得到同样的结果。而动态的内容就是那些<strong>频繁发生变化的内容</strong>，例如游客对我的博客的评论。那么我为什么要区分开这两种类型的内容呢？要回答这个问题我们可以先看看如果使用服务端渲染（SSR）的方案这个博客应用是如何运行的。首先游客会向SSR服务器发送一个查看某个博客的请求，SSR服务器收到请求后向后端服务请求这个博客的内容然后渲染出一个HTML页面然后返回给用户。这时候如果其他用户也向SSR服务器请求了同样的资源，SSR服务器还是会做同样的工作，请求资源 + 渲染页面。这个时候其实SSR服务器消耗了很多IO和CPU资源来做这些重复性的渲染，而且随着你的博客访问量的增大这些无用的资源消耗也会越来越多，在不升级服务端资源的前提下用户体验也会随之变差。到这里你可能会问，既然服务端渲染这么浪费资源，我们不进行SSR，直接将webpack打包生成的文件放在一个静态服务器然后页面都是在浏览器渲染不就行了吗？从实现博客功能的层面上来说这是没有问题的，可是这对搜索引擎优化（SEO）很不友好，百度收录不了你的博客，你的网站火不起来啊！</p>\n<p>为了避免重复性的无用渲染而且能对SEO友好，Gatsby采取了<strong>区分网站静态内容和动态内容</strong>的技术方案。对于那些<strong>不经常变动的而且希望被搜索引擎收录的</strong>静态内容，Gatsby会在Webpack打包阶段就生成，这样就不需要在用户访问该页面的时候才浪费资源来渲染页面了，而且这些静态文件还可以通过CDN来优化用户体验。而对于那些数据经常发生变化的且不需要被搜索引擎收录的内容，它们会等到浏览器实际渲染对应组件的时候才通过APIs动态获取数据渲染出来。</p>\n<p>我们接着来看一下博客网站的代码目录结构：</p>\n<p><img src=\"/images/jamstack/blog-structure.png\" alt></p>\n<p>上面代码中，server文件夹存放的是一个简单的管理用户评论的express应用，src文件夹才是Gatsby操作的前端资源，它包括以下内容：</p>\n<ul>\n<li>blogs：这个文件夹是用来存放博客内容的，每一个Markdown文件都会生成一个静态的HTML文件。</li>\n<li>components: 存放React组件用的。</li>\n<li>images：存放博客的一些图片资源。</li>\n<li>pages: 网站的路由文件夹，这个文件夹下的每一个文件都会被生成一个对应的HTML静态文件，当请求该路由时会直接返回该静态文件。例如现在pages底下有两个路由，404的路由对应着的是没找到资源的页面，而index路由则是博客的主页面。</li>\n<li>templates: 网站的模板文件夹，该文件夹底下只有一个叫做blog-post.js的模板文件，在Gatsby构建网站的时候blogs文件夹底下的每一个Markdown文件都会通过这个模板文件生成一个对应的HTML文件，这样当用户访问服务器的时候博客的HTML文件就会被直接返回而无需进行服务端渲染了。</li>\n</ul>\n<p>接着我们可以看一下Gatsby打包会生成哪些文件：</p>\n<p><img src=\"/images/jamstack/build.png\" alt></p>\n<p>由上图可以看出，Gatsby会为每一个pages文件夹底下的文件生成一个对应的html文件，以及为每一个blogs文件夹底下的博客生成一个静态的HTML文件，同时还有一些在客户端执行的JS文件。生成的文件可以直接使用静态网站服务器来为用户提供服务，同时你还可以把它们放在CDN中来让用户访问起来更快。</p>\n<p>最后让我们来看一下这个博客网站的运行效果吧：</p>\n<p><img src=\"/images/jamstack/demo.gif\" alt></p>\n<p>上图中我点击了“如何马上实现财富自由”这个博客，进入到博客详情页时浏览器没有重新向服务端请求博客详情的HTML文件，而是直接在浏览器完成渲染，用户体验非常之流畅。这其实是Gatsby应用的一个很大的亮点，那就是：Gatsby打包的应用在浏览器首次请求获得提前生成的静态HTML文件后，会演变成一个React SPA应用，接下来的用户交互就和一般的SPA应用没有任何差别了，换句话来说，Gatsby既保留了SSR方案SEO友好的优点又保留了SPA应用的流畅用户体验，可谓是各取所长，扬长补短了！</p>\n<h3 id=\"其他例子\"><a href=\"#其他例子\" class=\"headerlink\" title=\"其他例子\"></a>其他例子</h3><p>其实JAMStack的应用现在已经有很多了，只不过我们平时没有留意到而已。举个例子，React开发者十分熟悉的React官网<a href=\"http://reactjs.org/\" target=\"_blank\" rel=\"noopener\">reactjs.org</a>就是用Gatsby构建。那么除了这些比较简单的文档性和博客网站，JAMStack可以用来构建复杂的商业应用吗？答案是肯定的，除了一些简单的CMS平台，JAMStack还可以用来搭建诸如<a href=\"https://ca.braun.com/en-ca\" target=\"_blank\" rel=\"noopener\">braun</a>这类电商平台，你可能想不到的是著名的程序员学习网站<a href=\"https://www.freecodecamp.org/\" target=\"_blank\" rel=\"noopener\">freeCodeCamp</a>也是使用JAMStack技术栈来搭建的，大家可以去网上（Google）查一下关于freeCodeCamp架构设计的视频或文章，看完之后我相信你会对JAMStack有更深入的理解的。</p>\n<h2 id=\"JAMStack的优势\"><a href=\"#JAMStack的优势\" class=\"headerlink\" title=\"JAMStack的优势\"></a>JAMStack的优势</h2><p>在上面的介绍中我已经大概说了一些JAMStack的优势了，其中包括SEO友好还有流畅的用户体验，那么除了这些，JAMStack还有没有其它吸引人的地方呢？</p>\n<h3 id=\"高性能\"><a href=\"#高性能\" class=\"headerlink\" title=\"高性能\"></a>高性能</h3><p>为什么JAMStack是高性能的呢？这是因为JAMStack的应用将网站的静态部分和动态部分区分开来了，那些不会频繁发生变化的内容会被提前生成，从而无需使用额外的计算资源来进行服务端渲染。这样用户首次访问某个页面的时候速度会变得很快，而且这些静态的资源还可以被放在CDN来进一步提升用户体验。将动态内容和静态内容区分开来还有另外一个好处，就是我们后端接口的职责更加明确了，API接口的数量会变得更少，性能也会变得更好。</p>\n<h3 id=\"高性价比以及高可扩展性\"><a href=\"#高性价比以及高可扩展性\" class=\"headerlink\" title=\"高性价比以及高可扩展性\"></a>高性价比以及高可扩展性</h3><p>由于我们前端的内容都是一些静态的文件没有服务端渲染的要求，而静态资源服务器对性能的要求并不高，所以我们在购买服务器方面不需要很大的成本，我们甚至还可以使用一些诸如<a href=\"https://www.netlify.com/\" target=\"_blank\" rel=\"noopener\">netlify</a>和<a href=\"https://www.gatsbyjs.com/cloud/\" target=\"_blank\" rel=\"noopener\">Gatsby Cloud</a>等免费资源来托管我们的文件。对于后端来说由于我们已经将前后端彻底分离了，所以后端可以使用一些廉价的Baas或者Serverless服务，例如可以使用<a href=\"https://auth0.com/\" target=\"_blank\" rel=\"noopener\">Auth0</a>作为我们的用户鉴权服务，使用<a href=\"https://firebase.google.com/\" target=\"_blank\" rel=\"noopener\">Firebase</a>作为我们的接口服务等等。使用这些Baas和Serverless服务有一个好处就是它们很便宜，而且它们是按照接口使用量来收费的，你的用户量决定了你的支出，如果你的用户很少，你甚至不需要花一分钱。</p>\n<p>除了极高的性价比，JAMStack还有很好的扩展性。举个例子，假如你现在的博客网站因为某一篇博客突然火了，访问用户激增。如果你的前端静态文件使用的是CDN网络的话，你的网站很容易就可以扩展了，一切都是自动的，无需你做任何东西，而后端如果你使用了Serverless和Baas的解决方案的话，一切也是自动的，用户不会感觉到有使用体验的差别，而你只需要给使用到的服务平台多一点点费用而已。</p>\n<h3 id=\"更好的开发者体验\"><a href=\"#更好的开发者体验\" class=\"headerlink\" title=\"更好的开发者体验\"></a>更好的开发者体验</h3><p>拿我们前面提到的Gatsby来举例，它就允许我们使用一些现代的前端技术来进行开发，例如React，Styled-components和GraphQL等，这些都是我们前端开发者十分熟悉的技术了，没有很大的学习成本所以开发者体验会很好。除此之外，由于Gatsby使用了React，所以它间接上接入了React的生态系统，这样开发者在开发Gatsby应用时就可以使用React生态的各种最佳实践和库实现了，这无疑可以大大提高我们的开发效率。</p>\n<h3 id=\"更高的安全性\"><a href=\"#更高的安全性\" class=\"headerlink\" title=\"更高的安全性\"></a>更高的安全性</h3><p>由于JAMStack是一种前后端分离的技术，没有了后端渲染所以可以降低被攻击的风险。举个例子采用Gatsby生成的CMS平台就比传统的WordPress平台安全很多：）。</p>\n<h2 id=\"JAMStack适合什么应用\"><a href=\"#JAMStack适合什么应用\" class=\"headerlink\" title=\"JAMStack适合什么应用\"></a>JAMStack适合什么应用</h2><p>既然JAMStack有那么多好处，我们是不是一把梭在所有的项目中都使用JAMStack呢？答案是否定的，由于JAMStack需要我们将网站的静态部分和动态部分区分开来，静态部分的内容会在构建的时候就生成而动态的内容会在浏览器进行渲染，这个特点就注定了它不适合于构建以下类型的应用：</p>\n<ul>\n<li>掘金，知乎这种主要由第三方用户创建内容的应用。由于这些应用的内容都是由平台用户创建的，而且用户可以不断地修改和删除已经创建的内容，如果使用JAMStack的话网站的内容就需要被频繁构建，这显然是不合理的。</li>\n<li>微博，推特这种社交应用。这类应用的内容除了频繁更新之外，还有就是动态内容多于静态内容，例如用户的主页只会展示他关注的人发表的动态，所以也不适合使用JAMStack。</li>\n<li>一些不需要SEO的应用。JAMStack一个很大的优点就是对SEO友好，如果你的应用没有被搜索引擎收录的需求的话，就没必要使用JAMStack了。</li>\n<li>内容很多的应用。由于JAMStack需要我们每次都构建出所有的静态资源，所以对于那些静态内容很多的应用（例如页面数超过50k）的话，每次构建应用都需要大量的时间，因此这种类型的网站也不适合用JAMStack。</li>\n</ul>\n<p>相反JAMStack十分适合构建以下类型的应用：</p>\n<ul>\n<li>项目文档之类的网站，例如React的官网等。</li>\n<li>企业或者组织的官方网站。</li>\n<li>个人管理的博客网站。</li>\n<li>中小型规模的CMS平台。</li>\n<li>中小型的电商平台。</li>\n<li>既有需要被SEO的静态内容又有动态的不需要SEO的内容的混合应用。例如一些To B的平台，里面既有用户的工作台又有一些操作文档相关的静态内容。</li>\n</ul>\n<p>当然了我在这里列出来的无论是适用还是不适用JAMStack的应用其实都是一些很笼统的分类，我们在实际开发时还得具体问题具体分析，根据实际情况来评估我们的应用是不是适合使用JAMStack来开发。</p>\n<h2 id=\"我的个人思考\"><a href=\"#我的个人思考\" class=\"headerlink\" title=\"我的个人思考\"></a>我的个人思考</h2><p>在最后我想说一下我自己对JAMStack的一些思考。</p>\n<p>首先我个人十分看好这个技术栈，也会在日后的开发中使用这个技术栈。因为它帮我解决了网站SEO的问题。在不了解JAMStack之前，如果我想我的网站被搜索引擎收录要么就是刀耕火种地硬写HTML和原生JS，这种方案明显开发效率十分低下。还有一种方案就是我使用React等现代开发技术，这样我就得学习next.js等SSR技术来实现SEO，这个方案有一个问题就是学习next.js有一定的学习成本，而且在项目上线后我得维护一个后端服务来进行服务端渲染，所以会有一定的运维成本。可是使用了JAMStack或者说是Gatsby后这些问题就迎刃而解了，因为我可以继续使用我熟悉的React技术栈来快速开发Web应用，还无需考虑服务端渲染的问题就可以达到SEO的效果，这不是美滋滋？</p>\n<p>其次我觉得JAMStack这个技术栈十分有利于我们实践一些自己想到的不确定能不能成功的点子（创业想法）。上面在介绍JAMStack优势的时候，我提到了一点就是使用JAMStack其实你可以免费部署你的应用，因为你可以将前端的静态代码放在一些免费的静态资源托管服务器，然后后端使用一些免费的Baas API服务，当然了这只适合于我们平台用户量不大的情景，当用户量大的时候我们还是得付费的。可是我们网站刚起步的时候用户量不都是不大的吗？如果我们一大早就买好服务器资源和域名，后面却发现这个想法根本行不通的话，这些钱就算是赔进去了。相反，使用免费服务的话，即使我们做的东西黄了，我们也不会有什么损失。</p>\n<p>总的来说我对JAMStack这个技术栈是很有信心的，特别是在CMS内容管理平台这方面我相信它一定会逐渐火起来，而且有可能可以取代WordPress的地位。</p>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长</p>\n<p><img src=\"/images/wechat_qr.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<p>最近在研究JAMStack的一些相关内容，发现这的确是个好东西，所以想写一篇文章把这个概念分享给还不了解JAMStack的同学。本篇文章主要包含以下的内容：</p>\n<ul>\n<li>什么是JAMStack</li>\n<li>JAMStack有什么优势</li>\n<li>JAMStack适合什么应用</li>\n<li>我的个人思考</li>\n</ul>\n<h2 id=\"什么是JAMStack\"><a href=\"#什么是JAMStack\" class=\"headerlink\" title=\"什么是JAMStack\"></a>什么是JAMStack</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p><strong>JAM</strong>Stack中的JAM其实是三个词的缩写，它们分别是<strong>J</strong>avaScript, <strong>A</strong>PIs以及<strong>M</strong>arkdown。而Stack用中文的说法就是技术栈（Tech Stack），也就是我们在构建应用的时候具体使用到的技术的集合。举个例子，国外现在比较火的一个Stack叫做Mean Stack，它表示使用MongoDB + Express.js + AngularJS + Node.js这些技术来构建一个Web应用。因此用最通俗易懂的话来描述JAMStack就是：<strong>使用JavaScript，APIs和Markdown三种技术来构建Web应用</strong>。所以JAMStack是一种<strong>问题解决方案</strong>，而不是一个具体的实现。</p>\n<p>接着我们再具体看一下JavaScript，APIs和Markdown这三种技术在JAMStack的世界中是起到什么作用的。</p>","more":"<h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3><p>在JAMStack的概念中，JavaScript指的是在客户端（client）实现动态网页效果的JavaScript，它既可以是React和Vue这种Web框架，也可以是原生的JavaScript。它主要负责网页<strong>动态的内容</strong>。</p>\n<h3 id=\"APIs\"><a href=\"#APIs\" class=\"headerlink\" title=\"APIs\"></a>APIs</h3><p>这里的API和我们平时开发调用的API是一样的。JAMStack的Web应用会通过JavaScript给后端API发送AJAX请求或者GraphQL query，后端API会以某种格式（一般是JSON）返回数据给前端来实现一些用户交互。</p>\n<h3 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h3><p><a href=\"https://baike.baidu.com/item/markdown/3245829?fr=aladdin\" target=\"_blank\" rel=\"noopener\">Mardown</a>是一种轻量级的标记语言。在JAMStack的世界中，Markdown类型的文件通常是用来作为生成静态HTML文件的数据源。有用过<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">hexo</a>写博客的同学对这个概念肯定不会陌生，因为hexo的原理就是将我们编写的Markdown文件根据我们指定的主题或者模板生成一些静态的HTML然后托管在github pages或者其它类似的<strong>静态网站服务器</strong>来供别人访问的。</p>\n<p>除了Markdown文件之外，JAMStack的静态数据源还可以是其它的东西，例如我们后面说到的<a href=\"https://www.gatsbyjs.org/\" target=\"_blank\" rel=\"noopener\">Gatsby</a>（JAMStack的一种实现）就允许通过插件的方式使用SQL直接读取数据库的内容来生成静态页面。</p>\n<p>了解了这三个概念的具体内容后，我们再通过一个<a href=\"https://www.gatsbyjs.org\" target=\"_blank\" rel=\"noopener\">Gatsby</a>的小demo来体会一下JAMStack的应用是如何工作的。</p>\n<h3 id=\"Gatsby-Demo\"><a href=\"#Gatsby-Demo\" class=\"headerlink\" title=\"Gatsby Demo\"></a>Gatsby Demo</h3><p>由于文章篇幅的限制，我将不在这里为大家讲述Gatsby的具体用法，不过我后面会写一系列文章来教大家如何用Gatsby来免费构建一个比较大的内容网站（CMS），大家可以留意一下。</p>\n<p>简单来说，<a href=\"https://www.gatsbyjs.org/\" target=\"_blank\" rel=\"noopener\">Gatsby</a>是一个可以让开发者使用<strong>React</strong>，<strong>GraphQL</strong>等现代技术快速开发网站的静态网站生成器（static-site generator）。<strong>它是存在于网站构建（build）阶段的一个工具</strong>。为了给大家一个直观点的认识，我使用Gatsby搭建了一个简单的个人博客网站，网站的源代码可以在我的<a href=\"https://github.com/XiaocongDong/gatsby-demo\" target=\"_blank\" rel=\"noopener\">github仓库</a>找到。</p>\n<p>博客网站包含以下的功能：</p>\n<ul>\n<li>博客列表页面：展示我发表的所有博客。（静态内容）</li>\n<li>博客详情页面：展示每一篇博客的具体内容。（静态内容）</li>\n<li>博客评论列表：游客评论博客以及展示游客对这篇博客的评论列表。（动态内容）</li>\n</ul>\n<p>细心的你一定注意到了我在上面每个功能点的右边标出了这个功能是静态的还是动态的。所谓静态的内容就是那些<strong>不会经常发生变化的内容</strong>，这些内容在一段时间内不同用户访问的时候都会得到同样的结果。而动态的内容就是那些<strong>频繁发生变化的内容</strong>，例如游客对我的博客的评论。那么我为什么要区分开这两种类型的内容呢？要回答这个问题我们可以先看看如果使用服务端渲染（SSR）的方案这个博客应用是如何运行的。首先游客会向SSR服务器发送一个查看某个博客的请求，SSR服务器收到请求后向后端服务请求这个博客的内容然后渲染出一个HTML页面然后返回给用户。这时候如果其他用户也向SSR服务器请求了同样的资源，SSR服务器还是会做同样的工作，请求资源 + 渲染页面。这个时候其实SSR服务器消耗了很多IO和CPU资源来做这些重复性的渲染，而且随着你的博客访问量的增大这些无用的资源消耗也会越来越多，在不升级服务端资源的前提下用户体验也会随之变差。到这里你可能会问，既然服务端渲染这么浪费资源，我们不进行SSR，直接将webpack打包生成的文件放在一个静态服务器然后页面都是在浏览器渲染不就行了吗？从实现博客功能的层面上来说这是没有问题的，可是这对搜索引擎优化（SEO）很不友好，百度收录不了你的博客，你的网站火不起来啊！</p>\n<p>为了避免重复性的无用渲染而且能对SEO友好，Gatsby采取了<strong>区分网站静态内容和动态内容</strong>的技术方案。对于那些<strong>不经常变动的而且希望被搜索引擎收录的</strong>静态内容，Gatsby会在Webpack打包阶段就生成，这样就不需要在用户访问该页面的时候才浪费资源来渲染页面了，而且这些静态文件还可以通过CDN来优化用户体验。而对于那些数据经常发生变化的且不需要被搜索引擎收录的内容，它们会等到浏览器实际渲染对应组件的时候才通过APIs动态获取数据渲染出来。</p>\n<p>我们接着来看一下博客网站的代码目录结构：</p>\n<p><img src=\"/images/jamstack/blog-structure.png\" alt=\"\"></p>\n<p>上面代码中，server文件夹存放的是一个简单的管理用户评论的express应用，src文件夹才是Gatsby操作的前端资源，它包括以下内容：</p>\n<ul>\n<li>blogs：这个文件夹是用来存放博客内容的，每一个Markdown文件都会生成一个静态的HTML文件。</li>\n<li>components: 存放React组件用的。</li>\n<li>images：存放博客的一些图片资源。</li>\n<li>pages: 网站的路由文件夹，这个文件夹下的每一个文件都会被生成一个对应的HTML静态文件，当请求该路由时会直接返回该静态文件。例如现在pages底下有两个路由，404的路由对应着的是没找到资源的页面，而index路由则是博客的主页面。</li>\n<li>templates: 网站的模板文件夹，该文件夹底下只有一个叫做blog-post.js的模板文件，在Gatsby构建网站的时候blogs文件夹底下的每一个Markdown文件都会通过这个模板文件生成一个对应的HTML文件，这样当用户访问服务器的时候博客的HTML文件就会被直接返回而无需进行服务端渲染了。</li>\n</ul>\n<p>接着我们可以看一下Gatsby打包会生成哪些文件：</p>\n<p><img src=\"/images/jamstack/build.png\" alt=\"\"></p>\n<p>由上图可以看出，Gatsby会为每一个pages文件夹底下的文件生成一个对应的html文件，以及为每一个blogs文件夹底下的博客生成一个静态的HTML文件，同时还有一些在客户端执行的JS文件。生成的文件可以直接使用静态网站服务器来为用户提供服务，同时你还可以把它们放在CDN中来让用户访问起来更快。</p>\n<p>最后让我们来看一下这个博客网站的运行效果吧：</p>\n<p><img src=\"/images/jamstack/demo.gif\" alt=\"\"></p>\n<p>上图中我点击了“如何马上实现财富自由”这个博客，进入到博客详情页时浏览器没有重新向服务端请求博客详情的HTML文件，而是直接在浏览器完成渲染，用户体验非常之流畅。这其实是Gatsby应用的一个很大的亮点，那就是：Gatsby打包的应用在浏览器首次请求获得提前生成的静态HTML文件后，会演变成一个React SPA应用，接下来的用户交互就和一般的SPA应用没有任何差别了，换句话来说，Gatsby既保留了SSR方案SEO友好的优点又保留了SPA应用的流畅用户体验，可谓是各取所长，扬长补短了！</p>\n<h3 id=\"其他例子\"><a href=\"#其他例子\" class=\"headerlink\" title=\"其他例子\"></a>其他例子</h3><p>其实JAMStack的应用现在已经有很多了，只不过我们平时没有留意到而已。举个例子，React开发者十分熟悉的React官网<a href=\"http://reactjs.org/\" target=\"_blank\" rel=\"noopener\">reactjs.org</a>就是用Gatsby构建。那么除了这些比较简单的文档性和博客网站，JAMStack可以用来构建复杂的商业应用吗？答案是肯定的，除了一些简单的CMS平台，JAMStack还可以用来搭建诸如<a href=\"https://ca.braun.com/en-ca\" target=\"_blank\" rel=\"noopener\">braun</a>这类电商平台，你可能想不到的是著名的程序员学习网站<a href=\"https://www.freecodecamp.org/\" target=\"_blank\" rel=\"noopener\">freeCodeCamp</a>也是使用JAMStack技术栈来搭建的，大家可以去网上（Google）查一下关于freeCodeCamp架构设计的视频或文章，看完之后我相信你会对JAMStack有更深入的理解的。</p>\n<h2 id=\"JAMStack的优势\"><a href=\"#JAMStack的优势\" class=\"headerlink\" title=\"JAMStack的优势\"></a>JAMStack的优势</h2><p>在上面的介绍中我已经大概说了一些JAMStack的优势了，其中包括SEO友好还有流畅的用户体验，那么除了这些，JAMStack还有没有其它吸引人的地方呢？</p>\n<h3 id=\"高性能\"><a href=\"#高性能\" class=\"headerlink\" title=\"高性能\"></a>高性能</h3><p>为什么JAMStack是高性能的呢？这是因为JAMStack的应用将网站的静态部分和动态部分区分开来了，那些不会频繁发生变化的内容会被提前生成，从而无需使用额外的计算资源来进行服务端渲染。这样用户首次访问某个页面的时候速度会变得很快，而且这些静态的资源还可以被放在CDN来进一步提升用户体验。将动态内容和静态内容区分开来还有另外一个好处，就是我们后端接口的职责更加明确了，API接口的数量会变得更少，性能也会变得更好。</p>\n<h3 id=\"高性价比以及高可扩展性\"><a href=\"#高性价比以及高可扩展性\" class=\"headerlink\" title=\"高性价比以及高可扩展性\"></a>高性价比以及高可扩展性</h3><p>由于我们前端的内容都是一些静态的文件没有服务端渲染的要求，而静态资源服务器对性能的要求并不高，所以我们在购买服务器方面不需要很大的成本，我们甚至还可以使用一些诸如<a href=\"https://www.netlify.com/\" target=\"_blank\" rel=\"noopener\">netlify</a>和<a href=\"https://www.gatsbyjs.com/cloud/\" target=\"_blank\" rel=\"noopener\">Gatsby Cloud</a>等免费资源来托管我们的文件。对于后端来说由于我们已经将前后端彻底分离了，所以后端可以使用一些廉价的Baas或者Serverless服务，例如可以使用<a href=\"https://auth0.com/\" target=\"_blank\" rel=\"noopener\">Auth0</a>作为我们的用户鉴权服务，使用<a href=\"https://firebase.google.com/\" target=\"_blank\" rel=\"noopener\">Firebase</a>作为我们的接口服务等等。使用这些Baas和Serverless服务有一个好处就是它们很便宜，而且它们是按照接口使用量来收费的，你的用户量决定了你的支出，如果你的用户很少，你甚至不需要花一分钱。</p>\n<p>除了极高的性价比，JAMStack还有很好的扩展性。举个例子，假如你现在的博客网站因为某一篇博客突然火了，访问用户激增。如果你的前端静态文件使用的是CDN网络的话，你的网站很容易就可以扩展了，一切都是自动的，无需你做任何东西，而后端如果你使用了Serverless和Baas的解决方案的话，一切也是自动的，用户不会感觉到有使用体验的差别，而你只需要给使用到的服务平台多一点点费用而已。</p>\n<h3 id=\"更好的开发者体验\"><a href=\"#更好的开发者体验\" class=\"headerlink\" title=\"更好的开发者体验\"></a>更好的开发者体验</h3><p>拿我们前面提到的Gatsby来举例，它就允许我们使用一些现代的前端技术来进行开发，例如React，Styled-components和GraphQL等，这些都是我们前端开发者十分熟悉的技术了，没有很大的学习成本所以开发者体验会很好。除此之外，由于Gatsby使用了React，所以它间接上接入了React的生态系统，这样开发者在开发Gatsby应用时就可以使用React生态的各种最佳实践和库实现了，这无疑可以大大提高我们的开发效率。</p>\n<h3 id=\"更高的安全性\"><a href=\"#更高的安全性\" class=\"headerlink\" title=\"更高的安全性\"></a>更高的安全性</h3><p>由于JAMStack是一种前后端分离的技术，没有了后端渲染所以可以降低被攻击的风险。举个例子采用Gatsby生成的CMS平台就比传统的WordPress平台安全很多：）。</p>\n<h2 id=\"JAMStack适合什么应用\"><a href=\"#JAMStack适合什么应用\" class=\"headerlink\" title=\"JAMStack适合什么应用\"></a>JAMStack适合什么应用</h2><p>既然JAMStack有那么多好处，我们是不是一把梭在所有的项目中都使用JAMStack呢？答案是否定的，由于JAMStack需要我们将网站的静态部分和动态部分区分开来，静态部分的内容会在构建的时候就生成而动态的内容会在浏览器进行渲染，这个特点就注定了它不适合于构建以下类型的应用：</p>\n<ul>\n<li>掘金，知乎这种主要由第三方用户创建内容的应用。由于这些应用的内容都是由平台用户创建的，而且用户可以不断地修改和删除已经创建的内容，如果使用JAMStack的话网站的内容就需要被频繁构建，这显然是不合理的。</li>\n<li>微博，推特这种社交应用。这类应用的内容除了频繁更新之外，还有就是动态内容多于静态内容，例如用户的主页只会展示他关注的人发表的动态，所以也不适合使用JAMStack。</li>\n<li>一些不需要SEO的应用。JAMStack一个很大的优点就是对SEO友好，如果你的应用没有被搜索引擎收录的需求的话，就没必要使用JAMStack了。</li>\n<li>内容很多的应用。由于JAMStack需要我们每次都构建出所有的静态资源，所以对于那些静态内容很多的应用（例如页面数超过50k）的话，每次构建应用都需要大量的时间，因此这种类型的网站也不适合用JAMStack。</li>\n</ul>\n<p>相反JAMStack十分适合构建以下类型的应用：</p>\n<ul>\n<li>项目文档之类的网站，例如React的官网等。</li>\n<li>企业或者组织的官方网站。</li>\n<li>个人管理的博客网站。</li>\n<li>中小型规模的CMS平台。</li>\n<li>中小型的电商平台。</li>\n<li>既有需要被SEO的静态内容又有动态的不需要SEO的内容的混合应用。例如一些To B的平台，里面既有用户的工作台又有一些操作文档相关的静态内容。</li>\n</ul>\n<p>当然了我在这里列出来的无论是适用还是不适用JAMStack的应用其实都是一些很笼统的分类，我们在实际开发时还得具体问题具体分析，根据实际情况来评估我们的应用是不是适合使用JAMStack来开发。</p>\n<h2 id=\"我的个人思考\"><a href=\"#我的个人思考\" class=\"headerlink\" title=\"我的个人思考\"></a>我的个人思考</h2><p>在最后我想说一下我自己对JAMStack的一些思考。</p>\n<p>首先我个人十分看好这个技术栈，也会在日后的开发中使用这个技术栈。因为它帮我解决了网站SEO的问题。在不了解JAMStack之前，如果我想我的网站被搜索引擎收录要么就是刀耕火种地硬写HTML和原生JS，这种方案明显开发效率十分低下。还有一种方案就是我使用React等现代开发技术，这样我就得学习next.js等SSR技术来实现SEO，这个方案有一个问题就是学习next.js有一定的学习成本，而且在项目上线后我得维护一个后端服务来进行服务端渲染，所以会有一定的运维成本。可是使用了JAMStack或者说是Gatsby后这些问题就迎刃而解了，因为我可以继续使用我熟悉的React技术栈来快速开发Web应用，还无需考虑服务端渲染的问题就可以达到SEO的效果，这不是美滋滋？</p>\n<p>其次我觉得JAMStack这个技术栈十分有利于我们实践一些自己想到的不确定能不能成功的点子（创业想法）。上面在介绍JAMStack优势的时候，我提到了一点就是使用JAMStack其实你可以免费部署你的应用，因为你可以将前端的静态代码放在一些免费的静态资源托管服务器，然后后端使用一些免费的Baas API服务，当然了这只适合于我们平台用户量不大的情景，当用户量大的时候我们还是得付费的。可是我们网站刚起步的时候用户量不都是不大的吗？如果我们一大早就买好服务器资源和域名，后面却发现这个想法根本行不通的话，这些钱就算是赔进去了。相反，使用免费服务的话，即使我们做的东西黄了，我们也不会有什么损失。</p>\n<p>总的来说我对JAMStack这个技术栈是很有信心的，特别是在CMS内容管理平台这方面我相信它一定会逐渐火起来，而且有可能可以取代WordPress的地位。</p>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长</p>\n<p><img src=\"/images/wechat_qr.jpg\" alt=\"\"></p>"},{"title":"窥探现代浏览器架构-四","thumbnail":"/gallery/thumbnails/chrome.png","date":"2020-01-08T00:00:50.000Z","_content":"\n\n## 前言\n本文是笔者对[Mario Kosaka](https://developers.google.com/web/resources/contributors/kosamari)写的[inside look at modern web browser](https://developers.google.com/web/updates/2018/09/inside-browser-part4)系列文章的翻译。这里的翻译不是指直译，而是结合个人的理解将作者想表达的意思表达出来，而且会尽量补充一些相关的内容来帮助大家更好地理解。\n\n## 到达合成线程的输入\n这篇文章是探究Chrome内部工作原理的**四集系列文章**中的最后一篇了。在上一篇文章中，我们探讨了一下[浏览器渲染页面的过程以及学习了一些关于合成线程的知识](https://xiaocongdong.github.io/2020/01/08/%E7%AA%A5%E6%8E%A2%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84-%E4%B8%89/)，在本篇文章中，我们要看一下当用户在网页上输入内容的时候，合成线程（compositor）做了些什么来保证流畅的用户体验的。\n\n<!-- more-->\n\n## 从浏览器的角度来看输入事件\n当你听到“输入事件”（input events）的时候，你可能只会想到用户在文本框中输入内容或者对页面进行了点击操作，可是从浏览器的角度来看的话，输入其实代表着来自于用户的任何手势动作（gesture）。所以用户`滚动页面`，`触碰屏幕`以及`移动鼠标`等操作都可以看作来自于用户的输入事件。\n\n当用户做了一些诸如触碰屏幕的手势动作时，浏览器进程（browser process）是第一个可以接收到这个事件的地方。可是浏览器进程只能知道用户的手势动作发生在什么地方而不知道如何处理，这是因为标签内（tab）的内容是由页面的渲染进程（render process）负责的。因此浏览器进程会将事件的类型（如`touchstart`）以及坐标（coordinates）发送给渲染进程。为了可以正确地处理这个事件，渲染进程会找到事件的目标对象（target）然后运行这个事件绑定的监听函数（listener）。\n\n![](/images/chrome/input_event.png)\n<p align=\"center\">点击事件从浏览器进程路由到渲染进程</p>\n\n## 合成线程接收到输入事件\n在上一篇文章中，我们查看了合成线程是如何通过合并页面已经光栅化好的层来保障流畅滚动体验（scroll smoothly）的。如果当前页面不存在任何用户事件的监听器（event listener），合成线程完全不需要主线程的参与就能创建一个新的合成帧来响应事件。可是如果页面有一些事件监听器（event listeners）呢？合成线程是如何判断出这个事件是否需要路由给主线程处理的呢？\n\n## 了解非快速滚动区域 - non-fast scrollable region\n因为页面的JavaScript脚本是在主线程（main thread）中运行的，所以当一个页面被合成的时候，合成线程会将页面那些注册了事件监听器的区域标记为“非快速滚动区域”（Non-fast Scrollable Region）。由于知道了这些信息，当用户事件发生在这些区域时，合成线程会将输入事件发送给主线程来处理。如果输入事件不是发生在非快速滚动区域，合成线程就无须主线程的参与来合成一个新的帧。\n\n![](/images/chrome/nfsr1.png)\n<p align=\"center\">非快速滚动区域有用户事件发生时的示意图</p>\n\n### 当你写事件监听器的时候留点心眼\nWeb开发的一个常见的模式是事件委托（event delegation）。由于事件会冒泡，你可以给顶层的元素绑定一个事件监听函数来作为其所有子元素的事件委托者，这样子节点的事件就可以统一被顶层的元素处理了。因此你可能看过或者写过类似于下面的代码：\n```javascript\ndocument.body.addEventListener('touchstart', event => {\n  if (event.target === area) {\n    event.preventDefault()\n  }\n})\n```\n只用一个事件监听器就可以服务到所有的元素，乍一看这种写法还是挺实惠的。可是，如果你从浏览器的角度去看一下这段代码，你会发现上面给body元素绑定了事件监听器后其实是将整个页面都标记为一个非快速滚动区域，这就意味着即使你页面的某些区域压根就不在乎是不是有用户输入，当用户输入事件发生时，合成线程每次都会告知主线程并且会等待主线程处理完它才干活。因此这种情况下合成线程就丧失提供流畅用户体验的能力了（smooth scrolling ability）。\n\n![](/images/chrome/nfsr2.png)\n<p align=\"center\">当整个页面都是非快速滚动区域时页面的事件处理示意图</p>\n\n为了减轻这种情况的发生，您可以为事件监听器传递`passive：true`选项。 这个选项会告诉浏览器您仍要在主线程中侦听事件，可是合成线程也可以继续合成新的帧。\n```javascript\ndocument.body.addEventListener('touchstart', event => {\n    if (event.target === area) {\n        event.preventDefault()\n    }\n }, {passive: true});\n```\n\n## 查找事件的目标对象（event target）\n当合成线程向主线程发送输入事件时，主线程要做的第一件事是通过命中测试（hit test）去找到事件的目标对象（target）。具体的命中测试流程是遍历在渲染流水线中生成的绘画记录（paint records）来找到输入事件出现的x, y坐标上面描绘的对象是哪个。\n\n![](/images/chrome/hittest.png)\n<p align=\"center\">主线程通过遍历绘画记录来确定在x，y坐标上的是哪个对象</p>\n\n## 最小化发送给主线程的事件数\n上一篇文章中我们有说过显示器的刷新频率通常是一秒钟60次以及我们可以通过让JavaScript代码的执行频率和屏幕刷新频率保持一致来实现页面的平滑动画效果（smooth animation）。对于用户输入来说，触摸屏一般一秒钟会触发60到120次点击事件，而鼠标一般则会每秒触发100次事件，因此输入事件的触发频率其实远远高于我们屏幕的刷新频率。\n\n如果每秒将诸如`touchmove`这种连续被触发的事件发送到主线程120次，因为屏幕的刷新速度相对来说比较慢，它可能会触发过量的点击测试以及JavaScript代码的执行。\n\n![](/images/chrome/rawevents.png)\n<p align=\"center\">事件淹没了屏幕刷新的时间轴，导致页面很卡顿</p>\n\n为了最大程度地减少对主线程的过多调用，Chrome会合并连续事件（例如`wheel`，`mousewheel`，`mousemove`，`pointermove`，`touchmove`），并将调度延迟到下一个`requestAnimationFrame`之前。\n\n![](/images/chrome/coalescedevents.png)\n<p align=\"center\">和之前相同的事件轴，可是这次事件被合并并延迟调度了</p>\n\n任何诸如`keydown`，`keyup`，`mouseup`，`mousedown`，`touchstart`和`touchend`等相对不怎么频繁发生的事件都会被立即派送给主线程。\n\n## 使用getCoalesecedEvents来获取帧内（intra-frame）事件\n对于大多数web应用来说，合并事件应该已经足够用来提供很好的用户体验了，然而，如果你正在构建的是一个根据用户的`touchmove`坐标来进行绘图的应用的话，合并事件可能会使页面画的线不够顺畅和连续。在这种情况下，你可以使用鼠标事件的`getCoalescedEvents`来获取被合成的事件的详细信息。\n\n![](/images/chrome/getCoalescedEvents.png)\n<p align=\"center\">左边是顺畅的触摸手势，右边是事件合成后不那么连续的手势</p>\n\n```javascript\nwindow.addEventListener('pointermove', event => {\n    const events = event.getCoalescedEvents();\n    for (let event of events) {\n        const x = event.pageX;\n        const y = event.pageY;\n        // draw a line using x and y coordinates.\n    }\n});\n```\n\n## 下一步\n这本系列的文章中，我们以Chrome浏览器为例子探讨了浏览器的内部工作原理。如果你之前从来没有想过为什么DevTools推荐你在事件监听器中使用`passive:true`选项或者在script标签中写`async`属性的话，我希望这个系列的文章可以给你一些关于浏览器为什么需要这些信息来提供更快更流畅的用户体验的原因。\n\n### 学习如何衡量性能\n不同网站的性能调整可能会有所不同，你要自己衡量自己网站的性能并确定最适合提升你的网站性能的方案。 你可以查看Chrome DevTools团队的一些教程来学习如何才能[衡量自己网站的性能](https://developers.google.com/web/tools/chrome-devtools/speed/get-started)。\n\n### 为你的站点添加Feature Policy\n如果你想更进一步，你可以了解一下[Feature Policy](https://developers.google.com/web/updates/2018/06/feature-policy)这个新的Web平台功能，这个功能可以在你构建项目的时候提供一些保护让您的应用程序具有某些行为并防止你犯下错误。例如，如果你想确保你的应用代码不会阻塞页面的解析（parsing），你可以在同步脚本策略（synchronius scripts policy）中运行你的应用。具体做法是将`sync-script`设置为'none'，这样那些会阻塞页面解析的JavaScript代码会被禁止执行。这样做的好处是避免你的代码阻塞页面的解析，而且浏览器无须担心解析器（parser）暂停。\n\n## 总结\n以上就是所有和浏览器架构和运行原理相关的内容了，我们以后在开发web应用的时候，不应该只考虑代码的优雅性，还要多多从浏览器是如何解析运行我们的代码的方面进行思考，从而为用户提供更好的用户体验。\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","source":"_posts/窥探现代浏览器架构-四.md","raw":"---\ntitle: 窥探现代浏览器架构-四\ntags:\n  - Chrome\n  - 浏览器\nthumbnail: /gallery/thumbnails/chrome.png\ncategories:\n  - 前端\ndate: 2020-01-08 08:00:50\n---\n\n\n## 前言\n本文是笔者对[Mario Kosaka](https://developers.google.com/web/resources/contributors/kosamari)写的[inside look at modern web browser](https://developers.google.com/web/updates/2018/09/inside-browser-part4)系列文章的翻译。这里的翻译不是指直译，而是结合个人的理解将作者想表达的意思表达出来，而且会尽量补充一些相关的内容来帮助大家更好地理解。\n\n## 到达合成线程的输入\n这篇文章是探究Chrome内部工作原理的**四集系列文章**中的最后一篇了。在上一篇文章中，我们探讨了一下[浏览器渲染页面的过程以及学习了一些关于合成线程的知识](https://xiaocongdong.github.io/2020/01/08/%E7%AA%A5%E6%8E%A2%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84-%E4%B8%89/)，在本篇文章中，我们要看一下当用户在网页上输入内容的时候，合成线程（compositor）做了些什么来保证流畅的用户体验的。\n\n<!-- more-->\n\n## 从浏览器的角度来看输入事件\n当你听到“输入事件”（input events）的时候，你可能只会想到用户在文本框中输入内容或者对页面进行了点击操作，可是从浏览器的角度来看的话，输入其实代表着来自于用户的任何手势动作（gesture）。所以用户`滚动页面`，`触碰屏幕`以及`移动鼠标`等操作都可以看作来自于用户的输入事件。\n\n当用户做了一些诸如触碰屏幕的手势动作时，浏览器进程（browser process）是第一个可以接收到这个事件的地方。可是浏览器进程只能知道用户的手势动作发生在什么地方而不知道如何处理，这是因为标签内（tab）的内容是由页面的渲染进程（render process）负责的。因此浏览器进程会将事件的类型（如`touchstart`）以及坐标（coordinates）发送给渲染进程。为了可以正确地处理这个事件，渲染进程会找到事件的目标对象（target）然后运行这个事件绑定的监听函数（listener）。\n\n![](/images/chrome/input_event.png)\n<p align=\"center\">点击事件从浏览器进程路由到渲染进程</p>\n\n## 合成线程接收到输入事件\n在上一篇文章中，我们查看了合成线程是如何通过合并页面已经光栅化好的层来保障流畅滚动体验（scroll smoothly）的。如果当前页面不存在任何用户事件的监听器（event listener），合成线程完全不需要主线程的参与就能创建一个新的合成帧来响应事件。可是如果页面有一些事件监听器（event listeners）呢？合成线程是如何判断出这个事件是否需要路由给主线程处理的呢？\n\n## 了解非快速滚动区域 - non-fast scrollable region\n因为页面的JavaScript脚本是在主线程（main thread）中运行的，所以当一个页面被合成的时候，合成线程会将页面那些注册了事件监听器的区域标记为“非快速滚动区域”（Non-fast Scrollable Region）。由于知道了这些信息，当用户事件发生在这些区域时，合成线程会将输入事件发送给主线程来处理。如果输入事件不是发生在非快速滚动区域，合成线程就无须主线程的参与来合成一个新的帧。\n\n![](/images/chrome/nfsr1.png)\n<p align=\"center\">非快速滚动区域有用户事件发生时的示意图</p>\n\n### 当你写事件监听器的时候留点心眼\nWeb开发的一个常见的模式是事件委托（event delegation）。由于事件会冒泡，你可以给顶层的元素绑定一个事件监听函数来作为其所有子元素的事件委托者，这样子节点的事件就可以统一被顶层的元素处理了。因此你可能看过或者写过类似于下面的代码：\n```javascript\ndocument.body.addEventListener('touchstart', event => {\n  if (event.target === area) {\n    event.preventDefault()\n  }\n})\n```\n只用一个事件监听器就可以服务到所有的元素，乍一看这种写法还是挺实惠的。可是，如果你从浏览器的角度去看一下这段代码，你会发现上面给body元素绑定了事件监听器后其实是将整个页面都标记为一个非快速滚动区域，这就意味着即使你页面的某些区域压根就不在乎是不是有用户输入，当用户输入事件发生时，合成线程每次都会告知主线程并且会等待主线程处理完它才干活。因此这种情况下合成线程就丧失提供流畅用户体验的能力了（smooth scrolling ability）。\n\n![](/images/chrome/nfsr2.png)\n<p align=\"center\">当整个页面都是非快速滚动区域时页面的事件处理示意图</p>\n\n为了减轻这种情况的发生，您可以为事件监听器传递`passive：true`选项。 这个选项会告诉浏览器您仍要在主线程中侦听事件，可是合成线程也可以继续合成新的帧。\n```javascript\ndocument.body.addEventListener('touchstart', event => {\n    if (event.target === area) {\n        event.preventDefault()\n    }\n }, {passive: true});\n```\n\n## 查找事件的目标对象（event target）\n当合成线程向主线程发送输入事件时，主线程要做的第一件事是通过命中测试（hit test）去找到事件的目标对象（target）。具体的命中测试流程是遍历在渲染流水线中生成的绘画记录（paint records）来找到输入事件出现的x, y坐标上面描绘的对象是哪个。\n\n![](/images/chrome/hittest.png)\n<p align=\"center\">主线程通过遍历绘画记录来确定在x，y坐标上的是哪个对象</p>\n\n## 最小化发送给主线程的事件数\n上一篇文章中我们有说过显示器的刷新频率通常是一秒钟60次以及我们可以通过让JavaScript代码的执行频率和屏幕刷新频率保持一致来实现页面的平滑动画效果（smooth animation）。对于用户输入来说，触摸屏一般一秒钟会触发60到120次点击事件，而鼠标一般则会每秒触发100次事件，因此输入事件的触发频率其实远远高于我们屏幕的刷新频率。\n\n如果每秒将诸如`touchmove`这种连续被触发的事件发送到主线程120次，因为屏幕的刷新速度相对来说比较慢，它可能会触发过量的点击测试以及JavaScript代码的执行。\n\n![](/images/chrome/rawevents.png)\n<p align=\"center\">事件淹没了屏幕刷新的时间轴，导致页面很卡顿</p>\n\n为了最大程度地减少对主线程的过多调用，Chrome会合并连续事件（例如`wheel`，`mousewheel`，`mousemove`，`pointermove`，`touchmove`），并将调度延迟到下一个`requestAnimationFrame`之前。\n\n![](/images/chrome/coalescedevents.png)\n<p align=\"center\">和之前相同的事件轴，可是这次事件被合并并延迟调度了</p>\n\n任何诸如`keydown`，`keyup`，`mouseup`，`mousedown`，`touchstart`和`touchend`等相对不怎么频繁发生的事件都会被立即派送给主线程。\n\n## 使用getCoalesecedEvents来获取帧内（intra-frame）事件\n对于大多数web应用来说，合并事件应该已经足够用来提供很好的用户体验了，然而，如果你正在构建的是一个根据用户的`touchmove`坐标来进行绘图的应用的话，合并事件可能会使页面画的线不够顺畅和连续。在这种情况下，你可以使用鼠标事件的`getCoalescedEvents`来获取被合成的事件的详细信息。\n\n![](/images/chrome/getCoalescedEvents.png)\n<p align=\"center\">左边是顺畅的触摸手势，右边是事件合成后不那么连续的手势</p>\n\n```javascript\nwindow.addEventListener('pointermove', event => {\n    const events = event.getCoalescedEvents();\n    for (let event of events) {\n        const x = event.pageX;\n        const y = event.pageY;\n        // draw a line using x and y coordinates.\n    }\n});\n```\n\n## 下一步\n这本系列的文章中，我们以Chrome浏览器为例子探讨了浏览器的内部工作原理。如果你之前从来没有想过为什么DevTools推荐你在事件监听器中使用`passive:true`选项或者在script标签中写`async`属性的话，我希望这个系列的文章可以给你一些关于浏览器为什么需要这些信息来提供更快更流畅的用户体验的原因。\n\n### 学习如何衡量性能\n不同网站的性能调整可能会有所不同，你要自己衡量自己网站的性能并确定最适合提升你的网站性能的方案。 你可以查看Chrome DevTools团队的一些教程来学习如何才能[衡量自己网站的性能](https://developers.google.com/web/tools/chrome-devtools/speed/get-started)。\n\n### 为你的站点添加Feature Policy\n如果你想更进一步，你可以了解一下[Feature Policy](https://developers.google.com/web/updates/2018/06/feature-policy)这个新的Web平台功能，这个功能可以在你构建项目的时候提供一些保护让您的应用程序具有某些行为并防止你犯下错误。例如，如果你想确保你的应用代码不会阻塞页面的解析（parsing），你可以在同步脚本策略（synchronius scripts policy）中运行你的应用。具体做法是将`sync-script`设置为'none'，这样那些会阻塞页面解析的JavaScript代码会被禁止执行。这样做的好处是避免你的代码阻塞页面的解析，而且浏览器无须担心解析器（parser）暂停。\n\n## 总结\n以上就是所有和浏览器架构和运行原理相关的内容了，我们以后在开发web应用的时候，不应该只考虑代码的优雅性，还要多多从浏览器是如何解析运行我们的代码的方面进行思考，从而为用户提供更好的用户体验。\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","slug":"窥探现代浏览器架构-四","published":1,"updated":"2021-02-08T06:16:56.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0gqf6fw000vucnxayfvdx4e","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文是笔者对<a href=\"https://developers.google.com/web/resources/contributors/kosamari\" target=\"_blank\" rel=\"noopener\">Mario Kosaka</a>写的<a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part4\" target=\"_blank\" rel=\"noopener\">inside look at modern web browser</a>系列文章的翻译。这里的翻译不是指直译，而是结合个人的理解将作者想表达的意思表达出来，而且会尽量补充一些相关的内容来帮助大家更好地理解。</p>\n<h2 id=\"到达合成线程的输入\"><a href=\"#到达合成线程的输入\" class=\"headerlink\" title=\"到达合成线程的输入\"></a>到达合成线程的输入</h2><p>这篇文章是探究Chrome内部工作原理的<strong>四集系列文章</strong>中的最后一篇了。在上一篇文章中，我们探讨了一下<a href=\"https://xiaocongdong.github.io/2020/01/08/%E7%AA%A5%E6%8E%A2%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84-%E4%B8%89/\" target=\"_blank\" rel=\"noopener\">浏览器渲染页面的过程以及学习了一些关于合成线程的知识</a>，在本篇文章中，我们要看一下当用户在网页上输入内容的时候，合成线程（compositor）做了些什么来保证流畅的用户体验的。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"从浏览器的角度来看输入事件\"><a href=\"#从浏览器的角度来看输入事件\" class=\"headerlink\" title=\"从浏览器的角度来看输入事件\"></a>从浏览器的角度来看输入事件</h2><p>当你听到“输入事件”（input events）的时候，你可能只会想到用户在文本框中输入内容或者对页面进行了点击操作，可是从浏览器的角度来看的话，输入其实代表着来自于用户的任何手势动作（gesture）。所以用户<code>滚动页面</code>，<code>触碰屏幕</code>以及<code>移动鼠标</code>等操作都可以看作来自于用户的输入事件。</p>\n<p>当用户做了一些诸如触碰屏幕的手势动作时，浏览器进程（browser process）是第一个可以接收到这个事件的地方。可是浏览器进程只能知道用户的手势动作发生在什么地方而不知道如何处理，这是因为标签内（tab）的内容是由页面的渲染进程（render process）负责的。因此浏览器进程会将事件的类型（如<code>touchstart</code>）以及坐标（coordinates）发送给渲染进程。为了可以正确地处理这个事件，渲染进程会找到事件的目标对象（target）然后运行这个事件绑定的监听函数（listener）。</p>\n<p><img src=\"/images/chrome/input_event.png\" alt></p>\n<p align=\"center\">点击事件从浏览器进程路由到渲染进程</p>\n\n<h2 id=\"合成线程接收到输入事件\"><a href=\"#合成线程接收到输入事件\" class=\"headerlink\" title=\"合成线程接收到输入事件\"></a>合成线程接收到输入事件</h2><p>在上一篇文章中，我们查看了合成线程是如何通过合并页面已经光栅化好的层来保障流畅滚动体验（scroll smoothly）的。如果当前页面不存在任何用户事件的监听器（event listener），合成线程完全不需要主线程的参与就能创建一个新的合成帧来响应事件。可是如果页面有一些事件监听器（event listeners）呢？合成线程是如何判断出这个事件是否需要路由给主线程处理的呢？</p>\n<h2 id=\"了解非快速滚动区域-non-fast-scrollable-region\"><a href=\"#了解非快速滚动区域-non-fast-scrollable-region\" class=\"headerlink\" title=\"了解非快速滚动区域 - non-fast scrollable region\"></a>了解非快速滚动区域 - non-fast scrollable region</h2><p>因为页面的JavaScript脚本是在主线程（main thread）中运行的，所以当一个页面被合成的时候，合成线程会将页面那些注册了事件监听器的区域标记为“非快速滚动区域”（Non-fast Scrollable Region）。由于知道了这些信息，当用户事件发生在这些区域时，合成线程会将输入事件发送给主线程来处理。如果输入事件不是发生在非快速滚动区域，合成线程就无须主线程的参与来合成一个新的帧。</p>\n<p><img src=\"/images/chrome/nfsr1.png\" alt></p>\n<p align=\"center\">非快速滚动区域有用户事件发生时的示意图</p>\n\n<h3 id=\"当你写事件监听器的时候留点心眼\"><a href=\"#当你写事件监听器的时候留点心眼\" class=\"headerlink\" title=\"当你写事件监听器的时候留点心眼\"></a>当你写事件监听器的时候留点心眼</h3><p>Web开发的一个常见的模式是事件委托（event delegation）。由于事件会冒泡，你可以给顶层的元素绑定一个事件监听函数来作为其所有子元素的事件委托者，这样子节点的事件就可以统一被顶层的元素处理了。因此你可能看过或者写过类似于下面的代码：</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">document</span>.body.addEventListener(<span class=\"hljs-string\">'touchstart'</span>, event =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (event.target === area) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    event.preventDefault()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n<p>只用一个事件监听器就可以服务到所有的元素，乍一看这种写法还是挺实惠的。可是，如果你从浏览器的角度去看一下这段代码，你会发现上面给body元素绑定了事件监听器后其实是将整个页面都标记为一个非快速滚动区域，这就意味着即使你页面的某些区域压根就不在乎是不是有用户输入，当用户输入事件发生时，合成线程每次都会告知主线程并且会等待主线程处理完它才干活。因此这种情况下合成线程就丧失提供流畅用户体验的能力了（smooth scrolling ability）。</p>\n<p><img src=\"/images/chrome/nfsr2.png\" alt></p>\n<p align=\"center\">当整个页面都是非快速滚动区域时页面的事件处理示意图</p>\n\n<p>为了减轻这种情况的发生，您可以为事件监听器传递<code>passive：true</code>选项。 这个选项会告诉浏览器您仍要在主线程中侦听事件，可是合成线程也可以继续合成新的帧。</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">document</span>.body.addEventListener(<span class=\"hljs-string\">'touchstart'</span>, event =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (event.target === area) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">        event.preventDefault()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"> &#125;, &#123;<span class=\"hljs-attr\">passive</span>: <span class=\"hljs-literal\">true</span>&#125;);</span></pre></td></tr></table></figure>\n\n<h2 id=\"查找事件的目标对象（event-target）\"><a href=\"#查找事件的目标对象（event-target）\" class=\"headerlink\" title=\"查找事件的目标对象（event target）\"></a>查找事件的目标对象（event target）</h2><p>当合成线程向主线程发送输入事件时，主线程要做的第一件事是通过命中测试（hit test）去找到事件的目标对象（target）。具体的命中测试流程是遍历在渲染流水线中生成的绘画记录（paint records）来找到输入事件出现的x, y坐标上面描绘的对象是哪个。</p>\n<p><img src=\"/images/chrome/hittest.png\" alt></p>\n<p align=\"center\">主线程通过遍历绘画记录来确定在x，y坐标上的是哪个对象</p>\n\n<h2 id=\"最小化发送给主线程的事件数\"><a href=\"#最小化发送给主线程的事件数\" class=\"headerlink\" title=\"最小化发送给主线程的事件数\"></a>最小化发送给主线程的事件数</h2><p>上一篇文章中我们有说过显示器的刷新频率通常是一秒钟60次以及我们可以通过让JavaScript代码的执行频率和屏幕刷新频率保持一致来实现页面的平滑动画效果（smooth animation）。对于用户输入来说，触摸屏一般一秒钟会触发60到120次点击事件，而鼠标一般则会每秒触发100次事件，因此输入事件的触发频率其实远远高于我们屏幕的刷新频率。</p>\n<p>如果每秒将诸如<code>touchmove</code>这种连续被触发的事件发送到主线程120次，因为屏幕的刷新速度相对来说比较慢，它可能会触发过量的点击测试以及JavaScript代码的执行。</p>\n<p><img src=\"/images/chrome/rawevents.png\" alt></p>\n<p align=\"center\">事件淹没了屏幕刷新的时间轴，导致页面很卡顿</p>\n\n<p>为了最大程度地减少对主线程的过多调用，Chrome会合并连续事件（例如<code>wheel</code>，<code>mousewheel</code>，<code>mousemove</code>，<code>pointermove</code>，<code>touchmove</code>），并将调度延迟到下一个<code>requestAnimationFrame</code>之前。</p>\n<p><img src=\"/images/chrome/coalescedevents.png\" alt></p>\n<p align=\"center\">和之前相同的事件轴，可是这次事件被合并并延迟调度了</p>\n\n<p>任何诸如<code>keydown</code>，<code>keyup</code>，<code>mouseup</code>，<code>mousedown</code>，<code>touchstart</code>和<code>touchend</code>等相对不怎么频繁发生的事件都会被立即派送给主线程。</p>\n<h2 id=\"使用getCoalesecedEvents来获取帧内（intra-frame）事件\"><a href=\"#使用getCoalesecedEvents来获取帧内（intra-frame）事件\" class=\"headerlink\" title=\"使用getCoalesecedEvents来获取帧内（intra-frame）事件\"></a>使用getCoalesecedEvents来获取帧内（intra-frame）事件</h2><p>对于大多数web应用来说，合并事件应该已经足够用来提供很好的用户体验了，然而，如果你正在构建的是一个根据用户的<code>touchmove</code>坐标来进行绘图的应用的话，合并事件可能会使页面画的线不够顺畅和连续。在这种情况下，你可以使用鼠标事件的<code>getCoalescedEvents</code>来获取被合成的事件的详细信息。</p>\n<p><img src=\"/images/chrome/getCoalescedEvents.png\" alt></p>\n<p align=\"center\">左边是顺畅的触摸手势，右边是事件合成后不那么连续的手势</p>\n\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'pointermove'</span>, event =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">const</span> events = event.getCoalescedEvents();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> event <span class=\"hljs-keyword\">of</span> events) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-keyword\">const</span> x = event.pageX;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-keyword\">const</span> y = event.pageY;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-comment\">// draw a line using x and y coordinates.</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n\n<h2 id=\"下一步\"><a href=\"#下一步\" class=\"headerlink\" title=\"下一步\"></a>下一步</h2><p>这本系列的文章中，我们以Chrome浏览器为例子探讨了浏览器的内部工作原理。如果你之前从来没有想过为什么DevTools推荐你在事件监听器中使用<code>passive:true</code>选项或者在script标签中写<code>async</code>属性的话，我希望这个系列的文章可以给你一些关于浏览器为什么需要这些信息来提供更快更流畅的用户体验的原因。</p>\n<h3 id=\"学习如何衡量性能\"><a href=\"#学习如何衡量性能\" class=\"headerlink\" title=\"学习如何衡量性能\"></a>学习如何衡量性能</h3><p>不同网站的性能调整可能会有所不同，你要自己衡量自己网站的性能并确定最适合提升你的网站性能的方案。 你可以查看Chrome DevTools团队的一些教程来学习如何才能<a href=\"https://developers.google.com/web/tools/chrome-devtools/speed/get-started\" target=\"_blank\" rel=\"noopener\">衡量自己网站的性能</a>。</p>\n<h3 id=\"为你的站点添加Feature-Policy\"><a href=\"#为你的站点添加Feature-Policy\" class=\"headerlink\" title=\"为你的站点添加Feature Policy\"></a>为你的站点添加Feature Policy</h3><p>如果你想更进一步，你可以了解一下<a href=\"https://developers.google.com/web/updates/2018/06/feature-policy\" target=\"_blank\" rel=\"noopener\">Feature Policy</a>这个新的Web平台功能，这个功能可以在你构建项目的时候提供一些保护让您的应用程序具有某些行为并防止你犯下错误。例如，如果你想确保你的应用代码不会阻塞页面的解析（parsing），你可以在同步脚本策略（synchronius scripts policy）中运行你的应用。具体做法是将<code>sync-script</code>设置为’none’，这样那些会阻塞页面解析的JavaScript代码会被禁止执行。这样做的好处是避免你的代码阻塞页面的解析，而且浏览器无须担心解析器（parser）暂停。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是所有和浏览器架构和运行原理相关的内容了，我们以后在开发web应用的时候，不应该只考虑代码的优雅性，还要多多从浏览器是如何解析运行我们的代码的方面进行思考，从而为用户提供更好的用户体验。</p>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文是笔者对<a href=\"https://developers.google.com/web/resources/contributors/kosamari\" target=\"_blank\" rel=\"noopener\">Mario Kosaka</a>写的<a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part4\" target=\"_blank\" rel=\"noopener\">inside look at modern web browser</a>系列文章的翻译。这里的翻译不是指直译，而是结合个人的理解将作者想表达的意思表达出来，而且会尽量补充一些相关的内容来帮助大家更好地理解。</p>\n<h2 id=\"到达合成线程的输入\"><a href=\"#到达合成线程的输入\" class=\"headerlink\" title=\"到达合成线程的输入\"></a>到达合成线程的输入</h2><p>这篇文章是探究Chrome内部工作原理的<strong>四集系列文章</strong>中的最后一篇了。在上一篇文章中，我们探讨了一下<a href=\"https://xiaocongdong.github.io/2020/01/08/%E7%AA%A5%E6%8E%A2%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84-%E4%B8%89/\" target=\"_blank\" rel=\"noopener\">浏览器渲染页面的过程以及学习了一些关于合成线程的知识</a>，在本篇文章中，我们要看一下当用户在网页上输入内容的时候，合成线程（compositor）做了些什么来保证流畅的用户体验的。</p>","more":"<h2 id=\"从浏览器的角度来看输入事件\"><a href=\"#从浏览器的角度来看输入事件\" class=\"headerlink\" title=\"从浏览器的角度来看输入事件\"></a>从浏览器的角度来看输入事件</h2><p>当你听到“输入事件”（input events）的时候，你可能只会想到用户在文本框中输入内容或者对页面进行了点击操作，可是从浏览器的角度来看的话，输入其实代表着来自于用户的任何手势动作（gesture）。所以用户<code>滚动页面</code>，<code>触碰屏幕</code>以及<code>移动鼠标</code>等操作都可以看作来自于用户的输入事件。</p>\n<p>当用户做了一些诸如触碰屏幕的手势动作时，浏览器进程（browser process）是第一个可以接收到这个事件的地方。可是浏览器进程只能知道用户的手势动作发生在什么地方而不知道如何处理，这是因为标签内（tab）的内容是由页面的渲染进程（render process）负责的。因此浏览器进程会将事件的类型（如<code>touchstart</code>）以及坐标（coordinates）发送给渲染进程。为了可以正确地处理这个事件，渲染进程会找到事件的目标对象（target）然后运行这个事件绑定的监听函数（listener）。</p>\n<p><img src=\"/images/chrome/input_event.png\" alt=\"\"></p>\n<p align=\"center\">点击事件从浏览器进程路由到渲染进程</p>\n\n<h2 id=\"合成线程接收到输入事件\"><a href=\"#合成线程接收到输入事件\" class=\"headerlink\" title=\"合成线程接收到输入事件\"></a>合成线程接收到输入事件</h2><p>在上一篇文章中，我们查看了合成线程是如何通过合并页面已经光栅化好的层来保障流畅滚动体验（scroll smoothly）的。如果当前页面不存在任何用户事件的监听器（event listener），合成线程完全不需要主线程的参与就能创建一个新的合成帧来响应事件。可是如果页面有一些事件监听器（event listeners）呢？合成线程是如何判断出这个事件是否需要路由给主线程处理的呢？</p>\n<h2 id=\"了解非快速滚动区域-non-fast-scrollable-region\"><a href=\"#了解非快速滚动区域-non-fast-scrollable-region\" class=\"headerlink\" title=\"了解非快速滚动区域 - non-fast scrollable region\"></a>了解非快速滚动区域 - non-fast scrollable region</h2><p>因为页面的JavaScript脚本是在主线程（main thread）中运行的，所以当一个页面被合成的时候，合成线程会将页面那些注册了事件监听器的区域标记为“非快速滚动区域”（Non-fast Scrollable Region）。由于知道了这些信息，当用户事件发生在这些区域时，合成线程会将输入事件发送给主线程来处理。如果输入事件不是发生在非快速滚动区域，合成线程就无须主线程的参与来合成一个新的帧。</p>\n<p><img src=\"/images/chrome/nfsr1.png\" alt=\"\"></p>\n<p align=\"center\">非快速滚动区域有用户事件发生时的示意图</p>\n\n<h3 id=\"当你写事件监听器的时候留点心眼\"><a href=\"#当你写事件监听器的时候留点心眼\" class=\"headerlink\" title=\"当你写事件监听器的时候留点心眼\"></a>当你写事件监听器的时候留点心眼</h3><p>Web开发的一个常见的模式是事件委托（event delegation）。由于事件会冒泡，你可以给顶层的元素绑定一个事件监听函数来作为其所有子元素的事件委托者，这样子节点的事件就可以统一被顶层的元素处理了。因此你可能看过或者写过类似于下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">'touchstart'</span>, event =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (event.target === area) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    event.preventDefault()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;)</span></pre></td></tr></table></figure>\n<p>只用一个事件监听器就可以服务到所有的元素，乍一看这种写法还是挺实惠的。可是，如果你从浏览器的角度去看一下这段代码，你会发现上面给body元素绑定了事件监听器后其实是将整个页面都标记为一个非快速滚动区域，这就意味着即使你页面的某些区域压根就不在乎是不是有用户输入，当用户输入事件发生时，合成线程每次都会告知主线程并且会等待主线程处理完它才干活。因此这种情况下合成线程就丧失提供流畅用户体验的能力了（smooth scrolling ability）。</p>\n<p><img src=\"/images/chrome/nfsr2.png\" alt=\"\"></p>\n<p align=\"center\">当整个页面都是非快速滚动区域时页面的事件处理示意图</p>\n\n<p>为了减轻这种情况的发生，您可以为事件监听器传递<code>passive：true</code>选项。 这个选项会告诉浏览器您仍要在主线程中侦听事件，可是合成线程也可以继续合成新的帧。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">'touchstart'</span>, event =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (event.target === area) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">        event.preventDefault()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"> &#125;, &#123;<span class=\"attr\">passive</span>: <span class=\"literal\">true</span>&#125;);</span></pre></td></tr></table></figure>\n\n<h2 id=\"查找事件的目标对象（event-target）\"><a href=\"#查找事件的目标对象（event-target）\" class=\"headerlink\" title=\"查找事件的目标对象（event target）\"></a>查找事件的目标对象（event target）</h2><p>当合成线程向主线程发送输入事件时，主线程要做的第一件事是通过命中测试（hit test）去找到事件的目标对象（target）。具体的命中测试流程是遍历在渲染流水线中生成的绘画记录（paint records）来找到输入事件出现的x, y坐标上面描绘的对象是哪个。</p>\n<p><img src=\"/images/chrome/hittest.png\" alt=\"\"></p>\n<p align=\"center\">主线程通过遍历绘画记录来确定在x，y坐标上的是哪个对象</p>\n\n<h2 id=\"最小化发送给主线程的事件数\"><a href=\"#最小化发送给主线程的事件数\" class=\"headerlink\" title=\"最小化发送给主线程的事件数\"></a>最小化发送给主线程的事件数</h2><p>上一篇文章中我们有说过显示器的刷新频率通常是一秒钟60次以及我们可以通过让JavaScript代码的执行频率和屏幕刷新频率保持一致来实现页面的平滑动画效果（smooth animation）。对于用户输入来说，触摸屏一般一秒钟会触发60到120次点击事件，而鼠标一般则会每秒触发100次事件，因此输入事件的触发频率其实远远高于我们屏幕的刷新频率。</p>\n<p>如果每秒将诸如<code>touchmove</code>这种连续被触发的事件发送到主线程120次，因为屏幕的刷新速度相对来说比较慢，它可能会触发过量的点击测试以及JavaScript代码的执行。</p>\n<p><img src=\"/images/chrome/rawevents.png\" alt=\"\"></p>\n<p align=\"center\">事件淹没了屏幕刷新的时间轴，导致页面很卡顿</p>\n\n<p>为了最大程度地减少对主线程的过多调用，Chrome会合并连续事件（例如<code>wheel</code>，<code>mousewheel</code>，<code>mousemove</code>，<code>pointermove</code>，<code>touchmove</code>），并将调度延迟到下一个<code>requestAnimationFrame</code>之前。</p>\n<p><img src=\"/images/chrome/coalescedevents.png\" alt=\"\"></p>\n<p align=\"center\">和之前相同的事件轴，可是这次事件被合并并延迟调度了</p>\n\n<p>任何诸如<code>keydown</code>，<code>keyup</code>，<code>mouseup</code>，<code>mousedown</code>，<code>touchstart</code>和<code>touchend</code>等相对不怎么频繁发生的事件都会被立即派送给主线程。</p>\n<h2 id=\"使用getCoalesecedEvents来获取帧内（intra-frame）事件\"><a href=\"#使用getCoalesecedEvents来获取帧内（intra-frame）事件\" class=\"headerlink\" title=\"使用getCoalesecedEvents来获取帧内（intra-frame）事件\"></a>使用getCoalesecedEvents来获取帧内（intra-frame）事件</h2><p>对于大多数web应用来说，合并事件应该已经足够用来提供很好的用户体验了，然而，如果你正在构建的是一个根据用户的<code>touchmove</code>坐标来进行绘图的应用的话，合并事件可能会使页面画的线不够顺畅和连续。在这种情况下，你可以使用鼠标事件的<code>getCoalescedEvents</code>来获取被合成的事件的详细信息。</p>\n<p><img src=\"/images/chrome/getCoalescedEvents.png\" alt=\"\"></p>\n<p align=\"center\">左边是顺畅的触摸手势，右边是事件合成后不那么连续的手势</p>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'pointermove'</span>, event =&gt; &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> events = event.getCoalescedEvents();</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> event <span class=\"keyword\">of</span> events) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">const</span> x = event.pageX;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"keyword\">const</span> y = event.pageY;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"comment\">// draw a line using x and y coordinates.</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;);</span></pre></td></tr></table></figure>\n\n<h2 id=\"下一步\"><a href=\"#下一步\" class=\"headerlink\" title=\"下一步\"></a>下一步</h2><p>这本系列的文章中，我们以Chrome浏览器为例子探讨了浏览器的内部工作原理。如果你之前从来没有想过为什么DevTools推荐你在事件监听器中使用<code>passive:true</code>选项或者在script标签中写<code>async</code>属性的话，我希望这个系列的文章可以给你一些关于浏览器为什么需要这些信息来提供更快更流畅的用户体验的原因。</p>\n<h3 id=\"学习如何衡量性能\"><a href=\"#学习如何衡量性能\" class=\"headerlink\" title=\"学习如何衡量性能\"></a>学习如何衡量性能</h3><p>不同网站的性能调整可能会有所不同，你要自己衡量自己网站的性能并确定最适合提升你的网站性能的方案。 你可以查看Chrome DevTools团队的一些教程来学习如何才能<a href=\"https://developers.google.com/web/tools/chrome-devtools/speed/get-started\" target=\"_blank\" rel=\"noopener\">衡量自己网站的性能</a>。</p>\n<h3 id=\"为你的站点添加Feature-Policy\"><a href=\"#为你的站点添加Feature-Policy\" class=\"headerlink\" title=\"为你的站点添加Feature Policy\"></a>为你的站点添加Feature Policy</h3><p>如果你想更进一步，你可以了解一下<a href=\"https://developers.google.com/web/updates/2018/06/feature-policy\" target=\"_blank\" rel=\"noopener\">Feature Policy</a>这个新的Web平台功能，这个功能可以在你构建项目的时候提供一些保护让您的应用程序具有某些行为并防止你犯下错误。例如，如果你想确保你的应用代码不会阻塞页面的解析（parsing），你可以在同步脚本策略（synchronius scripts policy）中运行你的应用。具体做法是将<code>sync-script</code>设置为’none’，这样那些会阻塞页面解析的JavaScript代码会被禁止执行。这样做的好处是避免你的代码阻塞页面的解析，而且浏览器无须担心解析器（parser）暂停。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是所有和浏览器架构和运行原理相关的内容了，我们以后在开发web应用的时候，不应该只考虑代码的优雅性，还要多多从浏览器是如何解析运行我们的代码的方面进行思考，从而为用户提供更好的用户体验。</p>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt=\"\"></p>"},{"title":"窥探现代浏览器架构(二)","thumbnail":"/gallery/thumbnails/chrome.png","date":"2019-12-27T00:04:45.000Z","_content":"\n## 前言\n本文是笔者对[Mario Kosaka](https://developers.google.com/web/resources/contributors/kosamari)写的[inside look at modern web browser](https://developers.google.com/web/updates/2018/09/inside-browser-part2)系列文章的翻译。这里的翻译不是指直译，而是结合个人的理解将作者想表达的意思表达出来，而且会尽量补充一些相关的内容来帮助大家更好地理解。\n## 导航的时候都发生了什么\n这篇文章是探究Chrome内部工作原理的**四集系列文章**中的第二篇，在[上一篇](/2019/12/25/窥探现代浏览器架构-一/)文章中我们探讨了不同进程或者线程是如何负责浏览器各个不同部分的工作的。在这篇文章中，我们将会深入了解每个进程和线程是如何沟通协作来为我们呈现出网站内容的。\n\n让我们来看一个用户浏览网页最简单的情景：你在浏览器导航栏里面输入一个URL然后按下回车键，浏览器接着会从互联网上获取相关的数据并把网页展示出来。在本篇文章中，我们将会重点关注这个简单场景中网站数据请求以及浏览器在呈现网页之前做的准备工作 - 也就是导航（navigation）的过程。\n\n## 一切都从浏览器进程开始\n我们在上一篇文章[CPU，GPU，内存和多进程架构](/2019/12/25/窥探现代浏览器架构-一/)中提到，浏览器中tab外面发生的一切都是由浏览器进程（browser process）控制的。浏览器进程有很多负责不同工作的线程（worker thread），其中包括绘制浏览器顶部按钮和导航栏输入框等组件的UI线程（UI thread）、管理网络请求的网络线程（network thread）、以及控制文件读写的存储线程（storage thread）等。当你在导航栏里面输入一个URL的时候，其实就是UI线程在处理你的输入。\n![](/images/chrome/browserprocesses.png)\n<p align=\"center\">UI，网络和存储线程都是属于浏览器进程的</p>\n\n<!-- more-->\n\n## 一次简单的导航\n### 第一步：处理输入\n当用户开始在导航栏上面输入内容的时候，UI线程（UI thread）做的第一件事就是询问：“你输入的字符串是一些搜索的关键词（search query）还是一个URL地址呢？”。因为对于Chrome浏览器来说，导航栏的输入既可能是一个可以直接请求的域名还可能是用户想在搜索引擎（例如Google）里面搜索的关键词信息，所以当用户在导航栏输入信息的时候UI线程要进行一系列的解析来判定是将用户输入发送给搜索引擎还是直接请求你输入的站点资源。\n![](/images/chrome/input.png)\n<p align=\"center\">UI线程在询问输入的字符串是搜索关键词还是一个URL</p>\n\n### 第二步：开始导航\n当用户按下回车键的时候，UI线程会叫网络线程（network thread）初始化一个网络请求来获取站点的内容。这时候tab上会展示一个提示资源正在加载中的旋转圈圈，而且网络线程会进行一系列诸如DNS寻址以及为请求建立TLS连接的操作。\n![](/images/chrome/navstart.png)\n<p align=\"center\">UI线程告诉网络线程跳转到mysite.com</p>\n\n这时如果网络线程收到服务器的HTTP 301重定向响应，它就会告知UI线程进行重定向然后它会再次发起一个新的网络请求。\n\n### 第三步：读取响应\n网络线程在收到HTTP响应的主体（payload）流（stream）时，在必要的情况下它会先检查一下流的前几个字节以确定响应主体的具体媒体类型（MIME Type）。响应主体的媒体类型一般可以通过HTTP头部的Content-Type来确定，不过Content-Type有时候会缺失或者是错误的，这种情况下浏览器就要进行[MIME类型嗅探](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)来确定响应类型了。MIME类型嗅探并不是一件容易的事情，你可以从[Chrome的源代码](https://cs.chromium.org/chromium/src/net/base/mime_sniffer.cc?sq=package:chromium&dr=CS&l=5)的注释来了解不同浏览器是如何根据不同的Content-Type来判断出主体具体是属于哪个媒体类型的。\n![](/images/chrome/response.png)\n<p align=\"center\">响应的头部有Content-Type信息，而响应的主体有真实的数据</p>\n\n如果响应的主体是一个HTML文件，浏览器会将获取的响应数据交给渲染进程（renderer process）来进行下一步的工作。如果拿到的响应数据是一个压缩文件（zip file）或者其他类型的文件，响应数据就会交给下载管理器（download manager）来处理。\n![](/images/chrome/sniff.png)\n<p align=\"center\">网络线程在询问响应的数据是不是来自安全源的HTML文件</p>\n\n网络线程在把内容交给渲染进程之前还会对内容做[SafeBrowsing](https://safebrowsing.google.com/)检查。如果请求的域名或者响应的内容和某个已知的病毒网站相匹配，网络线程会给用户展示一个警告的页面。除此之外，网络线程还会做[CORB](https://www.chromium.org/Home/chromium-security/corb-for-developers)（**C**ross **O**rigin **R**ead **B**locking）检查来确定那些敏感的跨站数据不会被发送至渲染进程。\n\n### 第四步：寻找一个渲染进程（renderer process）\n在网络线程做完所有的检查后并且能够确定浏览器应该导航到该请求的站点，它就会告诉UI线程所有的数据都已经被准备好了。UI线程在收到网络线程的确认后会为这个网站寻找一个渲染进程（renderer process）来渲染界面。\n![](/images/chrome/findrenderer.png)\n<p align=\"center\">网络线程告诉UI线程去寻找一个渲染进程来渲染界面</p>\n\n由于网络请求可能需要长达几百毫秒的时间才能完成，为了缩短导航需要的时间，浏览器会在之前的一些步骤里面做一些优化。例如在第二步中当UI线程发送URL链接给网络线程后，它其实已经知晓它们要被导航到哪个站点了，所以在网络线程干活的时候，UI线程会主动地为这个网络请求启动一个渲染线程。如果一切顺利的话（没有重定向之类的东西出现），网络线程准备好数据后页面的渲染进程已经就准备好了，这就节省了新建渲染进程的时间。不过如果发生诸如网站被重定向到不同站点的情况，刚刚那个渲染进程就不能被使用了，它会被摒弃，一个新的渲染进程会被启动。\n\n### 第五步：提交（commit）导航\n到这一步的时候，数据和渲染进程都已经准备好了，浏览器进程（browser process）会通过IPC告诉渲染进程去提交本次导航（commit navigation）。除此之外浏览器进程还会将刚刚接收到的响应数据流传递给对应的渲染进程让它继续接收到来的HTML数据。一旦浏览器进程收到渲染线程的回复说导航已经被提交了（commit），导航这个过程就结束了，文档的加载阶段（document loading phase）会正式开始。\n\n到了这个时候，导航栏会被更新，安全指示符（security indicator）和站点设置UI（site settings UI）会展示新页面相关的站点信息。当前tab的回话历史（session history）也会被更新，这样当你点击浏览器的前进和后退按钮也可以导航到刚刚导航完的页面。为了方便你在关闭了tab或窗口（window）的时候还可以恢复当前tab和会话（session）内容，当前的会话历史会被保存在磁盘上面。\n![](/images/chrome/commit.png)\n<p align=\"center\">浏览器进程通过IPC来对渲染进程发起渲染页面的请求</p>\n\n### 额外步骤：初始加载完成（Initial load complete）\n当导航提交完成后，渲染进程开始着手加载资源以及渲染页面。我会在后面系列文章中讲述渲染进程渲染页面的具体细节。一旦渲染进程“完成”（finished）渲染，它会通过IPC告知浏览器进程（注意这发生在页面上所有帧（frames）的**onload**事件都已经被触发了而且对应的处理函数已经执行完成了的时候），然后UI线程就会停止导航栏上旋转的圈圈。\n\n我这里用到“完成”这个词，因为后面客户端的JavaScript还是可以继续加载资源和改变视图内容的。\n![](/images/chrome/loaded.png)\n<p align=\"center\">渲染进程通过IPC告诉浏览器进程页面已经加载完成了</p>\n\n## 导航到不同的站点\n一个最简单的导航情景已经描述完了！可是如果这时用户在导航栏上输入一个不一样的URL会发生什么呢？如果是这样，浏览器进程会重新执行一遍之前的那几个步骤来完成新站点的导航。不过在浏览器进程做这些事情之前，它需要让当前的渲染页面做一些收尾工作，具体就是询问一下当前的渲染进程需不需要处理一下[**beforeunload**](https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload)事件。\n\n**beforeunload**可以在用户重新导航或者关闭当前tab时给用户展示一个“你确定要离开当前页面吗？”的二次确认弹框。浏览器进程之所以要在重新导航的时候和当前渲染进程确认的原因是，当前页面发生的一切（包括页面的JavaScript执行）是不受它控制而是受渲染进程控制，所以它也不知道里面的具体情况。\n\n**注意：**不要随便给页面添加**beforeunload**事件监听，你定义的监听函数会在页面被重新导航的时候执行，因此这会增加重导航的时延。beforeunload事件监听函数只有在十分必要的时候才能被添加，例如用户在页面上输入了数据，并且这些数据会随着页面消失而消失。\n![](/images/chrome/beforeunload.png)\n<p align=\"center\">浏览器进程通过IPC告诉渲染进程它将要离开当前页面导航到新的页面了</p>\n\n如果重新导航是在页面内被发起的呢？例如用户点击了页面的一个链接或者客户端的JavaScript代码执行了诸如**window.location = \"https://newsite.com\"**的代码。这种情况下，渲染进程会自己先检查一个它有没有注册**beforeunload**事件的监听函数，如果有的话就执行，执行完后发生的事情就和之前的情况没什么区别了，唯一的不同就是这次的导航请求是由渲染进程给浏览器进程发起的。\n\n如果是重新导航到不同站点（different site）的话，会有另外一个渲染进程被启动来完成这次重导航，而当前的渲染进程会继续处理现在页面的一些收尾工作，例如**unload**事件的监听函数执行。[Overview of page lifecycle states](https://developers.google.com/web/updates/2018/07/page-lifecycle-api#overview_of_page_lifecycle_states_and_events)这篇文章会介绍页面所有的生命周期状态，[the Page Lifecycle API](https://developers.google.com/web/updates/2018/07/page-lifecycle-api)会教你如何在页面中监听页面状态的变化。\n![](/images/chrome/unload.png)\n<p align=\"center\">浏览器进程告诉新的渲染进程去渲染新的页面并且告诉当前的渲染进程进行收尾工作</p>\n\n## Service Worker的情景\n这个导航过程最近发生的一个改变是引进了[service worker](https://developers.google.com/web/fundamentals/primers/service-workers/)的概念。因为Service worker可以用来写网站的网络代理（network proxy），所以开发者可以对网络请求有更多的控制权，例如决定哪些数据缓存在本地以及哪些数据需要从网络上面重新获取等等。如果开发者在service worker里设置了当前的页面内容从缓存里面获取，当前页面的渲染就不需要重新发送网络请求了，这就大大加快了整个导航的过程。\n\n这里要重点留意的是service worker其实只是一些跑在渲染进程里面的JavaScript代码。那么问题来了，当导航开始的时候，浏览器进程是如何判断要导航的站点存不存在对应的service worker并启动一个渲染进程去执行它的呢？\n\n其实service worker在注册的时候，它的作用范围（scope）会被记录下来（你可以通过文章[The Service Worker Lifecycle](https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle)了解更多关于service worker作用范围的信息）。在导航开始的时候，网络线程会根据请求的域名在已经注册的service worker作用范围里面寻找有没有对应的service worker。如果有命中该URL的service worker，UI线程就会为这个service worker启动一个渲染进程（renderer process）来执行它的代码。Service worker既可能使用之前缓存的数据也可能发起新的网络请求。\n![](/images/chrome/scope_lookup.png)\n<p align=\"center\">网络线程会在收到导航任务后寻找有没有对应的service worker</p>\n\n![](/images/chrome/serviceworker.png)\n<p align=\"center\">UI线程会启动一个渲染进程来运行找到的service worker代码，代码具体是由渲染进程里面的工作线程（worker thread）执行</p>\n\n## 导航预加载 - Navigation Preload\n在上面的例子中，你应该可以感受到如果启动的service worker最后还是决定发送网络请求的话，浏览器进程和渲染进程这一来一回的通信包括service worker启动的时间其实增加了页面导航的时延。[导航预加载](https://developers.google.com/web/updates/2017/02/navigation-preload)就是一种通过在service worker启动的时候并行加载对应资源的方式来加快整个导航过程效率的技术。预加载资源的请求头会有一些特殊的标志来让服务器决定是发送全新的内容给客户端还是只发送更新了的数据给客户端。\n![](/images/chrome/navpreload.png)\n<p align=\"center\">UI线程在启动一个渲染进程去运行service worker代码的同时会并行发送网络请求</p>\n\n## 总结\n在本篇文章中，我们讨论了导航具体都发生了哪些事情以及浏览器优化导航效率采取的一些技术方案，在下一篇文章中我们将会深入了解浏览器是如何解析我们的HTML/CSS/JavaScript来呈现出网页内容的。\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","source":"_posts/窥探现代浏览器架构-二.md","raw":"---\ntitle: 窥探现代浏览器架构(二)\nthumbnail: /gallery/thumbnails/chrome.png\ndate: 2019-12-27 08:04:45\ntags:\n---\n\n## 前言\n本文是笔者对[Mario Kosaka](https://developers.google.com/web/resources/contributors/kosamari)写的[inside look at modern web browser](https://developers.google.com/web/updates/2018/09/inside-browser-part2)系列文章的翻译。这里的翻译不是指直译，而是结合个人的理解将作者想表达的意思表达出来，而且会尽量补充一些相关的内容来帮助大家更好地理解。\n## 导航的时候都发生了什么\n这篇文章是探究Chrome内部工作原理的**四集系列文章**中的第二篇，在[上一篇](/2019/12/25/窥探现代浏览器架构-一/)文章中我们探讨了不同进程或者线程是如何负责浏览器各个不同部分的工作的。在这篇文章中，我们将会深入了解每个进程和线程是如何沟通协作来为我们呈现出网站内容的。\n\n让我们来看一个用户浏览网页最简单的情景：你在浏览器导航栏里面输入一个URL然后按下回车键，浏览器接着会从互联网上获取相关的数据并把网页展示出来。在本篇文章中，我们将会重点关注这个简单场景中网站数据请求以及浏览器在呈现网页之前做的准备工作 - 也就是导航（navigation）的过程。\n\n## 一切都从浏览器进程开始\n我们在上一篇文章[CPU，GPU，内存和多进程架构](/2019/12/25/窥探现代浏览器架构-一/)中提到，浏览器中tab外面发生的一切都是由浏览器进程（browser process）控制的。浏览器进程有很多负责不同工作的线程（worker thread），其中包括绘制浏览器顶部按钮和导航栏输入框等组件的UI线程（UI thread）、管理网络请求的网络线程（network thread）、以及控制文件读写的存储线程（storage thread）等。当你在导航栏里面输入一个URL的时候，其实就是UI线程在处理你的输入。\n![](/images/chrome/browserprocesses.png)\n<p align=\"center\">UI，网络和存储线程都是属于浏览器进程的</p>\n\n<!-- more-->\n\n## 一次简单的导航\n### 第一步：处理输入\n当用户开始在导航栏上面输入内容的时候，UI线程（UI thread）做的第一件事就是询问：“你输入的字符串是一些搜索的关键词（search query）还是一个URL地址呢？”。因为对于Chrome浏览器来说，导航栏的输入既可能是一个可以直接请求的域名还可能是用户想在搜索引擎（例如Google）里面搜索的关键词信息，所以当用户在导航栏输入信息的时候UI线程要进行一系列的解析来判定是将用户输入发送给搜索引擎还是直接请求你输入的站点资源。\n![](/images/chrome/input.png)\n<p align=\"center\">UI线程在询问输入的字符串是搜索关键词还是一个URL</p>\n\n### 第二步：开始导航\n当用户按下回车键的时候，UI线程会叫网络线程（network thread）初始化一个网络请求来获取站点的内容。这时候tab上会展示一个提示资源正在加载中的旋转圈圈，而且网络线程会进行一系列诸如DNS寻址以及为请求建立TLS连接的操作。\n![](/images/chrome/navstart.png)\n<p align=\"center\">UI线程告诉网络线程跳转到mysite.com</p>\n\n这时如果网络线程收到服务器的HTTP 301重定向响应，它就会告知UI线程进行重定向然后它会再次发起一个新的网络请求。\n\n### 第三步：读取响应\n网络线程在收到HTTP响应的主体（payload）流（stream）时，在必要的情况下它会先检查一下流的前几个字节以确定响应主体的具体媒体类型（MIME Type）。响应主体的媒体类型一般可以通过HTTP头部的Content-Type来确定，不过Content-Type有时候会缺失或者是错误的，这种情况下浏览器就要进行[MIME类型嗅探](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)来确定响应类型了。MIME类型嗅探并不是一件容易的事情，你可以从[Chrome的源代码](https://cs.chromium.org/chromium/src/net/base/mime_sniffer.cc?sq=package:chromium&dr=CS&l=5)的注释来了解不同浏览器是如何根据不同的Content-Type来判断出主体具体是属于哪个媒体类型的。\n![](/images/chrome/response.png)\n<p align=\"center\">响应的头部有Content-Type信息，而响应的主体有真实的数据</p>\n\n如果响应的主体是一个HTML文件，浏览器会将获取的响应数据交给渲染进程（renderer process）来进行下一步的工作。如果拿到的响应数据是一个压缩文件（zip file）或者其他类型的文件，响应数据就会交给下载管理器（download manager）来处理。\n![](/images/chrome/sniff.png)\n<p align=\"center\">网络线程在询问响应的数据是不是来自安全源的HTML文件</p>\n\n网络线程在把内容交给渲染进程之前还会对内容做[SafeBrowsing](https://safebrowsing.google.com/)检查。如果请求的域名或者响应的内容和某个已知的病毒网站相匹配，网络线程会给用户展示一个警告的页面。除此之外，网络线程还会做[CORB](https://www.chromium.org/Home/chromium-security/corb-for-developers)（**C**ross **O**rigin **R**ead **B**locking）检查来确定那些敏感的跨站数据不会被发送至渲染进程。\n\n### 第四步：寻找一个渲染进程（renderer process）\n在网络线程做完所有的检查后并且能够确定浏览器应该导航到该请求的站点，它就会告诉UI线程所有的数据都已经被准备好了。UI线程在收到网络线程的确认后会为这个网站寻找一个渲染进程（renderer process）来渲染界面。\n![](/images/chrome/findrenderer.png)\n<p align=\"center\">网络线程告诉UI线程去寻找一个渲染进程来渲染界面</p>\n\n由于网络请求可能需要长达几百毫秒的时间才能完成，为了缩短导航需要的时间，浏览器会在之前的一些步骤里面做一些优化。例如在第二步中当UI线程发送URL链接给网络线程后，它其实已经知晓它们要被导航到哪个站点了，所以在网络线程干活的时候，UI线程会主动地为这个网络请求启动一个渲染线程。如果一切顺利的话（没有重定向之类的东西出现），网络线程准备好数据后页面的渲染进程已经就准备好了，这就节省了新建渲染进程的时间。不过如果发生诸如网站被重定向到不同站点的情况，刚刚那个渲染进程就不能被使用了，它会被摒弃，一个新的渲染进程会被启动。\n\n### 第五步：提交（commit）导航\n到这一步的时候，数据和渲染进程都已经准备好了，浏览器进程（browser process）会通过IPC告诉渲染进程去提交本次导航（commit navigation）。除此之外浏览器进程还会将刚刚接收到的响应数据流传递给对应的渲染进程让它继续接收到来的HTML数据。一旦浏览器进程收到渲染线程的回复说导航已经被提交了（commit），导航这个过程就结束了，文档的加载阶段（document loading phase）会正式开始。\n\n到了这个时候，导航栏会被更新，安全指示符（security indicator）和站点设置UI（site settings UI）会展示新页面相关的站点信息。当前tab的回话历史（session history）也会被更新，这样当你点击浏览器的前进和后退按钮也可以导航到刚刚导航完的页面。为了方便你在关闭了tab或窗口（window）的时候还可以恢复当前tab和会话（session）内容，当前的会话历史会被保存在磁盘上面。\n![](/images/chrome/commit.png)\n<p align=\"center\">浏览器进程通过IPC来对渲染进程发起渲染页面的请求</p>\n\n### 额外步骤：初始加载完成（Initial load complete）\n当导航提交完成后，渲染进程开始着手加载资源以及渲染页面。我会在后面系列文章中讲述渲染进程渲染页面的具体细节。一旦渲染进程“完成”（finished）渲染，它会通过IPC告知浏览器进程（注意这发生在页面上所有帧（frames）的**onload**事件都已经被触发了而且对应的处理函数已经执行完成了的时候），然后UI线程就会停止导航栏上旋转的圈圈。\n\n我这里用到“完成”这个词，因为后面客户端的JavaScript还是可以继续加载资源和改变视图内容的。\n![](/images/chrome/loaded.png)\n<p align=\"center\">渲染进程通过IPC告诉浏览器进程页面已经加载完成了</p>\n\n## 导航到不同的站点\n一个最简单的导航情景已经描述完了！可是如果这时用户在导航栏上输入一个不一样的URL会发生什么呢？如果是这样，浏览器进程会重新执行一遍之前的那几个步骤来完成新站点的导航。不过在浏览器进程做这些事情之前，它需要让当前的渲染页面做一些收尾工作，具体就是询问一下当前的渲染进程需不需要处理一下[**beforeunload**](https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload)事件。\n\n**beforeunload**可以在用户重新导航或者关闭当前tab时给用户展示一个“你确定要离开当前页面吗？”的二次确认弹框。浏览器进程之所以要在重新导航的时候和当前渲染进程确认的原因是，当前页面发生的一切（包括页面的JavaScript执行）是不受它控制而是受渲染进程控制，所以它也不知道里面的具体情况。\n\n**注意：**不要随便给页面添加**beforeunload**事件监听，你定义的监听函数会在页面被重新导航的时候执行，因此这会增加重导航的时延。beforeunload事件监听函数只有在十分必要的时候才能被添加，例如用户在页面上输入了数据，并且这些数据会随着页面消失而消失。\n![](/images/chrome/beforeunload.png)\n<p align=\"center\">浏览器进程通过IPC告诉渲染进程它将要离开当前页面导航到新的页面了</p>\n\n如果重新导航是在页面内被发起的呢？例如用户点击了页面的一个链接或者客户端的JavaScript代码执行了诸如**window.location = \"https://newsite.com\"**的代码。这种情况下，渲染进程会自己先检查一个它有没有注册**beforeunload**事件的监听函数，如果有的话就执行，执行完后发生的事情就和之前的情况没什么区别了，唯一的不同就是这次的导航请求是由渲染进程给浏览器进程发起的。\n\n如果是重新导航到不同站点（different site）的话，会有另外一个渲染进程被启动来完成这次重导航，而当前的渲染进程会继续处理现在页面的一些收尾工作，例如**unload**事件的监听函数执行。[Overview of page lifecycle states](https://developers.google.com/web/updates/2018/07/page-lifecycle-api#overview_of_page_lifecycle_states_and_events)这篇文章会介绍页面所有的生命周期状态，[the Page Lifecycle API](https://developers.google.com/web/updates/2018/07/page-lifecycle-api)会教你如何在页面中监听页面状态的变化。\n![](/images/chrome/unload.png)\n<p align=\"center\">浏览器进程告诉新的渲染进程去渲染新的页面并且告诉当前的渲染进程进行收尾工作</p>\n\n## Service Worker的情景\n这个导航过程最近发生的一个改变是引进了[service worker](https://developers.google.com/web/fundamentals/primers/service-workers/)的概念。因为Service worker可以用来写网站的网络代理（network proxy），所以开发者可以对网络请求有更多的控制权，例如决定哪些数据缓存在本地以及哪些数据需要从网络上面重新获取等等。如果开发者在service worker里设置了当前的页面内容从缓存里面获取，当前页面的渲染就不需要重新发送网络请求了，这就大大加快了整个导航的过程。\n\n这里要重点留意的是service worker其实只是一些跑在渲染进程里面的JavaScript代码。那么问题来了，当导航开始的时候，浏览器进程是如何判断要导航的站点存不存在对应的service worker并启动一个渲染进程去执行它的呢？\n\n其实service worker在注册的时候，它的作用范围（scope）会被记录下来（你可以通过文章[The Service Worker Lifecycle](https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle)了解更多关于service worker作用范围的信息）。在导航开始的时候，网络线程会根据请求的域名在已经注册的service worker作用范围里面寻找有没有对应的service worker。如果有命中该URL的service worker，UI线程就会为这个service worker启动一个渲染进程（renderer process）来执行它的代码。Service worker既可能使用之前缓存的数据也可能发起新的网络请求。\n![](/images/chrome/scope_lookup.png)\n<p align=\"center\">网络线程会在收到导航任务后寻找有没有对应的service worker</p>\n\n![](/images/chrome/serviceworker.png)\n<p align=\"center\">UI线程会启动一个渲染进程来运行找到的service worker代码，代码具体是由渲染进程里面的工作线程（worker thread）执行</p>\n\n## 导航预加载 - Navigation Preload\n在上面的例子中，你应该可以感受到如果启动的service worker最后还是决定发送网络请求的话，浏览器进程和渲染进程这一来一回的通信包括service worker启动的时间其实增加了页面导航的时延。[导航预加载](https://developers.google.com/web/updates/2017/02/navigation-preload)就是一种通过在service worker启动的时候并行加载对应资源的方式来加快整个导航过程效率的技术。预加载资源的请求头会有一些特殊的标志来让服务器决定是发送全新的内容给客户端还是只发送更新了的数据给客户端。\n![](/images/chrome/navpreload.png)\n<p align=\"center\">UI线程在启动一个渲染进程去运行service worker代码的同时会并行发送网络请求</p>\n\n## 总结\n在本篇文章中，我们讨论了导航具体都发生了哪些事情以及浏览器优化导航效率采取的一些技术方案，在下一篇文章中我们将会深入了解浏览器是如何解析我们的HTML/CSS/JavaScript来呈现出网页内容的。\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n![](/images/wechat_qr.jpg)\n","slug":"窥探现代浏览器架构-二","published":1,"updated":"2022-03-07T11:18:25.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0gqf6fx000xucnx6zw6h7av","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文是笔者对<a href=\"https://developers.google.com/web/resources/contributors/kosamari\" target=\"_blank\" rel=\"noopener\">Mario Kosaka</a>写的<a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part2\" target=\"_blank\" rel=\"noopener\">inside look at modern web browser</a>系列文章的翻译。这里的翻译不是指直译，而是结合个人的理解将作者想表达的意思表达出来，而且会尽量补充一些相关的内容来帮助大家更好地理解。</p>\n<h2 id=\"导航的时候都发生了什么\"><a href=\"#导航的时候都发生了什么\" class=\"headerlink\" title=\"导航的时候都发生了什么\"></a>导航的时候都发生了什么</h2><p>这篇文章是探究Chrome内部工作原理的<strong>四集系列文章</strong>中的第二篇，在<a href=\"/2019/12/25/窥探现代浏览器架构-一/\">上一篇</a>文章中我们探讨了不同进程或者线程是如何负责浏览器各个不同部分的工作的。在这篇文章中，我们将会深入了解每个进程和线程是如何沟通协作来为我们呈现出网站内容的。</p>\n<p>让我们来看一个用户浏览网页最简单的情景：你在浏览器导航栏里面输入一个URL然后按下回车键，浏览器接着会从互联网上获取相关的数据并把网页展示出来。在本篇文章中，我们将会重点关注这个简单场景中网站数据请求以及浏览器在呈现网页之前做的准备工作 - 也就是导航（navigation）的过程。</p>\n<h2 id=\"一切都从浏览器进程开始\"><a href=\"#一切都从浏览器进程开始\" class=\"headerlink\" title=\"一切都从浏览器进程开始\"></a>一切都从浏览器进程开始</h2><p>我们在上一篇文章<a href=\"/2019/12/25/窥探现代浏览器架构-一/\">CPU，GPU，内存和多进程架构</a>中提到，浏览器中tab外面发生的一切都是由浏览器进程（browser process）控制的。浏览器进程有很多负责不同工作的线程（worker thread），其中包括绘制浏览器顶部按钮和导航栏输入框等组件的UI线程（UI thread）、管理网络请求的网络线程（network thread）、以及控制文件读写的存储线程（storage thread）等。当你在导航栏里面输入一个URL的时候，其实就是UI线程在处理你的输入。<br><img src=\"/images/chrome/browserprocesses.png\" alt></p>\n<p align=\"center\">UI，网络和存储线程都是属于浏览器进程的</p>\n\n<a id=\"more\"></a>\n\n<h2 id=\"一次简单的导航\"><a href=\"#一次简单的导航\" class=\"headerlink\" title=\"一次简单的导航\"></a>一次简单的导航</h2><h3 id=\"第一步：处理输入\"><a href=\"#第一步：处理输入\" class=\"headerlink\" title=\"第一步：处理输入\"></a>第一步：处理输入</h3><p>当用户开始在导航栏上面输入内容的时候，UI线程（UI thread）做的第一件事就是询问：“你输入的字符串是一些搜索的关键词（search query）还是一个URL地址呢？”。因为对于Chrome浏览器来说，导航栏的输入既可能是一个可以直接请求的域名还可能是用户想在搜索引擎（例如Google）里面搜索的关键词信息，所以当用户在导航栏输入信息的时候UI线程要进行一系列的解析来判定是将用户输入发送给搜索引擎还是直接请求你输入的站点资源。<br><img src=\"/images/chrome/input.png\" alt></p>\n<p align=\"center\">UI线程在询问输入的字符串是搜索关键词还是一个URL</p>\n\n<h3 id=\"第二步：开始导航\"><a href=\"#第二步：开始导航\" class=\"headerlink\" title=\"第二步：开始导航\"></a>第二步：开始导航</h3><p>当用户按下回车键的时候，UI线程会叫网络线程（network thread）初始化一个网络请求来获取站点的内容。这时候tab上会展示一个提示资源正在加载中的旋转圈圈，而且网络线程会进行一系列诸如DNS寻址以及为请求建立TLS连接的操作。<br><img src=\"/images/chrome/navstart.png\" alt></p>\n<p align=\"center\">UI线程告诉网络线程跳转到mysite.com</p>\n\n<p>这时如果网络线程收到服务器的HTTP 301重定向响应，它就会告知UI线程进行重定向然后它会再次发起一个新的网络请求。</p>\n<h3 id=\"第三步：读取响应\"><a href=\"#第三步：读取响应\" class=\"headerlink\" title=\"第三步：读取响应\"></a>第三步：读取响应</h3><p>网络线程在收到HTTP响应的主体（payload）流（stream）时，在必要的情况下它会先检查一下流的前几个字节以确定响应主体的具体媒体类型（MIME Type）。响应主体的媒体类型一般可以通过HTTP头部的Content-Type来确定，不过Content-Type有时候会缺失或者是错误的，这种情况下浏览器就要进行<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\" target=\"_blank\" rel=\"noopener\">MIME类型嗅探</a>来确定响应类型了。MIME类型嗅探并不是一件容易的事情，你可以从<a href=\"https://cs.chromium.org/chromium/src/net/base/mime_sniffer.cc?sq=package:chromium&dr=CS&l=5\" target=\"_blank\" rel=\"noopener\">Chrome的源代码</a>的注释来了解不同浏览器是如何根据不同的Content-Type来判断出主体具体是属于哪个媒体类型的。<br><img src=\"/images/chrome/response.png\" alt></p>\n<p align=\"center\">响应的头部有Content-Type信息，而响应的主体有真实的数据</p>\n\n<p>如果响应的主体是一个HTML文件，浏览器会将获取的响应数据交给渲染进程（renderer process）来进行下一步的工作。如果拿到的响应数据是一个压缩文件（zip file）或者其他类型的文件，响应数据就会交给下载管理器（download manager）来处理。<br><img src=\"/images/chrome/sniff.png\" alt></p>\n<p align=\"center\">网络线程在询问响应的数据是不是来自安全源的HTML文件</p>\n\n<p>网络线程在把内容交给渲染进程之前还会对内容做<a href=\"https://safebrowsing.google.com/\" target=\"_blank\" rel=\"noopener\">SafeBrowsing</a>检查。如果请求的域名或者响应的内容和某个已知的病毒网站相匹配，网络线程会给用户展示一个警告的页面。除此之外，网络线程还会做<a href=\"https://www.chromium.org/Home/chromium-security/corb-for-developers\" target=\"_blank\" rel=\"noopener\">CORB</a>（<strong>C</strong>ross <strong>O</strong>rigin <strong>R</strong>ead <strong>B</strong>locking）检查来确定那些敏感的跨站数据不会被发送至渲染进程。</p>\n<h3 id=\"第四步：寻找一个渲染进程（renderer-process）\"><a href=\"#第四步：寻找一个渲染进程（renderer-process）\" class=\"headerlink\" title=\"第四步：寻找一个渲染进程（renderer process）\"></a>第四步：寻找一个渲染进程（renderer process）</h3><p>在网络线程做完所有的检查后并且能够确定浏览器应该导航到该请求的站点，它就会告诉UI线程所有的数据都已经被准备好了。UI线程在收到网络线程的确认后会为这个网站寻找一个渲染进程（renderer process）来渲染界面。<br><img src=\"/images/chrome/findrenderer.png\" alt></p>\n<p align=\"center\">网络线程告诉UI线程去寻找一个渲染进程来渲染界面</p>\n\n<p>由于网络请求可能需要长达几百毫秒的时间才能完成，为了缩短导航需要的时间，浏览器会在之前的一些步骤里面做一些优化。例如在第二步中当UI线程发送URL链接给网络线程后，它其实已经知晓它们要被导航到哪个站点了，所以在网络线程干活的时候，UI线程会主动地为这个网络请求启动一个渲染线程。如果一切顺利的话（没有重定向之类的东西出现），网络线程准备好数据后页面的渲染进程已经就准备好了，这就节省了新建渲染进程的时间。不过如果发生诸如网站被重定向到不同站点的情况，刚刚那个渲染进程就不能被使用了，它会被摒弃，一个新的渲染进程会被启动。</p>\n<h3 id=\"第五步：提交（commit）导航\"><a href=\"#第五步：提交（commit）导航\" class=\"headerlink\" title=\"第五步：提交（commit）导航\"></a>第五步：提交（commit）导航</h3><p>到这一步的时候，数据和渲染进程都已经准备好了，浏览器进程（browser process）会通过IPC告诉渲染进程去提交本次导航（commit navigation）。除此之外浏览器进程还会将刚刚接收到的响应数据流传递给对应的渲染进程让它继续接收到来的HTML数据。一旦浏览器进程收到渲染线程的回复说导航已经被提交了（commit），导航这个过程就结束了，文档的加载阶段（document loading phase）会正式开始。</p>\n<p>到了这个时候，导航栏会被更新，安全指示符（security indicator）和站点设置UI（site settings UI）会展示新页面相关的站点信息。当前tab的回话历史（session history）也会被更新，这样当你点击浏览器的前进和后退按钮也可以导航到刚刚导航完的页面。为了方便你在关闭了tab或窗口（window）的时候还可以恢复当前tab和会话（session）内容，当前的会话历史会被保存在磁盘上面。<br><img src=\"/images/chrome/commit.png\" alt></p>\n<p align=\"center\">浏览器进程通过IPC来对渲染进程发起渲染页面的请求</p>\n\n<h3 id=\"额外步骤：初始加载完成（Initial-load-complete）\"><a href=\"#额外步骤：初始加载完成（Initial-load-complete）\" class=\"headerlink\" title=\"额外步骤：初始加载完成（Initial load complete）\"></a>额外步骤：初始加载完成（Initial load complete）</h3><p>当导航提交完成后，渲染进程开始着手加载资源以及渲染页面。我会在后面系列文章中讲述渲染进程渲染页面的具体细节。一旦渲染进程“完成”（finished）渲染，它会通过IPC告知浏览器进程（注意这发生在页面上所有帧（frames）的<strong>onload</strong>事件都已经被触发了而且对应的处理函数已经执行完成了的时候），然后UI线程就会停止导航栏上旋转的圈圈。</p>\n<p>我这里用到“完成”这个词，因为后面客户端的JavaScript还是可以继续加载资源和改变视图内容的。<br><img src=\"/images/chrome/loaded.png\" alt></p>\n<p align=\"center\">渲染进程通过IPC告诉浏览器进程页面已经加载完成了</p>\n\n<h2 id=\"导航到不同的站点\"><a href=\"#导航到不同的站点\" class=\"headerlink\" title=\"导航到不同的站点\"></a>导航到不同的站点</h2><p>一个最简单的导航情景已经描述完了！可是如果这时用户在导航栏上输入一个不一样的URL会发生什么呢？如果是这样，浏览器进程会重新执行一遍之前的那几个步骤来完成新站点的导航。不过在浏览器进程做这些事情之前，它需要让当前的渲染页面做一些收尾工作，具体就是询问一下当前的渲染进程需不需要处理一下<a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload\" target=\"_blank\" rel=\"noopener\"><strong>beforeunload</strong></a>事件。</p>\n<p><strong>beforeunload</strong>可以在用户重新导航或者关闭当前tab时给用户展示一个“你确定要离开当前页面吗？”的二次确认弹框。浏览器进程之所以要在重新导航的时候和当前渲染进程确认的原因是，当前页面发生的一切（包括页面的JavaScript执行）是不受它控制而是受渲染进程控制，所以它也不知道里面的具体情况。</p>\n<p><strong>注意：</strong>不要随便给页面添加<strong>beforeunload</strong>事件监听，你定义的监听函数会在页面被重新导航的时候执行，因此这会增加重导航的时延。beforeunload事件监听函数只有在十分必要的时候才能被添加，例如用户在页面上输入了数据，并且这些数据会随着页面消失而消失。<br><img src=\"/images/chrome/beforeunload.png\" alt></p>\n<p align=\"center\">浏览器进程通过IPC告诉渲染进程它将要离开当前页面导航到新的页面了</p>\n\n<p>如果重新导航是在页面内被发起的呢？例如用户点击了页面的一个链接或者客户端的JavaScript代码执行了诸如<strong>window.location = “<a href=\"https://newsite.com&quot;\" target=\"_blank\" rel=\"noopener\">https://newsite.com&quot;</a></strong>的代码。这种情况下，渲染进程会自己先检查一个它有没有注册<strong>beforeunload</strong>事件的监听函数，如果有的话就执行，执行完后发生的事情就和之前的情况没什么区别了，唯一的不同就是这次的导航请求是由渲染进程给浏览器进程发起的。</p>\n<p>如果是重新导航到不同站点（different site）的话，会有另外一个渲染进程被启动来完成这次重导航，而当前的渲染进程会继续处理现在页面的一些收尾工作，例如<strong>unload</strong>事件的监听函数执行。<a href=\"https://developers.google.com/web/updates/2018/07/page-lifecycle-api#overview_of_page_lifecycle_states_and_events\" target=\"_blank\" rel=\"noopener\">Overview of page lifecycle states</a>这篇文章会介绍页面所有的生命周期状态，<a href=\"https://developers.google.com/web/updates/2018/07/page-lifecycle-api\" target=\"_blank\" rel=\"noopener\">the Page Lifecycle API</a>会教你如何在页面中监听页面状态的变化。<br><img src=\"/images/chrome/unload.png\" alt></p>\n<p align=\"center\">浏览器进程告诉新的渲染进程去渲染新的页面并且告诉当前的渲染进程进行收尾工作</p>\n\n<h2 id=\"Service-Worker的情景\"><a href=\"#Service-Worker的情景\" class=\"headerlink\" title=\"Service Worker的情景\"></a>Service Worker的情景</h2><p>这个导航过程最近发生的一个改变是引进了<a href=\"https://developers.google.com/web/fundamentals/primers/service-workers/\" target=\"_blank\" rel=\"noopener\">service worker</a>的概念。因为Service worker可以用来写网站的网络代理（network proxy），所以开发者可以对网络请求有更多的控制权，例如决定哪些数据缓存在本地以及哪些数据需要从网络上面重新获取等等。如果开发者在service worker里设置了当前的页面内容从缓存里面获取，当前页面的渲染就不需要重新发送网络请求了，这就大大加快了整个导航的过程。</p>\n<p>这里要重点留意的是service worker其实只是一些跑在渲染进程里面的JavaScript代码。那么问题来了，当导航开始的时候，浏览器进程是如何判断要导航的站点存不存在对应的service worker并启动一个渲染进程去执行它的呢？</p>\n<p>其实service worker在注册的时候，它的作用范围（scope）会被记录下来（你可以通过文章<a href=\"https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle\" target=\"_blank\" rel=\"noopener\">The Service Worker Lifecycle</a>了解更多关于service worker作用范围的信息）。在导航开始的时候，网络线程会根据请求的域名在已经注册的service worker作用范围里面寻找有没有对应的service worker。如果有命中该URL的service worker，UI线程就会为这个service worker启动一个渲染进程（renderer process）来执行它的代码。Service worker既可能使用之前缓存的数据也可能发起新的网络请求。<br><img src=\"/images/chrome/scope_lookup.png\" alt></p>\n<p align=\"center\">网络线程会在收到导航任务后寻找有没有对应的service worker</p>\n\n<p><img src=\"/images/chrome/serviceworker.png\" alt></p>\n<p align=\"center\">UI线程会启动一个渲染进程来运行找到的service worker代码，代码具体是由渲染进程里面的工作线程（worker thread）执行</p>\n\n<h2 id=\"导航预加载-Navigation-Preload\"><a href=\"#导航预加载-Navigation-Preload\" class=\"headerlink\" title=\"导航预加载 - Navigation Preload\"></a>导航预加载 - Navigation Preload</h2><p>在上面的例子中，你应该可以感受到如果启动的service worker最后还是决定发送网络请求的话，浏览器进程和渲染进程这一来一回的通信包括service worker启动的时间其实增加了页面导航的时延。<a href=\"https://developers.google.com/web/updates/2017/02/navigation-preload\" target=\"_blank\" rel=\"noopener\">导航预加载</a>就是一种通过在service worker启动的时候并行加载对应资源的方式来加快整个导航过程效率的技术。预加载资源的请求头会有一些特殊的标志来让服务器决定是发送全新的内容给客户端还是只发送更新了的数据给客户端。<br><img src=\"/images/chrome/navpreload.png\" alt></p>\n<p align=\"center\">UI线程在启动一个渲染进程去运行service worker代码的同时会并行发送网络请求</p>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在本篇文章中，我们讨论了导航具体都发生了哪些事情以及浏览器优化导航效率采取的一些技术方案，在下一篇文章中我们将会深入了解浏览器是如何解析我们的HTML/CSS/JavaScript来呈现出网页内容的。</p>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文是笔者对<a href=\"https://developers.google.com/web/resources/contributors/kosamari\" target=\"_blank\" rel=\"noopener\">Mario Kosaka</a>写的<a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part2\" target=\"_blank\" rel=\"noopener\">inside look at modern web browser</a>系列文章的翻译。这里的翻译不是指直译，而是结合个人的理解将作者想表达的意思表达出来，而且会尽量补充一些相关的内容来帮助大家更好地理解。</p>\n<h2 id=\"导航的时候都发生了什么\"><a href=\"#导航的时候都发生了什么\" class=\"headerlink\" title=\"导航的时候都发生了什么\"></a>导航的时候都发生了什么</h2><p>这篇文章是探究Chrome内部工作原理的<strong>四集系列文章</strong>中的第二篇，在<a href=\"/2019/12/25/窥探现代浏览器架构-一/\">上一篇</a>文章中我们探讨了不同进程或者线程是如何负责浏览器各个不同部分的工作的。在这篇文章中，我们将会深入了解每个进程和线程是如何沟通协作来为我们呈现出网站内容的。</p>\n<p>让我们来看一个用户浏览网页最简单的情景：你在浏览器导航栏里面输入一个URL然后按下回车键，浏览器接着会从互联网上获取相关的数据并把网页展示出来。在本篇文章中，我们将会重点关注这个简单场景中网站数据请求以及浏览器在呈现网页之前做的准备工作 - 也就是导航（navigation）的过程。</p>\n<h2 id=\"一切都从浏览器进程开始\"><a href=\"#一切都从浏览器进程开始\" class=\"headerlink\" title=\"一切都从浏览器进程开始\"></a>一切都从浏览器进程开始</h2><p>我们在上一篇文章<a href=\"/2019/12/25/窥探现代浏览器架构-一/\">CPU，GPU，内存和多进程架构</a>中提到，浏览器中tab外面发生的一切都是由浏览器进程（browser process）控制的。浏览器进程有很多负责不同工作的线程（worker thread），其中包括绘制浏览器顶部按钮和导航栏输入框等组件的UI线程（UI thread）、管理网络请求的网络线程（network thread）、以及控制文件读写的存储线程（storage thread）等。当你在导航栏里面输入一个URL的时候，其实就是UI线程在处理你的输入。<br><img src=\"/images/chrome/browserprocesses.png\" alt></p>\n<p align=\"center\">UI，网络和存储线程都是属于浏览器进程的</p>","more":"<h2 id=\"一次简单的导航\"><a href=\"#一次简单的导航\" class=\"headerlink\" title=\"一次简单的导航\"></a>一次简单的导航</h2><h3 id=\"第一步：处理输入\"><a href=\"#第一步：处理输入\" class=\"headerlink\" title=\"第一步：处理输入\"></a>第一步：处理输入</h3><p>当用户开始在导航栏上面输入内容的时候，UI线程（UI thread）做的第一件事就是询问：“你输入的字符串是一些搜索的关键词（search query）还是一个URL地址呢？”。因为对于Chrome浏览器来说，导航栏的输入既可能是一个可以直接请求的域名还可能是用户想在搜索引擎（例如Google）里面搜索的关键词信息，所以当用户在导航栏输入信息的时候UI线程要进行一系列的解析来判定是将用户输入发送给搜索引擎还是直接请求你输入的站点资源。<br><img src=\"/images/chrome/input.png\" alt=\"\"></p>\n<p align=\"center\">UI线程在询问输入的字符串是搜索关键词还是一个URL</p>\n\n<h3 id=\"第二步：开始导航\"><a href=\"#第二步：开始导航\" class=\"headerlink\" title=\"第二步：开始导航\"></a>第二步：开始导航</h3><p>当用户按下回车键的时候，UI线程会叫网络线程（network thread）初始化一个网络请求来获取站点的内容。这时候tab上会展示一个提示资源正在加载中的旋转圈圈，而且网络线程会进行一系列诸如DNS寻址以及为请求建立TLS连接的操作。<br><img src=\"/images/chrome/navstart.png\" alt=\"\"></p>\n<p align=\"center\">UI线程告诉网络线程跳转到mysite.com</p>\n\n<p>这时如果网络线程收到服务器的HTTP 301重定向响应，它就会告知UI线程进行重定向然后它会再次发起一个新的网络请求。</p>\n<h3 id=\"第三步：读取响应\"><a href=\"#第三步：读取响应\" class=\"headerlink\" title=\"第三步：读取响应\"></a>第三步：读取响应</h3><p>网络线程在收到HTTP响应的主体（payload）流（stream）时，在必要的情况下它会先检查一下流的前几个字节以确定响应主体的具体媒体类型（MIME Type）。响应主体的媒体类型一般可以通过HTTP头部的Content-Type来确定，不过Content-Type有时候会缺失或者是错误的，这种情况下浏览器就要进行<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\" target=\"_blank\" rel=\"noopener\">MIME类型嗅探</a>来确定响应类型了。MIME类型嗅探并不是一件容易的事情，你可以从<a href=\"https://cs.chromium.org/chromium/src/net/base/mime_sniffer.cc?sq=package:chromium&dr=CS&l=5\" target=\"_blank\" rel=\"noopener\">Chrome的源代码</a>的注释来了解不同浏览器是如何根据不同的Content-Type来判断出主体具体是属于哪个媒体类型的。<br><img src=\"/images/chrome/response.png\" alt=\"\"></p>\n<p align=\"center\">响应的头部有Content-Type信息，而响应的主体有真实的数据</p>\n\n<p>如果响应的主体是一个HTML文件，浏览器会将获取的响应数据交给渲染进程（renderer process）来进行下一步的工作。如果拿到的响应数据是一个压缩文件（zip file）或者其他类型的文件，响应数据就会交给下载管理器（download manager）来处理。<br><img src=\"/images/chrome/sniff.png\" alt=\"\"></p>\n<p align=\"center\">网络线程在询问响应的数据是不是来自安全源的HTML文件</p>\n\n<p>网络线程在把内容交给渲染进程之前还会对内容做<a href=\"https://safebrowsing.google.com/\" target=\"_blank\" rel=\"noopener\">SafeBrowsing</a>检查。如果请求的域名或者响应的内容和某个已知的病毒网站相匹配，网络线程会给用户展示一个警告的页面。除此之外，网络线程还会做<a href=\"https://www.chromium.org/Home/chromium-security/corb-for-developers\" target=\"_blank\" rel=\"noopener\">CORB</a>（<strong>C</strong>ross <strong>O</strong>rigin <strong>R</strong>ead <strong>B</strong>locking）检查来确定那些敏感的跨站数据不会被发送至渲染进程。</p>\n<h3 id=\"第四步：寻找一个渲染进程（renderer-process）\"><a href=\"#第四步：寻找一个渲染进程（renderer-process）\" class=\"headerlink\" title=\"第四步：寻找一个渲染进程（renderer process）\"></a>第四步：寻找一个渲染进程（renderer process）</h3><p>在网络线程做完所有的检查后并且能够确定浏览器应该导航到该请求的站点，它就会告诉UI线程所有的数据都已经被准备好了。UI线程在收到网络线程的确认后会为这个网站寻找一个渲染进程（renderer process）来渲染界面。<br><img src=\"/images/chrome/findrenderer.png\" alt=\"\"></p>\n<p align=\"center\">网络线程告诉UI线程去寻找一个渲染进程来渲染界面</p>\n\n<p>由于网络请求可能需要长达几百毫秒的时间才能完成，为了缩短导航需要的时间，浏览器会在之前的一些步骤里面做一些优化。例如在第二步中当UI线程发送URL链接给网络线程后，它其实已经知晓它们要被导航到哪个站点了，所以在网络线程干活的时候，UI线程会主动地为这个网络请求启动一个渲染线程。如果一切顺利的话（没有重定向之类的东西出现），网络线程准备好数据后页面的渲染进程已经就准备好了，这就节省了新建渲染进程的时间。不过如果发生诸如网站被重定向到不同站点的情况，刚刚那个渲染进程就不能被使用了，它会被摒弃，一个新的渲染进程会被启动。</p>\n<h3 id=\"第五步：提交（commit）导航\"><a href=\"#第五步：提交（commit）导航\" class=\"headerlink\" title=\"第五步：提交（commit）导航\"></a>第五步：提交（commit）导航</h3><p>到这一步的时候，数据和渲染进程都已经准备好了，浏览器进程（browser process）会通过IPC告诉渲染进程去提交本次导航（commit navigation）。除此之外浏览器进程还会将刚刚接收到的响应数据流传递给对应的渲染进程让它继续接收到来的HTML数据。一旦浏览器进程收到渲染线程的回复说导航已经被提交了（commit），导航这个过程就结束了，文档的加载阶段（document loading phase）会正式开始。</p>\n<p>到了这个时候，导航栏会被更新，安全指示符（security indicator）和站点设置UI（site settings UI）会展示新页面相关的站点信息。当前tab的回话历史（session history）也会被更新，这样当你点击浏览器的前进和后退按钮也可以导航到刚刚导航完的页面。为了方便你在关闭了tab或窗口（window）的时候还可以恢复当前tab和会话（session）内容，当前的会话历史会被保存在磁盘上面。<br><img src=\"/images/chrome/commit.png\" alt=\"\"></p>\n<p align=\"center\">浏览器进程通过IPC来对渲染进程发起渲染页面的请求</p>\n\n<h3 id=\"额外步骤：初始加载完成（Initial-load-complete）\"><a href=\"#额外步骤：初始加载完成（Initial-load-complete）\" class=\"headerlink\" title=\"额外步骤：初始加载完成（Initial load complete）\"></a>额外步骤：初始加载完成（Initial load complete）</h3><p>当导航提交完成后，渲染进程开始着手加载资源以及渲染页面。我会在后面系列文章中讲述渲染进程渲染页面的具体细节。一旦渲染进程“完成”（finished）渲染，它会通过IPC告知浏览器进程（注意这发生在页面上所有帧（frames）的<strong>onload</strong>事件都已经被触发了而且对应的处理函数已经执行完成了的时候），然后UI线程就会停止导航栏上旋转的圈圈。</p>\n<p>我这里用到“完成”这个词，因为后面客户端的JavaScript还是可以继续加载资源和改变视图内容的。<br><img src=\"/images/chrome/loaded.png\" alt=\"\"></p>\n<p align=\"center\">渲染进程通过IPC告诉浏览器进程页面已经加载完成了</p>\n\n<h2 id=\"导航到不同的站点\"><a href=\"#导航到不同的站点\" class=\"headerlink\" title=\"导航到不同的站点\"></a>导航到不同的站点</h2><p>一个最简单的导航情景已经描述完了！可是如果这时用户在导航栏上输入一个不一样的URL会发生什么呢？如果是这样，浏览器进程会重新执行一遍之前的那几个步骤来完成新站点的导航。不过在浏览器进程做这些事情之前，它需要让当前的渲染页面做一些收尾工作，具体就是询问一下当前的渲染进程需不需要处理一下<a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload\" target=\"_blank\" rel=\"noopener\"><strong>beforeunload</strong></a>事件。</p>\n<p><strong>beforeunload</strong>可以在用户重新导航或者关闭当前tab时给用户展示一个“你确定要离开当前页面吗？”的二次确认弹框。浏览器进程之所以要在重新导航的时候和当前渲染进程确认的原因是，当前页面发生的一切（包括页面的JavaScript执行）是不受它控制而是受渲染进程控制，所以它也不知道里面的具体情况。</p>\n<p><strong>注意：</strong>不要随便给页面添加<strong>beforeunload</strong>事件监听，你定义的监听函数会在页面被重新导航的时候执行，因此这会增加重导航的时延。beforeunload事件监听函数只有在十分必要的时候才能被添加，例如用户在页面上输入了数据，并且这些数据会随着页面消失而消失。<br><img src=\"/images/chrome/beforeunload.png\" alt=\"\"></p>\n<p align=\"center\">浏览器进程通过IPC告诉渲染进程它将要离开当前页面导航到新的页面了</p>\n\n<p>如果重新导航是在页面内被发起的呢？例如用户点击了页面的一个链接或者客户端的JavaScript代码执行了诸如<strong>window.location = “<a href=\"https://newsite.com&quot;\" target=\"_blank\" rel=\"noopener\">https://newsite.com&quot;</a></strong>的代码。这种情况下，渲染进程会自己先检查一个它有没有注册<strong>beforeunload</strong>事件的监听函数，如果有的话就执行，执行完后发生的事情就和之前的情况没什么区别了，唯一的不同就是这次的导航请求是由渲染进程给浏览器进程发起的。</p>\n<p>如果是重新导航到不同站点（different site）的话，会有另外一个渲染进程被启动来完成这次重导航，而当前的渲染进程会继续处理现在页面的一些收尾工作，例如<strong>unload</strong>事件的监听函数执行。<a href=\"https://developers.google.com/web/updates/2018/07/page-lifecycle-api#overview_of_page_lifecycle_states_and_events\" target=\"_blank\" rel=\"noopener\">Overview of page lifecycle states</a>这篇文章会介绍页面所有的生命周期状态，<a href=\"https://developers.google.com/web/updates/2018/07/page-lifecycle-api\" target=\"_blank\" rel=\"noopener\">the Page Lifecycle API</a>会教你如何在页面中监听页面状态的变化。<br><img src=\"/images/chrome/unload.png\" alt=\"\"></p>\n<p align=\"center\">浏览器进程告诉新的渲染进程去渲染新的页面并且告诉当前的渲染进程进行收尾工作</p>\n\n<h2 id=\"Service-Worker的情景\"><a href=\"#Service-Worker的情景\" class=\"headerlink\" title=\"Service Worker的情景\"></a>Service Worker的情景</h2><p>这个导航过程最近发生的一个改变是引进了<a href=\"https://developers.google.com/web/fundamentals/primers/service-workers/\" target=\"_blank\" rel=\"noopener\">service worker</a>的概念。因为Service worker可以用来写网站的网络代理（network proxy），所以开发者可以对网络请求有更多的控制权，例如决定哪些数据缓存在本地以及哪些数据需要从网络上面重新获取等等。如果开发者在service worker里设置了当前的页面内容从缓存里面获取，当前页面的渲染就不需要重新发送网络请求了，这就大大加快了整个导航的过程。</p>\n<p>这里要重点留意的是service worker其实只是一些跑在渲染进程里面的JavaScript代码。那么问题来了，当导航开始的时候，浏览器进程是如何判断要导航的站点存不存在对应的service worker并启动一个渲染进程去执行它的呢？</p>\n<p>其实service worker在注册的时候，它的作用范围（scope）会被记录下来（你可以通过文章<a href=\"https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle\" target=\"_blank\" rel=\"noopener\">The Service Worker Lifecycle</a>了解更多关于service worker作用范围的信息）。在导航开始的时候，网络线程会根据请求的域名在已经注册的service worker作用范围里面寻找有没有对应的service worker。如果有命中该URL的service worker，UI线程就会为这个service worker启动一个渲染进程（renderer process）来执行它的代码。Service worker既可能使用之前缓存的数据也可能发起新的网络请求。<br><img src=\"/images/chrome/scope_lookup.png\" alt=\"\"></p>\n<p align=\"center\">网络线程会在收到导航任务后寻找有没有对应的service worker</p>\n\n<p><img src=\"/images/chrome/serviceworker.png\" alt=\"\"></p>\n<p align=\"center\">UI线程会启动一个渲染进程来运行找到的service worker代码，代码具体是由渲染进程里面的工作线程（worker thread）执行</p>\n\n<h2 id=\"导航预加载-Navigation-Preload\"><a href=\"#导航预加载-Navigation-Preload\" class=\"headerlink\" title=\"导航预加载 - Navigation Preload\"></a>导航预加载 - Navigation Preload</h2><p>在上面的例子中，你应该可以感受到如果启动的service worker最后还是决定发送网络请求的话，浏览器进程和渲染进程这一来一回的通信包括service worker启动的时间其实增加了页面导航的时延。<a href=\"https://developers.google.com/web/updates/2017/02/navigation-preload\" target=\"_blank\" rel=\"noopener\">导航预加载</a>就是一种通过在service worker启动的时候并行加载对应资源的方式来加快整个导航过程效率的技术。预加载资源的请求头会有一些特殊的标志来让服务器决定是发送全新的内容给客户端还是只发送更新了的数据给客户端。<br><img src=\"/images/chrome/navpreload.png\" alt=\"\"></p>\n<p align=\"center\">UI线程在启动一个渲染进程去运行service worker代码的同时会并行发送网络请求</p>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在本篇文章中，我们讨论了导航具体都发生了哪些事情以及浏览器优化导航效率采取的一些技术方案，在下一篇文章中我们将会深入了解浏览器是如何解析我们的HTML/CSS/JavaScript来呈现出网页内容的。</p>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长<br><img src=\"/images/wechat_qr.jpg\" alt=\"\"></p>"},{"title":"实现JavaScript语言解释器-（二）","thumbnail":"/gallery/thumbnails/simple-js.jpg","date":"2021-04-18T05:43:15.000Z","_content":"\n\n## 前言\n在上一篇文章中我为大家介绍了Simpe项目的一些`背景知识`以及如何使用`有限状态机`来实现`词法解析`，在本篇文章中我将会为大家介绍`语法分析`的相关内容，并且通过设计一门`内部DSL语言`来实现Simple语言的语法解析。\n<!-- more-->\n\n## 什么是语法解析\n词法解析过后，字符串的代码会被解析生成`一系列Token串`，例如下面是代码`let a = 'HelloWorld';`的词法解析输出：\n```json\n[\n  {\n    \"type\": \"LET\",\n    \"value\": \"let\",\n    \"range\": {\n      \"start\": {\n        \"line\": 1,\n        \"column\": 1\n      },\n      \"end\": {\n        \"line\": 1,\n        \"column\": 3\n      }\n    }\n  },\n  {\n    \"type\": \"IDENTIFIER\",\n    \"value\": \"a\",\n    \"range\": {\n      \"start\": {\n        \"line\": 1,\n        \"column\": 5\n      },\n      \"end\": {\n        \"line\": 1,\n        \"column\": 5\n      }\n    }\n  },\n  {\n    \"type\": \"ASSIGN\",\n    \"value\": \"=\",\n    \"range\": {\n      \"start\": {\n        \"line\": 1,\n        \"column\": 7\n      },\n      \"end\": {\n        \"line\": 1,\n        \"column\": 7\n      }\n    }\n  },\n  {\n    \"type\": \"STRING_LITERAL\",\n    \"value\": \"'HelloWorld'\",\n    \"range\": {\n      \"start\": {\n        \"line\": 1,\n        \"column\": 9\n      },\n      \"end\": {\n        \"line\": 1,\n        \"column\": 20\n      }\n    }\n  },\n  {\n    \"type\": \"SEMICOLON\",\n    \"value\": \";\",\n    \"range\": {\n      \"start\": {\n        \"line\": 1,\n        \"column\": 21\n      },\n      \"end\": {\n        \"line\": 1,\n        \"column\": 21\n      }\n    }\n  }\n]\n```\n\n在`语法解析（Syntax Analysis）`阶段，Simple解释器会根据定义的`语法规则`来分析单词之间的组合关系，从而输出一棵`抽象语法树`（**A**bstract **S**yntax **T**ree），这也就我们常听到的**AST**了。那么为什么说这棵语法树是抽象的呢？这是因为在语法解析阶段一些诸如分号和左右括号等用来组织代码用的token会被去掉，因此生成的语法树没有包含词法解析阶段生成的所有token信息，所以它是`抽象的`。在语法解析阶段，如果Simple解释器发现输入的Token字符串不能通过既定的语法规则来解析，就会抛出一个`语法错误（Syntax Error）`，例如赋值语句没有右表达式的时候就会抛出`Syntax Error`。\n\n从上面的描述可以看出，词法解析阶段的重点是`分离单词`，而语法解析阶段最重要的是根据既定的`语法规则`来`组合`单词。那么对于Simple解释器来说，它的语法规则又是什么呢？\n\n## Simple语言的语法\n我们前面说到Simple语言其实是JavaScript的一个`子集`，所以Simple的语法也是JavaScript语法的一个子集。那么Simple的语法规则都有哪些呢？在进入到使用专业的术语表达Simple语法规则之前，我们可以先用中文来表达一下Simple的语法规则：\n* 变量定义：let, const或者var后面接一个identifier，然后是可选的等号初始化表达式：\n  ```ts\n  let a;\n  // 或者\n  let a = 10;\n  ```\n* if条件判断：if关键字后面加上由左右括号包裹起来的条件，条件可以是任意的表达式语句，接着会跟上花括号括起来的语句块。if语句块后面可以选择性地跟上另外一个else语句块或者else if语句块：\n  ```ts\n  if (isBoss) {\n    console.log('niu bi');\n  } else {\n    console.log('bu niu bi');\n  };\n  ```\n* while循环：while关键字后面加上由左右括号包裹起来的条件，条件可以是任意的表达式语句，接着是由花括号包裹起来的循环体：\n  ```ts\n  while(isAlive) {\n    console.log('coding');\n  };\n  ```\n...\n\n细心的你可能发现在上面的例子中所有语句都是以分号`;`结尾的，这是因为为了简化语法解析的流程，**Simple解释器强制要求每个表达式都要以分号结尾**，这样我们才可以将重点放在**掌握语言的实现原理**而不是拘泥于JavaScript灵活的语法规则上。\n\n上面我们使用了最直白的中文表达了Simple语言的一小部分语法规则，在实际工程里面我们肯定不能这么干，我们一般会使用**巴克斯范式**（BNF）或者**扩展巴克斯范式**（EBNF）来定义编程语言的**语法规则**。\n\n## BNF\n我们先来看一个变量定义的巴科斯范式例子：\n![](/images/simple/bnf.png)\n\n在上面的巴科斯范式中，每条规则都是由左右两部分组成的。在规则的左边是一个`非终结符`，而右边是`终结符`和`非终结符`的组合。`非终结符`表示这个符号还可以继续细分，例如`varModifier`这个非终结符可以被解析为`let`，`const`或`var`这三个字符的其中一个，而`终结符`表示这个符号不能继续细分了，它一般是一个字符串，例如`if`，`while`，`(`或者`)`等。无论是终结符还是非终结符我们都可以统一将其叫做**模式（pattern）**。\n\n在BNF的规则中，除了**模式**符号，还有下面这些表示这些**模式出现次数**的符号，下面是一些我们在Simple语言实现中用到的符号：\n\n| 符号      | 作用 |\n| ----------- | ----------- |\n| [pattern]   | 是option的意思，它表示括号里的模式出现0次或者一次，例如变量初始化的时候后面的等号会出现零次或者1次，因为初始值是可选的        |\n| pattern1 \\| pattern2   | 是or的意思，它表示模式1或者模式2被匹配，例如变量定义的时候可以使用`let`，`const`或者`var`        |\n| { pattern }      | 是repeat的意思， 表示模式至少重复零次，例如if语句后面可以跟上0个或者多个else if       |\n\n要实现Simple语言上面这些规则就够用了，如果你想了解更多关于BNF或者EBNF的内容，可以自行查阅相关的资料。\n\n## 如何实现语法解析\n在我们编写完属于我们语言的BNF规则之后，可以使用[Yacc](http://dinosaur.compilertools.net/yacc/index.html)或者[Antlr](https://www.antlr.org/)等开源工具来将我们的BNF定义转化成词法解析和语法解析的客户端代码。在实现Simple语言的过程中，为了更好地学习语法解析的原理，我没有直接使用这些工具，而是通过编写一门灵活的用来定义语法规则的**领域专用语言（DSL）**来定义Simple语言的语法规则。可能很多同学不知道什么是DSL，不要着急，这就为大家解释什么是DSL。\n\n### DSL的定义\n身为程序员，我相信大家都或多或少听说过DSL这个概念，即使你没听过，你也肯定用过。在了解DSL定义之前我们先来看一下都有哪些常用的DSL：\n* HTML\n* CSS\n* XML\n* JSX\n* Markdown\n* RegExp\n* JQuery\n* Gulp\n...\n\n我相信作为一个程序员特别是前端程序员，大家一定不会对上面的DSL感到陌生。DSL的全称是**Domain-Specific Language**，翻译过来就是**领域特定语言**，和JavaScrpt等**通用编程语言**（GPL - General-Purpose Language）最大的区别就是：DSL是为特定领域编写的，而GPL可以用来解决不同领域的问题。举个例子，HTML是一门DSL，因为它只能用来定义网页的结构。而JavaScript是一门GPL，因此它可以用来解决很多通用的问题，例如编写各式各样的客户端程序和服务端程序。正是由于DSL只需要关心当前领域的问题，所以它不需要**图灵完备**，这也意味着它可以更加接近人类的思维方式，让一些不是专门编写程序的人也可以参与到DSL的编写中（设计师也可以编写HTML代码）。\n\n### DSL的分类\nDSL被分成了两大类，一类是内部DSL，一类是外部DSL。\n#### 内部DSL\n内部DSL是建立在某个**宿主语言**（通常是一门GPL，例如JavaScript）之上的特殊DSL，它具有下面这些特点：\n* 和宿主语言**共享编译与调试**等基础设施，对那些会使用宿主语言的开发者来说，使用该宿主语言编写的DSL的门槛会很低，而且内部DSL可以很容易就集成到宿主语言的应用里面去，它的使用方法就像引用一个外部依赖一样简单，宿主欢迎只需要安装就可以了。\n* 它可以视为使用宿主语言对特定任务（特定领域）的一个封装，使用者可以很容易使用这层封装编写出可读性很高的代码。例如JQuery就是一门内部DSL，它里面封装了很多对页面DOM操作的函数，由于它的功能很有局限性，所以它可以封装出更加符合人们直觉的API，而且它编写的代码的可读性会比直接使用浏览器原生的native browser APIS要高很多。\n \n下面是一个分别使用浏览器原生API和使用JQuery API来实现同样任务的例子：\n![](/images/simple/native.png)\n![](/images/simple/jquery.png \"JQuery\")\n\n#### 外部DSL\n和内部DSL不同，外部DSL没有依赖的宿主环境，它是一门独立的语言，例如HTML和CSS等。因为外部DSL是完全独立的语言，所以它具有下面这些特点：\n* 不能享用现有语言的编译和调试等工具，如有需要要自己实现，成本很高\n* 如果你是语言的实现者，需要自己设计和实现一门全新的语言，对自己的要求很高。如果你是语言的学习者就需要学习一门新的语言，比内部DSL具有更高的学习成本。而且如果语言的设计者自身水平不够，他们弄出来的DSL一旦被用在了项目里面，后面可能会成为阻碍项目发展的一个大坑\n* 同样也是由于外部DSL没有宿主语言环境的约束，所以它不会受任何现有语言的束缚，因此它可以针对当前需要解决的领域问题来定义更加灵活的语法规则，和内部DSL相比它有更小的来自于宿主语言的语言噪声\n\n下面是一个外部DSL的例子 - Mustache\n![](/images/simple/mustache.png)\n\n### Simple语言的语法解析DSL\n前面说到了内部DSL和外部DSL的一些特点和区别，由于我们的语法解析逻辑要和之前介绍的词法解析逻辑串联起来，所以我在这里就选择了宿主环境是TypeScript的内部DSL来实现\n#### DSL的设计\n如何从头开始设计一门内部DSL呢？我们需要从要解决的**领域特定问题**出发，对于Simple语言它就是：将Simple语言的BNF语法规则使用TypeScipt表达出来。在上面BNF的介绍中，我们知道BNF主要有三种规则：**option**，**repeat**和**or**。每个规则之间可以相互**组合和嵌套**，等等，互相组合和嵌套？你想到了什么JavaScript语法可以表达这种场景？没错就是函数的**链式调用**。\n\n对于程序员来说最清晰的解释应该是直接看代码了，所以我们可以来看一下Simple语言语法解析的代码部分。和词法解析类似，Simple的语法规则放在`lib/config/Parser`这个文件中，下面是这个文件的示例内容：\n```ts\n// rule函数会生成一个根据定义的语法规则解析Token串从而生成AST节点的Parser实例，这个函数会接收一个用来生成对应AST节点的AST类，所有的AST节点类定义都放在lib/ast/node这个文件夹下\nconst ifStatement = rule(IfStatement)\nifStatement\n  // if语句使用if字符串作为开头\n  .separator(TOKEN_TYPE.IF)\n  // if字符串后面会有一个左括号\n  .separator(TOKEN_TYPE.LEFT_PAREN)\n  // 括号里面是一个执行结果为布尔值的binaryExpression\n  .ast(binaryExpression)\n  // 右括号\n  .separator(TOKEN_TYPE.RIGHT_PAREN)\n  // if条件成立后的执行块\n  .ast(blockStatement)\n  // 后面的内容是可选的\n  .option(\n    rule().or(\n      // else if语句\n      rule().separator(TOKEN_TYPE.ELSE).ast(ifStatement),\n      // else语句\n      rule().separator(TOKEN_TYPE.ELSE).ast(blockStatement)\n    )\n  )\n```\n上面就是Simple的if表达式定义了，由于使用了DSL进行封装，ifStatement的语法规则非常通俗易懂，而且十分灵活。试想一下假如我们突然要改变ifStatement的语法规则：不允许`if`后面加`else if`。要满足这个改变我们只需要将`rule().separator(TOKEN_TYPE.ELSE).ast(ifStatement)`这个规则去掉就可以了。接着就让我们深入到上面代码的各个函数和变量的定义中去：\n##### rule函数\n这个函数是一个用来生成对应AST节点Parser的工厂函数，它会接收一个AST节点的`构造函数`作为参数，然后返回一个对应的Parser类实例。\n```ts\n// lib/ast/parser/rule\nconst rule = (NodeClass?: new () => Node): Parser => {\n  return new Parser(NodeClass)\n}\n```\n##### Parser类\nParser类是整个Simple语法解析的**核心**。它通过**函数链式调用**的方法定义当前AST节点的**语法规则**，在语法解析阶段根据定义的语法规则**消耗词法解析阶段生成的Token串**，如果语法规则匹配它会生成对应AST节点，否则Token串的光标会**重置为规则开始匹配的位置（回溯）**从而让父节点的Parser实例使用下一个语法规则进行匹配，当父节点没有任何一个语法规则满足条件时，会抛出`Syntax Error`。下面是Parser类的各个函数的介绍：\n\n| 方法      | 作用 |\n| ----------- | ----------- |\n| .separator(TOKEN)   |   定义一个终结符语法规则，该终结符不会作为当前AST节点的子节点，例如if表达式的if字符串    |\n| .token(TOKEN)   | 定义一个终结符语法规则，该终结符会被作为当前AST节点的子节点，例如算术表达式中的运算符(+，-，*，/)        |\n| .option(parser) | 定义一个可选的非终结符规则，非终结符规则都是一个子Parser实例，例如上面if表达式定义中的`else if`子表达式 |\n| .repeat(parser) | 定义一个出现0次或者多次的非终结符规则，例如数组里面的元素可能是0个或者多个       |\n| .or(...parser|TOKEN) | or里面的规则有且出现一个，例如变量定义的时候可能是var，let或者const      |\n| .expression(parser, operatorsConfig) | 特殊的用来表示算术运算的规则      |\n| .parse(tokenBuffer) | 这个函数会接收词法解析阶段生成的tokenBuffer串作为输入，然后使用当前Parser实例的语法规则来消耗TokenBuffer串的内容，如果有完全匹配就会根据当前Parser节点的AST构造函数生成对应的AST节点，否则会将TokenBuffer重置为当前节点规则开始匹配的起始位置（setCursor）然后返回到父级节点|\n\n##### AST节点类的定义\nSimple语言所有的AST节点定义都放在`lib/ast/node`这个文件夹底下。对于每一种类型的AST节点，这个文件夹下都会有其对应的AST节点类。例如赋值表达式节点的定义是**AssignmentExpression**类，if语句的定义是**IfStatement**类等等。这些节点类都有一个统一的基类**Node**，Node定义了所有节点都会有的节点**类型属性**（type），节点生成规则**create函数**，以及当前节点在代码**执行阶段**的计算规则**evaluate函数**。下面是示例代码：\n```ts\n// lib/ast/node/Node\nclass Node {\n  // 节点类型\n  type: NODE_TYPE\n  // 节点的起始位置信息，方便产生语法错误时给开发者进行定位\n  loc: {\n    start: ILocation,\n    end: ILocation\n  } = {\n    start: null,\n    end: null\n  }\n\n  // 节点的生成规则，当前节点会根据其子节点的内容生成\n  create(children: Array<Node>): Node {\n    if (children.length === 1) {\n      return children[0]\n    } else {\n      return this\n    }\n  }\n\n  // 节点的运算规则，节点在运算时会传进当前的环境变量，每个节点都需要实现自己的运算规则，下一篇文章会详细展开\n  evaluate(env?: Environment): any {\n    throw new Error('Child Class must implement its evaluate method')\n  }\n}\n```\n现在我们来看一下IfStatement这个AST节点类的定义\n```ts\nclass IfStatement extends Node {\n  // 该节点的类型是if statement\n  type: NODE_TYPE = NODE_TYPE.IF_STATEMENT\n  // if的判断条件，必须是是一个BinaryExpression节点\n  test: BinaryExpression = null\n  // if条件成立的条件下的执行语句，是一个BlockStatement节点\n  consequent: BlockStatement = null\n  // else的执行语句\n  alternate: IfStatement|BlockStatement = null\n\n  // Parser会解析出if语句的所有children节点信息来构造当前的IfStatement节点，children节点的内容和定义由lib/config/Parser文件定义\n  create(children: Array<Node>): Node {\n    this.test = children[0] as BinaryExpression\n    this.consequent = children[1] as BlockStatement\n    this.alternate = children[2] as IfStatement|BlockStatement\n    return this\n  }\n\n  evaluate(env: Environment): any {\n    // 后面文章会讲\n  }\n}\n```\n### AST\n介绍完Parser类和AST节点类后你现在就可以看懂`lib/config/Parser`的语法规则定义了，这个文件里面包含了Simple所有语法规则的定义，其中包括根节点的定义：\n```ts\n// 列举了所有可能的statement\nstatement\n  .or(\n    breakStatement,\n    returnStatement,\n    expressionStatement,\n    variableStatement,\n    assignmentExpression,\n    whileStatement,\n    ifStatement,\n    forStatement,\n    functionDeclaration,\n  )\nconst statementList = rule(StatementList)\n  .repeat(\n    rule()\n      .ast(statement)\n      .throw('statement must end with semi colon')\n      .separator(TOKEN_TYPE.SEMI_COLON)\n\n// 一个程序其实就是很多statement的组合\nconst program = statementList\n```\n最后就是将上一章的词法解析和语法解析串联起来，代码在`lib/parser`这个文件里面：\n```ts\n// tokenBuffer是词法解析的结果\nconst parse = (tokenBuffer: TokenBuffer): Node => {\n  // parser是lib/config/Parser的根节点（program节点），rootNode对应的就是抽象语法树AST\n  const rootNode = parser.parse(tokenBuffer)\n\n  if (!tokenBuffer.isEmpty()) {\n    // 如果到最后还有没有被解析完的Token就表明编写的代码有语法错误，需要报错给开发者\n    const firstToken = tokenBuffer.peek()\n    throw new SyntaxError(`unrecognized token ${firstToken.value}`, firstToken.range.start)\n  }\n\n  return rootNode\n}\n```\n我们来看一下rootNode的具体内容，假如开发者写了以下的代码：\n```js\nlet a = true;\nif (a) {\n    console.log('Simple language is very simple');  \n} else {\n    console.log('This will never happen!');\n};\n```\n会生成下面的AST：\n```json\n{\n  \"loc\": {\n    \"start\": {\n      \"line\": 1,\n      \"column\": 1\n    },\n    \"end\": {\n      \"line\": 6,\n      \"column\": 1\n    }\n  },\n  \"type\": \"STATEMENT_LIST\",\n  \"statements\": [\n    {\n      \"loc\": {\n        \"start\": {\n          \"line\": 1,\n          \"column\": 1\n        },\n        \"end\": {\n          \"line\": 1,\n          \"column\": 12\n        }\n      },\n      \"type\": \"VARIABLE_STATEMENT\",\n      \"declarations\": [\n        {\n          \"loc\": {\n            \"start\": {\n              \"line\": 1,\n              \"column\": 5\n            },\n            \"end\": {\n              \"line\": 1,\n              \"column\": 12\n            }\n          },\n          \"type\": \"VARIABLE_DECLARATOR\",\n          \"id\": \"a\",\n          \"init\": {\n            \"loc\": {\n              \"start\": {\n                \"line\": 1,\n                \"column\": 9\n              },\n              \"end\": {\n                \"line\": 1,\n                \"column\": 12\n              }\n            },\n            \"type\": \"BOOLEAN_LITERAL\",\n            \"value\": true\n          }\n        }\n      ],\n      \"kind\": \"LET\"\n    },\n    {\n      \"loc\": {\n        \"start\": {\n          \"line\": 2,\n          \"column\": 1\n        },\n        \"end\": {\n          \"line\": 6,\n          \"column\": 1\n        }\n      },\n      \"type\": \"IF_STATEMENT\",\n      \"test\": {\n        \"loc\": {\n          \"start\": {\n            \"line\": 2,\n            \"column\": 5\n          },\n          \"end\": {\n            \"line\": 2,\n            \"column\": 5\n          }\n        },\n        \"type\": \"IDENTIFIER\",\n        \"name\": \"a\"\n      },\n      \"consequent\": {\n        \"loc\": {\n          \"start\": {\n            \"line\": 2,\n            \"column\": 8\n          },\n          \"end\": {\n            \"line\": 4,\n            \"column\": 1\n          }\n        },\n        \"type\": \"BLOCK_STATEMENT\",\n        \"body\": {\n          \"loc\": {\n            \"start\": {\n              \"line\": 3,\n              \"column\": 5\n            },\n            \"end\": {\n              \"line\": 3,\n              \"column\": 49\n            }\n          },\n          \"type\": \"STATEMENT_LIST\",\n          \"statements\": [\n            {\n              \"loc\": {\n                \"start\": {\n                  \"line\": 3,\n                  \"column\": 5\n                },\n                \"end\": {\n                  \"line\": 3,\n                  \"column\": 49\n                }\n              },\n              \"type\": \"EXPRESSION_STATEMENT\",\n              \"expression\": {\n                \"loc\": {\n                  \"start\": {\n                    \"line\": 3,\n                    \"column\": 5\n                  },\n                  \"end\": {\n                    \"line\": 3,\n                    \"column\": 49\n                  }\n                },\n                \"type\": \"CALL_EXPRESSION\",\n                \"callee\": {\n                  \"loc\": {\n                    \"start\": {\n                      \"line\": 3,\n                      \"column\": 5\n                    },\n                    \"end\": {\n                      \"line\": 3,\n                      \"column\": 15\n                    }\n                  },\n                  \"type\": \"MEMBER_EXPRESSION\",\n                  \"object\": {\n                    \"loc\": {\n                      \"start\": {\n                        \"line\": 3,\n                        \"column\": 5\n                      },\n                      \"end\": {\n                        \"line\": 3,\n                        \"column\": 11\n                      }\n                    },\n                    \"type\": \"IDENTIFIER\",\n                    \"name\": \"console\"\n                  },\n                  \"property\": {\n                    \"loc\": {\n                      \"start\": {\n                        \"line\": 3,\n                        \"column\": 13\n                      },\n                      \"end\": {\n                        \"line\": 3,\n                        \"column\": 15\n                      }\n                    },\n                    \"type\": \"IDENTIFIER\",\n                    \"name\": \"log\"\n                  }\n                },\n                \"arguments\": [\n                  {\n                    \"loc\": {\n                      \"start\": {\n                        \"line\": 3,\n                        \"column\": 17\n                      },\n                      \"end\": {\n                        \"line\": 3,\n                        \"column\": 48\n                      }\n                    },\n                    \"type\": \"STRING_LITERAL\",\n                    \"value\": \"Simple language is very simple\"\n                  }\n                ]\n              }\n            }\n          ]\n        }\n      },\n      \"alternate\": {\n        \"loc\": {\n          \"start\": {\n            \"line\": 4,\n            \"column\": 8\n          },\n          \"end\": {\n            \"line\": 6,\n            \"column\": 1\n          }\n        },\n        \"type\": \"BLOCK_STATEMENT\",\n        \"body\": {\n          \"loc\": {\n            \"start\": {\n              \"line\": 5,\n              \"column\": 5\n            },\n            \"end\": {\n              \"line\": 5,\n              \"column\": 42\n            }\n          },\n          \"type\": \"STATEMENT_LIST\",\n          \"statements\": [\n            {\n              \"loc\": {\n                \"start\": {\n                  \"line\": 5,\n                  \"column\": 5\n                },\n                \"end\": {\n                  \"line\": 5,\n                  \"column\": 42\n                }\n              },\n              \"type\": \"EXPRESSION_STATEMENT\",\n              \"expression\": {\n                \"loc\": {\n                  \"start\": {\n                    \"line\": 5,\n                    \"column\": 5\n                  },\n                  \"end\": {\n                    \"line\": 5,\n                    \"column\": 42\n                  }\n                },\n                \"type\": \"CALL_EXPRESSION\",\n                \"callee\": {\n                  \"loc\": {\n                    \"start\": {\n                      \"line\": 5,\n                      \"column\": 5\n                    },\n                    \"end\": {\n                      \"line\": 5,\n                      \"column\": 15\n                    }\n                  },\n                  \"type\": \"MEMBER_EXPRESSION\",\n                  \"object\": {\n                    \"loc\": {\n                      \"start\": {\n                        \"line\": 5,\n                        \"column\": 5\n                      },\n                      \"end\": {\n                        \"line\": 5,\n                        \"column\": 11\n                      }\n                    },\n                    \"type\": \"IDENTIFIER\",\n                    \"name\": \"console\"\n                  },\n                  \"property\": {\n                    \"loc\": {\n                      \"start\": {\n                        \"line\": 5,\n                        \"column\": 13\n                      },\n                      \"end\": {\n                        \"line\": 5,\n                        \"column\": 15\n                      }\n                    },\n                    \"type\": \"IDENTIFIER\",\n                    \"name\": \"log\"\n                  }\n                },\n                \"arguments\": [\n                  {\n                    \"loc\": {\n                      \"start\": {\n                        \"line\": 5,\n                        \"column\": 17\n                      },\n                      \"end\": {\n                        \"line\": 5,\n                        \"column\": 41\n                      }\n                    },\n                    \"type\": \"STRING_LITERAL\",\n                    \"value\": \"This will never happen!\"\n                  }\n                ]\n              }\n            }\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n## 小结\n在本篇文章中我介绍了什么是`语法解析`，以及给大家入门了`领域专用语言`的一些基本知识，最后讲解了Simple语言是如何利用`内部DSL`来实现其语法解析机制的。\n\n在下一篇文章中我将会为大家介绍Simple语言的`运行时`是如何实现的，会包括`闭包`如何实现以及`this绑定`等内容，大家敬请期待！\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n\n![](/images/wechat_qr.jpg)\n","source":"_posts/实现JavaScript语言解释器-二.md","raw":"---\ntitle: 实现JavaScript语言解释器-（二）\ntags:\n  - TypeScript\n  - Interpreter\n  - JavaScript\n  - 编译原理\nthumbnail: /gallery/thumbnails/simple-js.jpg\ndate: 2021-04-18 13:43:15\n---\n\n\n## 前言\n在上一篇文章中我为大家介绍了Simpe项目的一些`背景知识`以及如何使用`有限状态机`来实现`词法解析`，在本篇文章中我将会为大家介绍`语法分析`的相关内容，并且通过设计一门`内部DSL语言`来实现Simple语言的语法解析。\n<!-- more-->\n\n## 什么是语法解析\n词法解析过后，字符串的代码会被解析生成`一系列Token串`，例如下面是代码`let a = 'HelloWorld';`的词法解析输出：\n```json\n[\n  {\n    \"type\": \"LET\",\n    \"value\": \"let\",\n    \"range\": {\n      \"start\": {\n        \"line\": 1,\n        \"column\": 1\n      },\n      \"end\": {\n        \"line\": 1,\n        \"column\": 3\n      }\n    }\n  },\n  {\n    \"type\": \"IDENTIFIER\",\n    \"value\": \"a\",\n    \"range\": {\n      \"start\": {\n        \"line\": 1,\n        \"column\": 5\n      },\n      \"end\": {\n        \"line\": 1,\n        \"column\": 5\n      }\n    }\n  },\n  {\n    \"type\": \"ASSIGN\",\n    \"value\": \"=\",\n    \"range\": {\n      \"start\": {\n        \"line\": 1,\n        \"column\": 7\n      },\n      \"end\": {\n        \"line\": 1,\n        \"column\": 7\n      }\n    }\n  },\n  {\n    \"type\": \"STRING_LITERAL\",\n    \"value\": \"'HelloWorld'\",\n    \"range\": {\n      \"start\": {\n        \"line\": 1,\n        \"column\": 9\n      },\n      \"end\": {\n        \"line\": 1,\n        \"column\": 20\n      }\n    }\n  },\n  {\n    \"type\": \"SEMICOLON\",\n    \"value\": \";\",\n    \"range\": {\n      \"start\": {\n        \"line\": 1,\n        \"column\": 21\n      },\n      \"end\": {\n        \"line\": 1,\n        \"column\": 21\n      }\n    }\n  }\n]\n```\n\n在`语法解析（Syntax Analysis）`阶段，Simple解释器会根据定义的`语法规则`来分析单词之间的组合关系，从而输出一棵`抽象语法树`（**A**bstract **S**yntax **T**ree），这也就我们常听到的**AST**了。那么为什么说这棵语法树是抽象的呢？这是因为在语法解析阶段一些诸如分号和左右括号等用来组织代码用的token会被去掉，因此生成的语法树没有包含词法解析阶段生成的所有token信息，所以它是`抽象的`。在语法解析阶段，如果Simple解释器发现输入的Token字符串不能通过既定的语法规则来解析，就会抛出一个`语法错误（Syntax Error）`，例如赋值语句没有右表达式的时候就会抛出`Syntax Error`。\n\n从上面的描述可以看出，词法解析阶段的重点是`分离单词`，而语法解析阶段最重要的是根据既定的`语法规则`来`组合`单词。那么对于Simple解释器来说，它的语法规则又是什么呢？\n\n## Simple语言的语法\n我们前面说到Simple语言其实是JavaScript的一个`子集`，所以Simple的语法也是JavaScript语法的一个子集。那么Simple的语法规则都有哪些呢？在进入到使用专业的术语表达Simple语法规则之前，我们可以先用中文来表达一下Simple的语法规则：\n* 变量定义：let, const或者var后面接一个identifier，然后是可选的等号初始化表达式：\n  ```ts\n  let a;\n  // 或者\n  let a = 10;\n  ```\n* if条件判断：if关键字后面加上由左右括号包裹起来的条件，条件可以是任意的表达式语句，接着会跟上花括号括起来的语句块。if语句块后面可以选择性地跟上另外一个else语句块或者else if语句块：\n  ```ts\n  if (isBoss) {\n    console.log('niu bi');\n  } else {\n    console.log('bu niu bi');\n  };\n  ```\n* while循环：while关键字后面加上由左右括号包裹起来的条件，条件可以是任意的表达式语句，接着是由花括号包裹起来的循环体：\n  ```ts\n  while(isAlive) {\n    console.log('coding');\n  };\n  ```\n...\n\n细心的你可能发现在上面的例子中所有语句都是以分号`;`结尾的，这是因为为了简化语法解析的流程，**Simple解释器强制要求每个表达式都要以分号结尾**，这样我们才可以将重点放在**掌握语言的实现原理**而不是拘泥于JavaScript灵活的语法规则上。\n\n上面我们使用了最直白的中文表达了Simple语言的一小部分语法规则，在实际工程里面我们肯定不能这么干，我们一般会使用**巴克斯范式**（BNF）或者**扩展巴克斯范式**（EBNF）来定义编程语言的**语法规则**。\n\n## BNF\n我们先来看一个变量定义的巴科斯范式例子：\n![](/images/simple/bnf.png)\n\n在上面的巴科斯范式中，每条规则都是由左右两部分组成的。在规则的左边是一个`非终结符`，而右边是`终结符`和`非终结符`的组合。`非终结符`表示这个符号还可以继续细分，例如`varModifier`这个非终结符可以被解析为`let`，`const`或`var`这三个字符的其中一个，而`终结符`表示这个符号不能继续细分了，它一般是一个字符串，例如`if`，`while`，`(`或者`)`等。无论是终结符还是非终结符我们都可以统一将其叫做**模式（pattern）**。\n\n在BNF的规则中，除了**模式**符号，还有下面这些表示这些**模式出现次数**的符号，下面是一些我们在Simple语言实现中用到的符号：\n\n| 符号      | 作用 |\n| ----------- | ----------- |\n| [pattern]   | 是option的意思，它表示括号里的模式出现0次或者一次，例如变量初始化的时候后面的等号会出现零次或者1次，因为初始值是可选的        |\n| pattern1 \\| pattern2   | 是or的意思，它表示模式1或者模式2被匹配，例如变量定义的时候可以使用`let`，`const`或者`var`        |\n| { pattern }      | 是repeat的意思， 表示模式至少重复零次，例如if语句后面可以跟上0个或者多个else if       |\n\n要实现Simple语言上面这些规则就够用了，如果你想了解更多关于BNF或者EBNF的内容，可以自行查阅相关的资料。\n\n## 如何实现语法解析\n在我们编写完属于我们语言的BNF规则之后，可以使用[Yacc](http://dinosaur.compilertools.net/yacc/index.html)或者[Antlr](https://www.antlr.org/)等开源工具来将我们的BNF定义转化成词法解析和语法解析的客户端代码。在实现Simple语言的过程中，为了更好地学习语法解析的原理，我没有直接使用这些工具，而是通过编写一门灵活的用来定义语法规则的**领域专用语言（DSL）**来定义Simple语言的语法规则。可能很多同学不知道什么是DSL，不要着急，这就为大家解释什么是DSL。\n\n### DSL的定义\n身为程序员，我相信大家都或多或少听说过DSL这个概念，即使你没听过，你也肯定用过。在了解DSL定义之前我们先来看一下都有哪些常用的DSL：\n* HTML\n* CSS\n* XML\n* JSX\n* Markdown\n* RegExp\n* JQuery\n* Gulp\n...\n\n我相信作为一个程序员特别是前端程序员，大家一定不会对上面的DSL感到陌生。DSL的全称是**Domain-Specific Language**，翻译过来就是**领域特定语言**，和JavaScrpt等**通用编程语言**（GPL - General-Purpose Language）最大的区别就是：DSL是为特定领域编写的，而GPL可以用来解决不同领域的问题。举个例子，HTML是一门DSL，因为它只能用来定义网页的结构。而JavaScript是一门GPL，因此它可以用来解决很多通用的问题，例如编写各式各样的客户端程序和服务端程序。正是由于DSL只需要关心当前领域的问题，所以它不需要**图灵完备**，这也意味着它可以更加接近人类的思维方式，让一些不是专门编写程序的人也可以参与到DSL的编写中（设计师也可以编写HTML代码）。\n\n### DSL的分类\nDSL被分成了两大类，一类是内部DSL，一类是外部DSL。\n#### 内部DSL\n内部DSL是建立在某个**宿主语言**（通常是一门GPL，例如JavaScript）之上的特殊DSL，它具有下面这些特点：\n* 和宿主语言**共享编译与调试**等基础设施，对那些会使用宿主语言的开发者来说，使用该宿主语言编写的DSL的门槛会很低，而且内部DSL可以很容易就集成到宿主语言的应用里面去，它的使用方法就像引用一个外部依赖一样简单，宿主欢迎只需要安装就可以了。\n* 它可以视为使用宿主语言对特定任务（特定领域）的一个封装，使用者可以很容易使用这层封装编写出可读性很高的代码。例如JQuery就是一门内部DSL，它里面封装了很多对页面DOM操作的函数，由于它的功能很有局限性，所以它可以封装出更加符合人们直觉的API，而且它编写的代码的可读性会比直接使用浏览器原生的native browser APIS要高很多。\n \n下面是一个分别使用浏览器原生API和使用JQuery API来实现同样任务的例子：\n![](/images/simple/native.png)\n![](/images/simple/jquery.png \"JQuery\")\n\n#### 外部DSL\n和内部DSL不同，外部DSL没有依赖的宿主环境，它是一门独立的语言，例如HTML和CSS等。因为外部DSL是完全独立的语言，所以它具有下面这些特点：\n* 不能享用现有语言的编译和调试等工具，如有需要要自己实现，成本很高\n* 如果你是语言的实现者，需要自己设计和实现一门全新的语言，对自己的要求很高。如果你是语言的学习者就需要学习一门新的语言，比内部DSL具有更高的学习成本。而且如果语言的设计者自身水平不够，他们弄出来的DSL一旦被用在了项目里面，后面可能会成为阻碍项目发展的一个大坑\n* 同样也是由于外部DSL没有宿主语言环境的约束，所以它不会受任何现有语言的束缚，因此它可以针对当前需要解决的领域问题来定义更加灵活的语法规则，和内部DSL相比它有更小的来自于宿主语言的语言噪声\n\n下面是一个外部DSL的例子 - Mustache\n![](/images/simple/mustache.png)\n\n### Simple语言的语法解析DSL\n前面说到了内部DSL和外部DSL的一些特点和区别，由于我们的语法解析逻辑要和之前介绍的词法解析逻辑串联起来，所以我在这里就选择了宿主环境是TypeScript的内部DSL来实现\n#### DSL的设计\n如何从头开始设计一门内部DSL呢？我们需要从要解决的**领域特定问题**出发，对于Simple语言它就是：将Simple语言的BNF语法规则使用TypeScipt表达出来。在上面BNF的介绍中，我们知道BNF主要有三种规则：**option**，**repeat**和**or**。每个规则之间可以相互**组合和嵌套**，等等，互相组合和嵌套？你想到了什么JavaScript语法可以表达这种场景？没错就是函数的**链式调用**。\n\n对于程序员来说最清晰的解释应该是直接看代码了，所以我们可以来看一下Simple语言语法解析的代码部分。和词法解析类似，Simple的语法规则放在`lib/config/Parser`这个文件中，下面是这个文件的示例内容：\n```ts\n// rule函数会生成一个根据定义的语法规则解析Token串从而生成AST节点的Parser实例，这个函数会接收一个用来生成对应AST节点的AST类，所有的AST节点类定义都放在lib/ast/node这个文件夹下\nconst ifStatement = rule(IfStatement)\nifStatement\n  // if语句使用if字符串作为开头\n  .separator(TOKEN_TYPE.IF)\n  // if字符串后面会有一个左括号\n  .separator(TOKEN_TYPE.LEFT_PAREN)\n  // 括号里面是一个执行结果为布尔值的binaryExpression\n  .ast(binaryExpression)\n  // 右括号\n  .separator(TOKEN_TYPE.RIGHT_PAREN)\n  // if条件成立后的执行块\n  .ast(blockStatement)\n  // 后面的内容是可选的\n  .option(\n    rule().or(\n      // else if语句\n      rule().separator(TOKEN_TYPE.ELSE).ast(ifStatement),\n      // else语句\n      rule().separator(TOKEN_TYPE.ELSE).ast(blockStatement)\n    )\n  )\n```\n上面就是Simple的if表达式定义了，由于使用了DSL进行封装，ifStatement的语法规则非常通俗易懂，而且十分灵活。试想一下假如我们突然要改变ifStatement的语法规则：不允许`if`后面加`else if`。要满足这个改变我们只需要将`rule().separator(TOKEN_TYPE.ELSE).ast(ifStatement)`这个规则去掉就可以了。接着就让我们深入到上面代码的各个函数和变量的定义中去：\n##### rule函数\n这个函数是一个用来生成对应AST节点Parser的工厂函数，它会接收一个AST节点的`构造函数`作为参数，然后返回一个对应的Parser类实例。\n```ts\n// lib/ast/parser/rule\nconst rule = (NodeClass?: new () => Node): Parser => {\n  return new Parser(NodeClass)\n}\n```\n##### Parser类\nParser类是整个Simple语法解析的**核心**。它通过**函数链式调用**的方法定义当前AST节点的**语法规则**，在语法解析阶段根据定义的语法规则**消耗词法解析阶段生成的Token串**，如果语法规则匹配它会生成对应AST节点，否则Token串的光标会**重置为规则开始匹配的位置（回溯）**从而让父节点的Parser实例使用下一个语法规则进行匹配，当父节点没有任何一个语法规则满足条件时，会抛出`Syntax Error`。下面是Parser类的各个函数的介绍：\n\n| 方法      | 作用 |\n| ----------- | ----------- |\n| .separator(TOKEN)   |   定义一个终结符语法规则，该终结符不会作为当前AST节点的子节点，例如if表达式的if字符串    |\n| .token(TOKEN)   | 定义一个终结符语法规则，该终结符会被作为当前AST节点的子节点，例如算术表达式中的运算符(+，-，*，/)        |\n| .option(parser) | 定义一个可选的非终结符规则，非终结符规则都是一个子Parser实例，例如上面if表达式定义中的`else if`子表达式 |\n| .repeat(parser) | 定义一个出现0次或者多次的非终结符规则，例如数组里面的元素可能是0个或者多个       |\n| .or(...parser|TOKEN) | or里面的规则有且出现一个，例如变量定义的时候可能是var，let或者const      |\n| .expression(parser, operatorsConfig) | 特殊的用来表示算术运算的规则      |\n| .parse(tokenBuffer) | 这个函数会接收词法解析阶段生成的tokenBuffer串作为输入，然后使用当前Parser实例的语法规则来消耗TokenBuffer串的内容，如果有完全匹配就会根据当前Parser节点的AST构造函数生成对应的AST节点，否则会将TokenBuffer重置为当前节点规则开始匹配的起始位置（setCursor）然后返回到父级节点|\n\n##### AST节点类的定义\nSimple语言所有的AST节点定义都放在`lib/ast/node`这个文件夹底下。对于每一种类型的AST节点，这个文件夹下都会有其对应的AST节点类。例如赋值表达式节点的定义是**AssignmentExpression**类，if语句的定义是**IfStatement**类等等。这些节点类都有一个统一的基类**Node**，Node定义了所有节点都会有的节点**类型属性**（type），节点生成规则**create函数**，以及当前节点在代码**执行阶段**的计算规则**evaluate函数**。下面是示例代码：\n```ts\n// lib/ast/node/Node\nclass Node {\n  // 节点类型\n  type: NODE_TYPE\n  // 节点的起始位置信息，方便产生语法错误时给开发者进行定位\n  loc: {\n    start: ILocation,\n    end: ILocation\n  } = {\n    start: null,\n    end: null\n  }\n\n  // 节点的生成规则，当前节点会根据其子节点的内容生成\n  create(children: Array<Node>): Node {\n    if (children.length === 1) {\n      return children[0]\n    } else {\n      return this\n    }\n  }\n\n  // 节点的运算规则，节点在运算时会传进当前的环境变量，每个节点都需要实现自己的运算规则，下一篇文章会详细展开\n  evaluate(env?: Environment): any {\n    throw new Error('Child Class must implement its evaluate method')\n  }\n}\n```\n现在我们来看一下IfStatement这个AST节点类的定义\n```ts\nclass IfStatement extends Node {\n  // 该节点的类型是if statement\n  type: NODE_TYPE = NODE_TYPE.IF_STATEMENT\n  // if的判断条件，必须是是一个BinaryExpression节点\n  test: BinaryExpression = null\n  // if条件成立的条件下的执行语句，是一个BlockStatement节点\n  consequent: BlockStatement = null\n  // else的执行语句\n  alternate: IfStatement|BlockStatement = null\n\n  // Parser会解析出if语句的所有children节点信息来构造当前的IfStatement节点，children节点的内容和定义由lib/config/Parser文件定义\n  create(children: Array<Node>): Node {\n    this.test = children[0] as BinaryExpression\n    this.consequent = children[1] as BlockStatement\n    this.alternate = children[2] as IfStatement|BlockStatement\n    return this\n  }\n\n  evaluate(env: Environment): any {\n    // 后面文章会讲\n  }\n}\n```\n### AST\n介绍完Parser类和AST节点类后你现在就可以看懂`lib/config/Parser`的语法规则定义了，这个文件里面包含了Simple所有语法规则的定义，其中包括根节点的定义：\n```ts\n// 列举了所有可能的statement\nstatement\n  .or(\n    breakStatement,\n    returnStatement,\n    expressionStatement,\n    variableStatement,\n    assignmentExpression,\n    whileStatement,\n    ifStatement,\n    forStatement,\n    functionDeclaration,\n  )\nconst statementList = rule(StatementList)\n  .repeat(\n    rule()\n      .ast(statement)\n      .throw('statement must end with semi colon')\n      .separator(TOKEN_TYPE.SEMI_COLON)\n\n// 一个程序其实就是很多statement的组合\nconst program = statementList\n```\n最后就是将上一章的词法解析和语法解析串联起来，代码在`lib/parser`这个文件里面：\n```ts\n// tokenBuffer是词法解析的结果\nconst parse = (tokenBuffer: TokenBuffer): Node => {\n  // parser是lib/config/Parser的根节点（program节点），rootNode对应的就是抽象语法树AST\n  const rootNode = parser.parse(tokenBuffer)\n\n  if (!tokenBuffer.isEmpty()) {\n    // 如果到最后还有没有被解析完的Token就表明编写的代码有语法错误，需要报错给开发者\n    const firstToken = tokenBuffer.peek()\n    throw new SyntaxError(`unrecognized token ${firstToken.value}`, firstToken.range.start)\n  }\n\n  return rootNode\n}\n```\n我们来看一下rootNode的具体内容，假如开发者写了以下的代码：\n```js\nlet a = true;\nif (a) {\n    console.log('Simple language is very simple');  \n} else {\n    console.log('This will never happen!');\n};\n```\n会生成下面的AST：\n```json\n{\n  \"loc\": {\n    \"start\": {\n      \"line\": 1,\n      \"column\": 1\n    },\n    \"end\": {\n      \"line\": 6,\n      \"column\": 1\n    }\n  },\n  \"type\": \"STATEMENT_LIST\",\n  \"statements\": [\n    {\n      \"loc\": {\n        \"start\": {\n          \"line\": 1,\n          \"column\": 1\n        },\n        \"end\": {\n          \"line\": 1,\n          \"column\": 12\n        }\n      },\n      \"type\": \"VARIABLE_STATEMENT\",\n      \"declarations\": [\n        {\n          \"loc\": {\n            \"start\": {\n              \"line\": 1,\n              \"column\": 5\n            },\n            \"end\": {\n              \"line\": 1,\n              \"column\": 12\n            }\n          },\n          \"type\": \"VARIABLE_DECLARATOR\",\n          \"id\": \"a\",\n          \"init\": {\n            \"loc\": {\n              \"start\": {\n                \"line\": 1,\n                \"column\": 9\n              },\n              \"end\": {\n                \"line\": 1,\n                \"column\": 12\n              }\n            },\n            \"type\": \"BOOLEAN_LITERAL\",\n            \"value\": true\n          }\n        }\n      ],\n      \"kind\": \"LET\"\n    },\n    {\n      \"loc\": {\n        \"start\": {\n          \"line\": 2,\n          \"column\": 1\n        },\n        \"end\": {\n          \"line\": 6,\n          \"column\": 1\n        }\n      },\n      \"type\": \"IF_STATEMENT\",\n      \"test\": {\n        \"loc\": {\n          \"start\": {\n            \"line\": 2,\n            \"column\": 5\n          },\n          \"end\": {\n            \"line\": 2,\n            \"column\": 5\n          }\n        },\n        \"type\": \"IDENTIFIER\",\n        \"name\": \"a\"\n      },\n      \"consequent\": {\n        \"loc\": {\n          \"start\": {\n            \"line\": 2,\n            \"column\": 8\n          },\n          \"end\": {\n            \"line\": 4,\n            \"column\": 1\n          }\n        },\n        \"type\": \"BLOCK_STATEMENT\",\n        \"body\": {\n          \"loc\": {\n            \"start\": {\n              \"line\": 3,\n              \"column\": 5\n            },\n            \"end\": {\n              \"line\": 3,\n              \"column\": 49\n            }\n          },\n          \"type\": \"STATEMENT_LIST\",\n          \"statements\": [\n            {\n              \"loc\": {\n                \"start\": {\n                  \"line\": 3,\n                  \"column\": 5\n                },\n                \"end\": {\n                  \"line\": 3,\n                  \"column\": 49\n                }\n              },\n              \"type\": \"EXPRESSION_STATEMENT\",\n              \"expression\": {\n                \"loc\": {\n                  \"start\": {\n                    \"line\": 3,\n                    \"column\": 5\n                  },\n                  \"end\": {\n                    \"line\": 3,\n                    \"column\": 49\n                  }\n                },\n                \"type\": \"CALL_EXPRESSION\",\n                \"callee\": {\n                  \"loc\": {\n                    \"start\": {\n                      \"line\": 3,\n                      \"column\": 5\n                    },\n                    \"end\": {\n                      \"line\": 3,\n                      \"column\": 15\n                    }\n                  },\n                  \"type\": \"MEMBER_EXPRESSION\",\n                  \"object\": {\n                    \"loc\": {\n                      \"start\": {\n                        \"line\": 3,\n                        \"column\": 5\n                      },\n                      \"end\": {\n                        \"line\": 3,\n                        \"column\": 11\n                      }\n                    },\n                    \"type\": \"IDENTIFIER\",\n                    \"name\": \"console\"\n                  },\n                  \"property\": {\n                    \"loc\": {\n                      \"start\": {\n                        \"line\": 3,\n                        \"column\": 13\n                      },\n                      \"end\": {\n                        \"line\": 3,\n                        \"column\": 15\n                      }\n                    },\n                    \"type\": \"IDENTIFIER\",\n                    \"name\": \"log\"\n                  }\n                },\n                \"arguments\": [\n                  {\n                    \"loc\": {\n                      \"start\": {\n                        \"line\": 3,\n                        \"column\": 17\n                      },\n                      \"end\": {\n                        \"line\": 3,\n                        \"column\": 48\n                      }\n                    },\n                    \"type\": \"STRING_LITERAL\",\n                    \"value\": \"Simple language is very simple\"\n                  }\n                ]\n              }\n            }\n          ]\n        }\n      },\n      \"alternate\": {\n        \"loc\": {\n          \"start\": {\n            \"line\": 4,\n            \"column\": 8\n          },\n          \"end\": {\n            \"line\": 6,\n            \"column\": 1\n          }\n        },\n        \"type\": \"BLOCK_STATEMENT\",\n        \"body\": {\n          \"loc\": {\n            \"start\": {\n              \"line\": 5,\n              \"column\": 5\n            },\n            \"end\": {\n              \"line\": 5,\n              \"column\": 42\n            }\n          },\n          \"type\": \"STATEMENT_LIST\",\n          \"statements\": [\n            {\n              \"loc\": {\n                \"start\": {\n                  \"line\": 5,\n                  \"column\": 5\n                },\n                \"end\": {\n                  \"line\": 5,\n                  \"column\": 42\n                }\n              },\n              \"type\": \"EXPRESSION_STATEMENT\",\n              \"expression\": {\n                \"loc\": {\n                  \"start\": {\n                    \"line\": 5,\n                    \"column\": 5\n                  },\n                  \"end\": {\n                    \"line\": 5,\n                    \"column\": 42\n                  }\n                },\n                \"type\": \"CALL_EXPRESSION\",\n                \"callee\": {\n                  \"loc\": {\n                    \"start\": {\n                      \"line\": 5,\n                      \"column\": 5\n                    },\n                    \"end\": {\n                      \"line\": 5,\n                      \"column\": 15\n                    }\n                  },\n                  \"type\": \"MEMBER_EXPRESSION\",\n                  \"object\": {\n                    \"loc\": {\n                      \"start\": {\n                        \"line\": 5,\n                        \"column\": 5\n                      },\n                      \"end\": {\n                        \"line\": 5,\n                        \"column\": 11\n                      }\n                    },\n                    \"type\": \"IDENTIFIER\",\n                    \"name\": \"console\"\n                  },\n                  \"property\": {\n                    \"loc\": {\n                      \"start\": {\n                        \"line\": 5,\n                        \"column\": 13\n                      },\n                      \"end\": {\n                        \"line\": 5,\n                        \"column\": 15\n                      }\n                    },\n                    \"type\": \"IDENTIFIER\",\n                    \"name\": \"log\"\n                  }\n                },\n                \"arguments\": [\n                  {\n                    \"loc\": {\n                      \"start\": {\n                        \"line\": 5,\n                        \"column\": 17\n                      },\n                      \"end\": {\n                        \"line\": 5,\n                        \"column\": 41\n                      }\n                    },\n                    \"type\": \"STRING_LITERAL\",\n                    \"value\": \"This will never happen!\"\n                  }\n                ]\n              }\n            }\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n## 小结\n在本篇文章中我介绍了什么是`语法解析`，以及给大家入门了`领域专用语言`的一些基本知识，最后讲解了Simple语言是如何利用`内部DSL`来实现其语法解析机制的。\n\n在下一篇文章中我将会为大家介绍Simple语言的`运行时`是如何实现的，会包括`闭包`如何实现以及`this绑定`等内容，大家敬请期待！\n\n## 个人技术动态\n欢迎关注公众号**进击的大葱**一起学习成长\n\n![](/images/wechat_qr.jpg)\n","slug":"实现JavaScript语言解释器-二","published":1,"updated":"2022-03-04T09:11:20.423Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0gqf6fy0011ucnx9yh14y9a","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在上一篇文章中我为大家介绍了Simpe项目的一些<code>背景知识</code>以及如何使用<code>有限状态机</code>来实现<code>词法解析</code>，在本篇文章中我将会为大家介绍<code>语法分析</code>的相关内容，并且通过设计一门<code>内部DSL语言</code>来实现Simple语言的语法解析。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"什么是语法解析\"><a href=\"#什么是语法解析\" class=\"headerlink\" title=\"什么是语法解析\"></a>什么是语法解析</h2><p>词法解析过后，字符串的代码会被解析生成<code>一系列Token串</code>，例如下面是代码<code>let a = &#39;HelloWorld&#39;;</code>的词法解析输出：</p>\n<figure class=\"highlight json hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">[</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"LET\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"value\"</span>: <span class=\"hljs-string\">\"let\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"range\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">3</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"IDENTIFIER\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"value\"</span>: <span class=\"hljs-string\">\"a\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"range\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"ASSIGN\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"value\"</span>: <span class=\"hljs-string\">\"=\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"range\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">7</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">7</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"STRING_LITERAL\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"value\"</span>: <span class=\"hljs-string\">\"'HelloWorld'\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"range\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">9</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">20</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"SEMICOLON\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"value\"</span>: <span class=\"hljs-string\">\";\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"range\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">21</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">21</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr></table></figure>\n\n<p>在<code>语法解析（Syntax Analysis）</code>阶段，Simple解释器会根据定义的<code>语法规则</code>来分析单词之间的组合关系，从而输出一棵<code>抽象语法树</code>（<strong>A</strong>bstract <strong>S</strong>yntax <strong>T</strong>ree），这也就我们常听到的<strong>AST</strong>了。那么为什么说这棵语法树是抽象的呢？这是因为在语法解析阶段一些诸如分号和左右括号等用来组织代码用的token会被去掉，因此生成的语法树没有包含词法解析阶段生成的所有token信息，所以它是<code>抽象的</code>。在语法解析阶段，如果Simple解释器发现输入的Token字符串不能通过既定的语法规则来解析，就会抛出一个<code>语法错误（Syntax Error）</code>，例如赋值语句没有右表达式的时候就会抛出<code>Syntax Error</code>。</p>\n<p>从上面的描述可以看出，词法解析阶段的重点是<code>分离单词</code>，而语法解析阶段最重要的是根据既定的<code>语法规则</code>来<code>组合</code>单词。那么对于Simple解释器来说，它的语法规则又是什么呢？</p>\n<h2 id=\"Simple语言的语法\"><a href=\"#Simple语言的语法\" class=\"headerlink\" title=\"Simple语言的语法\"></a>Simple语言的语法</h2><p>我们前面说到Simple语言其实是JavaScript的一个<code>子集</code>，所以Simple的语法也是JavaScript语法的一个子集。那么Simple的语法规则都有哪些呢？在进入到使用专业的术语表达Simple语法规则之前，我们可以先用中文来表达一下Simple的语法规则：</p>\n<ul>\n<li>变量定义：let, const或者var后面接一个identifier，然后是可选的等号初始化表达式：<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> a;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 或者</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">10</span>;</span></pre></td></tr></table></figure></li>\n<li>if条件判断：if关键字后面加上由左右括号包裹起来的条件，条件可以是任意的表达式语句，接着会跟上花括号括起来的语句块。if语句块后面可以选择性地跟上另外一个else语句块或者else if语句块：<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">if</span> (isBoss) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'niu bi'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"hljs-keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'bu niu bi'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr></table></figure></li>\n<li>while循环：while关键字后面加上由左右括号包裹起来的条件，条件可以是任意的表达式语句，接着是由花括号包裹起来的循环体：<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">while</span>(isAlive) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'coding'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr></table></figure>\n…</li>\n</ul>\n<p>细心的你可能发现在上面的例子中所有语句都是以分号<code>;</code>结尾的，这是因为为了简化语法解析的流程，<strong>Simple解释器强制要求每个表达式都要以分号结尾</strong>，这样我们才可以将重点放在<strong>掌握语言的实现原理</strong>而不是拘泥于JavaScript灵活的语法规则上。</p>\n<p>上面我们使用了最直白的中文表达了Simple语言的一小部分语法规则，在实际工程里面我们肯定不能这么干，我们一般会使用<strong>巴克斯范式</strong>（BNF）或者<strong>扩展巴克斯范式</strong>（EBNF）来定义编程语言的<strong>语法规则</strong>。</p>\n<h2 id=\"BNF\"><a href=\"#BNF\" class=\"headerlink\" title=\"BNF\"></a>BNF</h2><p>我们先来看一个变量定义的巴科斯范式例子：<br><img src=\"/images/simple/bnf.png\" alt></p>\n<p>在上面的巴科斯范式中，每条规则都是由左右两部分组成的。在规则的左边是一个<code>非终结符</code>，而右边是<code>终结符</code>和<code>非终结符</code>的组合。<code>非终结符</code>表示这个符号还可以继续细分，例如<code>varModifier</code>这个非终结符可以被解析为<code>let</code>，<code>const</code>或<code>var</code>这三个字符的其中一个，而<code>终结符</code>表示这个符号不能继续细分了，它一般是一个字符串，例如<code>if</code>，<code>while</code>，<code>(</code>或者<code>)</code>等。无论是终结符还是非终结符我们都可以统一将其叫做<strong>模式（pattern）</strong>。</p>\n<p>在BNF的规则中，除了<strong>模式</strong>符号，还有下面这些表示这些<strong>模式出现次数</strong>的符号，下面是一些我们在Simple语言实现中用到的符号：</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[pattern]</td>\n<td>是option的意思，它表示括号里的模式出现0次或者一次，例如变量初始化的时候后面的等号会出现零次或者1次，因为初始值是可选的</td>\n</tr>\n<tr>\n<td>pattern1 | pattern2</td>\n<td>是or的意思，它表示模式1或者模式2被匹配，例如变量定义的时候可以使用<code>let</code>，<code>const</code>或者<code>var</code></td>\n</tr>\n<tr>\n<td>{ pattern }</td>\n<td>是repeat的意思， 表示模式至少重复零次，例如if语句后面可以跟上0个或者多个else if</td>\n</tr>\n</tbody></table>\n<p>要实现Simple语言上面这些规则就够用了，如果你想了解更多关于BNF或者EBNF的内容，可以自行查阅相关的资料。</p>\n<h2 id=\"如何实现语法解析\"><a href=\"#如何实现语法解析\" class=\"headerlink\" title=\"如何实现语法解析\"></a>如何实现语法解析</h2><p>在我们编写完属于我们语言的BNF规则之后，可以使用<a href=\"http://dinosaur.compilertools.net/yacc/index.html\" target=\"_blank\" rel=\"noopener\">Yacc</a>或者<a href=\"https://www.antlr.org/\" target=\"_blank\" rel=\"noopener\">Antlr</a>等开源工具来将我们的BNF定义转化成词法解析和语法解析的客户端代码。在实现Simple语言的过程中，为了更好地学习语法解析的原理，我没有直接使用这些工具，而是通过编写一门灵活的用来定义语法规则的<strong>领域专用语言（DSL）</strong>来定义Simple语言的语法规则。可能很多同学不知道什么是DSL，不要着急，这就为大家解释什么是DSL。</p>\n<h3 id=\"DSL的定义\"><a href=\"#DSL的定义\" class=\"headerlink\" title=\"DSL的定义\"></a>DSL的定义</h3><p>身为程序员，我相信大家都或多或少听说过DSL这个概念，即使你没听过，你也肯定用过。在了解DSL定义之前我们先来看一下都有哪些常用的DSL：</p>\n<ul>\n<li>HTML</li>\n<li>CSS</li>\n<li>XML</li>\n<li>JSX</li>\n<li>Markdown</li>\n<li>RegExp</li>\n<li>JQuery</li>\n<li>Gulp<br>…</li>\n</ul>\n<p>我相信作为一个程序员特别是前端程序员，大家一定不会对上面的DSL感到陌生。DSL的全称是<strong>Domain-Specific Language</strong>，翻译过来就是<strong>领域特定语言</strong>，和JavaScrpt等<strong>通用编程语言</strong>（GPL - General-Purpose Language）最大的区别就是：DSL是为特定领域编写的，而GPL可以用来解决不同领域的问题。举个例子，HTML是一门DSL，因为它只能用来定义网页的结构。而JavaScript是一门GPL，因此它可以用来解决很多通用的问题，例如编写各式各样的客户端程序和服务端程序。正是由于DSL只需要关心当前领域的问题，所以它不需要<strong>图灵完备</strong>，这也意味着它可以更加接近人类的思维方式，让一些不是专门编写程序的人也可以参与到DSL的编写中（设计师也可以编写HTML代码）。</p>\n<h3 id=\"DSL的分类\"><a href=\"#DSL的分类\" class=\"headerlink\" title=\"DSL的分类\"></a>DSL的分类</h3><p>DSL被分成了两大类，一类是内部DSL，一类是外部DSL。</p>\n<h4 id=\"内部DSL\"><a href=\"#内部DSL\" class=\"headerlink\" title=\"内部DSL\"></a>内部DSL</h4><p>内部DSL是建立在某个<strong>宿主语言</strong>（通常是一门GPL，例如JavaScript）之上的特殊DSL，它具有下面这些特点：</p>\n<ul>\n<li>和宿主语言<strong>共享编译与调试</strong>等基础设施，对那些会使用宿主语言的开发者来说，使用该宿主语言编写的DSL的门槛会很低，而且内部DSL可以很容易就集成到宿主语言的应用里面去，它的使用方法就像引用一个外部依赖一样简单，宿主欢迎只需要安装就可以了。</li>\n<li>它可以视为使用宿主语言对特定任务（特定领域）的一个封装，使用者可以很容易使用这层封装编写出可读性很高的代码。例如JQuery就是一门内部DSL，它里面封装了很多对页面DOM操作的函数，由于它的功能很有局限性，所以它可以封装出更加符合人们直觉的API，而且它编写的代码的可读性会比直接使用浏览器原生的native browser APIS要高很多。</li>\n</ul>\n<p>下面是一个分别使用浏览器原生API和使用JQuery API来实现同样任务的例子：<br><img src=\"/images/simple/native.png\" alt><br><img src=\"/images/simple/jquery.png\" alt title=\"JQuery\"></p>\n<h4 id=\"外部DSL\"><a href=\"#外部DSL\" class=\"headerlink\" title=\"外部DSL\"></a>外部DSL</h4><p>和内部DSL不同，外部DSL没有依赖的宿主环境，它是一门独立的语言，例如HTML和CSS等。因为外部DSL是完全独立的语言，所以它具有下面这些特点：</p>\n<ul>\n<li>不能享用现有语言的编译和调试等工具，如有需要要自己实现，成本很高</li>\n<li>如果你是语言的实现者，需要自己设计和实现一门全新的语言，对自己的要求很高。如果你是语言的学习者就需要学习一门新的语言，比内部DSL具有更高的学习成本。而且如果语言的设计者自身水平不够，他们弄出来的DSL一旦被用在了项目里面，后面可能会成为阻碍项目发展的一个大坑</li>\n<li>同样也是由于外部DSL没有宿主语言环境的约束，所以它不会受任何现有语言的束缚，因此它可以针对当前需要解决的领域问题来定义更加灵活的语法规则，和内部DSL相比它有更小的来自于宿主语言的语言噪声</li>\n</ul>\n<p>下面是一个外部DSL的例子 - Mustache<br><img src=\"/images/simple/mustache.png\" alt></p>\n<h3 id=\"Simple语言的语法解析DSL\"><a href=\"#Simple语言的语法解析DSL\" class=\"headerlink\" title=\"Simple语言的语法解析DSL\"></a>Simple语言的语法解析DSL</h3><p>前面说到了内部DSL和外部DSL的一些特点和区别，由于我们的语法解析逻辑要和之前介绍的词法解析逻辑串联起来，所以我在这里就选择了宿主环境是TypeScript的内部DSL来实现</p>\n<h4 id=\"DSL的设计\"><a href=\"#DSL的设计\" class=\"headerlink\" title=\"DSL的设计\"></a>DSL的设计</h4><p>如何从头开始设计一门内部DSL呢？我们需要从要解决的<strong>领域特定问题</strong>出发，对于Simple语言它就是：将Simple语言的BNF语法规则使用TypeScipt表达出来。在上面BNF的介绍中，我们知道BNF主要有三种规则：<strong>option</strong>，<strong>repeat</strong>和<strong>or</strong>。每个规则之间可以相互<strong>组合和嵌套</strong>，等等，互相组合和嵌套？你想到了什么JavaScript语法可以表达这种场景？没错就是函数的<strong>链式调用</strong>。</p>\n<p>对于程序员来说最清晰的解释应该是直接看代码了，所以我们可以来看一下Simple语言语法解析的代码部分。和词法解析类似，Simple的语法规则放在<code>lib/config/Parser</code>这个文件中，下面是这个文件的示例内容：</p>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// rule函数会生成一个根据定义的语法规则解析Token串从而生成AST节点的Parser实例，这个函数会接收一个用来生成对应AST节点的AST类，所有的AST节点类定义都放在lib/ast/node这个文件夹下</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> ifStatement = rule(IfStatement)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">ifStatement</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// if语句使用if字符串作为开头</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  .separator(TOKEN_TYPE.IF)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// if字符串后面会有一个左括号</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  .separator(TOKEN_TYPE.LEFT_PAREN)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 括号里面是一个执行结果为布尔值的binaryExpression</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  .ast(binaryExpression)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 右括号</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  .separator(TOKEN_TYPE.RIGHT_PAREN)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// if条件成立后的执行块</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  .ast(blockStatement)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 后面的内容是可选的</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  .option(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    rule().or(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-comment\">// else if语句</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      rule().separator(TOKEN_TYPE.ELSE).ast(ifStatement),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-comment\">// else语句</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      rule().separator(TOKEN_TYPE.ELSE).ast(blockStatement)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr></table></figure>\n<p>上面就是Simple的if表达式定义了，由于使用了DSL进行封装，ifStatement的语法规则非常通俗易懂，而且十分灵活。试想一下假如我们突然要改变ifStatement的语法规则：不允许<code>if</code>后面加<code>else if</code>。要满足这个改变我们只需要将<code>rule().separator(TOKEN_TYPE.ELSE).ast(ifStatement)</code>这个规则去掉就可以了。接着就让我们深入到上面代码的各个函数和变量的定义中去：</p>\n<h5 id=\"rule函数\"><a href=\"#rule函数\" class=\"headerlink\" title=\"rule函数\"></a>rule函数</h5><p>这个函数是一个用来生成对应AST节点Parser的工厂函数，它会接收一个AST节点的<code>构造函数</code>作为参数，然后返回一个对应的Parser类实例。</p>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// lib/ast/parser/rule</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> rule = <span class=\"hljs-function\">(<span class=\"hljs-params\">NodeClass?: <span class=\"hljs-keyword\">new</span> (<span class=\"hljs-params\"></span>) =&gt; Node</span>): <span class=\"hljs-params\">Parser</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Parser(NodeClass)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<h5 id=\"Parser类\"><a href=\"#Parser类\" class=\"headerlink\" title=\"Parser类\"></a>Parser类</h5><p>Parser类是整个Simple语法解析的<strong>核心</strong>。它通过<strong>函数链式调用</strong>的方法定义当前AST节点的<strong>语法规则</strong>，在语法解析阶段根据定义的语法规则<strong>消耗词法解析阶段生成的Token串</strong>，如果语法规则匹配它会生成对应AST节点，否则Token串的光标会<strong>重置为规则开始匹配的位置（回溯）</strong>从而让父节点的Parser实例使用下一个语法规则进行匹配，当父节点没有任何一个语法规则满足条件时，会抛出<code>Syntax Error</code>。下面是Parser类的各个函数的介绍：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.separator(TOKEN)</td>\n<td>定义一个终结符语法规则，该终结符不会作为当前AST节点的子节点，例如if表达式的if字符串</td>\n</tr>\n<tr>\n<td>.token(TOKEN)</td>\n<td>定义一个终结符语法规则，该终结符会被作为当前AST节点的子节点，例如算术表达式中的运算符(+，-，*，/)</td>\n</tr>\n<tr>\n<td>.option(parser)</td>\n<td>定义一个可选的非终结符规则，非终结符规则都是一个子Parser实例，例如上面if表达式定义中的<code>else if</code>子表达式</td>\n</tr>\n<tr>\n<td>.repeat(parser)</td>\n<td>定义一个出现0次或者多次的非终结符规则，例如数组里面的元素可能是0个或者多个</td>\n</tr>\n<tr>\n<td>.or(…parser</td>\n<td>TOKEN)</td>\n</tr>\n<tr>\n<td>.expression(parser, operatorsConfig)</td>\n<td>特殊的用来表示算术运算的规则</td>\n</tr>\n<tr>\n<td>.parse(tokenBuffer)</td>\n<td>这个函数会接收词法解析阶段生成的tokenBuffer串作为输入，然后使用当前Parser实例的语法规则来消耗TokenBuffer串的内容，如果有完全匹配就会根据当前Parser节点的AST构造函数生成对应的AST节点，否则会将TokenBuffer重置为当前节点规则开始匹配的起始位置（setCursor）然后返回到父级节点</td>\n</tr>\n</tbody></table>\n<h5 id=\"AST节点类的定义\"><a href=\"#AST节点类的定义\" class=\"headerlink\" title=\"AST节点类的定义\"></a>AST节点类的定义</h5><p>Simple语言所有的AST节点定义都放在<code>lib/ast/node</code>这个文件夹底下。对于每一种类型的AST节点，这个文件夹下都会有其对应的AST节点类。例如赋值表达式节点的定义是<strong>AssignmentExpression</strong>类，if语句的定义是<strong>IfStatement</strong>类等等。这些节点类都有一个统一的基类<strong>Node</strong>，Node定义了所有节点都会有的节点<strong>类型属性</strong>（type），节点生成规则<strong>create函数</strong>，以及当前节点在代码<strong>执行阶段</strong>的计算规则<strong>evaluate函数</strong>。下面是示例代码：</p>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// lib/ast/node/Node</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">class</span> Node &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 节点类型</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">type</span>: NODE_TYPE</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 节点的起始位置信息，方便产生语法错误时给开发者进行定位</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  loc: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    start: ILocation,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    end: ILocation</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125; = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    start: <span class=\"hljs-literal\">null</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    end: <span class=\"hljs-literal\">null</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 节点的生成规则，当前节点会根据其子节点的内容生成</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  create(children: <span class=\"hljs-built_in\">Array</span>&lt;Node&gt;): Node &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (children.length === <span class=\"hljs-number\">1</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">return</span> children[<span class=\"hljs-number\">0</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 节点的运算规则，节点在运算时会传进当前的环境变量，每个节点都需要实现自己的运算规则，下一篇文章会详细展开</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">  evaluate(env?: Environment): <span class=\"hljs-built_in\">any</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'Child Class must implement its evaluate method'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>现在我们来看一下IfStatement这个AST节点类的定义</p>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">class</span> IfStatement <span class=\"hljs-keyword\">extends</span> Node &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// 该节点的类型是if statement</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">type</span>: NODE_TYPE = NODE_TYPE.IF_STATEMENT</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// if的判断条件，必须是是一个BinaryExpression节点</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  test: BinaryExpression = <span class=\"hljs-literal\">null</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// if条件成立的条件下的执行语句，是一个BlockStatement节点</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  consequent: BlockStatement = <span class=\"hljs-literal\">null</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// else的执行语句</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  alternate: IfStatement|BlockStatement = <span class=\"hljs-literal\">null</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// Parser会解析出if语句的所有children节点信息来构造当前的IfStatement节点，children节点的内容和定义由lib/config/Parser文件定义</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  create(children: <span class=\"hljs-built_in\">Array</span>&lt;Node&gt;): Node &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.test = children[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">as</span> BinaryExpression</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.consequent = children[<span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">as</span> BlockStatement</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">this</span>.alternate = children[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">as</span> IfStatement|BlockStatement</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  evaluate(env: Environment): <span class=\"hljs-built_in\">any</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 后面文章会讲</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<h3 id=\"AST\"><a href=\"#AST\" class=\"headerlink\" title=\"AST\"></a>AST</h3><p>介绍完Parser类和AST节点类后你现在就可以看懂<code>lib/config/Parser</code>的语法规则定义了，这个文件里面包含了Simple所有语法规则的定义，其中包括根节点的定义：</p>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 列举了所有可能的statement</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">statement</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  .or(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    breakStatement,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    returnStatement,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    expressionStatement,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    variableStatement,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    assignmentExpression,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    whileStatement,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ifStatement,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    forStatement,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    functionDeclaration,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> statementList = rule(StatementList)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  .repeat(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    rule()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .ast(statement)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .throw(<span class=\"hljs-string\">'statement must end with semi colon'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .separator(TOKEN_TYPE.SEMI_COLON)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// 一个程序其实就是很多statement的组合</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> program = statementList</span></pre></td></tr></table></figure>\n<p>最后就是将上一章的词法解析和语法解析串联起来，代码在<code>lib/parser</code>这个文件里面：</p>\n<figure class=\"highlight ts hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">// tokenBuffer是词法解析的结果</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> parse = (tokenBuffer: TokenBuffer): <span class=\"hljs-function\"><span class=\"hljs-params\">Node</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-comment\">// parser是lib/config/Parser的根节点（program节点），rootNode对应的就是抽象语法树AST</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">const</span> rootNode = parser.parse(tokenBuffer)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (!tokenBuffer.isEmpty()) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-comment\">// 如果到最后还有没有被解析完的Token就表明编写的代码有语法错误，需要报错给开发者</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">const</span> firstToken = tokenBuffer.peek()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">SyntaxError</span>(<span class=\"hljs-string\">`unrecognized token <span class=\"hljs-subst\">$&#123;firstToken.value&#125;</span>`</span>, firstToken.range.start)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-keyword\">return</span> rootNode</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>我们来看一下rootNode的具体内容，假如开发者写了以下的代码：</p>\n<figure class=\"highlight js hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-literal\">true</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">if</span> (a) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Simple language is very simple'</span>);  </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"hljs-keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'This will never happen!'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr></table></figure>\n<p>会生成下面的AST：</p>\n<figure class=\"highlight json hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">6</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"STATEMENT_LIST\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"hljs-attr\">\"statements\"</span>: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">12</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"VARIABLE_STATEMENT\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"declarations\"</span>: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">12</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"VARIABLE_DECLARATOR\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"id\"</span>: <span class=\"hljs-string\">\"a\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"init\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">9</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">12</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"BOOLEAN_LITERAL\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"value\"</span>: <span class=\"hljs-literal\">true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">      ],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"kind\"</span>: <span class=\"hljs-string\">\"LET\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">2</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">6</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"IF_STATEMENT\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"test\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">73</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">2</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">74</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">75</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">76</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">77</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">2</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">78</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">79</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">80</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">81</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"IDENTIFIER\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">82</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"a\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">83</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">84</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"consequent\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">85</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">86</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">87</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">2</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">88</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">8</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">89</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">90</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">91</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">4</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">92</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">93</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">94</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">95</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"BLOCK_STATEMENT\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">96</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"body\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">97</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">98</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">99</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">100</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">101</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">102</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">103</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">104</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">49</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">105</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">106</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">107</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"STATEMENT_LIST\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">108</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"statements\"</span>: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">109</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">110</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">111</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">112</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">113</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">114</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">115</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">116</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">117</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">49</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">118</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">119</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">120</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"EXPRESSION_STATEMENT\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">121</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"expression\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">122</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"hljs-attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">123</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">124</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">125</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">126</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">127</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">128</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">129</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">49</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">130</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">131</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">132</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"CALL_EXPRESSION\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">133</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"hljs-attr\">\"callee\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">134</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">135</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">136</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">137</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">138</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">139</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">140</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">141</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">15</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">142</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">143</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">144</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"MEMBER_EXPRESSION\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">145</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-attr\">\"object\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">146</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">147</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">148</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">149</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">150</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">151</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">152</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">153</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">11</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">154</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">155</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">156</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"IDENTIFIER\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">157</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"console\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">158</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">159</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-attr\">\"property\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">160</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">161</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">162</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">163</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">13</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">164</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">165</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">166</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">167</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">15</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">168</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">169</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">170</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"IDENTIFIER\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">171</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"log\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">172</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">173</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">174</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"hljs-attr\">\"arguments\"</span>: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">175</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">176</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">177</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">178</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">179</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">17</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">180</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">181</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">182</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">183</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">48</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">184</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">185</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">186</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"STRING_LITERAL\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">187</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"value\"</span>: <span class=\"hljs-string\">\"Simple language is very simple\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">188</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">189</span></pre></td><td class=\"code\"><pre><span class=\"line\">                ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">190</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">191</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">192</span></pre></td><td class=\"code\"><pre><span class=\"line\">          ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">193</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">194</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">195</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"hljs-attr\">\"alternate\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">196</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">197</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">198</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">4</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">199</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">8</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">200</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">201</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">202</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">6</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">203</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">204</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">205</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">206</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"BLOCK_STATEMENT\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">207</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"hljs-attr\">\"body\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">208</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">209</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">210</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">211</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">212</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">213</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">214</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">215</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">42</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">216</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">217</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">218</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"STATEMENT_LIST\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">219</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"hljs-attr\">\"statements\"</span>: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">220</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">221</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">222</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">223</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">224</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">225</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">226</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">227</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">228</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">42</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">229</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">230</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">231</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"EXPRESSION_STATEMENT\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">232</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"hljs-attr\">\"expression\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">233</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"hljs-attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">234</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">235</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">236</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">237</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">238</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">239</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">240</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">42</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">241</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">242</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">243</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"CALL_EXPRESSION\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">244</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"hljs-attr\">\"callee\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">245</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">246</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">247</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">248</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">249</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">250</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">251</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">252</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">15</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">253</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">254</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">255</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"MEMBER_EXPRESSION\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">256</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-attr\">\"object\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">257</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">258</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">259</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">260</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">261</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">262</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">263</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">264</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">11</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">265</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">266</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">267</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"IDENTIFIER\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">268</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"console\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">269</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">270</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"hljs-attr\">\"property\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">271</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">272</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">273</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">274</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">13</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">275</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">276</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">277</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">278</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">15</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">279</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">280</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">281</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"IDENTIFIER\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">282</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"log\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">283</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">284</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">285</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"hljs-attr\">\"arguments\"</span>: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">286</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">287</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">288</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"hljs-attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">289</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">290</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">17</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">291</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">292</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"hljs-attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">293</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"line\"</span>: <span class=\"hljs-number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">294</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"hljs-attr\">\"column\"</span>: <span class=\"hljs-number\">41</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">295</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">296</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">297</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-string\">\"STRING_LITERAL\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">298</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"hljs-attr\">\"value\"</span>: <span class=\"hljs-string\">\"This will never happen!\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">299</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">300</span></pre></td><td class=\"code\"><pre><span class=\"line\">                ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">301</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">302</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">303</span></pre></td><td class=\"code\"><pre><span class=\"line\">          ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">304</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">305</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">306</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">307</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">308</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>在本篇文章中我介绍了什么是<code>语法解析</code>，以及给大家入门了<code>领域专用语言</code>的一些基本知识，最后讲解了Simple语言是如何利用<code>内部DSL</code>来实现其语法解析机制的。</p>\n<p>在下一篇文章中我将会为大家介绍Simple语言的<code>运行时</code>是如何实现的，会包括<code>闭包</code>如何实现以及<code>this绑定</code>等内容，大家敬请期待！</p>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长</p>\n<p><img src=\"/images/wechat_qr.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在上一篇文章中我为大家介绍了Simpe项目的一些<code>背景知识</code>以及如何使用<code>有限状态机</code>来实现<code>词法解析</code>，在本篇文章中我将会为大家介绍<code>语法分析</code>的相关内容，并且通过设计一门<code>内部DSL语言</code>来实现Simple语言的语法解析。</p>","more":"<h2 id=\"什么是语法解析\"><a href=\"#什么是语法解析\" class=\"headerlink\" title=\"什么是语法解析\"></a>什么是语法解析</h2><p>词法解析过后，字符串的代码会被解析生成<code>一系列Token串</code>，例如下面是代码<code>let a = &#39;HelloWorld&#39;;</code>的词法解析输出：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">[</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"LET\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"let\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"range\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"column\"</span>: <span class=\"number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"column\"</span>: <span class=\"number\">3</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"IDENTIFIER\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"a\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"range\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"column\"</span>: <span class=\"number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"column\"</span>: <span class=\"number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"ASSIGN\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"=\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"range\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"column\"</span>: <span class=\"number\">7</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"column\"</span>: <span class=\"number\">7</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"STRING_LITERAL\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"'HelloWorld'\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"range\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"column\"</span>: <span class=\"number\">9</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"column\"</span>: <span class=\"number\">20</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"SEMICOLON\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"value\"</span>: <span class=\"string\">\";\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"range\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"column\"</span>: <span class=\"number\">21</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"column\"</span>: <span class=\"number\">21</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\">]</span></pre></td></tr></table></figure>\n\n<p>在<code>语法解析（Syntax Analysis）</code>阶段，Simple解释器会根据定义的<code>语法规则</code>来分析单词之间的组合关系，从而输出一棵<code>抽象语法树</code>（<strong>A</strong>bstract <strong>S</strong>yntax <strong>T</strong>ree），这也就我们常听到的<strong>AST</strong>了。那么为什么说这棵语法树是抽象的呢？这是因为在语法解析阶段一些诸如分号和左右括号等用来组织代码用的token会被去掉，因此生成的语法树没有包含词法解析阶段生成的所有token信息，所以它是<code>抽象的</code>。在语法解析阶段，如果Simple解释器发现输入的Token字符串不能通过既定的语法规则来解析，就会抛出一个<code>语法错误（Syntax Error）</code>，例如赋值语句没有右表达式的时候就会抛出<code>Syntax Error</code>。</p>\n<p>从上面的描述可以看出，词法解析阶段的重点是<code>分离单词</code>，而语法解析阶段最重要的是根据既定的<code>语法规则</code>来<code>组合</code>单词。那么对于Simple解释器来说，它的语法规则又是什么呢？</p>\n<h2 id=\"Simple语言的语法\"><a href=\"#Simple语言的语法\" class=\"headerlink\" title=\"Simple语言的语法\"></a>Simple语言的语法</h2><p>我们前面说到Simple语言其实是JavaScript的一个<code>子集</code>，所以Simple的语法也是JavaScript语法的一个子集。那么Simple的语法规则都有哪些呢？在进入到使用专业的术语表达Simple语法规则之前，我们可以先用中文来表达一下Simple的语法规则：</p>\n<ul>\n<li>变量定义：let, const或者var后面接一个identifier，然后是可选的等号初始化表达式：<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 或者</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span></pre></td></tr></table></figure></li>\n<li>if条件判断：if关键字后面加上由左右括号包裹起来的条件，条件可以是任意的表达式语句，接着会跟上花括号括起来的语句块。if语句块后面可以选择性地跟上另外一个else语句块或者else if语句块：<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (isBoss) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'niu bi'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'bu niu bi'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr></table></figure></li>\n<li>while循环：while关键字后面加上由左右括号包裹起来的条件，条件可以是任意的表达式语句，接着是由花括号包裹起来的循环体：<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(isAlive) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'coding'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr></table></figure>\n…</li>\n</ul>\n<p>细心的你可能发现在上面的例子中所有语句都是以分号<code>;</code>结尾的，这是因为为了简化语法解析的流程，<strong>Simple解释器强制要求每个表达式都要以分号结尾</strong>，这样我们才可以将重点放在<strong>掌握语言的实现原理</strong>而不是拘泥于JavaScript灵活的语法规则上。</p>\n<p>上面我们使用了最直白的中文表达了Simple语言的一小部分语法规则，在实际工程里面我们肯定不能这么干，我们一般会使用<strong>巴克斯范式</strong>（BNF）或者<strong>扩展巴克斯范式</strong>（EBNF）来定义编程语言的<strong>语法规则</strong>。</p>\n<h2 id=\"BNF\"><a href=\"#BNF\" class=\"headerlink\" title=\"BNF\"></a>BNF</h2><p>我们先来看一个变量定义的巴科斯范式例子：<br><img src=\"/images/simple/bnf.png\" alt=\"\"></p>\n<p>在上面的巴科斯范式中，每条规则都是由左右两部分组成的。在规则的左边是一个<code>非终结符</code>，而右边是<code>终结符</code>和<code>非终结符</code>的组合。<code>非终结符</code>表示这个符号还可以继续细分，例如<code>varModifier</code>这个非终结符可以被解析为<code>let</code>，<code>const</code>或<code>var</code>这三个字符的其中一个，而<code>终结符</code>表示这个符号不能继续细分了，它一般是一个字符串，例如<code>if</code>，<code>while</code>，<code>(</code>或者<code>)</code>等。无论是终结符还是非终结符我们都可以统一将其叫做<strong>模式（pattern）</strong>。</p>\n<p>在BNF的规则中，除了<strong>模式</strong>符号，还有下面这些表示这些<strong>模式出现次数</strong>的符号，下面是一些我们在Simple语言实现中用到的符号：</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[pattern]</td>\n<td>是option的意思，它表示括号里的模式出现0次或者一次，例如变量初始化的时候后面的等号会出现零次或者1次，因为初始值是可选的</td>\n</tr>\n<tr>\n<td>pattern1 | pattern2</td>\n<td>是or的意思，它表示模式1或者模式2被匹配，例如变量定义的时候可以使用<code>let</code>，<code>const</code>或者<code>var</code></td>\n</tr>\n<tr>\n<td>{ pattern }</td>\n<td>是repeat的意思， 表示模式至少重复零次，例如if语句后面可以跟上0个或者多个else if</td>\n</tr>\n</tbody></table>\n<p>要实现Simple语言上面这些规则就够用了，如果你想了解更多关于BNF或者EBNF的内容，可以自行查阅相关的资料。</p>\n<h2 id=\"如何实现语法解析\"><a href=\"#如何实现语法解析\" class=\"headerlink\" title=\"如何实现语法解析\"></a>如何实现语法解析</h2><p>在我们编写完属于我们语言的BNF规则之后，可以使用<a href=\"http://dinosaur.compilertools.net/yacc/index.html\" target=\"_blank\" rel=\"noopener\">Yacc</a>或者<a href=\"https://www.antlr.org/\" target=\"_blank\" rel=\"noopener\">Antlr</a>等开源工具来将我们的BNF定义转化成词法解析和语法解析的客户端代码。在实现Simple语言的过程中，为了更好地学习语法解析的原理，我没有直接使用这些工具，而是通过编写一门灵活的用来定义语法规则的<strong>领域专用语言（DSL）</strong>来定义Simple语言的语法规则。可能很多同学不知道什么是DSL，不要着急，这就为大家解释什么是DSL。</p>\n<h3 id=\"DSL的定义\"><a href=\"#DSL的定义\" class=\"headerlink\" title=\"DSL的定义\"></a>DSL的定义</h3><p>身为程序员，我相信大家都或多或少听说过DSL这个概念，即使你没听过，你也肯定用过。在了解DSL定义之前我们先来看一下都有哪些常用的DSL：</p>\n<ul>\n<li>HTML</li>\n<li>CSS</li>\n<li>XML</li>\n<li>JSX</li>\n<li>Markdown</li>\n<li>RegExp</li>\n<li>JQuery</li>\n<li>Gulp<br>…</li>\n</ul>\n<p>我相信作为一个程序员特别是前端程序员，大家一定不会对上面的DSL感到陌生。DSL的全称是<strong>Domain-Specific Language</strong>，翻译过来就是<strong>领域特定语言</strong>，和JavaScrpt等<strong>通用编程语言</strong>（GPL - General-Purpose Language）最大的区别就是：DSL是为特定领域编写的，而GPL可以用来解决不同领域的问题。举个例子，HTML是一门DSL，因为它只能用来定义网页的结构。而JavaScript是一门GPL，因此它可以用来解决很多通用的问题，例如编写各式各样的客户端程序和服务端程序。正是由于DSL只需要关心当前领域的问题，所以它不需要<strong>图灵完备</strong>，这也意味着它可以更加接近人类的思维方式，让一些不是专门编写程序的人也可以参与到DSL的编写中（设计师也可以编写HTML代码）。</p>\n<h3 id=\"DSL的分类\"><a href=\"#DSL的分类\" class=\"headerlink\" title=\"DSL的分类\"></a>DSL的分类</h3><p>DSL被分成了两大类，一类是内部DSL，一类是外部DSL。</p>\n<h4 id=\"内部DSL\"><a href=\"#内部DSL\" class=\"headerlink\" title=\"内部DSL\"></a>内部DSL</h4><p>内部DSL是建立在某个<strong>宿主语言</strong>（通常是一门GPL，例如JavaScript）之上的特殊DSL，它具有下面这些特点：</p>\n<ul>\n<li>和宿主语言<strong>共享编译与调试</strong>等基础设施，对那些会使用宿主语言的开发者来说，使用该宿主语言编写的DSL的门槛会很低，而且内部DSL可以很容易就集成到宿主语言的应用里面去，它的使用方法就像引用一个外部依赖一样简单，宿主欢迎只需要安装就可以了。</li>\n<li>它可以视为使用宿主语言对特定任务（特定领域）的一个封装，使用者可以很容易使用这层封装编写出可读性很高的代码。例如JQuery就是一门内部DSL，它里面封装了很多对页面DOM操作的函数，由于它的功能很有局限性，所以它可以封装出更加符合人们直觉的API，而且它编写的代码的可读性会比直接使用浏览器原生的native browser APIS要高很多。</li>\n</ul>\n<p>下面是一个分别使用浏览器原生API和使用JQuery API来实现同样任务的例子：<br><img src=\"/images/simple/native.png\" alt=\"\"><br><img src=\"/images/simple/jquery.png\" alt=\"\" title=\"JQuery\"></p>\n<h4 id=\"外部DSL\"><a href=\"#外部DSL\" class=\"headerlink\" title=\"外部DSL\"></a>外部DSL</h4><p>和内部DSL不同，外部DSL没有依赖的宿主环境，它是一门独立的语言，例如HTML和CSS等。因为外部DSL是完全独立的语言，所以它具有下面这些特点：</p>\n<ul>\n<li>不能享用现有语言的编译和调试等工具，如有需要要自己实现，成本很高</li>\n<li>如果你是语言的实现者，需要自己设计和实现一门全新的语言，对自己的要求很高。如果你是语言的学习者就需要学习一门新的语言，比内部DSL具有更高的学习成本。而且如果语言的设计者自身水平不够，他们弄出来的DSL一旦被用在了项目里面，后面可能会成为阻碍项目发展的一个大坑</li>\n<li>同样也是由于外部DSL没有宿主语言环境的约束，所以它不会受任何现有语言的束缚，因此它可以针对当前需要解决的领域问题来定义更加灵活的语法规则，和内部DSL相比它有更小的来自于宿主语言的语言噪声</li>\n</ul>\n<p>下面是一个外部DSL的例子 - Mustache<br><img src=\"/images/simple/mustache.png\" alt=\"\"></p>\n<h3 id=\"Simple语言的语法解析DSL\"><a href=\"#Simple语言的语法解析DSL\" class=\"headerlink\" title=\"Simple语言的语法解析DSL\"></a>Simple语言的语法解析DSL</h3><p>前面说到了内部DSL和外部DSL的一些特点和区别，由于我们的语法解析逻辑要和之前介绍的词法解析逻辑串联起来，所以我在这里就选择了宿主环境是TypeScript的内部DSL来实现</p>\n<h4 id=\"DSL的设计\"><a href=\"#DSL的设计\" class=\"headerlink\" title=\"DSL的设计\"></a>DSL的设计</h4><p>如何从头开始设计一门内部DSL呢？我们需要从要解决的<strong>领域特定问题</strong>出发，对于Simple语言它就是：将Simple语言的BNF语法规则使用TypeScipt表达出来。在上面BNF的介绍中，我们知道BNF主要有三种规则：<strong>option</strong>，<strong>repeat</strong>和<strong>or</strong>。每个规则之间可以相互<strong>组合和嵌套</strong>，等等，互相组合和嵌套？你想到了什么JavaScript语法可以表达这种场景？没错就是函数的<strong>链式调用</strong>。</p>\n<p>对于程序员来说最清晰的解释应该是直接看代码了，所以我们可以来看一下Simple语言语法解析的代码部分。和词法解析类似，Simple的语法规则放在<code>lib/config/Parser</code>这个文件中，下面是这个文件的示例内容：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// rule函数会生成一个根据定义的语法规则解析Token串从而生成AST节点的Parser实例，这个函数会接收一个用来生成对应AST节点的AST类，所有的AST节点类定义都放在lib/ast/node这个文件夹下</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ifStatement = rule(IfStatement)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">ifStatement</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// if语句使用if字符串作为开头</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  .separator(TOKEN_TYPE.IF)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// if字符串后面会有一个左括号</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  .separator(TOKEN_TYPE.LEFT_PAREN)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 括号里面是一个执行结果为布尔值的binaryExpression</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  .ast(binaryExpression)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 右括号</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  .separator(TOKEN_TYPE.RIGHT_PAREN)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// if条件成立后的执行块</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  .ast(blockStatement)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 后面的内容是可选的</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  .option(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    rule().or(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">// else if语句</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      rule().separator(TOKEN_TYPE.ELSE).ast(ifStatement),</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">// else语句</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">      rule().separator(TOKEN_TYPE.ELSE).ast(blockStatement)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">    )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr></table></figure>\n<p>上面就是Simple的if表达式定义了，由于使用了DSL进行封装，ifStatement的语法规则非常通俗易懂，而且十分灵活。试想一下假如我们突然要改变ifStatement的语法规则：不允许<code>if</code>后面加<code>else if</code>。要满足这个改变我们只需要将<code>rule().separator(TOKEN_TYPE.ELSE).ast(ifStatement)</code>这个规则去掉就可以了。接着就让我们深入到上面代码的各个函数和变量的定义中去：</p>\n<h5 id=\"rule函数\"><a href=\"#rule函数\" class=\"headerlink\" title=\"rule函数\"></a>rule函数</h5><p>这个函数是一个用来生成对应AST节点Parser的工厂函数，它会接收一个AST节点的<code>构造函数</code>作为参数，然后返回一个对应的Parser类实例。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/ast/parser/rule</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rule = <span class=\"function\">(<span class=\"params\">NodeClass?: <span class=\"keyword\">new</span> (<span class=\"params\"></span>) =&gt; Node</span>): <span class=\"params\">Parser</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Parser(NodeClass)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<h5 id=\"Parser类\"><a href=\"#Parser类\" class=\"headerlink\" title=\"Parser类\"></a>Parser类</h5><p>Parser类是整个Simple语法解析的<strong>核心</strong>。它通过<strong>函数链式调用</strong>的方法定义当前AST节点的<strong>语法规则</strong>，在语法解析阶段根据定义的语法规则<strong>消耗词法解析阶段生成的Token串</strong>，如果语法规则匹配它会生成对应AST节点，否则Token串的光标会<strong>重置为规则开始匹配的位置（回溯）</strong>从而让父节点的Parser实例使用下一个语法规则进行匹配，当父节点没有任何一个语法规则满足条件时，会抛出<code>Syntax Error</code>。下面是Parser类的各个函数的介绍：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.separator(TOKEN)</td>\n<td>定义一个终结符语法规则，该终结符不会作为当前AST节点的子节点，例如if表达式的if字符串</td>\n</tr>\n<tr>\n<td>.token(TOKEN)</td>\n<td>定义一个终结符语法规则，该终结符会被作为当前AST节点的子节点，例如算术表达式中的运算符(+，-，*，/)</td>\n</tr>\n<tr>\n<td>.option(parser)</td>\n<td>定义一个可选的非终结符规则，非终结符规则都是一个子Parser实例，例如上面if表达式定义中的<code>else if</code>子表达式</td>\n</tr>\n<tr>\n<td>.repeat(parser)</td>\n<td>定义一个出现0次或者多次的非终结符规则，例如数组里面的元素可能是0个或者多个</td>\n</tr>\n<tr>\n<td>.or(…parser</td>\n<td>TOKEN)</td>\n</tr>\n<tr>\n<td>.expression(parser, operatorsConfig)</td>\n<td>特殊的用来表示算术运算的规则</td>\n</tr>\n<tr>\n<td>.parse(tokenBuffer)</td>\n<td>这个函数会接收词法解析阶段生成的tokenBuffer串作为输入，然后使用当前Parser实例的语法规则来消耗TokenBuffer串的内容，如果有完全匹配就会根据当前Parser节点的AST构造函数生成对应的AST节点，否则会将TokenBuffer重置为当前节点规则开始匹配的起始位置（setCursor）然后返回到父级节点</td>\n</tr>\n</tbody></table>\n<h5 id=\"AST节点类的定义\"><a href=\"#AST节点类的定义\" class=\"headerlink\" title=\"AST节点类的定义\"></a>AST节点类的定义</h5><p>Simple语言所有的AST节点定义都放在<code>lib/ast/node</code>这个文件夹底下。对于每一种类型的AST节点，这个文件夹下都会有其对应的AST节点类。例如赋值表达式节点的定义是<strong>AssignmentExpression</strong>类，if语句的定义是<strong>IfStatement</strong>类等等。这些节点类都有一个统一的基类<strong>Node</strong>，Node定义了所有节点都会有的节点<strong>类型属性</strong>（type），节点生成规则<strong>create函数</strong>，以及当前节点在代码<strong>执行阶段</strong>的计算规则<strong>evaluate函数</strong>。下面是示例代码：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/ast/node/Node</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Node &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 节点类型</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">type</span>: NODE_TYPE</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 节点的起始位置信息，方便产生语法错误时给开发者进行定位</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  loc: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    start: ILocation,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    end: ILocation</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125; = &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    start: <span class=\"literal\">null</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    end: <span class=\"literal\">null</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 节点的生成规则，当前节点会根据其子节点的内容生成</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  create(children: <span class=\"built_in\">Array</span>&lt;Node&gt;): Node &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (children.length === <span class=\"number\">1</span>) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> children[<span class=\"number\">0</span>]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 节点的运算规则，节点在运算时会传进当前的环境变量，每个节点都需要实现自己的运算规则，下一篇文章会详细展开</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">  evaluate(env?: Environment): <span class=\"built_in\">any</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Child Class must implement its evaluate method'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>现在我们来看一下IfStatement这个AST节点类的定义</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> IfStatement <span class=\"keyword\">extends</span> Node &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 该节点的类型是if statement</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">type</span>: NODE_TYPE = NODE_TYPE.IF_STATEMENT</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// if的判断条件，必须是是一个BinaryExpression节点</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">  test: BinaryExpression = <span class=\"literal\">null</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// if条件成立的条件下的执行语句，是一个BlockStatement节点</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">  consequent: BlockStatement = <span class=\"literal\">null</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// else的执行语句</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">  alternate: IfStatement|BlockStatement = <span class=\"literal\">null</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// Parser会解析出if语句的所有children节点信息来构造当前的IfStatement节点，children节点的内容和定义由lib/config/Parser文件定义</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  create(children: <span class=\"built_in\">Array</span>&lt;Node&gt;): Node &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">this</span>.test = children[<span class=\"number\">0</span>] <span class=\"keyword\">as</span> BinaryExpression</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">this</span>.consequent = children[<span class=\"number\">1</span>] <span class=\"keyword\">as</span> BlockStatement</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">this</span>.alternate = children[<span class=\"number\">2</span>] <span class=\"keyword\">as</span> IfStatement|BlockStatement</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">  evaluate(env: Environment): <span class=\"built_in\">any</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 后面文章会讲</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<h3 id=\"AST\"><a href=\"#AST\" class=\"headerlink\" title=\"AST\"></a>AST</h3><p>介绍完Parser类和AST节点类后你现在就可以看懂<code>lib/config/Parser</code>的语法规则定义了，这个文件里面包含了Simple所有语法规则的定义，其中包括根节点的定义：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 列举了所有可能的statement</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">statement</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  .or(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">    breakStatement,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    returnStatement,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    expressionStatement,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    variableStatement,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    assignmentExpression,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    whileStatement,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    ifStatement,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">    forStatement,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">    functionDeclaration,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  )</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> statementList = rule(StatementList)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">  .repeat(</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">    rule()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .ast(statement)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .throw(<span class=\"string\">'statement must end with semi colon'</span>)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">      .separator(TOKEN_TYPE.SEMI_COLON)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个程序其实就是很多statement的组合</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> program = statementList</span></pre></td></tr></table></figure>\n<p>最后就是将上一章的词法解析和语法解析串联起来，代码在<code>lib/parser</code>这个文件里面：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// tokenBuffer是词法解析的结果</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parse = (tokenBuffer: TokenBuffer): <span class=\"function\"><span class=\"params\">Node</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// parser是lib/config/Parser的根节点（program节点），rootNode对应的就是抽象语法树AST</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">const</span> rootNode = parser.parse(tokenBuffer)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (!tokenBuffer.isEmpty()) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// 如果到最后还有没有被解析完的Token就表明编写的代码有语法错误，需要报错给开发者</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">const</span> firstToken = tokenBuffer.peek()</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">SyntaxError</span>(<span class=\"string\">`unrecognized token <span class=\"subst\">$&#123;firstToken.value&#125;</span>`</span>, firstToken.range.start)</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\"></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">return</span> rootNode</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<p>我们来看一下rootNode的具体内容，假如开发者写了以下的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"literal\">true</span>;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (a) &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Simple language is very simple'</span>);  </span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'This will never happen!'</span>);</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;;</span></pre></td></tr></table></figure>\n<p>会生成下面的AST：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">2</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">3</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">4</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">5</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"column\"</span>: <span class=\"number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">6</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">7</span></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">8</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"line\"</span>: <span class=\"number\">6</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">9</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"column\"</span>: <span class=\"number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">10</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">11</span></pre></td><td class=\"code\"><pre><span class=\"line\">  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">12</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"STATEMENT_LIST\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">13</span></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">\"statements\"</span>: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">14</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">15</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">16</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">17</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">18</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"column\"</span>: <span class=\"number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">19</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">20</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">21</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">22</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"column\"</span>: <span class=\"number\">12</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">23</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">24</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">25</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"VARIABLE_STATEMENT\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">26</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"declarations\"</span>: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">27</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">28</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">29</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">30</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">31</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"column\"</span>: <span class=\"number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">32</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">33</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">34</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">35</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"column\"</span>: <span class=\"number\">12</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">36</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">37</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">38</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"VARIABLE_DECLARATOR\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">39</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"a\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">40</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"init\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">41</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">42</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">43</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">44</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"attr\">\"column\"</span>: <span class=\"number\">9</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">45</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">46</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">47</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"attr\">\"line\"</span>: <span class=\"number\">1</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">48</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"attr\">\"column\"</span>: <span class=\"number\">12</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">49</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">50</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">51</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"BOOLEAN_LITERAL\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">52</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"value\"</span>: <span class=\"literal\">true</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">53</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">54</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">55</span></pre></td><td class=\"code\"><pre><span class=\"line\">      ],</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">56</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"kind\"</span>: <span class=\"string\">\"LET\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">57</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">58</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">59</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">60</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">61</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"line\"</span>: <span class=\"number\">2</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">62</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"column\"</span>: <span class=\"number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">63</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">64</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">65</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"line\"</span>: <span class=\"number\">6</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">66</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"column\"</span>: <span class=\"number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">67</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">68</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">69</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"IF_STATEMENT\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">70</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"test\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">71</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">72</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">73</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"line\"</span>: <span class=\"number\">2</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">74</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"column\"</span>: <span class=\"number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">75</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">76</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">77</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"line\"</span>: <span class=\"number\">2</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">78</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"column\"</span>: <span class=\"number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">79</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">80</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">81</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"IDENTIFIER\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">82</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"a\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">83</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">84</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"consequent\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">85</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">86</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">87</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"line\"</span>: <span class=\"number\">2</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">88</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"column\"</span>: <span class=\"number\">8</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">89</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">90</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">91</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"line\"</span>: <span class=\"number\">4</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">92</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"column\"</span>: <span class=\"number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">93</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">94</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">95</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"BLOCK_STATEMENT\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">96</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"body\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">97</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">98</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">99</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"line\"</span>: <span class=\"number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">100</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"column\"</span>: <span class=\"number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">101</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">102</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">103</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"line\"</span>: <span class=\"number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">104</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"column\"</span>: <span class=\"number\">49</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">105</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">106</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">107</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"STATEMENT_LIST\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">108</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"statements\"</span>: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">109</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">110</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">111</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">112</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"attr\">\"line\"</span>: <span class=\"number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">113</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"attr\">\"column\"</span>: <span class=\"number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">114</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">115</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">116</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"attr\">\"line\"</span>: <span class=\"number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">117</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"attr\">\"column\"</span>: <span class=\"number\">49</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">118</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">119</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">120</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"EXPRESSION_STATEMENT\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">121</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"expression\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">122</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">123</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">124</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"line\"</span>: <span class=\"number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">125</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"column\"</span>: <span class=\"number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">126</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">127</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">128</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"line\"</span>: <span class=\"number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">129</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"column\"</span>: <span class=\"number\">49</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">130</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">131</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">132</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"CALL_EXPRESSION\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">133</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"attr\">\"callee\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">134</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">135</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">136</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"attr\">\"line\"</span>: <span class=\"number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">137</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"attr\">\"column\"</span>: <span class=\"number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">138</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">139</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">140</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"attr\">\"line\"</span>: <span class=\"number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">141</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"attr\">\"column\"</span>: <span class=\"number\">15</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">142</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">143</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">144</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"MEMBER_EXPRESSION\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">145</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"attr\">\"object\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">146</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">147</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">148</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"line\"</span>: <span class=\"number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">149</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"column\"</span>: <span class=\"number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">150</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">151</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">152</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"line\"</span>: <span class=\"number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">153</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"column\"</span>: <span class=\"number\">11</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">154</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">155</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">156</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"IDENTIFIER\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">157</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"console\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">158</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">159</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"attr\">\"property\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">160</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">161</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">162</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"line\"</span>: <span class=\"number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">163</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"column\"</span>: <span class=\"number\">13</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">164</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">165</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">166</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"line\"</span>: <span class=\"number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">167</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"column\"</span>: <span class=\"number\">15</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">168</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">169</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">170</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"IDENTIFIER\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">171</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"log\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">172</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">173</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">174</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"attr\">\"arguments\"</span>: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">175</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">176</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">177</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">178</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"line\"</span>: <span class=\"number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">179</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"column\"</span>: <span class=\"number\">17</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">180</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">181</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">182</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"line\"</span>: <span class=\"number\">3</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">183</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"column\"</span>: <span class=\"number\">48</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">184</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">185</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">186</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"STRING_LITERAL\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">187</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"Simple language is very simple\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">188</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">189</span></pre></td><td class=\"code\"><pre><span class=\"line\">                ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">190</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">191</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">192</span></pre></td><td class=\"code\"><pre><span class=\"line\">          ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">193</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">194</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">195</span></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"attr\">\"alternate\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">196</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">197</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">198</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"line\"</span>: <span class=\"number\">4</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">199</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"column\"</span>: <span class=\"number\">8</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">200</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">201</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">202</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"line\"</span>: <span class=\"number\">6</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">203</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"column\"</span>: <span class=\"number\">1</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">204</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">205</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">206</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"BLOCK_STATEMENT\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">207</span></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"attr\">\"body\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">208</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">209</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">210</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"line\"</span>: <span class=\"number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">211</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"column\"</span>: <span class=\"number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">212</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">213</span></pre></td><td class=\"code\"><pre><span class=\"line\">            <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">214</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"line\"</span>: <span class=\"number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">215</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"column\"</span>: <span class=\"number\">42</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">216</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">217</span></pre></td><td class=\"code\"><pre><span class=\"line\">          &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">218</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"STATEMENT_LIST\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">219</span></pre></td><td class=\"code\"><pre><span class=\"line\">          <span class=\"attr\">\"statements\"</span>: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">220</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">221</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">222</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">223</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"attr\">\"line\"</span>: <span class=\"number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">224</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"attr\">\"column\"</span>: <span class=\"number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">225</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">226</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">227</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"attr\">\"line\"</span>: <span class=\"number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">228</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"attr\">\"column\"</span>: <span class=\"number\">42</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">229</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">230</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">231</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"EXPRESSION_STATEMENT\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">232</span></pre></td><td class=\"code\"><pre><span class=\"line\">              <span class=\"attr\">\"expression\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">233</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">234</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">235</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"line\"</span>: <span class=\"number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">236</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"column\"</span>: <span class=\"number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">237</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">238</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">239</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"line\"</span>: <span class=\"number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">240</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"column\"</span>: <span class=\"number\">42</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">241</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">242</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">243</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"CALL_EXPRESSION\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">244</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"attr\">\"callee\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">245</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">246</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">247</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"attr\">\"line\"</span>: <span class=\"number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">248</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"attr\">\"column\"</span>: <span class=\"number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">249</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">250</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">251</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"attr\">\"line\"</span>: <span class=\"number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">252</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"attr\">\"column\"</span>: <span class=\"number\">15</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">253</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">254</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">255</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"MEMBER_EXPRESSION\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">256</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"attr\">\"object\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">257</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">258</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">259</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"line\"</span>: <span class=\"number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">260</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"column\"</span>: <span class=\"number\">5</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">261</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">262</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">263</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"line\"</span>: <span class=\"number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">264</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"column\"</span>: <span class=\"number\">11</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">265</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">266</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">267</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"IDENTIFIER\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">268</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"console\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">269</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">270</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  <span class=\"attr\">\"property\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">271</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">272</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">273</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"line\"</span>: <span class=\"number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">274</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"column\"</span>: <span class=\"number\">13</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">275</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">276</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">277</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"line\"</span>: <span class=\"number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">278</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"column\"</span>: <span class=\"number\">15</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">279</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">280</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">281</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"IDENTIFIER\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">282</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"log\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">283</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">284</span></pre></td><td class=\"code\"><pre><span class=\"line\">                &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">285</span></pre></td><td class=\"code\"><pre><span class=\"line\">                <span class=\"attr\">\"arguments\"</span>: [</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">286</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">287</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"loc\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">288</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"attr\">\"start\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">289</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"line\"</span>: <span class=\"number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">290</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"column\"</span>: <span class=\"number\">17</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">291</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">292</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      <span class=\"attr\">\"end\"</span>: &#123;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">293</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"line\"</span>: <span class=\"number\">5</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">294</span></pre></td><td class=\"code\"><pre><span class=\"line\">                        <span class=\"attr\">\"column\"</span>: <span class=\"number\">41</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">295</span></pre></td><td class=\"code\"><pre><span class=\"line\">                      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">296</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    &#125;,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">297</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"STRING_LITERAL\"</span>,</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">298</span></pre></td><td class=\"code\"><pre><span class=\"line\">                    <span class=\"attr\">\"value\"</span>: <span class=\"string\">\"This will never happen!\"</span></span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">299</span></pre></td><td class=\"code\"><pre><span class=\"line\">                  &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">300</span></pre></td><td class=\"code\"><pre><span class=\"line\">                ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">301</span></pre></td><td class=\"code\"><pre><span class=\"line\">              &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">302</span></pre></td><td class=\"code\"><pre><span class=\"line\">            &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">303</span></pre></td><td class=\"code\"><pre><span class=\"line\">          ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">304</span></pre></td><td class=\"code\"><pre><span class=\"line\">        &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">305</span></pre></td><td class=\"code\"><pre><span class=\"line\">      &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">306</span></pre></td><td class=\"code\"><pre><span class=\"line\">    &#125;</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">307</span></pre></td><td class=\"code\"><pre><span class=\"line\">  ]</span></pre></td></tr><tr><td class=\"gutter\"><pre><span class=\"line\">308</span></pre></td><td class=\"code\"><pre><span class=\"line\">&#125;</span></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>在本篇文章中我介绍了什么是<code>语法解析</code>，以及给大家入门了<code>领域专用语言</code>的一些基本知识，最后讲解了Simple语言是如何利用<code>内部DSL</code>来实现其语法解析机制的。</p>\n<p>在下一篇文章中我将会为大家介绍Simple语言的<code>运行时</code>是如何实现的，会包括<code>闭包</code>如何实现以及<code>this绑定</code>等内容，大家敬请期待！</p>\n<h2 id=\"个人技术动态\"><a href=\"#个人技术动态\" class=\"headerlink\" title=\"个人技术动态\"></a>个人技术动态</h2><p>欢迎关注公众号<strong>进击的大葱</strong>一起学习成长</p>\n<p><img src=\"/images/wechat_qr.jpg\" alt=\"\"></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl0gqf6f90002ucnxhmt07x0z","category_id":"cl0gqf6fe0005ucnx6ertgdqx","_id":"cl0gqf6fl000eucnx7lsndh75"},{"post_id":"cl0gqf6fl000fucnx31t4ez4m","category_id":"cl0gqf6fj000cucnxctvldmrq","_id":"cl0gqf6ft000oucnx42ywbw5q"},{"post_id":"cl0gqf6fh0009ucnx53gk9icz","category_id":"cl0gqf6fj000cucnxctvldmrq","_id":"cl0gqf6fu000rucnx0nrg2pta"},{"post_id":"cl0gqf6fi000aucnx1dg3bko4","category_id":"cl0gqf6fj000cucnxctvldmrq","_id":"cl0gqf6fv000uucnx71jj21q4"},{"post_id":"cl0gqf6fs000nucnxcgbuamor","category_id":"cl0gqf6fj000cucnxctvldmrq","_id":"cl0gqf6fw000wucnx9e0ob160"},{"post_id":"cl0gqf6ft000qucnx33chda6t","category_id":"cl0gqf6fj000cucnxctvldmrq","_id":"cl0gqf6fx000yucnxczjehj1b"},{"post_id":"cl0gqf6fw000vucnxayfvdx4e","category_id":"cl0gqf6fj000cucnxctvldmrq","_id":"cl0gqf6fz0013ucnx9qok4oog"}],"PostTag":[{"post_id":"cl0gqf6f50001ucnx3by86hyh","tag_id":"cl0gqf6fb0003ucnx4bhq7x8u","_id":"cl0gqf6fq000jucnx1j16gmot"},{"post_id":"cl0gqf6f50001ucnx3by86hyh","tag_id":"cl0gqf6fg0008ucnxe643759e","_id":"cl0gqf6fr000lucnx8j6i6pgr"},{"post_id":"cl0gqf6f50001ucnx3by86hyh","tag_id":"cl0gqf6fj000bucnxdarm10nw","_id":"cl0gqf6ft000pucnxdjohdrqo"},{"post_id":"cl0gqf6f90002ucnxhmt07x0z","tag_id":"cl0gqf6fj000bucnxdarm10nw","_id":"cl0gqf6fy0010ucnx721m95wk"},{"post_id":"cl0gqf6f90002ucnxhmt07x0z","tag_id":"cl0gqf6fs000mucnxff2n6g4g","_id":"cl0gqf6fz0012ucnxeyt673vp"},{"post_id":"cl0gqf6f90002ucnxhmt07x0z","tag_id":"cl0gqf6fu000sucnx3vjq6q10","_id":"cl0gqf6fz0015ucnxhh0f723j"},{"post_id":"cl0gqf6fc0004ucnx4zpkgxc7","tag_id":"cl0gqf6fj000bucnxdarm10nw","_id":"cl0gqf6fz0016ucnxeshu72u6"},{"post_id":"cl0gqf6fe0006ucnxhfbx5mqs","tag_id":"cl0gqf6fz0014ucnx1k3rd682","_id":"cl0gqf6g20019ucnx2mno4rz8"},{"post_id":"cl0gqf6fe0006ucnxhfbx5mqs","tag_id":"cl0gqf6fz0017ucnx6js5h6fo","_id":"cl0gqf6g2001aucnxcsch6nof"},{"post_id":"cl0gqf6fg0007ucnxd2e5524n","tag_id":"cl0gqf6g00018ucnx3r6w4rau","_id":"cl0gqf6g2001cucnxdbsq0cla"},{"post_id":"cl0gqf6fh0009ucnx53gk9icz","tag_id":"cl0gqf6fz0014ucnx1k3rd682","_id":"cl0gqf6g3001fucnxa0eb8set"},{"post_id":"cl0gqf6fh0009ucnx53gk9icz","tag_id":"cl0gqf6fz0017ucnx6js5h6fo","_id":"cl0gqf6g3001gucnxaf56fic4"},{"post_id":"cl0gqf6fi000aucnx1dg3bko4","tag_id":"cl0gqf6g3001eucnxgoh6h7dk","_id":"cl0gqf6g4001kucnx8pr8c2vt"},{"post_id":"cl0gqf6fi000aucnx1dg3bko4","tag_id":"cl0gqf6g3001hucnxgx3lbru5","_id":"cl0gqf6g4001lucnx9c1hbto9"},{"post_id":"cl0gqf6fi000aucnx1dg3bko4","tag_id":"cl0gqf6g4001iucnxe1wma8nv","_id":"cl0gqf6g5001nucnx52u4ekbt"},{"post_id":"cl0gqf6fk000ducnx73m7cncu","tag_id":"cl0gqf6g4001jucnxc2rk03yz","_id":"cl0gqf6g5001oucnx81a30ato"},{"post_id":"cl0gqf6fk000ducnx73m7cncu","tag_id":"cl0gqf6fj000bucnxdarm10nw","_id":"cl0gqf6g5001qucnx8ua3aqlc"},{"post_id":"cl0gqf6fl000fucnx31t4ez4m","tag_id":"cl0gqf6g4001mucnxalygbygf","_id":"cl0gqf6g5001rucnxfr869zdf"},{"post_id":"cl0gqf6fo000hucnx4jb3a29o","tag_id":"cl0gqf6g5001pucnxc1xchf0o","_id":"cl0gqf6g6001vucnx9emc77d4"},{"post_id":"cl0gqf6fo000hucnx4jb3a29o","tag_id":"cl0gqf6g5001sucnxhigkb0tk","_id":"cl0gqf6g6001wucnx3sd8do5m"},{"post_id":"cl0gqf6fo000hucnx4jb3a29o","tag_id":"cl0gqf6fj000bucnxdarm10nw","_id":"cl0gqf6g7001yucnx3g1n1syv"},{"post_id":"cl0gqf6fo000hucnx4jb3a29o","tag_id":"cl0gqf6g6001tucnx6kv2bl36","_id":"cl0gqf6g7001zucnxf1bven9p"},{"post_id":"cl0gqf6fq000kucnxdk13dq5m","tag_id":"cl0gqf6g5001pucnxc1xchf0o","_id":"cl0gqf6g80022ucnxfr8w2u5o"},{"post_id":"cl0gqf6fq000kucnxdk13dq5m","tag_id":"cl0gqf6g5001sucnxhigkb0tk","_id":"cl0gqf6g80023ucnxdp3366lc"},{"post_id":"cl0gqf6fq000kucnxdk13dq5m","tag_id":"cl0gqf6fj000bucnxdarm10nw","_id":"cl0gqf6g80025ucnxgwij99wl"},{"post_id":"cl0gqf6fq000kucnxdk13dq5m","tag_id":"cl0gqf6g6001tucnx6kv2bl36","_id":"cl0gqf6g80026ucnx4e9lc603"},{"post_id":"cl0gqf6fs000nucnxcgbuamor","tag_id":"cl0gqf6g70021ucnx0l44crii","_id":"cl0gqf6g90028ucnxfmk6b2kt"},{"post_id":"cl0gqf6fs000nucnxcgbuamor","tag_id":"cl0gqf6g80024ucnx9qve00xn","_id":"cl0gqf6g90029ucnx0h7cf8dg"},{"post_id":"cl0gqf6ft000qucnx33chda6t","tag_id":"cl0gqf6g70021ucnx0l44crii","_id":"cl0gqf6ga002cucnxghuvcasz"},{"post_id":"cl0gqf6ft000qucnx33chda6t","tag_id":"cl0gqf6g80024ucnx9qve00xn","_id":"cl0gqf6ga002ducnx1ltrf53p"},{"post_id":"cl0gqf6fv000tucnxd00y3ugv","tag_id":"cl0gqf6fz0014ucnx1k3rd682","_id":"cl0gqf6gb002hucnx1bishozo"},{"post_id":"cl0gqf6fv000tucnxd00y3ugv","tag_id":"cl0gqf6fj000bucnxdarm10nw","_id":"cl0gqf6gb002iucnx3suah9p8"},{"post_id":"cl0gqf6fv000tucnxd00y3ugv","tag_id":"cl0gqf6ga002eucnx70bs51w2","_id":"cl0gqf6gb002kucnx04h44rhr"},{"post_id":"cl0gqf6fv000tucnxd00y3ugv","tag_id":"cl0gqf6ga002fucnxaql2fdtf","_id":"cl0gqf6gc002lucnx3y6dd76a"},{"post_id":"cl0gqf6fw000vucnxayfvdx4e","tag_id":"cl0gqf6g70021ucnx0l44crii","_id":"cl0gqf6gc002nucnx9bq66fjh"},{"post_id":"cl0gqf6fw000vucnxayfvdx4e","tag_id":"cl0gqf6g80024ucnx9qve00xn","_id":"cl0gqf6gd002oucnx9nff4sb0"},{"post_id":"cl0gqf6fy0011ucnx9yh14y9a","tag_id":"cl0gqf6g5001pucnxc1xchf0o","_id":"cl0gqf6ge002rucnxdz2c43lv"},{"post_id":"cl0gqf6fy0011ucnx9yh14y9a","tag_id":"cl0gqf6g5001sucnxhigkb0tk","_id":"cl0gqf6ge002sucnxhbbi3lum"},{"post_id":"cl0gqf6fy0011ucnx9yh14y9a","tag_id":"cl0gqf6fj000bucnxdarm10nw","_id":"cl0gqf6ge002tucnxa0le7ynd"},{"post_id":"cl0gqf6fy0011ucnx9yh14y9a","tag_id":"cl0gqf6g6001tucnx6kv2bl36","_id":"cl0gqf6ge002uucnxhldj7i8l"}],"Tag":[{"name":"CSS-in-JS","_id":"cl0gqf6fb0003ucnx4bhq7x8u"},{"name":"CSS","_id":"cl0gqf6fg0008ucnxe643759e"},{"name":"JavaScript","_id":"cl0gqf6fj000bucnxdarm10nw"},{"name":"ECMAScript","_id":"cl0gqf6fs000mucnxff2n6g4g"},{"name":"2019","_id":"cl0gqf6fu000sucnx3vjq6q10"},{"name":"React","_id":"cl0gqf6fz0014ucnx1k3rd682"},{"name":"Hook","_id":"cl0gqf6fz0017ucnx6js5h6fo"},{"name":"Svelte","_id":"cl0gqf6g00018ucnx3r6w4rau"},{"name":"testing","_id":"cl0gqf6g3001eucnxgoh6h7dk"},{"name":"react","_id":"cl0gqf6g3001hucnxgx3lbru5"},{"name":"hook","_id":"cl0gqf6g4001iucnxe1wma8nv"},{"name":"前端开发技巧","_id":"cl0gqf6g4001jucnxc2rk03yz"},{"name":"yarn","_id":"cl0gqf6g4001mucnxalygbygf"},{"name":"TypeScript","_id":"cl0gqf6g5001pucnxc1xchf0o"},{"name":"Interpreter","_id":"cl0gqf6g5001sucnxhigkb0tk"},{"name":"编译原理","_id":"cl0gqf6g6001tucnx6kv2bl36"},{"name":"Chrome","_id":"cl0gqf6g70021ucnx0l44crii"},{"name":"浏览器","_id":"cl0gqf6g80024ucnx9qve00xn"},{"name":"Markdown","_id":"cl0gqf6ga002eucnx70bs51w2"},{"name":"GraphQL","_id":"cl0gqf6ga002fucnxaql2fdtf"}]}}