{"version":3,"sources":["testCase.js","Code.js","App.js","serviceWorker.js","index.js"],"names":["testCases","React","useState","code","setCode","Object","keys","example","setExample","result","setResult","useEffect","onChange","event","target","value","entries","map","name","mode","theme","width","style","display","alignItems","padding","marginRight","onClick","global","console","log","args","join","simple","e","message","processCode","height","flex","readOnly","App","className","Code","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"4QAAMA,EAAY,CAClBA,oBAAA,8BACAA,kBAAA,4RAiBeA,ICXA,G,YAAA,WAAO,IAAD,EACKC,IAAMC,SAAS,IADpB,mBACZC,EADY,KACNC,EADM,OAEWH,IAAMC,SAASG,OAAOC,KAAKN,GAAW,IAFjD,mBAEZO,EAFY,KAEHC,EAFG,OAGSP,IAAMC,SAAS,IAHxB,mBAGZO,EAHY,KAGJC,EAHI,KAKnBT,IAAMU,WAAU,WACdP,EAAQJ,EAAUO,IAClBG,EAAU,MACT,CAACH,IAqBJ,OACE,6BACE,4BACEK,SAAU,SAAAC,GACRL,EAAWK,EAAMC,OAAOC,SAIxBV,OAAOW,QAAQhB,GAAWiB,KAAI,mCAAEC,EAAF,iBAAkB,4BAC9CH,MAAOG,GAENA,OAIP,kBAAC,IAAD,CACEC,KAAK,aACLC,MAAM,SACNR,SAAUR,EACVW,MAAOZ,EACPkB,MAAM,SAER,yBAAKC,MAAO,CACVC,QAAS,OACTC,WAAY,SACZC,QAAS,QAET,4BACEH,MAAO,CAAEI,YAAa,OACtBC,QAAS,YAhDG,WAClB,IAAIlB,EAAS,GAEPmB,EAAS,CACbC,QAAS,CACPC,IAAK,WAAc,IAAD,uBAATC,EAAS,yBAATA,EAAS,gBAChBtB,GAAU,KAAOsB,EAAKC,KAAK,OAKjC,IACEC,IAAO9B,EAAM,CAAEyB,WACflB,EAAUD,GACV,MAAMyB,GACNxB,EAAUwB,EAAEC,UAkCNC,KAHJ,WAQA,8BACEd,MAAO,CAACe,OAAQ,OAAQC,KAAM,GAC9BC,UAAQ,EACRxB,MAAON,Q,MC7DF+B,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,wEACA,kBAACC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMzB,c","file":"static/js/main.c8a8fea4.chunk.js","sourcesContent":["const testCases = {}\ntestCases['helloworld.simple'] = `console.log('Hello World');`\ntestCases['variable.simple'] = `let n = 10;\nlet b = true;\nlet s = 'string';\nlet f = function(x, y, z) {return x + y * z;};\nlet a = [1, 2, 3, {name: 'hi'}, 'hi'];\nlet o = {\n  name: 'sean',\n  age: 27\n};\n\nconsole.log(b);\nconsole.log(s);\nconsole.log(f(1,2,3));\nconsole.log(a[1]);\nconsole.log(o.name);\n`\n\nexport default testCases\n","import React from 'react'\nimport AceEditor from 'react-ace'\nimport simple from 'simple-language'\nimport testCases from './testCase'\n\nimport \"ace-builds/src-noconflict/mode-javascript\"\nimport \"ace-builds/src-noconflict/theme-monokai\"\n\nexport default () => {\n  const [code, setCode] = React.useState('')\n  const [example, setExample] = React.useState(Object.keys(testCases)[0])\n  const [result, setResult] = React.useState('')\n\n  React.useEffect(() => {\n    setCode(testCases[example])\n    setResult('')\n  }, [example])\n\n  const processCode = () => {\n    let result = ''\n\n    const global = {\n      console: {\n        log: (...args) => {\n          result += '\\n' + args.join('')\n        }\n      }\n    }\n\n    try {\n      simple(code, { global })\n      setResult(result)\n    } catch(e) {\n      setResult(e.message)\n    }\n  }\n\n  return (\n    <div>\n      <select\n        onChange={event => {\n          setExample(event.target.value)\n        }}\n      >\n        {\n          Object.entries(testCases).map(([name, code]) => <option\n            value={name}\n          >\n            {name}\n          </option>)\n        }\n      </select>\n      <AceEditor\n        mode='javascript'\n        theme='github'\n        onChange={setCode}\n        value={code}\n        width=\"100%\"\n      />\n      <div style={{\n        display: 'flex',\n        alignItems: 'center',\n        padding: '2em'\n      }}>\n        <button\n          style={{ marginRight: '1em' }}\n          onClick={() => {\n            processCode(code)\n          }}\n        >\n          Execute\n        </button>\n        <textarea\n          style={{height: '10em', flex: 1}}\n          readOnly\n          value={result}\n        />\n      </div>\n    </div>\n  )\n}","import React from 'react';\nimport Code from './Code'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Welcome to Simple Language Online Editor</h1>\n      <Code\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}